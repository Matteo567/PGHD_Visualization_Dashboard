{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local Experimental\\\\PGHD_Visualization_Dashboard\\\\src\\\\components\\\\Legend.js\",\n  _s = $RefreshSig$();\n/*\n Legend.js - Dynamic Chart Legend Component\n \n This component provides interactive legends for chart visualizations:\n - Auto-sizes to fit chart container dimensions\n - Supports horizontal and vertical orientations\n - Dynamically positions based on chart type and container\n - Handles sizing for different chart contexts\n - Provides consistent legend formatting across all chart types\n \n Essential for interpreting chart data and color coding in health visualizations.\n */\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ChartStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Legend = ({\n  title,\n  items,\n  orientation = 'horizontal',\n  // horizontal | vertical\n  size = 'medium',\n  // small | medium | large\n  containerWidth = null,\n  // Deprecated: Auto-calculated from parent container, this prop is no longer used\n  hide = false // Hide legend in screenshot mode\n}) => {\n  _s();\n  const legendRef = useRef(null);\n  const [parentWidth, setParentWidth] = useState(null);\n  useEffect(() => {\n    const updateWidth = () => {\n      if (!legendRef.current) return;\n\n      // Simplified container finding - try multiple selector strategies in order\n      const containerSelectors = [\n      // Direct chart wrappers (most specific)\n      '.glucose-chart-wrapper, .chart-section, .bp-svg-container, .exercise-chart-content, .sleep-chart, .pain-chart-wrapper, .meal-chart-wrapper, .mood-calendar-wrapper, .pain-line-chart-container',\n      // Chart containers\n      '.glucose-chart-container, .bp-chart-container, .exercise-chart-container, .sleep-chart-content, .pain-chart-container, .meal-contents-chart-container, .mood-calendar-container',\n      // Final fallback\n      '.visualization-content'];\n      let containerWidth = 0;\n\n      // Find the first matching container\n      for (const selector of containerSelectors) {\n        const container = legendRef.current.closest(selector);\n        if (container) {\n          const computedStyle = window.getComputedStyle(container);\n          const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\n          const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\n          containerWidth = container.offsetWidth - paddingLeft - paddingRight;\n          break;\n        }\n      }\n\n      // Special case for pain chart - check for inner wrapper\n      if (!containerWidth && legendRef.current.closest('.pain-chart-container')) {\n        var _legendRef$current$cl;\n        const painWrapper = (_legendRef$current$cl = legendRef.current.closest('.pain-chart-container')) === null || _legendRef$current$cl === void 0 ? void 0 : _legendRef$current$cl.querySelector('.pain-chart-wrapper');\n        if (painWrapper) {\n          const computedStyle = window.getComputedStyle(painWrapper);\n          const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\n          const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\n          containerWidth = painWrapper.offsetWidth - paddingLeft - paddingRight;\n        }\n      }\n      if (containerWidth > 0) {\n        // Add margin and ensure minimum width\n        const adjustedWidth = Math.max(containerWidth - 32, 200);\n        setParentWidth(adjustedWidth);\n      }\n    };\n    updateWidth();\n\n    // Update on resize\n    const resizeObserver = new ResizeObserver(updateWidth);\n    if (legendRef.current) {\n      resizeObserver.observe(legendRef.current);\n    }\n\n    // Also listen for window resize as fallback\n    window.addEventListener('resize', updateWidth);\n    return () => {\n      resizeObserver.disconnect();\n      window.removeEventListener('resize', updateWidth);\n    };\n  }, []);\n  if (!items || items.length === 0 || hide) {\n    return null;\n  }\n\n  // Use parent width if available, otherwise fall back to containerWidth prop or default\n  const finalWidth = parentWidth || containerWidth;\n  const containerStyle = finalWidth ? {\n    width: finalWidth,\n    maxWidth: finalWidth\n  } : {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: legendRef,\n    className: `legend-container legend-${orientation} legend-${size}`,\n    style: containerStyle,\n    children: [title && /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"legend-title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend-items\",\n      children: items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        style: item.style,\n        title: item.description || item.label,\n        children: [item.color && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-color-indicator\",\n          style: {\n            backgroundColor: item.color\n          },\n          \"aria-label\": `Color indicator for ${item.label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this), item.icon && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-icon\",\n          \"aria-label\": `Icon for ${item.label}`,\n          children: item.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this), item.shape && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `legend-shape legend-shape-${item.shape}`,\n          style: item.shapeStyle,\n          \"aria-label\": `${item.shape} indicator for ${item.label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-label\",\n          children: item.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Legend, \"rpWups8cgYpTmICj+CkEJ27JoIk=\");\n_c = Legend;\nexport default Legend;\nvar _c;\n$RefreshReg$(_c, \"Legend\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","Legend","title","items","orientation","size","containerWidth","hide","_s","legendRef","parentWidth","setParentWidth","updateWidth","current","containerSelectors","selector","container","closest","computedStyle","window","getComputedStyle","paddingLeft","parseFloat","paddingRight","offsetWidth","_legendRef$current$cl","painWrapper","querySelector","adjustedWidth","Math","max","resizeObserver","ResizeObserver","observe","addEventListener","disconnect","removeEventListener","length","finalWidth","containerStyle","width","maxWidth","ref","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","description","label","color","backgroundColor","icon","shape","shapeStyle","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/components/Legend.js"],"sourcesContent":["/*\n Legend.js - Dynamic Chart Legend Component\n \n This component provides interactive legends for chart visualizations:\n - Auto-sizes to fit chart container dimensions\n - Supports horizontal and vertical orientations\n - Dynamically positions based on chart type and container\n - Handles sizing for different chart contexts\n - Provides consistent legend formatting across all chart types\n \n Essential for interpreting chart data and color coding in health visualizations.\n */\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ChartStyles.css';\n\nconst Legend = ({ \n  title, \n  items, \n  orientation = 'horizontal', // horizontal | vertical\n  size = 'medium', // small | medium | large\n  containerWidth = null, // Deprecated: Auto-calculated from parent container, this prop is no longer used\n  hide = false // Hide legend in screenshot mode\n}) => {\n  const legendRef = useRef(null);\n  const [parentWidth, setParentWidth] = useState(null);\n\n  useEffect(() => {\n    const updateWidth = () => {\n      if (!legendRef.current) return;\n\n      // Simplified container finding - try multiple selector strategies in order\n      const containerSelectors = [\n        // Direct chart wrappers (most specific)\n        '.glucose-chart-wrapper, .chart-section, .bp-svg-container, .exercise-chart-content, .sleep-chart, .pain-chart-wrapper, .meal-chart-wrapper, .mood-calendar-wrapper, .pain-line-chart-container',\n        // Chart containers\n        '.glucose-chart-container, .bp-chart-container, .exercise-chart-container, .sleep-chart-content, .pain-chart-container, .meal-contents-chart-container, .mood-calendar-container',\n        // Final fallback\n        '.visualization-content'\n      ];\n\n      let containerWidth = 0;\n\n      // Find the first matching container\n      for (const selector of containerSelectors) {\n        const container = legendRef.current.closest(selector);\n        if (container) {\n          const computedStyle = window.getComputedStyle(container);\n          const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\n          const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\n          containerWidth = container.offsetWidth - paddingLeft - paddingRight;\n          break;\n        }\n      }\n\n      // Special case for pain chart - check for inner wrapper\n      if (!containerWidth && legendRef.current.closest('.pain-chart-container')) {\n        const painWrapper = legendRef.current.closest('.pain-chart-container')?.querySelector('.pain-chart-wrapper');\n        if (painWrapper) {\n          const computedStyle = window.getComputedStyle(painWrapper);\n          const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\n          const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\n          containerWidth = painWrapper.offsetWidth - paddingLeft - paddingRight;\n        }\n      }\n\n      if (containerWidth > 0) {\n        // Add margin and ensure minimum width\n        const adjustedWidth = Math.max(containerWidth - 32, 200);\n        setParentWidth(adjustedWidth);\n      }\n    };\n\n    updateWidth();\n    \n    // Update on resize\n    const resizeObserver = new ResizeObserver(updateWidth);\n    if (legendRef.current) {\n      resizeObserver.observe(legendRef.current);\n    }\n\n    // Also listen for window resize as fallback\n    window.addEventListener('resize', updateWidth);\n    \n    return () => {\n      resizeObserver.disconnect();\n      window.removeEventListener('resize', updateWidth);\n    };\n  }, []);\n\n  if (!items || items.length === 0 || hide) {\n    return null;\n  }\n\n  // Use parent width if available, otherwise fall back to containerWidth prop or default\n  const finalWidth = parentWidth || containerWidth;\n  const containerStyle = finalWidth ? { width: finalWidth, maxWidth: finalWidth } : {};\n\n  return (\n    <div \n      ref={legendRef}\n      className={`legend-container legend-${orientation} legend-${size}`}\n      style={containerStyle}\n    >\n      {title && <h4 className=\"legend-title\">{title}</h4>}\n      <div className=\"legend-items\">\n        {items.map((item, index) => (\n          <div \n            key={index} \n            className=\"legend-item\" \n            style={item.style}\n            title={item.description || item.label}\n          >\n            {/* Color indicator */}\n            {item.color && (\n              <span \n                className=\"legend-color-indicator\" \n                style={{ backgroundColor: item.color }}\n                aria-label={`Color indicator for ${item.label}`}\n              />\n            )}\n            \n            {/* Icon/emoji indicator */}\n            {item.icon && (\n              <span \n                className=\"legend-icon\"\n                aria-label={`Icon for ${item.label}`}\n              >\n                {item.icon}\n              </span>\n            )}\n            \n            {/* Shape indicator for special cases */}\n            {item.shape && (\n              <span \n                className={`legend-shape legend-shape-${item.shape}`}\n                style={item.shapeStyle}\n                aria-label={`${item.shape} indicator for ${item.label}`}\n              />\n            )}\n            \n            {/* Label */}\n            <span className=\"legend-label\">{item.label}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Legend;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,MAAM,GAAGA,CAAC;EACdC,KAAK;EACLC,KAAK;EACLC,WAAW,GAAG,YAAY;EAAE;EAC5BC,IAAI,GAAG,QAAQ;EAAE;EACjBC,cAAc,GAAG,IAAI;EAAE;EACvBC,IAAI,GAAG,KAAK,CAAC;AACf,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd,MAAMe,WAAW,GAAGA,CAAA,KAAM;MACxB,IAAI,CAACH,SAAS,CAACI,OAAO,EAAE;;MAExB;MACA,MAAMC,kBAAkB,GAAG;MACzB;MACA,gMAAgM;MAChM;MACA,iLAAiL;MACjL;MACA,wBAAwB,CACzB;MAED,IAAIR,cAAc,GAAG,CAAC;;MAEtB;MACA,KAAK,MAAMS,QAAQ,IAAID,kBAAkB,EAAE;QACzC,MAAME,SAAS,GAAGP,SAAS,CAACI,OAAO,CAACI,OAAO,CAACF,QAAQ,CAAC;QACrD,IAAIC,SAAS,EAAE;UACb,MAAME,aAAa,GAAGC,MAAM,CAACC,gBAAgB,CAACJ,SAAS,CAAC;UACxD,MAAMK,WAAW,GAAGC,UAAU,CAACJ,aAAa,CAACG,WAAW,CAAC,IAAI,CAAC;UAC9D,MAAME,YAAY,GAAGD,UAAU,CAACJ,aAAa,CAACK,YAAY,CAAC,IAAI,CAAC;UAChEjB,cAAc,GAAGU,SAAS,CAACQ,WAAW,GAAGH,WAAW,GAAGE,YAAY;UACnE;QACF;MACF;;MAEA;MACA,IAAI,CAACjB,cAAc,IAAIG,SAAS,CAACI,OAAO,CAACI,OAAO,CAAC,uBAAuB,CAAC,EAAE;QAAA,IAAAQ,qBAAA;QACzE,MAAMC,WAAW,IAAAD,qBAAA,GAAGhB,SAAS,CAACI,OAAO,CAACI,OAAO,CAAC,uBAAuB,CAAC,cAAAQ,qBAAA,uBAAlDA,qBAAA,CAAoDE,aAAa,CAAC,qBAAqB,CAAC;QAC5G,IAAID,WAAW,EAAE;UACf,MAAMR,aAAa,GAAGC,MAAM,CAACC,gBAAgB,CAACM,WAAW,CAAC;UAC1D,MAAML,WAAW,GAAGC,UAAU,CAACJ,aAAa,CAACG,WAAW,CAAC,IAAI,CAAC;UAC9D,MAAME,YAAY,GAAGD,UAAU,CAACJ,aAAa,CAACK,YAAY,CAAC,IAAI,CAAC;UAChEjB,cAAc,GAAGoB,WAAW,CAACF,WAAW,GAAGH,WAAW,GAAGE,YAAY;QACvE;MACF;MAEA,IAAIjB,cAAc,GAAG,CAAC,EAAE;QACtB;QACA,MAAMsB,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACxB,cAAc,GAAG,EAAE,EAAE,GAAG,CAAC;QACxDK,cAAc,CAACiB,aAAa,CAAC;MAC/B;IACF,CAAC;IAEDhB,WAAW,CAAC,CAAC;;IAEb;IACA,MAAMmB,cAAc,GAAG,IAAIC,cAAc,CAACpB,WAAW,CAAC;IACtD,IAAIH,SAAS,CAACI,OAAO,EAAE;MACrBkB,cAAc,CAACE,OAAO,CAACxB,SAAS,CAACI,OAAO,CAAC;IAC3C;;IAEA;IACAM,MAAM,CAACe,gBAAgB,CAAC,QAAQ,EAAEtB,WAAW,CAAC;IAE9C,OAAO,MAAM;MACXmB,cAAc,CAACI,UAAU,CAAC,CAAC;MAC3BhB,MAAM,CAACiB,mBAAmB,CAAC,QAAQ,EAAExB,WAAW,CAAC;IACnD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACT,KAAK,IAAIA,KAAK,CAACkC,MAAM,KAAK,CAAC,IAAI9B,IAAI,EAAE;IACxC,OAAO,IAAI;EACb;;EAEA;EACA,MAAM+B,UAAU,GAAG5B,WAAW,IAAIJ,cAAc;EAChD,MAAMiC,cAAc,GAAGD,UAAU,GAAG;IAAEE,KAAK,EAAEF,UAAU;IAAEG,QAAQ,EAAEH;EAAW,CAAC,GAAG,CAAC,CAAC;EAEpF,oBACEtC,OAAA;IACE0C,GAAG,EAAEjC,SAAU;IACfkC,SAAS,EAAE,2BAA2BvC,WAAW,WAAWC,IAAI,EAAG;IACnEuC,KAAK,EAAEL,cAAe;IAAAM,QAAA,GAErB3C,KAAK,iBAAIF,OAAA;MAAI2C,SAAS,EAAC,cAAc;MAAAE,QAAA,EAAE3C;IAAK;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnDjD,OAAA;MAAK2C,SAAS,EAAC,cAAc;MAAAE,QAAA,EAC1B1C,KAAK,CAAC+C,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBpD,OAAA;QAEE2C,SAAS,EAAC,aAAa;QACvBC,KAAK,EAAEO,IAAI,CAACP,KAAM;QAClB1C,KAAK,EAAEiD,IAAI,CAACE,WAAW,IAAIF,IAAI,CAACG,KAAM;QAAAT,QAAA,GAGrCM,IAAI,CAACI,KAAK,iBACTvD,OAAA;UACE2C,SAAS,EAAC,wBAAwB;UAClCC,KAAK,EAAE;YAAEY,eAAe,EAAEL,IAAI,CAACI;UAAM,CAAE;UACvC,cAAY,uBAAuBJ,IAAI,CAACG,KAAK;QAAG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CACF,EAGAE,IAAI,CAACM,IAAI,iBACRzD,OAAA;UACE2C,SAAS,EAAC,aAAa;UACvB,cAAY,YAAYQ,IAAI,CAACG,KAAK,EAAG;UAAAT,QAAA,EAEpCM,IAAI,CAACM;QAAI;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CACP,EAGAE,IAAI,CAACO,KAAK,iBACT1D,OAAA;UACE2C,SAAS,EAAE,6BAA6BQ,IAAI,CAACO,KAAK,EAAG;UACrDd,KAAK,EAAEO,IAAI,CAACQ,UAAW;UACvB,cAAY,GAAGR,IAAI,CAACO,KAAK,kBAAkBP,IAAI,CAACG,KAAK;QAAG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzD,CACF,eAGDjD,OAAA;UAAM2C,SAAS,EAAC,cAAc;UAAAE,QAAA,EAAEM,IAAI,CAACG;QAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GAlC7CG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAmCP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzC,EAAA,CApIIP,MAAM;AAAA2D,EAAA,GAAN3D,MAAM;AAsIZ,eAAeA,MAAM;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}