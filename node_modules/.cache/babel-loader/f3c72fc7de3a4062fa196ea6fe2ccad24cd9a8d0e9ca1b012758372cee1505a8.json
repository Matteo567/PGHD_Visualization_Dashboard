{"ast":null,"code":"import Papa from 'papaparse';\n\n// Simplified CSV configuration\nconst CSV_CONFIG = {\n  header: true,\n  skipEmptyLines: true,\n  transformHeader: header => header.trim(),\n  transform: value => value === null || value === void 0 ? void 0 : value.trim()\n};\n\n// Simplified function to fetch a specific patient's CSV file.\nconst fetchPatientCsvData = async patientId => {\n  try {\n    // Fetch individual patient CSV from the public folder\n    const response = await fetch(`/synthetic_patients/${patientId}.csv?v=${new Date().getTime()}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV for ${patientId}: ${response.statusText}`);\n    }\n    const csvText = await response.text();\n    const parsed = Papa.parse(csvText, CSV_CONFIG);\n    if (parsed.errors.length > 0) {\n      console.warn(`CSV parsing warnings for ${patientId}:`, parsed.errors);\n    }\n    return parsed.data;\n  } catch (error) {\n    console.error(`Error fetching or parsing CSV for ${patientId}:`, error);\n    throw error;\n  }\n};\nclass DataService {\n  /**\n   * Fetches and processes data for a single patient.\n   * This simplified version removes caching and fetches individual patient files.\n   */\n  static async getPatientData(patientId) {\n    try {\n      const patientRows = await fetchPatientCsvData(patientId);\n      if (patientRows.length === 0) {\n        throw new Error(`No data found for patient ${patientId}`);\n      }\n\n      // Process and structure the data\n      const processedData = this.processPatientData(patientRows, patientId);\n      return processedData;\n    } catch (error) {\n      console.error('Error fetching patient data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Processes the raw CSV rows for a patient.\n   * This simplified version assumes the new multi-column data format is always present.\n   */\n  static processPatientData(rows, patientId) {\n    const firstRow = rows[0];\n    const patientInfo = {\n      patientId,\n      patientNumber: patientId,\n      age: firstRow['Age'] || 'Not specified',\n      gender: firstRow['Gender'] || 'Not specified',\n      dataAvailable: 'May 2025'\n    };\n\n    // Process medications - check for both column names\n    const detailedMedications = [];\n    const conditionsSet = new Set();\n    const medicationsRaw = [...new Set(rows.map(row => row['Medications'] || row['Current_Medications']).filter(Boolean))];\n    if (medicationsRaw.length > 0) {\n      medicationsRaw.forEach(medString => {\n        // Handle different medication formats\n        if (medString.includes(';')) {\n          // Format: \"Med1 (schedule, category, dosage); Med2 (schedule, category, dosage)\"\n          medString.split('; ').forEach(med => {\n            const match = med.match(/(.*) \\((.*)\\)/);\n            if (match) {\n              const [, name, detailsStr] = match;\n              const details = detailsStr.split(',').map(d => d.trim());\n              detailedMedications.push({\n                name,\n                schedule: details[0] || '',\n                category: details[1] || '',\n                dosage: details.slice(2).join(', ') || ''\n              });\n            }\n          });\n        } else {\n          // Simple format: just medication names\n          detailedMedications.push({\n            name: medString,\n            schedule: '',\n            category: '',\n            dosage: ''\n          });\n        }\n      });\n    }\n\n    // Process conditions - check for both column names\n    const conditionsRaw = [...new Set(rows.map(row => row['Chronic_Conditions'] || row['Conditions']).filter(Boolean))];\n    conditionsRaw.forEach(conditionString => {\n      conditionString.split(',').forEach(c => conditionsSet.add(c.trim()));\n    });\n\n    // Process all data types\n    const glucoseData = this.processGlucoseData(rows);\n    const bloodPressureData = this.processBloodPressureData(rows);\n    const exerciseData = this.processExerciseData(rows);\n    const moodData = this.processMoodData(rows);\n    const painData = this.processPainData(rows);\n    const sleepData = this.processSleepData(rows);\n    const mealData = this.processMealData(rows);\n    return {\n      patientInfo: {\n        ...patientInfo,\n        detailedMedications,\n        conditions: Array.from(conditionsSet)\n      },\n      glucoseData,\n      bloodPressureData,\n      exerciseData,\n      moodData,\n      painData,\n      mealData,\n      sleepData,\n      rawData: rows\n    };\n  }\n  static processGlucoseData(rows) {\n    return rows.flatMap(row => {\n      const baseDate = new Date(row['Date']);\n      const readings = [];\n\n      // Check if multi-column format exists\n      const hasMultiColumn = row['Glucose_1'] !== undefined;\n      if (hasMultiColumn) {\n        // Multi-column format\n        for (let i = 1; i <= 4; i++) {\n          const value = parseFloat(row[`Glucose_${i}`]);\n          const timeStr = row[`Glucose_Time_${i}`];\n          if (value > 0 && timeStr) {\n            const [hours, minutes] = timeStr.split(':').map(Number);\n            const date = new Date(baseDate);\n            date.setHours(hours, minutes);\n            readings.push({\n              date,\n              value,\n              range: row[`Glucose_Range_${i}`],\n              measurementType: row[`Glucose_Measurement_Type_${i}`]\n            });\n          }\n        }\n      } else {\n        // Single-column format fallback\n        const value = parseFloat(row['Glucose_Level']);\n        if (value > 0) {\n          // Generate a random time for the reading (since no timestamp available)\n          const randomHour = Math.floor(Math.random() * 24);\n          const randomMinute = Math.floor(Math.random() * 60);\n          const date = new Date(baseDate);\n          date.setHours(randomHour, randomMinute);\n\n          // Determine range based on glucose value\n          let range = 'in range';\n          if (value < 70) range = 'below range';else if (value > 180) range = 'above range';\n          readings.push({\n            date,\n            value,\n            range,\n            measurementType: 'Random'\n          });\n        }\n      }\n      return readings;\n    });\n  }\n  static processBloodPressureData(rows) {\n    return rows.flatMap(row => {\n      const baseDate = new Date(row['Date']);\n      const readings = [];\n\n      // Check if multi-column format exists\n      const hasMultiColumn = row['Systolic_1'] !== undefined;\n      if (hasMultiColumn) {\n        // Multi-column format\n        for (let i = 1; i <= 4; i++) {\n          const systolic = parseInt(row[`Systolic_${i}`]);\n          const diastolic = parseInt(row[`Diastolic_${i}`]);\n          const timeStr = row[`BP_Time_${i}`];\n          if (systolic > 0 && diastolic > 0 && timeStr) {\n            const [hours, minutes] = timeStr.split(':').map(Number);\n            const date = new Date(baseDate);\n            date.setHours(hours, minutes);\n            readings.push({\n              date,\n              systolic,\n              diastolic,\n              systolicType: row[`Systolic_Type_${i}`],\n              diastolicType: row[`Diastolic_Type_${i}`]\n            });\n          }\n        }\n      } else {\n        // Single-column format fallback\n        const systolic = parseInt(row['Systolic_BP']);\n        const diastolic = parseInt(row['Diastolic_BP']);\n        if (systolic > 0 && diastolic > 0) {\n          // Generate a random time for the reading\n          const randomHour = Math.floor(Math.random() * 24);\n          const randomMinute = Math.floor(Math.random() * 60);\n          const date = new Date(baseDate);\n          date.setHours(randomHour, randomMinute);\n\n          // Determine BP categories based on values\n          let systolicType = 'normal';\n          let diastolicType = 'normal';\n          if (systolic >= 180 || diastolic >= 120) {\n            systolicType = 'hypertensive crisis';\n            diastolicType = 'hypertensive crisis';\n          } else if (systolic >= 140 || diastolic >= 90) {\n            systolicType = 'high';\n            diastolicType = 'high';\n          } else if (systolic >= 130 || diastolic >= 80) {\n            systolicType = 'elevated';\n            diastolicType = 'elevated';\n          }\n          readings.push({\n            date,\n            systolic,\n            diastolic,\n            systolicType,\n            diastolicType\n          });\n        }\n      }\n      return readings;\n    });\n  }\n  static processExerciseData(rows) {\n    const exerciseByDate = {};\n    rows.forEach(row => {\n      const date = new Date(row['Date']);\n      const dateKey = date.toDateString();\n      if (!exerciseByDate[dateKey]) {\n        exerciseByDate[dateKey] = {\n          date,\n          walking: 0,\n          aerobic: 0,\n          strength: 0,\n          balance: 0,\n          other: 0,\n          totalMinutes: 0\n        };\n      }\n\n      // Check if multi-column format exists\n      const hasMultiColumn = row['Exercise_Type_1'] !== undefined;\n      if (hasMultiColumn) {\n        // Multi-column format\n        for (let i = 1; i <= 3; i++) {\n          var _row;\n          const type = (_row = row[`Exercise_Type_${i}`]) === null || _row === void 0 ? void 0 : _row.toLowerCase();\n          const minutes = parseFloat(row[`Exercise_Minutes_${i}`]);\n          if (type && minutes > 0) {\n            if (type.includes('walking')) exerciseByDate[dateKey].walking += minutes;else if (type.includes('aerobic')) exerciseByDate[dateKey].aerobic += minutes;else if (type.includes('strength')) exerciseByDate[dateKey].strength += minutes;else if (type.includes('balance')) exerciseByDate[dateKey].balance += minutes;else exerciseByDate[dateKey].other += minutes;\n            exerciseByDate[dateKey].totalMinutes += minutes;\n          }\n        }\n      } else {\n        var _row$Exercise_Type;\n        // Single-column format fallback\n        const type = (_row$Exercise_Type = row['Exercise_Type']) === null || _row$Exercise_Type === void 0 ? void 0 : _row$Exercise_Type.toLowerCase();\n        const minutes = parseFloat(row['Exercise_Minutes']);\n        if (type && minutes > 0) {\n          if (type.includes('walking')) exerciseByDate[dateKey].walking += minutes;else if (type.includes('aerobic')) exerciseByDate[dateKey].aerobic += minutes;else if (type.includes('strength')) exerciseByDate[dateKey].strength += minutes;else if (type.includes('balance')) exerciseByDate[dateKey].balance += minutes;else exerciseByDate[dateKey].other += minutes;\n          exerciseByDate[dateKey].totalMinutes += minutes;\n        }\n      }\n    });\n    return Object.values(exerciseByDate).filter(d => d.totalMinutes > 0);\n  }\n  static processMoodData(rows) {\n    return rows.filter(row => row['Mood']).map(row => ({\n      date: new Date(row['Date']),\n      mood: row['Mood'],\n      category: row['Mood'] || 'neutral'\n    }));\n  }\n  static processPainData(rows) {\n    return rows.filter(row => row['Pain_Location'] && row['Pain_Level']).map(row => ({\n      date: new Date(row['Date']),\n      location: row['Pain_Location'].toLowerCase(),\n      level: parseInt(row['Pain_Level'])\n    }));\n  }\n  static processSleepData(rows) {\n    return rows.filter(row => row['Sleep_Hours'] && row['Sleep_Quality']).map(row => ({\n      date: new Date(row['Date']),\n      hours: parseFloat(row['Sleep_Hours']),\n      quality: row['Sleep_Quality'],\n      qualityCode: parseInt(row['Sleep_Quality_Code'])\n    }));\n  }\n  static processMealData(rows) {\n    return rows.flatMap(row => {\n      const baseDate = new Date(row['Date']);\n      const meals = [];\n      const mealTypes = ['Breakfast', 'Lunch', 'Dinner'];\n      mealTypes.forEach(mealType => {\n        const timeStr = row[`${mealType}_Time`];\n        const contentsStr = row[`${mealType}_Contents`];\n        if (timeStr && contentsStr) {\n          const [hours, minutes] = timeStr.split(':').map(Number);\n          const date = new Date(baseDate);\n          date.setHours(hours, minutes);\n          const contents = contentsStr.split('-').map(s => s.trim());\n          meals.push({\n            date,\n            mealType,\n            contents\n          });\n        }\n      });\n      return meals;\n    });\n  }\n}\nexport default DataService;","map":{"version":3,"names":["Papa","CSV_CONFIG","header","skipEmptyLines","transformHeader","trim","transform","value","fetchPatientCsvData","patientId","response","fetch","Date","getTime","ok","Error","statusText","csvText","text","parsed","parse","errors","length","console","warn","data","error","DataService","getPatientData","patientRows","processedData","processPatientData","rows","firstRow","patientInfo","patientNumber","age","gender","dataAvailable","detailedMedications","conditionsSet","Set","medicationsRaw","map","row","filter","Boolean","forEach","medString","includes","split","med","match","name","detailsStr","details","d","push","schedule","category","dosage","slice","join","conditionsRaw","conditionString","c","add","glucoseData","processGlucoseData","bloodPressureData","processBloodPressureData","exerciseData","processExerciseData","moodData","processMoodData","painData","processPainData","sleepData","processSleepData","mealData","processMealData","conditions","Array","from","rawData","flatMap","baseDate","readings","hasMultiColumn","undefined","i","parseFloat","timeStr","hours","minutes","Number","date","setHours","range","measurementType","randomHour","Math","floor","random","randomMinute","systolic","parseInt","diastolic","systolicType","diastolicType","exerciseByDate","dateKey","toDateString","walking","aerobic","strength","balance","other","totalMinutes","_row","type","toLowerCase","_row$Exercise_Type","Object","values","mood","location","level","quality","qualityCode","meals","mealTypes","mealType","contentsStr","contents","s"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/services/dataService.js"],"sourcesContent":["import Papa from 'papaparse';\n\n// Simplified CSV configuration\nconst CSV_CONFIG = {\n  header: true,\n  skipEmptyLines: true,\n  transformHeader: (header) => header.trim(),\n  transform: (value) => value?.trim(),\n};\n\n// Simplified function to fetch a specific patient's CSV file.\nconst fetchPatientCsvData = async (patientId) => {\n  try {\n    // Fetch individual patient CSV from the public folder\n        const response = await fetch(`/synthetic_patients/${patientId}.csv?v=${new Date().getTime()}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV for ${patientId}: ${response.statusText}`);\n    }\n    const csvText = await response.text();\n    const parsed = Papa.parse(csvText, CSV_CONFIG);\n    if (parsed.errors.length > 0) {\n      console.warn(`CSV parsing warnings for ${patientId}:`, parsed.errors);\n    }\n    return parsed.data;\n  } catch (error) {\n    console.error(`Error fetching or parsing CSV for ${patientId}:`, error);\n    throw error;\n  }\n};\n\nclass DataService {\n  /**\n   * Fetches and processes data for a single patient.\n   * This simplified version removes caching and fetches individual patient files.\n   */\n  static async getPatientData(patientId) {\n    try {\n      const patientRows = await fetchPatientCsvData(patientId);\n\n      if (patientRows.length === 0) {\n        throw new Error(`No data found for patient ${patientId}`);\n      }\n\n      // Process and structure the data\n      const processedData = this.processPatientData(patientRows, patientId);\n      return processedData;\n    } catch (error) {\n      console.error('Error fetching patient data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Processes the raw CSV rows for a patient.\n   * This simplified version assumes the new multi-column data format is always present.\n   */\n  static processPatientData(rows, patientId) {\n    const firstRow = rows[0];\n\n    const patientInfo = {\n      patientId,\n      patientNumber: patientId,\n      age: firstRow['Age'] || 'Not specified',\n      gender: firstRow['Gender'] || 'Not specified',\n      dataAvailable: 'May 2025'\n    };\n\n    // Process medications - check for both column names\n    const detailedMedications = [];\n    const conditionsSet = new Set();\n    const medicationsRaw = [...new Set(rows.map(row => row['Medications'] || row['Current_Medications']).filter(Boolean))];\n\n    if (medicationsRaw.length > 0) {\n        medicationsRaw.forEach(medString => {\n            // Handle different medication formats\n            if (medString.includes(';')) {\n                // Format: \"Med1 (schedule, category, dosage); Med2 (schedule, category, dosage)\"\n                medString.split('; ').forEach(med => {\n                    const match = med.match(/(.*) \\((.*)\\)/);\n                    if (match) {\n                        const [, name, detailsStr] = match;\n                        const details = detailsStr.split(',').map(d => d.trim());\n                        detailedMedications.push({\n                            name,\n                            schedule: details[0] || '',\n                            category: details[1] || '',\n                            dosage: details.slice(2).join(', ') || ''\n                        });\n                    }\n                });\n            } else {\n                // Simple format: just medication names\n                detailedMedications.push({\n                    name: medString,\n                    schedule: '',\n                    category: '',\n                    dosage: ''\n                });\n            }\n        });\n    }\n\n    // Process conditions - check for both column names\n    const conditionsRaw = [...new Set(rows.map(row => row['Chronic_Conditions'] || row['Conditions']).filter(Boolean))];\n    conditionsRaw.forEach(conditionString => {\n        conditionString.split(',').forEach(c => conditionsSet.add(c.trim()));\n    });\n\n    // Process all data types\n    const glucoseData = this.processGlucoseData(rows);\n    const bloodPressureData = this.processBloodPressureData(rows);\n    const exerciseData = this.processExerciseData(rows);\n    const moodData = this.processMoodData(rows);\n    const painData = this.processPainData(rows);\n    const sleepData = this.processSleepData(rows);\n    const mealData = this.processMealData(rows);\n\n    return {\n      patientInfo: { \n        ...patientInfo, \n        detailedMedications, \n        conditions: Array.from(conditionsSet)\n      },\n      glucoseData,\n      bloodPressureData,\n      exerciseData,\n      moodData,\n      painData,\n      mealData,\n      sleepData,\n      rawData: rows\n    };\n  }\n\n  static processGlucoseData(rows) {\n    return rows.flatMap(row => {\n      const baseDate = new Date(row['Date']);\n      const readings = [];\n      \n      // Check if multi-column format exists\n      const hasMultiColumn = row['Glucose_1'] !== undefined;\n      \n      if (hasMultiColumn) {\n        // Multi-column format\n        for (let i = 1; i <= 4; i++) {\n          const value = parseFloat(row[`Glucose_${i}`]);\n          const timeStr = row[`Glucose_Time_${i}`];\n          if (value > 0 && timeStr) {\n            const [hours, minutes] = timeStr.split(':').map(Number);\n            const date = new Date(baseDate);\n            date.setHours(hours, minutes);\n            readings.push({\n              date,\n              value,\n              range: row[`Glucose_Range_${i}`],\n              measurementType: row[`Glucose_Measurement_Type_${i}`]\n            });\n          }\n        }\n      } else {\n        // Single-column format fallback\n        const value = parseFloat(row['Glucose_Level']);\n        if (value > 0) {\n          // Generate a random time for the reading (since no timestamp available)\n          const randomHour = Math.floor(Math.random() * 24);\n          const randomMinute = Math.floor(Math.random() * 60);\n          const date = new Date(baseDate);\n          date.setHours(randomHour, randomMinute);\n          \n          // Determine range based on glucose value\n          let range = 'in range';\n          if (value < 70) range = 'below range';\n          else if (value > 180) range = 'above range';\n          \n          readings.push({\n            date,\n            value,\n            range,\n            measurementType: 'Random'\n          });\n        }\n      }\n      \n      return readings;\n    });\n  }\n\n  static processBloodPressureData(rows) {\n    return rows.flatMap(row => {\n        const baseDate = new Date(row['Date']);\n        const readings = [];\n        \n        // Check if multi-column format exists\n        const hasMultiColumn = row['Systolic_1'] !== undefined;\n        \n        if (hasMultiColumn) {\n            // Multi-column format\n            for (let i = 1; i <= 4; i++) {\n                const systolic = parseInt(row[`Systolic_${i}`]);\n                const diastolic = parseInt(row[`Diastolic_${i}`]);\n                const timeStr = row[`BP_Time_${i}`];\n                if (systolic > 0 && diastolic > 0 && timeStr) {\n                    const [hours, minutes] = timeStr.split(':').map(Number);\n                    const date = new Date(baseDate);\n                    date.setHours(hours, minutes);\n                    readings.push({ \n                        date, \n                        systolic, \n                        diastolic, \n                        systolicType: row[`Systolic_Type_${i}`],\n                        diastolicType: row[`Diastolic_Type_${i}`]\n                    });\n                }\n            }\n        } else {\n            // Single-column format fallback\n            const systolic = parseInt(row['Systolic_BP']);\n            const diastolic = parseInt(row['Diastolic_BP']);\n            if (systolic > 0 && diastolic > 0) {\n                // Generate a random time for the reading\n                const randomHour = Math.floor(Math.random() * 24);\n                const randomMinute = Math.floor(Math.random() * 60);\n                const date = new Date(baseDate);\n                date.setHours(randomHour, randomMinute);\n                \n                // Determine BP categories based on values\n                let systolicType = 'normal';\n                let diastolicType = 'normal';\n                if (systolic >= 180 || diastolic >= 120) {\n                    systolicType = 'hypertensive crisis';\n                    diastolicType = 'hypertensive crisis';\n                } else if (systolic >= 140 || diastolic >= 90) {\n                    systolicType = 'high';\n                    diastolicType = 'high';\n                } else if (systolic >= 130 || diastolic >= 80) {\n                    systolicType = 'elevated';\n                    diastolicType = 'elevated';\n                }\n                \n                readings.push({ \n                    date, \n                    systolic, \n                    diastolic, \n                    systolicType,\n                    diastolicType\n                });\n            }\n        }\n        \n        return readings;\n    });\n  }\n\n  static processExerciseData(rows) {\n    const exerciseByDate = {};\n    rows.forEach(row => {\n        const date = new Date(row['Date']);\n        const dateKey = date.toDateString();\n        if (!exerciseByDate[dateKey]) {\n            exerciseByDate[dateKey] = { date, walking: 0, aerobic: 0, strength: 0, balance: 0, other: 0, totalMinutes: 0 };\n        }\n        \n        // Check if multi-column format exists\n        const hasMultiColumn = row['Exercise_Type_1'] !== undefined;\n        \n        if (hasMultiColumn) {\n            // Multi-column format\n            for (let i = 1; i <= 3; i++) {\n                const type = row[`Exercise_Type_${i}`]?.toLowerCase();\n                const minutes = parseFloat(row[`Exercise_Minutes_${i}`]);\n                if (type && minutes > 0) {\n                    if (type.includes('walking')) exerciseByDate[dateKey].walking += minutes;\n                    else if (type.includes('aerobic')) exerciseByDate[dateKey].aerobic += minutes;\n                    else if (type.includes('strength')) exerciseByDate[dateKey].strength += minutes;\n                    else if (type.includes('balance')) exerciseByDate[dateKey].balance += minutes;\n                    else exerciseByDate[dateKey].other += minutes;\n                    exerciseByDate[dateKey].totalMinutes += minutes;\n                }\n            }\n        } else {\n            // Single-column format fallback\n            const type = row['Exercise_Type']?.toLowerCase();\n            const minutes = parseFloat(row['Exercise_Minutes']);\n            if (type && minutes > 0) {\n                if (type.includes('walking')) exerciseByDate[dateKey].walking += minutes;\n                else if (type.includes('aerobic')) exerciseByDate[dateKey].aerobic += minutes;\n                else if (type.includes('strength')) exerciseByDate[dateKey].strength += minutes;\n                else if (type.includes('balance')) exerciseByDate[dateKey].balance += minutes;\n                else exerciseByDate[dateKey].other += minutes;\n                exerciseByDate[dateKey].totalMinutes += minutes;\n            }\n        }\n    });\n    return Object.values(exerciseByDate).filter(d => d.totalMinutes > 0);\n  }\n\n  static processMoodData(rows) {\n    return rows.filter(row => row['Mood']).map(row => ({\n        date: new Date(row['Date']),\n        mood: row['Mood'],\n        category: row['Mood'] || 'neutral'\n    }));\n  }\n\n  static processPainData(rows) {\n    return rows.filter(row => row['Pain_Location'] && row['Pain_Level']).map(row => ({\n        date: new Date(row['Date']),\n        location: row['Pain_Location'].toLowerCase(),\n        level: parseInt(row['Pain_Level'])\n    }));\n  }\n\n  static processSleepData(rows) {\n    return rows.filter(row => row['Sleep_Hours'] && row['Sleep_Quality']).map(row => ({\n        date: new Date(row['Date']),\n        hours: parseFloat(row['Sleep_Hours']),\n        quality: row['Sleep_Quality'],\n        qualityCode: parseInt(row['Sleep_Quality_Code'])\n    }));\n  }\n\n  static processMealData(rows) {\n    return rows.flatMap(row => {\n      const baseDate = new Date(row['Date']);\n      const meals = [];\n      const mealTypes = ['Breakfast', 'Lunch', 'Dinner'];\n\n      mealTypes.forEach(mealType => {\n        const timeStr = row[`${mealType}_Time`];\n        const contentsStr = row[`${mealType}_Contents`];\n\n        if (timeStr && contentsStr) {\n          const [hours, minutes] = timeStr.split(':').map(Number);\n          const date = new Date(baseDate);\n          date.setHours(hours, minutes);\n\n          const contents = contentsStr.split('-').map(s => s.trim());\n\n          meals.push({\n            date,\n            mealType,\n            contents,\n          });\n        }\n      });\n\n      return meals;\n    });\n  }\n}\n\nexport default DataService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}