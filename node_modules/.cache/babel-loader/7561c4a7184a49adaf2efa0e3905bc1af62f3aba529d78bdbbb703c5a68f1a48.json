{"ast":null,"code":"import React,{useState,useMemo}from'react';import usePatientData from'../../hooks/usePatientData';import ChartContainer from'../ChartContainer';import Legend from'../Legend';import'../ChartStyles.css';import BodySVG from'./BodySvg';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PainChart=_ref=>{let{patientId,isExpanded=false,onExpand,viewMode='patient'}=_ref;const{painData,isLoading:loading,error}=usePatientData(patientId,'pain');const[currentWeek,setCurrentWeek]=useState(new Date(2025,4,1));// Default to May 2025\nconst handlePrevWeek=()=>{setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate()-7)));};const handleNextWeek=()=>{setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate()+7)));};const getPainColor=level=>{if(level===0)return'#E8F5E8';// Very light green for no pain\nif(level<=2)return viewMode==='patient'?'var(--chart-color-good)':'#FFE4B5';// Green for mild pain\nif(level<=4)return viewMode==='patient'?'var(--chart-color-warning)':'#FFB347';// Orange for moderate pain\nif(level<=6)return'#FF8C69';// Dark orange for moderate-severe pain\nif(level<=8)return viewMode==='patient'?'var(--chart-color-danger)':'#FF6347';// Red for severe pain\nreturn'#DC143C';// Dark red for extreme pain\n};const getPainIntensity=level=>{if(level===0)return'No Pain';if(level<=2)return'Mild';if(level<=4)return'Moderate';if(level<=6)return'Moderate-Severe';if(level<=8)return'Severe';return'Extreme';};const painLegendItems=Array.from({length:11},(_,i)=>i).map(level=>({color:getPainColor(level),label:\"\".concat(level)}));// Calculate week dates\nconst startOfWeek=new Date(currentWeek);startOfWeek.setDate(startOfWeek.getDate()-startOfWeek.getDay());startOfWeek.setHours(0,0,0,0);const endOfWeek=new Date(startOfWeek);endOfWeek.setDate(endOfWeek.getDate()+6);endOfWeek.setHours(23,59,59,999);const weekPainData=painData.filter(d=>d.date>=startOfWeek&&d.date<=endOfWeek);// Process data for chart\nconst{chartData,mostCommonLocation,averagePainLevel}=useMemo(()=>{if(!weekPainData.length)return{chartData:[],mostCommonLocation:null,averagePainLevel:0};// Create a map of dates to pain levels\nconst dateMap=new Map();const locationCounts=new Map();weekPainData.forEach(item=>{const dateKey=item.date.toDateString();dateMap.set(dateKey,item.level);// Count locations\nconst location=item.location.toLowerCase();locationCounts.set(location,(locationCounts.get(location)||0)+1);});// Find most common location\nlet mostCommon=null;let maxCount=0;for(const[location,count]of locationCounts){if(count>maxCount){maxCount=count;mostCommon=location;}}// Generate chart data for all 7 days of the week\nconst data=[];for(let i=0;i<7;i++){const date=new Date(startOfWeek);date.setDate(date.getDate()+i);const dateKey=date.toDateString();const painLevel=dateMap.get(dateKey)||0;data.push({date,day:date.toLocaleDateString('en-US',{weekday:'short'}),level:painLevel,color:getPainColor(painLevel)});}const totalPain=weekPainData.reduce((sum,item)=>sum+item.level,0);const avgPain=weekPainData.length>0?totalPain/weekPainData.length:0;return{chartData:data,mostCommonLocation:mostCommon,averagePainLevel:avgPain};},[weekPainData,startOfWeek]);const formatDateRange=(start,end)=>{const startStr=start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" to \").concat(endStr);};const Body=_ref2=>{let{location,level}=_ref2;const color=getPainColor(level);return/*#__PURE__*/_jsx(\"div\",{className:\"body-container\",children:/*#__PURE__*/_jsx(BodySVG,{className:\"body-svg\",painLocation:location.toLowerCase(),painColor:color})});};if(viewMode==='patient'){return/*#__PURE__*/_jsx(ChartContainer,{title:\"Pain Report\",icon:\"\\uD83E\\uDD15\",isLoading:loading,error:error,noData:!loading&&!error&&(!painData||painData.length===0),isExpanded:isExpanded,onExpand:onExpand,onPrev:handlePrevWeek,onNext:handleNextWeek,navigationLabel:formatDateRange(startOfWeek,endOfWeek),children:/*#__PURE__*/_jsxs(\"div\",{className:\"pain-chart-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pain-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Pain Intensity Scale (0-10)\",items:painLegendItems})}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-chart-wrapper\",children:/*#__PURE__*/_jsx(\"div\",{className:\"pain-list\",children:weekPainData.length>0?weekPainData.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"pain-list-item\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pain-item-date\",children:new Date(item.date).toLocaleDateString('en-US',{weekday:'short',month:'short',day:'numeric'})}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-item-body\",children:/*#__PURE__*/_jsx(Body,{location:item.location,level:item.level})}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-item-details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-level\",children:[\"Level: \",item.level,\"/10\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-location\",children:[\"Location: \",item.location]}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-intensity\",children:getPainIntensity(item.level)})]})]},index)):/*#__PURE__*/_jsx(\"div\",{className:\"no-pain-data\",children:\"No pain data available for this week\"})})})]})});}// Physician view\nreturn/*#__PURE__*/_jsx(ChartContainer,{title:\"Pain Report 2\",icon:\"\\uD83E\\uDD15\",isLoading:loading,error:error,noData:!loading&&!error&&(!painData||painData.length===0),isExpanded:isExpanded,onExpand:onExpand,onPrev:handlePrevWeek,onNext:handleNextWeek,navigationLabel:formatDateRange(startOfWeek,endOfWeek),children:/*#__PURE__*/_jsxs(\"div\",{className:\"physician-pain-chart-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"summary-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"summary-label\",children:\"Average Pain Level:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"summary-value\",children:[averagePainLevel.toFixed(1),\"/10\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"summary-label\",children:\"Most Common Location:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"summary-value\",children:mostCommonLocation||'N/A'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"summary-label\",children:\"Days with Pain:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"summary-value\",children:[weekPainData.length,\"/7\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-chart-grid\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pain-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Pain Intensity Scale (0-10)\",items:painLegendItems})}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-chart-wrapper\",children:/*#__PURE__*/_jsx(\"div\",{className:\"pain-chart\",children:chartData.map((day,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"pain-day\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pain-day-label\",children:day.day}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-day-bar\",style:{backgroundColor:day.color,height:\"\".concat(day.level/10*100,\"%\")},children:/*#__PURE__*/_jsx(\"span\",{className:\"pain-level-text\",children:day.level})})]},index))})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-details\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Daily Pain Details\"}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-details-list\",children:weekPainData.length>0?weekPainData.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"pain-detail-item\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"detail-date\",children:new Date(item.date).toLocaleDateString('en-US',{weekday:'short',month:'short',day:'numeric'})}),/*#__PURE__*/_jsx(\"div\",{className:\"detail-body\",children:/*#__PURE__*/_jsx(Body,{location:item.location,level:item.level})}),/*#__PURE__*/_jsxs(\"div\",{className:\"detail-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"detail-level\",children:[\"Level: \",item.level,\"/10\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"detail-location\",children:[\"Location: \",item.location]}),/*#__PURE__*/_jsx(\"div\",{className:\"detail-intensity\",children:getPainIntensity(item.level)})]})]},index)):/*#__PURE__*/_jsx(\"div\",{className:\"no-pain-data\",children:\"No pain data available for this week\"})})]})]})});};export default PainChart;","map":{"version":3,"names":["React","useState","useMemo","usePatientData","ChartContainer","Legend","BodySVG","jsx","_jsx","jsxs","_jsxs","PainChart","_ref","patientId","isExpanded","onExpand","viewMode","painData","isLoading","loading","error","currentWeek","setCurrentWeek","Date","handlePrevWeek","setDate","getDate","handleNextWeek","getPainColor","level","getPainIntensity","painLegendItems","Array","from","length","_","i","map","color","label","concat","startOfWeek","getDay","setHours","endOfWeek","weekPainData","filter","d","date","chartData","mostCommonLocation","averagePainLevel","dateMap","Map","locationCounts","forEach","item","dateKey","toDateString","set","location","toLowerCase","get","mostCommon","maxCount","count","data","painLevel","push","day","toLocaleDateString","weekday","totalPain","reduce","sum","avgPain","formatDateRange","start","end","startStr","month","endStr","Body","_ref2","className","children","painLocation","painColor","title","icon","noData","onPrev","onNext","navigationLabel","items","index","toFixed","style","backgroundColor","height"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/PainChart.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport ChartContainer from '../ChartContainer';\r\nimport Legend from '../Legend';\r\nimport '../ChartStyles.css';\r\nimport BodySVG from './BodySvg';\r\n\r\nconst PainChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient' }) => {\r\n  const { painData, isLoading: loading, error } = usePatientData(patientId, 'pain');\r\n  const [currentWeek, setCurrentWeek] = useState(new Date(2025, 4, 1)); // Default to May 2025\r\n\r\n  const handlePrevWeek = () => {\r\n    setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate() - 7)));\r\n  };\r\n\r\n  const handleNextWeek = () => {\r\n    setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate() + 7)));\r\n  };\r\n\r\n  const getPainColor = (level) => {\r\n    if (level === 0) return '#E8F5E8'; // Very light green for no pain\r\n    if (level <= 2) return viewMode === 'patient' ? 'var(--chart-color-good)' : '#FFE4B5'; // Green for mild pain\r\n    if (level <= 4) return viewMode === 'patient' ? 'var(--chart-color-warning)' : '#FFB347'; // Orange for moderate pain\r\n    if (level <= 6) return '#FF8C69'; // Dark orange for moderate-severe pain\r\n    if (level <= 8) return viewMode === 'patient' ? 'var(--chart-color-danger)' : '#FF6347'; // Red for severe pain\r\n    return '#DC143C'; // Dark red for extreme pain\r\n  };\r\n\r\n  const getPainIntensity = (level) => {\r\n    if (level === 0) return 'No Pain';\r\n    if (level <= 2) return 'Mild';\r\n    if (level <= 4) return 'Moderate';\r\n    if (level <= 6) return 'Moderate-Severe';\r\n    if (level <= 8) return 'Severe';\r\n    return 'Extreme';\r\n  };\r\n\r\n  const painLegendItems = Array.from({ length: 11 }, (_, i) => i).map(level => ({\r\n    color: getPainColor(level),\r\n    label: `${level}`,\r\n  }));\r\n\r\n  // Calculate week dates\r\n  const startOfWeek = new Date(currentWeek);\r\n  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\r\n  startOfWeek.setHours(0, 0, 0, 0);\r\n\r\n  const endOfWeek = new Date(startOfWeek);\r\n  endOfWeek.setDate(endOfWeek.getDate() + 6);\r\n  endOfWeek.setHours(23, 59, 59, 999);\r\n\r\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\r\n\r\n  // Process data for chart\r\n  const { chartData, mostCommonLocation, averagePainLevel } = useMemo(() => {\r\n    if (!weekPainData.length) return { chartData: [], mostCommonLocation: null, averagePainLevel: 0 };\r\n\r\n    // Create a map of dates to pain levels\r\n    const dateMap = new Map();\r\n    const locationCounts = new Map();\r\n\r\n    weekPainData.forEach(item => {\r\n      const dateKey = item.date.toDateString();\r\n      dateMap.set(dateKey, item.level);\r\n      \r\n      // Count locations\r\n      const location = item.location.toLowerCase();\r\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\r\n    });\r\n\r\n    // Find most common location\r\n    let mostCommon = null;\r\n    let maxCount = 0;\r\n    for (const [location, count] of locationCounts) {\r\n      if (count > maxCount) {\r\n        maxCount = count;\r\n        mostCommon = location;\r\n      }\r\n    }\r\n\r\n    // Generate chart data for all 7 days of the week\r\n    const data = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(startOfWeek);\r\n      date.setDate(date.getDate() + i);\r\n      const dateKey = date.toDateString();\r\n      const painLevel = dateMap.get(dateKey) || 0;\r\n      \r\n      data.push({\r\n        date,\r\n        day: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n        level: painLevel,\r\n        color: getPainColor(painLevel)\r\n      });\r\n    }\r\n\r\n    const totalPain = weekPainData.reduce((sum, item) => sum + item.level, 0);\r\n    const avgPain = weekPainData.length > 0 ? (totalPain / weekPainData.length) : 0;\r\n\r\n    return {\r\n      chartData: data,\r\n      mostCommonLocation: mostCommon,\r\n      averagePainLevel: avgPain\r\n    };\r\n  }, [weekPainData, startOfWeek]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  const Body = ({ location, level }) => {\r\n    const color = getPainColor(level);\r\n\r\n    return (\r\n      <div className=\"body-container\">\r\n        <BodySVG className=\"body-svg\" painLocation={location.toLowerCase()} painColor={color} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (viewMode === 'patient') {\r\n    return (\r\n      <ChartContainer\r\n        title=\"Pain Report\"\r\n        icon=\"🤕\"\r\n        isLoading={loading}\r\n        error={error}\r\n        noData={!loading && !error && (!painData || painData.length === 0)}\r\n        isExpanded={isExpanded}\r\n        onExpand={onExpand}\r\n        onPrev={handlePrevWeek}\r\n        onNext={handleNextWeek}\r\n        navigationLabel={formatDateRange(startOfWeek, endOfWeek)}\r\n      >\r\n        <div className=\"pain-chart-container\">\r\n          <div className=\"pain-legend-wrapper\">\r\n            <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\r\n          </div>\r\n          <div className=\"pain-chart-wrapper\">\r\n            <div className=\"pain-list\">\r\n              {weekPainData.length > 0 ? (\r\n                weekPainData.map((item, index) => (\r\n                  <div key={index} className=\"pain-list-item\">\r\n                    <div className=\"pain-item-date\">\r\n                      {new Date(item.date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}\r\n                    </div>\r\n                    <div className=\"pain-item-body\">\r\n                      <Body location={item.location} level={item.level} />\r\n                    </div>\r\n                    <div className=\"pain-item-details\">\r\n                      <div className=\"pain-level\">Level: {item.level}/10</div>\r\n                      <div className=\"pain-location\">Location: {item.location}</div>\r\n                      <div className=\"pain-intensity\">{getPainIntensity(item.level)}</div>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className=\"no-pain-data\">No pain data available for this week</div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ChartContainer>\r\n    );\r\n  }\r\n\r\n  // Physician view\r\n  return (\r\n    <ChartContainer\r\n      title=\"Pain Report 2\"\r\n      icon=\"🤕\"\r\n      isLoading={loading}\r\n      error={error}\r\n      noData={!loading && !error && (!painData || painData.length === 0)}\r\n      isExpanded={isExpanded}\r\n      onExpand={onExpand}\r\n      onPrev={handlePrevWeek}\r\n      onNext={handleNextWeek}\r\n      navigationLabel={formatDateRange(startOfWeek, endOfWeek)}\r\n    >\r\n      <div className=\"physician-pain-chart-container\">\r\n        <div className=\"pain-summary\">\r\n          <div className=\"summary-item\">\r\n            <span className=\"summary-label\">Average Pain Level:</span>\r\n            <span className=\"summary-value\">{averagePainLevel.toFixed(1)}/10</span>\r\n          </div>\r\n          <div className=\"summary-item\">\r\n            <span className=\"summary-label\">Most Common Location:</span>\r\n            <span className=\"summary-value\">{mostCommonLocation || 'N/A'}</span>\r\n          </div>\r\n          <div className=\"summary-item\">\r\n            <span className=\"summary-label\">Days with Pain:</span>\r\n            <span className=\"summary-value\">{weekPainData.length}/7</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"pain-chart-grid\">\r\n          <div className=\"pain-legend-wrapper\">\r\n            <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\r\n          </div>\r\n          \r\n          <div className=\"pain-chart-wrapper\">\r\n            <div className=\"pain-chart\">\r\n              {chartData.map((day, index) => (\r\n                <div key={index} className=\"pain-day\">\r\n                  <div className=\"pain-day-label\">{day.day}</div>\r\n                  <div \r\n                    className=\"pain-day-bar\" \r\n                    style={{ \r\n                      backgroundColor: day.color,\r\n                      height: `${(day.level / 10) * 100}%`\r\n                    }}\r\n                  >\r\n                    <span className=\"pain-level-text\">{day.level}</span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"pain-details\">\r\n          <h4>Daily Pain Details</h4>\r\n          <div className=\"pain-details-list\">\r\n            {weekPainData.length > 0 ? (\r\n              weekPainData.map((item, index) => (\r\n                <div key={index} className=\"pain-detail-item\">\r\n                  <div className=\"detail-date\">\r\n                    {new Date(item.date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}\r\n                  </div>\r\n                  <div className=\"detail-body\">\r\n                    <Body location={item.location} level={item.level} />\r\n                  </div>\r\n                  <div className=\"detail-info\">\r\n                    <div className=\"detail-level\">Level: {item.level}/10</div>\r\n                    <div className=\"detail-location\">Location: {item.location}</div>\r\n                    <div className=\"detail-intensity\">{getPainIntensity(item.level)}</div>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div className=\"no-pain-data\">No pain data available for this week</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ChartContainer>\r\n  );\r\n};\r\n\r\nexport default PainChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}