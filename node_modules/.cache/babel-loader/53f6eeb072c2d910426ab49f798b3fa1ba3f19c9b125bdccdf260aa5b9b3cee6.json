{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\PatientDashboard.js\",\n  _s = $RefreshSig$();\n/*\n PatientDashboard.js - Patient View Dashboard Component\n \n This component renders the patient-focused dashboard view with patient information,\n chart navigation controls, expandable chart views, and integration with all health\n metric visualizations.\n \n Architecture:\n - Uses custom hooks for data management, visualization handling, and navigation\n - Implements expandable chart views\n - Provides educational information for patients\n - Handles loading and error states gracefully\n \n Custom Hooks Used:\n - usePatientData: Manages patient data fetching and caching\n - useVisualizations: Handles visualization configuration and availability\n - useVisualizationHelpers: Provides chart expansion and rendering utilities\n - useChartNavigation: Manages time-based navigation for each chart type\n \n Component Structure:\n - PatientInfoCard: Displays patient demographics and medication information\n - DashboardGrid: Renders the chart grid with navigation and expansion controls\n - Individual chart components for each health metric\n \n State Management:\n - Uses custom hooks for centralized state management\n - Handles chart expansion state through useVisualizationHelpers\n - Manages navigation state for each chart type independently\n */\n\nimport React, { useState } from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport Placeholder from './components/ui/Placeholder';\nimport './PatientDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientDashboard = ({\n  patientId,\n  screenshotMode = false\n}) => {\n  _s();\n  const {\n    data,\n    loading,\n    error\n  } = usePatientData(patientId);\n  const {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange\n  } = useVisualizations('patient', data);\n\n  // Simplified: Inline expanded state (no separate hook needed)\n  const [expandedChart, setExpandedChart] = useState(null);\n  const handleExpand = chartId => {\n    setExpandedChart(expandedChart === chartId ? null : chartId);\n  };\n\n  // Simplified: Single shared navigation for all charts\n  const sharedNavigation = useChartNavigation('glucose'); // Default to 'week' navigation\n\n  // Mood calendar uses month navigation but syncs with the shared navigation's current date\n  // This way it only changes months when the weekly navigation crosses into a new month\n  const moodNavigation = useChartNavigation('mood', sharedNavigation.currentDate);\n  const chartNavigation = {\n    glucose: sharedNavigation,\n    bloodPressure: sharedNavigation,\n    exercise: sharedNavigation,\n    sleep: sharedNavigation,\n    pain: sharedNavigation,\n    mood: moodNavigation,\n    // Mood uses month navigation, synced with shared date\n    mealContents: sharedNavigation\n  };\n\n  // Simplified: Direct rendering - no render props needed\n  const renderVisualizationWithMode = (visualizationType, boxId) => {\n    if (!patientId) {\n      return /*#__PURE__*/_jsxDEV(Placeholder, {\n        message: \"Please select a patient to view data.\",\n        type: \"select-patient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 14\n      }, this);\n    }\n    const viz = allVisualizations[visualizationType];\n    if (!viz) {\n      return /*#__PURE__*/_jsxDEV(Placeholder, {\n        message: \"Invalid visualization\",\n        type: \"error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 14\n      }, this);\n    }\n    const Component = viz.component;\n    const isExpanded = expandedChart === boxId;\n    const navigation = chartNavigation[visualizationType];\n    return /*#__PURE__*/_jsxDEV(Component, {\n      patientId: patientId,\n      isExpanded: isExpanded,\n      onExpand: () => handleExpand(boxId),\n      viewMode: \"patient\",\n      navigation: navigation,\n      screenshotMode: screenshotMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 12\n    }, this);\n  };\n  const patientInfo = data === null || data === void 0 ? void 0 : data.patientInfo;\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-screen\",\n    children: \"Loading patient data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-screen\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-dashboard\",\n    children: [!screenshotMode && /*#__PURE__*/_jsxDEV(PatientInfoCard, {\n      patientInfo: patientInfo,\n      loading: loading,\n      error: error,\n      variant: \"patient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DashboardGrid, {\n      viewMode: \"patient\",\n      selectedVisualizations: selectedVisualizations,\n      availableVisualizations: availableVisualizations,\n      allVisualizations: allVisualizations,\n      onVisualizationChange: handleVisualizationChange,\n      onExpand: handleExpand,\n      expandedItem: expandedChart,\n      renderVisualization: renderVisualizationWithMode,\n      chartNavigation: chartNavigation,\n      screenshotMode: screenshotMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientDashboard, \"XRoYjKkR+wsZnoWfyX3i8S4jfOY=\", false, function () {\n  return [usePatientData, useVisualizations, useChartNavigation, useChartNavigation];\n});\n_c = PatientDashboard;\nexport default PatientDashboard;\nvar _c;\n$RefreshReg$(_c, \"PatientDashboard\");","map":{"version":3,"names":["React","useState","usePatientData","useVisualizations","useChartNavigation","PatientInfoCard","DashboardGrid","Placeholder","jsxDEV","_jsxDEV","PatientDashboard","patientId","screenshotMode","_s","data","loading","error","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedChart","setExpandedChart","handleExpand","chartId","sharedNavigation","moodNavigation","currentDate","chartNavigation","glucose","bloodPressure","exercise","sleep","pain","mood","mealContents","renderVisualizationWithMode","visualizationType","boxId","message","type","fileName","_jsxFileName","lineNumber","columnNumber","viz","Component","component","isExpanded","navigation","onExpand","viewMode","patientInfo","className","children","variant","onVisualizationChange","expandedItem","renderVisualization","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PatientDashboard.js"],"sourcesContent":["/*\n PatientDashboard.js - Patient View Dashboard Component\n \n This component renders the patient-focused dashboard view with patient information,\n chart navigation controls, expandable chart views, and integration with all health\n metric visualizations.\n \n Architecture:\n - Uses custom hooks for data management, visualization handling, and navigation\n - Implements expandable chart views\n - Provides educational information for patients\n - Handles loading and error states gracefully\n \n Custom Hooks Used:\n - usePatientData: Manages patient data fetching and caching\n - useVisualizations: Handles visualization configuration and availability\n - useVisualizationHelpers: Provides chart expansion and rendering utilities\n - useChartNavigation: Manages time-based navigation for each chart type\n \n Component Structure:\n - PatientInfoCard: Displays patient demographics and medication information\n - DashboardGrid: Renders the chart grid with navigation and expansion controls\n - Individual chart components for each health metric\n \n State Management:\n - Uses custom hooks for centralized state management\n - Handles chart expansion state through useVisualizationHelpers\n - Manages navigation state for each chart type independently\n */\n\nimport React, { useState } from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport Placeholder from './components/ui/Placeholder';\nimport './PatientDashboard.css';\n\nconst PatientDashboard = ({ patientId, screenshotMode = false }) => {\n  const { data, loading, error } = usePatientData(patientId);\n  const { \n    allVisualizations, \n    availableVisualizations, \n    selectedVisualizations, \n    handleVisualizationChange \n  } = useVisualizations('patient', data);\n  \n  // Simplified: Inline expanded state (no separate hook needed)\n  const [expandedChart, setExpandedChart] = useState(null);\n\n  const handleExpand = (chartId) => {\n    setExpandedChart(expandedChart === chartId ? null : chartId);\n  };\n\n  // Simplified: Single shared navigation for all charts\n  const sharedNavigation = useChartNavigation('glucose'); // Default to 'week' navigation\n\n  // Mood calendar uses month navigation but syncs with the shared navigation's current date\n  // This way it only changes months when the weekly navigation crosses into a new month\n  const moodNavigation = useChartNavigation('mood', sharedNavigation.currentDate);\n\n  const chartNavigation = {\n    glucose: sharedNavigation,\n    bloodPressure: sharedNavigation,\n    exercise: sharedNavigation,\n    sleep: sharedNavigation,\n    pain: sharedNavigation,\n    mood: moodNavigation, // Mood uses month navigation, synced with shared date\n    mealContents: sharedNavigation\n  };\n\n  // Simplified: Direct rendering - no render props needed\n  const renderVisualizationWithMode = (visualizationType, boxId) => {\n    if (!patientId) {\n      return <Placeholder message=\"Please select a patient to view data.\" type=\"select-patient\" />;\n    }\n    \n    const viz = allVisualizations[visualizationType];\n    if (!viz) {\n      return <Placeholder message=\"Invalid visualization\" type=\"error\" />;\n    }\n\n    const Component = viz.component;\n    const isExpanded = expandedChart === boxId;\n    const navigation = chartNavigation[visualizationType];\n    \n    return <Component \n      patientId={patientId} \n      isExpanded={isExpanded} \n      onExpand={() => handleExpand(boxId)}\n      viewMode=\"patient\"\n      navigation={navigation}\n      screenshotMode={screenshotMode}\n    />;\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  if (loading) return <div className=\"loading-screen\">Loading patient data...</div>;\n  if (error) return <div className=\"error-screen\">Error: {error}</div>;\n\n  return (\n    <div className=\"patient-dashboard\">\n      {!screenshotMode && (\n        <PatientInfoCard \n          patientInfo={patientInfo}\n          loading={loading}\n          error={error}\n          variant=\"patient\"\n        />\n      )}\n\n      <DashboardGrid\n        viewMode=\"patient\"\n        selectedVisualizations={selectedVisualizations}\n        availableVisualizations={availableVisualizations}\n        allVisualizations={allVisualizations}\n        onVisualizationChange={handleVisualizationChange}\n        onExpand={handleExpand}\n        expandedItem={expandedChart}\n        renderVisualization={renderVisualizationWithMode}\n        chartNavigation={chartNavigation}\n        screenshotMode={screenshotMode}\n      />\n    </div>\n  );\n};\n\nexport default PatientDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}