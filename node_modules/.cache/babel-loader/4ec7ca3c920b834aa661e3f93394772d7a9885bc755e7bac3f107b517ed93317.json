{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\PhysicianDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PatientSelector from './PatientSelector';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PhysicianDashboard.css';\nimport { PATIENTS } from './constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhysicianDashboard = ({\n  patientId: initialPatientId\n}) => {\n  _s();\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\n  const [summaryTexts, setSummaryTexts] = useState({});\n  const {\n    data,\n    loading,\n    error\n  } = usePatientData(selectedPatientId);\n\n  // Update selected patient if prop changes\n  React.useEffect(() => {\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\n      setSelectedPatientId(initialPatientId);\n    }\n  }, [initialPatientId, selectedPatientId]);\n  const {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange\n  } = useVisualizations('physician', data);\n  const {\n    expandedItem,\n    handleExpand,\n    renderVisualization\n  } = useVisualizationHelpers(selectedPatientId, allVisualizations, selectedVisualizations);\n\n  // Handle summary text changes\n  const handleSummaryChange = (chartId, newText) => {\n    setSummaryTexts(prev => ({\n      ...prev,\n      [chartId]: newText\n    }));\n  };\n\n  // Override renderVisualization to set correct viewMode and handle no patient case\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-placeholder\",\n        children: \"Please select a patient to view data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this);\n    }\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-placeholder\",\n      children: \"Invalid visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 22\n    }, this);\n    const Component = viz.component;\n    const isExpanded = expandedItem === windowId;\n    return /*#__PURE__*/_jsxDEV(Component, {\n      patientId: selectedPatientId,\n      viewMode: \"physician\",\n      isExpanded: isExpanded,\n      onExpand: () => handleExpand(windowId)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  };\n  const patientInfo = data === null || data === void 0 ? void 0 : data.patientInfo;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"physician-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"physician-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Physician Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PatientSelector, {\n        patients: PATIENTS,\n        value: selectedPatientId,\n        onChange: setSelectedPatientId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), selectedPatientId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(PatientInfoCard, {\n        patientInfo: patientInfo,\n        loading: loading,\n        error: error,\n        variant: \"physician\",\n        className: \"patient-info-card-physician\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DashboardGrid, {\n        viewMode: \"physician\",\n        selectedVisualizations: selectedVisualizations,\n        availableVisualizations: availableVisualizations,\n        allVisualizations: allVisualizations,\n        onVisualizationChange: handleVisualizationChange,\n        onExpand: handleExpand,\n        expandedItem: expandedItem,\n        renderVisualization: renderVisualizationWithMode,\n        disabled: Object.keys(availableVisualizations).length === 0,\n        placeholderText: \"No data available for this patient.\",\n        showSummaries: true,\n        summaryTexts: summaryTexts,\n        onSummaryChange: handleSummaryChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(PhysicianDashboard, \"UyYn5p1AtbNmrr4AroNiLz7owvs=\", false, function () {\n  return [usePatientData, useVisualizations, useVisualizationHelpers];\n});\n_c = PhysicianDashboard;\nexport default PhysicianDashboard;\nvar _c;\n$RefreshReg$(_c, \"PhysicianDashboard\");","map":{"version":3,"names":["React","useState","PatientSelector","usePatientData","useVisualizations","useVisualizationHelpers","PatientInfoCard","DashboardGrid","PATIENTS","jsxDEV","_jsxDEV","PhysicianDashboard","patientId","initialPatientId","_s","selectedPatientId","setSelectedPatientId","summaryTexts","setSummaryTexts","data","loading","error","useEffect","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedItem","handleExpand","renderVisualization","handleSummaryChange","chartId","newText","prev","renderVisualizationWithMode","visualizationType","windowId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viz","Component","component","isExpanded","viewMode","onExpand","patientInfo","patients","value","onChange","variant","onVisualizationChange","disabled","Object","keys","length","placeholderText","showSummaries","onSummaryChange","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PhysicianDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PatientSelector from './PatientSelector';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PhysicianDashboard.css';\nimport { PATIENTS } from './constants';\n\nconst PhysicianDashboard = ({ patientId: initialPatientId }) => {\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\n  const [summaryTexts, setSummaryTexts] = useState({});\n  const { data, loading, error } = usePatientData(selectedPatientId);\n  \n  // Update selected patient if prop changes\n  React.useEffect(() => {\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\n      setSelectedPatientId(initialPatientId);\n    }\n  }, [initialPatientId, selectedPatientId]);\n\n  const { \n    allVisualizations, \n    availableVisualizations, \n    selectedVisualizations, \n    handleVisualizationChange \n  } = useVisualizations('physician', data);\n\n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\n    selectedPatientId, \n    allVisualizations, \n    selectedVisualizations\n  );\n\n  // Handle summary text changes\n  const handleSummaryChange = (chartId, newText) => {\n    setSummaryTexts(prev => ({ ...prev, [chartId]: newText }));\n  };\n\n  // Override renderVisualization to set correct viewMode and handle no patient case\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return <div className=\"chart-placeholder\">Please select a patient to view data.</div>;\n    }\n    \n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <div className=\"chart-placeholder\">Invalid visualization</div>;\n\n    const Component = viz.component;\n    const isExpanded = expandedItem === windowId;\n    return <Component \n      patientId={selectedPatientId} \n      viewMode=\"physician\"\n      isExpanded={isExpanded}\n      onExpand={() => handleExpand(windowId)}\n    />;\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  return (\n    <div className=\"physician-dashboard\">\n      <div className=\"physician-header\">\n        <h1>Physician Dashboard</h1>\n        <PatientSelector\n          patients={PATIENTS}\n          value={selectedPatientId}\n          onChange={setSelectedPatientId}\n        />\n      </div>\n\n      {selectedPatientId && (\n        <div className=\"dashboard-content\">\n          <PatientInfoCard \n            patientInfo={patientInfo}\n            loading={loading}\n            error={error}\n            variant=\"physician\"\n            className=\"patient-info-card-physician\"\n          />\n\n          <DashboardGrid\n            viewMode=\"physician\"\n            selectedVisualizations={selectedVisualizations}\n            availableVisualizations={availableVisualizations}\n            allVisualizations={allVisualizations}\n            onVisualizationChange={handleVisualizationChange}\n            onExpand={handleExpand}\n            expandedItem={expandedItem}\n            renderVisualization={renderVisualizationWithMode}\n            disabled={Object.keys(availableVisualizations).length === 0}\n            placeholderText=\"No data available for this patient.\"\n            showSummaries={true}\n            summaryTexts={summaryTexts}\n            onSummaryChange={handleSummaryChange}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PhysicianDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}