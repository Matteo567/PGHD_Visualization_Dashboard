{"ast":null,"code":"/**\r\n Tooltip.js - Interactive Chart Tooltip Component\r\n \r\n This component provides contextual information on chart hover:\r\n - Displays detailed data point information\r\n - Automatically positions tooltips within viewport boundaries\r\n - Handles cursor positioning and offset calculations\r\n - Supports dynamic content rendering\r\n - Ensures tooltips remain visible and accessible\r\n \r\n Enhances chart interactivity by providing detailed data context on hover.\r\n */import React,{useState,useEffect}from'react';import'./Tooltip.css';import{jsx as _jsx}from\"react/jsx-runtime\";const Tooltip=_ref=>{let{isVisible,content,position={x:0,y:0},containerRef=null}=_ref;const[tooltipPosition,setTooltipPosition]=useState({x:0,y:0});useEffect(()=>{if(isVisible){// Use viewport coordinates directly\nlet x=position.x;let y=position.y;// Adjust position to keep tooltip within viewport\nconst tooltipWidth=180;// Approximate tooltip width\nconst tooltipHeight=70;// Approximate tooltip height\n// Position tooltip closer to the cursor - slightly above and to the right\nx=x+15;// Small offset to the right\ny=y-tooltipHeight-5;// Position above the cursor with small gap\n// Adjust horizontal position if tooltip would go outside viewport\nif(x+tooltipWidth>window.innerWidth){x=x-tooltipWidth-30;// Move to the left of the cursor\n}// Adjust vertical position if tooltip would go outside viewport\nif(y<0){y=y+tooltipHeight+20;// Move below the cursor\n}setTooltipPosition({x,y});}},[isVisible,position]);if(!isVisible)return null;return/*#__PURE__*/_jsx(\"div\",{className:\"custom-tooltip\",style:{left:\"\".concat(tooltipPosition.x,\"px\"),top:\"\".concat(tooltipPosition.y,\"px\")},children:content});};export default Tooltip;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}