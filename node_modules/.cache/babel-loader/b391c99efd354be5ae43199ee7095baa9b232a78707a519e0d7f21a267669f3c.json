{"ast":null,"code":"var _s = $RefreshSig$();\n/*\n usePatientData.js - Patient Data Management Hook\n \n This custom hook manages all patient data operations including fetching and caching\n patient data from CSV files, providing loading, error, and data states, handling\n data validation and error recovery, and offering convenient access to individual\n health metric datasets.\n \n Architecture:\n - Uses React hooks for state management (useState, useEffect, useCallback)\n - Implements data caching to optimize performance\n - Provides comprehensive error handling and recovery\n - Offers convenient data access patterns for components\n \n State Management:\n - data: The complete patient data object\n - loading: Boolean indicating if data is being fetched\n - error: Error message if data fetching failed\n - lastFetchedId: Tracks the last patient ID to prevent unnecessary re-fetching\n \n Data Structure:\n - patientInfo: Patient demographics and medical information\n - glucoseData: Blood glucose readings with timestamps and ranges\n - bloodPressureData: Blood pressure measurements with systolic/diastolic values\n - exerciseData: Physical activity tracking with duration and type\n - moodData: Daily mood assessments\n - painData: Pain reports with location and intensity\n - sleepData: Sleep duration and quality measurements\n - mealData: Nutritional intake tracking\n \n Utility Functions:\n - refetch: Forces a fresh data fetch for the current patient\n - clearData: Clears all cached data and resets state\n - hasData: Boolean indicating if data is available\n - isEmpty: Boolean indicating if no data is available and not loading\n - isError: Boolean indicating if an error occurred\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport DataService from '../services/dataService';\n\n/*\n Enhanced custom hook for loading and managing patient data\n \n - @param {string} patientId - The patient identifier\n - @returns {Object} Object containing data, loading state, error state, and utility functions\n */\nconst usePatientData = patientId => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetchedId, setLastFetchedId] = useState(null);\n  const loadData = useCallback(async id => {\n    // Don't reload if we already have data for this patient\n    if (id === lastFetchedId && data && !error) {\n      return;\n    }\n    if (!id || typeof id !== 'string') {\n      setLoading(false);\n      setData(null);\n      setError(null);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const patientData = await DataService.getPatientData(id);\n      if (patientData && patientData.patientInfo) {\n        setData(patientData);\n        setLastFetchedId(id);\n      } else {\n        throw new Error('Invalid data structure received');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      setData(null);\n      console.error('Error loading patient data:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [lastFetchedId, data, error]);\n  useEffect(() => {\n    if (patientId) {\n      loadData(patientId);\n    } else {\n      setData(null);\n      setError(null);\n      setLastFetchedId(null);\n      setLoading(false);\n    }\n  }, [patientId, loadData]);\n  const refetch = useCallback(() => {\n    if (patientId) {\n      setLastFetchedId(null); // Force reload\n      loadData(patientId);\n    }\n  }, [patientId, loadData]);\n  const clearData = useCallback(() => {\n    setData(null);\n    setError(null);\n    setLastFetchedId(null);\n    setLoading(false);\n  }, []);\n  return {\n    // Core data\n    data,\n    loading,\n    error,\n    // Patient info\n    patientInfo: (data === null || data === void 0 ? void 0 : data.patientInfo) || null,\n    // Individual data types for convenience\n    glucoseData: (data === null || data === void 0 ? void 0 : data.glucoseData) || [],\n    bloodPressureData: (data === null || data === void 0 ? void 0 : data.bloodPressureData) || [],\n    exerciseData: (data === null || data === void 0 ? void 0 : data.exerciseData) || [],\n    moodData: (data === null || data === void 0 ? void 0 : data.moodData) || [],\n    painData: (data === null || data === void 0 ? void 0 : data.painData) || [],\n    mealData: (data === null || data === void 0 ? void 0 : data.mealData) || [],\n    sleepData: (data === null || data === void 0 ? void 0 : data.sleepData) || [],\n    // Actions\n    refetch,\n    clearData,\n    // Helper flags\n    hasData: !!data,\n    isEmpty: !loading && !error && !data,\n    isError: !!error,\n    // Data availability flags\n    hasGlucoseData: ((data === null || data === void 0 ? void 0 : data.glucoseData) || []).length > 0,\n    hasBloodPressureData: ((data === null || data === void 0 ? void 0 : data.bloodPressureData) || []).length > 0,\n    hasExerciseData: ((data === null || data === void 0 ? void 0 : data.exerciseData) || []).length > 0,\n    hasMoodData: ((data === null || data === void 0 ? void 0 : data.moodData) || []).length > 0,\n    hasPainData: ((data === null || data === void 0 ? void 0 : data.painData) || []).length > 0,\n    hasSleepData: ((data === null || data === void 0 ? void 0 : data.sleepData) || []).length > 0,\n    hasMealData: ((data === null || data === void 0 ? void 0 : data.mealData) || []).length > 0\n  };\n};\n_s(usePatientData, \"rqY5lUm/1e+qaKqR5B5Jzd3zfoQ=\");\nexport default usePatientData;","map":{"version":3,"names":["useState","useEffect","useCallback","DataService","usePatientData","patientId","_s","data","setData","loading","setLoading","error","setError","lastFetchedId","setLastFetchedId","loadData","id","patientData","getPatientData","patientInfo","Error","err","errorMessage","message","console","refetch","clearData","glucoseData","bloodPressureData","exerciseData","moodData","painData","mealData","sleepData","hasData","isEmpty","isError","hasGlucoseData","length","hasBloodPressureData","hasExerciseData","hasMoodData","hasPainData","hasSleepData","hasMealData"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/usePatientData.js"],"sourcesContent":["/*\n usePatientData.js - Patient Data Management Hook\n \n This custom hook manages all patient data operations including fetching and caching\n patient data from CSV files, providing loading, error, and data states, handling\n data validation and error recovery, and offering convenient access to individual\n health metric datasets.\n \n Architecture:\n - Uses React hooks for state management (useState, useEffect, useCallback)\n - Implements data caching to optimize performance\n - Provides comprehensive error handling and recovery\n - Offers convenient data access patterns for components\n \n State Management:\n - data: The complete patient data object\n - loading: Boolean indicating if data is being fetched\n - error: Error message if data fetching failed\n - lastFetchedId: Tracks the last patient ID to prevent unnecessary re-fetching\n \n Data Structure:\n - patientInfo: Patient demographics and medical information\n - glucoseData: Blood glucose readings with timestamps and ranges\n - bloodPressureData: Blood pressure measurements with systolic/diastolic values\n - exerciseData: Physical activity tracking with duration and type\n - moodData: Daily mood assessments\n - painData: Pain reports with location and intensity\n - sleepData: Sleep duration and quality measurements\n - mealData: Nutritional intake tracking\n \n Utility Functions:\n - refetch: Forces a fresh data fetch for the current patient\n - clearData: Clears all cached data and resets state\n - hasData: Boolean indicating if data is available\n - isEmpty: Boolean indicating if no data is available and not loading\n - isError: Boolean indicating if an error occurred\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport DataService from '../services/dataService';\n\n/*\n Enhanced custom hook for loading and managing patient data\n \n - @param {string} patientId - The patient identifier\n - @returns {Object} Object containing data, loading state, error state, and utility functions\n */\nconst usePatientData = (patientId) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetchedId, setLastFetchedId] = useState(null);\n\n  const loadData = useCallback(async (id) => {\n    // Don't reload if we already have data for this patient\n    if (id === lastFetchedId && data && !error) {\n      return;\n    }\n\n    if (!id || typeof id !== 'string') {\n      setLoading(false);\n      setData(null);\n      setError(null);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const patientData = await DataService.getPatientData(id);\n      \n      if (patientData && patientData.patientInfo) {\n        setData(patientData);\n        setLastFetchedId(id);\n      } else {\n        throw new Error('Invalid data structure received');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      setData(null);\n      console.error('Error loading patient data:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [lastFetchedId, data, error]);\n\n  useEffect(() => {\n    if (patientId) {\n      loadData(patientId);\n    } else {\n      setData(null);\n      setError(null);\n      setLastFetchedId(null);\n      setLoading(false);\n    }\n  }, [patientId, loadData]);\n\n  const refetch = useCallback(() => {\n    if (patientId) {\n      setLastFetchedId(null); // Force reload\n      loadData(patientId);\n    }\n  }, [patientId, loadData]);\n\n  const clearData = useCallback(() => {\n    setData(null);\n    setError(null);\n    setLastFetchedId(null);\n    setLoading(false);\n  }, []);\n\n  return {\n    // Core data\n    data,\n    loading,\n    error,\n    \n    // Patient info\n    patientInfo: data?.patientInfo || null,\n    \n    // Individual data types for convenience\n    glucoseData: data?.glucoseData || [],\n    bloodPressureData: data?.bloodPressureData || [],\n    exerciseData: data?.exerciseData || [],\n    moodData: data?.moodData || [],\n    painData: data?.painData || [],\n    mealData: data?.mealData || [],\n    sleepData: data?.sleepData || [],\n    \n    // Actions\n    refetch,\n    clearData,\n    \n    // Helper flags\n    hasData: !!data,\n    isEmpty: !loading && !error && !data,\n    isError: !!error,\n    \n    // Data availability flags\n    hasGlucoseData: (data?.glucoseData || []).length > 0,\n    hasBloodPressureData: (data?.bloodPressureData || []).length > 0,\n    hasExerciseData: (data?.exerciseData || []).length > 0,\n    hasMoodData: (data?.moodData || []).length > 0,\n    hasPainData: (data?.painData || []).length > 0,\n    hasSleepData: (data?.sleepData || []).length > 0,\n    hasMealData: (data?.mealData || []).length > 0\n  };\n};\n\nexport default usePatientData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}