{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\Legend.js\",\n  _s = $RefreshSig$();\n/**\r\n * Legend.js - Dynamic Chart Legend Component\r\n * \r\n * This component provides interactive legends for chart visualizations:\r\n * - Auto-sizes to fit chart container dimensions\r\n * - Supports horizontal and vertical orientations\r\n * - Dynamically positions based on chart type and container\r\n * - Handles responsive sizing for different screen sizes\r\n * - Provides consistent legend formatting across all chart types\r\n * \r\n * Essential for interpreting chart data and color coding in health visualizations.\r\n */\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport './ChartStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Legend = ({\n  title,\n  items,\n  orientation = 'horizontal',\n  // horizontal | vertical\n  size = 'medium' // small | medium | large\n}) => {\n  _s();\n  const legendRef = useRef(null);\n  const [parentWidth, setParentWidth] = useState(null);\n  useEffect(() => {\n    const updateWidth = () => {\n      if (legendRef.current) {\n        // Find the most specific chart content container (not the wrapper)\n        const specificContainers = ['.glucose-chart-wrapper',\n        // Glucose chart wrapper (contains the actual chart)\n        '.chart-section',\n        // Blood pressure chart sections\n        '.bp-svg-container',\n        // Blood pressure SVG container\n        '.exercise-chart-content',\n        // Exercise chart content\n        '.sleep-chart',\n        // Sleep chart container\n        '.pain-chart-wrapper',\n        // Pain chart wrapper\n        '.meal-chart-wrapper',\n        // Meal chart wrapper\n        '.mood-calendar-wrapper',\n        // Mood calendar wrapper\n        '.pain-line-chart-container' // Pain line chart container\n        ];\n        let parentContainer = null;\n        let containerWidth = 0;\n\n        // Try to find the most specific container first\n        for (const selector of specificContainers) {\n          const container = legendRef.current.closest(selector);\n          if (container) {\n            parentContainer = container;\n            // Get the content width excluding padding\n            const computedStyle = window.getComputedStyle(container);\n            const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\n            const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\n            containerWidth = container.offsetWidth - paddingLeft - paddingRight;\n            break;\n          }\n        }\n\n        // Special handling for pain legends - prioritize pain-chart-wrapper\n        if (!parentContainer && legendRef.current.closest('.pain-legend-wrapper')) {\n          var _legendRef$current$cl;\n          const painChartWrapper = (_legendRef$current$cl = legendRef.current.closest('.pain-chart-container')) === null || _legendRef$current$cl === void 0 ? void 0 : _legendRef$current$cl.querySelector('.pain-chart-wrapper');\n          if (painChartWrapper) {\n            parentContainer = painChartWrapper;\n            const computedStyle = window.getComputedStyle(painChartWrapper);\n            const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\n            const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\n            containerWidth = painChartWrapper.offsetWidth - paddingLeft - paddingRight;\n          }\n        }\n\n        // Fallback to chart-specific containers if no specific one found\n        if (!parentContainer) {\n          const chartContainers = ['.glucose-chart-container', '.bp-chart-content', '.exercise-chart-container', '.sleep-chart-content', '.pain-chart-container', '.meal-contents-chart-container', '.mood-calendar-container'];\n          for (const selector of chartContainers) {\n            const container = legendRef.current.closest(selector);\n            if (container) {\n              parentContainer = container;\n              // For chart containers, find the inner chart content\n              const innerChart = container.querySelector('.glucose-chart-wrapper, .chart-section, .bp-svg-container, .exercise-chart-content, .sleep-chart, .pain-chart-wrapper, .meal-chart-wrapper, .mood-calendar-wrapper');\n              if (innerChart) {\n                // Use the inner chart width\n                const computedStyle = window.getComputedStyle(innerChart);\n                const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\n                const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\n                containerWidth = innerChart.offsetWidth - paddingLeft - paddingRight;\n              } else {\n                // Fallback to container width with padding subtraction\n                const computedStyle = window.getComputedStyle(container);\n                const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\n                const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\n                containerWidth = container.offsetWidth - paddingLeft - paddingRight;\n              }\n              break;\n            }\n          }\n        }\n\n        // Final fallback to visualization content\n        if (!parentContainer) {\n          const vizContent = legendRef.current.closest('.visualization-content');\n          if (vizContent) {\n            parentContainer = vizContent;\n            const computedStyle = window.getComputedStyle(vizContent);\n            const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\n            const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\n            containerWidth = vizContent.offsetWidth - paddingLeft - paddingRight;\n          }\n        }\n        if (parentContainer && containerWidth > 0) {\n          setParentWidth(containerWidth);\n        }\n      }\n    };\n    updateWidth();\n\n    // Update on resize\n    const resizeObserver = new ResizeObserver(updateWidth);\n    if (legendRef.current) {\n      resizeObserver.observe(legendRef.current);\n    }\n\n    // Also listen for window resize as fallback\n    window.addEventListener('resize', updateWidth);\n    return () => {\n      resizeObserver.disconnect();\n      window.removeEventListener('resize', updateWidth);\n    };\n  }, []);\n  if (!items || items.length === 0) {\n    return null;\n  }\n\n  // Use parent width if available, otherwise use CSS custom property\n  const finalWidth = parentWidth || 'var(--chart-max-width)';\n  const containerStyle = parentWidth ? {\n    width: finalWidth,\n    maxWidth: finalWidth\n  } : {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: legendRef,\n    className: `legend-container legend-${orientation} legend-${size}`,\n    style: containerStyle,\n    children: [title && /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"legend-title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend-items\",\n      children: items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        style: item.style,\n        title: item.description || item.label,\n        children: [item.color && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-color-indicator\",\n          style: {\n            backgroundColor: item.color\n          },\n          \"aria-label\": `Color indicator for ${item.label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }, this), item.icon && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-icon\",\n          \"aria-label\": `Icon for ${item.label}`,\n          children: item.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }, this), item.shape && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `legend-shape legend-shape-${item.shape}`,\n          style: item.shapeStyle,\n          \"aria-label\": `${item.shape} indicator for ${item.label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-label\",\n          children: item.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Legend, \"rpWups8cgYpTmICj+CkEJ27JoIk=\");\n_c = Legend;\nexport default Legend;\nvar _c;\n$RefreshReg$(_c, \"Legend\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","Legend","title","items","orientation","size","_s","legendRef","parentWidth","setParentWidth","updateWidth","current","specificContainers","parentContainer","containerWidth","selector","container","closest","computedStyle","window","getComputedStyle","paddingLeft","parseFloat","paddingRight","offsetWidth","_legendRef$current$cl","painChartWrapper","querySelector","chartContainers","innerChart","vizContent","resizeObserver","ResizeObserver","observe","addEventListener","disconnect","removeEventListener","length","finalWidth","containerStyle","width","maxWidth","ref","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","description","label","color","backgroundColor","icon","shape","shapeStyle","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/Legend.js"],"sourcesContent":["/**\r\n * Legend.js - Dynamic Chart Legend Component\r\n * \r\n * This component provides interactive legends for chart visualizations:\r\n * - Auto-sizes to fit chart container dimensions\r\n * - Supports horizontal and vertical orientations\r\n * - Dynamically positions based on chart type and container\r\n * - Handles responsive sizing for different screen sizes\r\n * - Provides consistent legend formatting across all chart types\r\n * \r\n * Essential for interpreting chart data and color coding in health visualizations.\r\n */\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport './ChartStyles.css';\r\n\r\nconst Legend = ({ \r\n  title, \r\n  items, \r\n  orientation = 'horizontal', // horizontal | vertical\r\n  size = 'medium' // small | medium | large\r\n}) => {\r\n  const legendRef = useRef(null);\r\n  const [parentWidth, setParentWidth] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const updateWidth = () => {\r\n      if (legendRef.current) {\r\n        // Find the most specific chart content container (not the wrapper)\r\n        const specificContainers = [\r\n          '.glucose-chart-wrapper', // Glucose chart wrapper (contains the actual chart)\r\n          '.chart-section', // Blood pressure chart sections\r\n          '.bp-svg-container', // Blood pressure SVG container\r\n          '.exercise-chart-content', // Exercise chart content\r\n          '.sleep-chart', // Sleep chart container\r\n          '.pain-chart-wrapper', // Pain chart wrapper\r\n          '.meal-chart-wrapper', // Meal chart wrapper\r\n          '.mood-calendar-wrapper', // Mood calendar wrapper\r\n          '.pain-line-chart-container', // Pain line chart container\r\n        ];\r\n        \r\n        let parentContainer = null;\r\n        let containerWidth = 0;\r\n        \r\n        // Try to find the most specific container first\r\n        for (const selector of specificContainers) {\r\n          const container = legendRef.current.closest(selector);\r\n          if (container) {\r\n            parentContainer = container;\r\n            // Get the content width excluding padding\r\n            const computedStyle = window.getComputedStyle(container);\r\n            const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\r\n            const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\r\n            containerWidth = container.offsetWidth - paddingLeft - paddingRight;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // Special handling for pain legends - prioritize pain-chart-wrapper\r\n        if (!parentContainer && legendRef.current.closest('.pain-legend-wrapper')) {\r\n          const painChartWrapper = legendRef.current.closest('.pain-chart-container')?.querySelector('.pain-chart-wrapper');\r\n          if (painChartWrapper) {\r\n            parentContainer = painChartWrapper;\r\n            const computedStyle = window.getComputedStyle(painChartWrapper);\r\n            const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\r\n            const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\r\n            containerWidth = painChartWrapper.offsetWidth - paddingLeft - paddingRight;\r\n          }\r\n        }\r\n        \r\n        // Fallback to chart-specific containers if no specific one found\r\n        if (!parentContainer) {\r\n          const chartContainers = [\r\n            '.glucose-chart-container',\r\n            '.bp-chart-content',\r\n            '.exercise-chart-container',\r\n            '.sleep-chart-content',\r\n            '.pain-chart-container',\r\n            '.meal-contents-chart-container',\r\n            '.mood-calendar-container'\r\n          ];\r\n          \r\n          for (const selector of chartContainers) {\r\n            const container = legendRef.current.closest(selector);\r\n            if (container) {\r\n              parentContainer = container;\r\n              // For chart containers, find the inner chart content\r\n              const innerChart = container.querySelector('.glucose-chart-wrapper, .chart-section, .bp-svg-container, .exercise-chart-content, .sleep-chart, .pain-chart-wrapper, .meal-chart-wrapper, .mood-calendar-wrapper');\r\n              \r\n              if (innerChart) {\r\n                // Use the inner chart width\r\n                const computedStyle = window.getComputedStyle(innerChart);\r\n                const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\r\n                const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\r\n                containerWidth = innerChart.offsetWidth - paddingLeft - paddingRight;\r\n              } else {\r\n                // Fallback to container width with padding subtraction\r\n                const computedStyle = window.getComputedStyle(container);\r\n                const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\r\n                const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\r\n                containerWidth = container.offsetWidth - paddingLeft - paddingRight;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Final fallback to visualization content\r\n        if (!parentContainer) {\r\n          const vizContent = legendRef.current.closest('.visualization-content');\r\n          if (vizContent) {\r\n            parentContainer = vizContent;\r\n            const computedStyle = window.getComputedStyle(vizContent);\r\n            const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\r\n            const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\r\n            containerWidth = vizContent.offsetWidth - paddingLeft - paddingRight;\r\n          }\r\n        }\r\n        \r\n        if (parentContainer && containerWidth > 0) {\r\n          setParentWidth(containerWidth);\r\n        }\r\n      }\r\n    };\r\n\r\n    updateWidth();\r\n    \r\n    // Update on resize\r\n    const resizeObserver = new ResizeObserver(updateWidth);\r\n    if (legendRef.current) {\r\n      resizeObserver.observe(legendRef.current);\r\n    }\r\n\r\n    // Also listen for window resize as fallback\r\n    window.addEventListener('resize', updateWidth);\r\n    \r\n    return () => {\r\n      resizeObserver.disconnect();\r\n      window.removeEventListener('resize', updateWidth);\r\n    };\r\n  }, []);\r\n\r\n  if (!items || items.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  // Use parent width if available, otherwise use CSS custom property\r\n  const finalWidth = parentWidth || 'var(--chart-max-width)';\r\n  const containerStyle = parentWidth ? { width: finalWidth, maxWidth: finalWidth } : {};\r\n\r\n  return (\r\n    <div \r\n      ref={legendRef}\r\n      className={`legend-container legend-${orientation} legend-${size}`}\r\n      style={containerStyle}\r\n    >\r\n      {title && <h4 className=\"legend-title\">{title}</h4>}\r\n      <div className=\"legend-items\">\r\n        {items.map((item, index) => (\r\n          <div \r\n            key={index} \r\n            className=\"legend-item\" \r\n            style={item.style}\r\n            title={item.description || item.label}\r\n          >\r\n            {/* Color indicator */}\r\n            {item.color && (\r\n              <span \r\n                className=\"legend-color-indicator\" \r\n                style={{ backgroundColor: item.color }}\r\n                aria-label={`Color indicator for ${item.label}`}\r\n              />\r\n            )}\r\n            \r\n            {/* Icon/emoji indicator */}\r\n            {item.icon && (\r\n              <span \r\n                className=\"legend-icon\"\r\n                aria-label={`Icon for ${item.label}`}\r\n              >\r\n                {item.icon}\r\n              </span>\r\n            )}\r\n            \r\n            {/* Shape indicator for special cases */}\r\n            {item.shape && (\r\n              <span \r\n                className={`legend-shape legend-shape-${item.shape}`}\r\n                style={item.shapeStyle}\r\n                aria-label={`${item.shape} indicator for ${item.label}`}\r\n              />\r\n            )}\r\n            \r\n            {/* Label */}\r\n            <span className=\"legend-label\">{item.label}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Legend;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}