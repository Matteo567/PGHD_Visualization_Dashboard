{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport DataService from '../services/dataService';\nconst usePatientData = patientId => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadData = async () => {\n      if (!patientId) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        setError(null);\n        const patientData = await DataService.getPatientData(patientId);\n        setData(patientData);\n      } catch (err) {\n        setError(err.message);\n        console.error('Error loading patient data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadData();\n  }, [patientId]);\n  const refetch = async () => {\n    if (!patientId) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const patientData = await DataService.getPatientData(patientId);\n      setData(patientData);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error refetching patient data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    data,\n    loading,\n    error,\n    refetch,\n    // Convenience accessors for specific data types\n    patientInfo: (data === null || data === void 0 ? void 0 : data.patientInfo) || null,\n    glucoseData: (data === null || data === void 0 ? void 0 : data.glucoseData) || [],\n    bloodPressureData: (data === null || data === void 0 ? void 0 : data.bloodPressureData) || [],\n    exerciseData: (data === null || data === void 0 ? void 0 : data.exerciseData) || [],\n    moodData: (data === null || data === void 0 ? void 0 : data.moodData) || [],\n    painData: (data === null || data === void 0 ? void 0 : data.painData) || [],\n    mealData: (data === null || data === void 0 ? void 0 : data.mealData) || [],\n    sleepData: (data === null || data === void 0 ? void 0 : data.sleepData) || []\n  };\n};\n_s(usePatientData, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\nexport default usePatientData;","map":{"version":3,"names":["useState","useEffect","DataService","usePatientData","patientId","_s","data","setData","loading","setLoading","error","setError","loadData","patientData","getPatientData","err","message","console","refetch","patientInfo","glucoseData","bloodPressureData","exerciseData","moodData","painData","mealData","sleepData"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/usePatientData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport DataService from '../services/dataService';\n\nconst usePatientData = (patientId) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadData = async () => {\n      if (!patientId) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const patientData = await DataService.getPatientData(patientId);\n        setData(patientData);\n      } catch (err) {\n        setError(err.message);\n        console.error('Error loading patient data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, [patientId]);\n\n  const refetch = async () => {\n    if (!patientId) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const patientData = await DataService.getPatientData(patientId);\n      setData(patientData);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error refetching patient data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    data,\n    loading,\n    error,\n    refetch,\n    // Convenience accessors for specific data types\n    patientInfo: data?.patientInfo || null,\n    glucoseData: data?.glucoseData || [],\n    bloodPressureData: data?.bloodPressureData || [],\n    exerciseData: data?.exerciseData || [],\n    moodData: data?.moodData || [],\n    painData: data?.painData || [],\n    mealData: data?.mealData || [],\n    sleepData: data?.sleepData || []\n  };\n};\n\nexport default usePatientData;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,WAAW,MAAM,yBAAyB;AAEjD,MAAMC,cAAc,GAAIC,SAAS,IAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMW,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI,CAACR,SAAS,EAAE;QACdK,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;MAEA,IAAI;QACFA,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;QAEd,MAAME,WAAW,GAAG,MAAMX,WAAW,CAACY,cAAc,CAACV,SAAS,CAAC;QAC/DG,OAAO,CAACM,WAAW,CAAC;MACtB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZJ,QAAQ,CAACI,GAAG,CAACC,OAAO,CAAC;QACrBC,OAAO,CAACP,KAAK,CAAC,6BAA6B,EAAEK,GAAG,CAAC;MACnD,CAAC,SAAS;QACRN,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACR,SAAS,CAAC,CAAC;EAEf,MAAMc,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI,CAACd,SAAS,EAAE;IAEhB,IAAI;MACFK,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAME,WAAW,GAAG,MAAMX,WAAW,CAACY,cAAc,CAACV,SAAS,CAAC;MAC/DG,OAAO,CAACM,WAAW,CAAC;IACtB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZJ,QAAQ,CAACI,GAAG,CAACC,OAAO,CAAC;MACrBC,OAAO,CAACP,KAAK,CAAC,gCAAgC,EAAEK,GAAG,CAAC;IACtD,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IACLH,IAAI;IACJE,OAAO;IACPE,KAAK;IACLQ,OAAO;IACP;IACAC,WAAW,EAAE,CAAAb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEa,WAAW,KAAI,IAAI;IACtCC,WAAW,EAAE,CAAAd,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEc,WAAW,KAAI,EAAE;IACpCC,iBAAiB,EAAE,CAAAf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEe,iBAAiB,KAAI,EAAE;IAChDC,YAAY,EAAE,CAAAhB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgB,YAAY,KAAI,EAAE;IACtCC,QAAQ,EAAE,CAAAjB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiB,QAAQ,KAAI,EAAE;IAC9BC,QAAQ,EAAE,CAAAlB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkB,QAAQ,KAAI,EAAE;IAC9BC,QAAQ,EAAE,CAAAnB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmB,QAAQ,KAAI,EAAE;IAC9BC,SAAS,EAAE,CAAApB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEoB,SAAS,KAAI;EAChC,CAAC;AACH,CAAC;AAACrB,EAAA,CA7DIF,cAAc;AA+DpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}