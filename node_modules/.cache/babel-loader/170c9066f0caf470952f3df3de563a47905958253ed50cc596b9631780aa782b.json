{"ast":null,"code":"/**\n ExerciseChart.js - Exercise Activity Tracking Visualization\n \n This component provides comprehensive exercise monitoring:\n - Activity type breakdown (walking, swimming, running, biking, muscle-strengthening, balance)\n - Duration tracking and weekly summaries\n - Color-coded activity categorization\n - Interactive tooltips with exercise details\n - Navigation controls for time periods\n - Integration with patient data and chart navigation\n \n Architecture:\n - Uses custom SVG for stacked bar chart visualization\n - Implements activity categorization system with emoji indicators\n - Provides color-coded activity types for easy identification\n - Supports expandable views\n - Implements time-based navigation and data filtering\n \n Visualization Features:\n - Stacked bar chart showing daily activity breakdown\n - Color-coded activity types with emoji indicators\n - Interactive tooltips with detailed exercise information\n - Design adapting to container size\n - Dynamic Y-axis scaling based on data range\n \n Activity Categories:\n - Walking: Low-impact cardiovascular exercise\n - Swimming: Full-body cardiovascular workout\n - Running: High-impact cardiovascular exercise\n - Biking: Low-impact cardiovascular exercise\n - Muscle-Strengthening: Strength training activities\n - Balance: Balance and stability training\n - Other: Miscellaneous physical activities\n \n Component Structure:\n - Chart Container: Main SVG container with sizing\n - Y-Axis: Duration scale with dynamic labeling\n - X-Axis: Day-of-week labels with date information\n - Data Bars: Stacked activity bars with color coding\n - Legend: Activity type explanations with emojis\n - Tooltip: Detailed exercise information on hover\n \n Essential for physical activity monitoring and fitness tracking.\n */import React,{useState,useRef}from'react';import usePatientData from'../../hooks/usePatientData';import useChartNavigation from'../../hooks/useChartNavigation';import Legend from'../Legend';import'./ExerciseChart.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const exerciseTypes=[{key:'walking',label:'Walking',color:'var(--chart-color-walking)',emoji:'🚶'},{key:'swimming',label:'Swimming',color:'var(--chart-color-swimming)',emoji:'🏊‍♀️'},{key:'running',label:'Running',color:'var(--chart-color-running)',emoji:'🏃‍♂️'},{key:'biking',label:'Biking',color:'var(--chart-color-biking)',emoji:'🚴'},{key:'muscle-strengthening',label:'Muscle-Strengthening',color:'var(--chart-color-resistance)',emoji:'🏋️'},{key:'balance',label:'Balance',color:'var(--chart-color-balance)',emoji:'🧘'},{key:'other',label:'Other',color:'var(--chart-color-other)',emoji:'➕'}];const exerciseLegendItems=exerciseTypes.map(_ref=>{let{label,color,emoji}=_ref;return{label:\"\".concat(emoji,\" \").concat(label),color};});const ExerciseChart=_ref2=>{var _exerciseTypes$find,_exerciseTypes$find2;let{patientId,isExpanded=false,onExpand,viewMode='patient',navigation,screenshotMode=false,showThreeMonthSummaries=false}=_ref2;const{exerciseData,loading,error}=usePatientData(patientId,'exercise');// State for toggling between activity breakdown and weekly goals view\nconst[showWeeklyGoals,setShowWeeklyGoals]=useState(false);// Use navigation from parent or fallback to internal navigation\nconst useInternalNavigation=!navigation;const internalNavigation=useChartNavigation('exercise');const nav=navigation||internalNavigation;// Simple inline config - no factory pattern needed\nconst config=isExpanded?{width:700,height:550,padding:{top:80,right:60,bottom:100,left:80},dayWidth:80,fontSize:{yAxis:16,yAxisTitle:18,timeLabel:14,dayLabel:14,dateLabel:14,emoji:12},barWidth:12}:{width:450,height:350,padding:{top:60,right:40,bottom:80,left:60},dayWidth:50,fontSize:{yAxis:14,yAxisTitle:16,timeLabel:12,dayLabel:12,dateLabel:12,emoji:10},barWidth:8};const chartHeight=config.height-config.padding.top-config.padding.bottom;const{start:startOfWeek,end:endOfWeek}=nav.getDateRange();const weekData=exerciseData.filter(d=>{if(!d.date)return false;const itemDate=new Date(d.date);return itemDate>=startOfWeek&&itemDate<=endOfWeek;});// Get 3-month data\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const threeMonthData=exerciseData.filter(d=>{if(!d.date)return false;const itemDate=new Date(d.date);return itemDate>=startOfThreeMonths&&itemDate<=endOfThreeMonths;});// Helper functions for exercise data processing\nconst daysOfWeek=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];const initializeDayData=()=>({walking:0,swimming:0,running:0,biking:0,'muscle-strengthening':0,balance:0,other:0,totalMinutes:0});const processExerciseData=weekData=>{const groupedData={};// Initialize all days\ndaysOfWeek.forEach(day=>{groupedData[day]=initializeDayData();});// Process each exercise item\nweekData.forEach(item=>{if(!item.date)return;const date=new Date(item.date);const dayName=!isNaN(date.getTime())?daysOfWeek[date.getDay()]:'Invalid';const dayData=groupedData[dayName];if(dayData){dayData.walking+=Number(item.walking)||0;dayData.swimming+=Number(item.swimming)||0;dayData.running+=Number(item.running)||0;dayData.biking+=Number(item.biking)||0;dayData['muscle-strengthening']+=Number(item['muscle-strengthening'])||0;dayData.balance+=Number(item.balance)||0;dayData.other+=Number(item.other)||0;// Calculate total minutes\ndayData.totalMinutes=dayData.walking+dayData.swimming+dayData.running+dayData.biking+dayData['muscle-strengthening']+dayData.balance+dayData.other;}});return groupedData;};const groupedData=processExerciseData(weekData);// Calculate weekly exercise categories for physician view\nconst aerobic=Object.values(groupedData).reduce((sum,day)=>sum+day.walking+day.swimming+day.running+day.biking,0);const strength=Object.values(groupedData).reduce((sum,day)=>sum+day['muscle-strengthening'],0);const flexibility=Object.values(groupedData).reduce((sum,day)=>sum+day.balance,0);const strengthSessions=Object.values(groupedData).filter(day=>day['muscle-strengthening']>0).length;const flexibilitySessions=Object.values(groupedData).filter(day=>day.balance>0).length;const weeklyCategories={aerobic,strength,flexibility,strengthSessions,flexibilitySessions};// Calculate percentages for physician view\nconst aerobicGoal=150;const strengthGoal=2;const flexibilityGoal=1;const categoryPercentages={aerobic:Math.min(100,Math.round(weeklyCategories.aerobic/aerobicGoal*100)),strength:Math.min(100,Math.round(weeklyCategories.strengthSessions/strengthGoal*100)),flexibility:Math.min(100,Math.round(weeklyCategories.flexibilitySessions/flexibilityGoal*100))};const exerciseValues=Object.values(groupedData).map(day=>day.totalMinutes);const maxVal=exerciseValues.length>0?Math.max(...exerciseValues,0):0;const maxDuration=Math.max(60,Math.ceil(maxVal/30)*30);const generateYAxisLabels=max=>{if(max===0)return[0];const step=Math.max(15,Math.ceil(max/6/15)*15);const labels=[];for(let i=0;i<=max;i+=step){labels.push(i);}return labels;};const yAxisLabels=generateYAxisLabels(maxDuration);// Calculate summary statistics for physician view\nlet weekSummary=null;if(weekData.length>0){const totalMinutes=Object.values(groupedData).reduce((sum,day)=>sum+day.totalMinutes,0);const avgMinutesPerDay=(totalMinutes/7).toFixed(0);// Count days with exercise\nconst daysWithExercise=Object.values(groupedData).filter(day=>day.totalMinutes>0).length;// Find most common exercise type\nconst exerciseTypeTotals={};exerciseTypes.forEach(type=>{exerciseTypeTotals[type.key]=Object.values(groupedData).reduce((sum,day)=>sum+day[type.key],0);});const mostCommonExercise=Object.entries(exerciseTypeTotals).sort((_ref3,_ref4)=>{let[,a]=_ref3;let[,b]=_ref4;return b-a;})[0];// Calculate exercise consistency (days with 30+ minutes)\nconst daysWithAdequateExercise=Object.values(groupedData).filter(day=>day.totalMinutes>=30).length;// Calculate average session length\nconst totalSessions=weekData.filter(item=>{const date=new Date(item.date);const dayName=!isNaN(date.getTime())?daysOfWeek[date.getDay()]:'Invalid';return groupedData[dayName]&&groupedData[dayName].totalMinutes>0;}).length;const avgSessionLength=totalSessions>0?(totalMinutes/totalSessions).toFixed(0):0;weekSummary={totalMinutes,avgMinutesPerDay,daysWithExercise,mostCommonExercise:mostCommonExercise[0],mostCommonExerciseMinutes:mostCommonExercise[1],daysWithAdequateExercise,totalSessions,avgSessionLength};}// Calculate 3-month summary statistics for physician view\nlet threeMonthSummary=null;if(threeMonthData.length>0){// Group 3-month data by day\nconst threeMonthGroupedData={};threeMonthData.forEach(item=>{if(!item.date)return;const date=new Date(item.date);const dayName=!isNaN(date.getTime())?daysOfWeek[date.getDay()]:'Invalid';if(!threeMonthGroupedData[dayName]){threeMonthGroupedData[dayName]={walking:0,swimming:0,running:0,biking:0,'muscle-strengthening':0,balance:0,other:0,totalMinutes:0};}threeMonthGroupedData[dayName].walking+=Number(item.walking)||0;threeMonthGroupedData[dayName].swimming+=Number(item.swimming)||0;threeMonthGroupedData[dayName].running+=Number(item.running)||0;threeMonthGroupedData[dayName].biking+=Number(item.biking)||0;threeMonthGroupedData[dayName]['muscle-strengthening']+=Number(item['muscle-strengthening'])||0;threeMonthGroupedData[dayName].balance+=Number(item.balance)||0;threeMonthGroupedData[dayName].other+=Number(item.other)||0;threeMonthGroupedData[dayName].totalMinutes=threeMonthGroupedData[dayName].walking+threeMonthGroupedData[dayName].swimming+threeMonthGroupedData[dayName].running+threeMonthGroupedData[dayName].biking+threeMonthGroupedData[dayName]['muscle-strengthening']+threeMonthGroupedData[dayName].balance+threeMonthGroupedData[dayName].other;});const totalMinutes=Object.values(threeMonthGroupedData).reduce((sum,day)=>sum+day.totalMinutes,0);// Calculate actual days in the 3-month period\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const daysInThreeMonths=Math.ceil((endOfThreeMonths-startOfThreeMonths)/(1000*60*60*24))+1;const avgMinutesPerDay=(totalMinutes/daysInThreeMonths).toFixed(0);// Count days with exercise\nconst daysWithExercise=Object.values(threeMonthGroupedData).filter(day=>day.totalMinutes>0).length;// Find most common exercise type\nconst exerciseTypeTotals={};exerciseTypes.forEach(type=>{exerciseTypeTotals[type.key]=Object.values(threeMonthGroupedData).reduce((sum,day)=>sum+day[type.key],0);});const mostCommonExercise=Object.entries(exerciseTypeTotals).sort((_ref5,_ref6)=>{let[,a]=_ref5;let[,b]=_ref6;return b-a;})[0];// Calculate average session length\nconst totalSessions=threeMonthData.filter(item=>{const date=new Date(item.date);const dayName=!isNaN(date.getTime())?daysOfWeek[date.getDay()]:'Invalid';return threeMonthGroupedData[dayName]&&threeMonthGroupedData[dayName].totalMinutes>0;}).length;const avgSessionLength=totalSessions>0?(totalMinutes/totalSessions).toFixed(0):0;threeMonthSummary={totalMinutes,avgMinutesPerDay,daysWithExercise,mostCommonExercise:mostCommonExercise[0],mostCommonExerciseMinutes:mostCommonExercise[1],totalSessions,avgSessionLength};}const formatDateRange=(start,end)=>{const startStr=start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" to \").concat(endStr);};// Physician/Unified view - simplified bar chart or weekly goals\nif(viewMode==='physician'||viewMode==='unified'&&showWeeklyGoals){const categories=[{name:'Aerobic',value:weeklyCategories.aerobic,goal:150,percentage:categoryPercentages.aerobic,color:'#4CAF50',description:'150 min/week goal'},{name:'Strength',value:weeklyCategories.strengthSessions,goal:2,percentage:categoryPercentages.strength,color:'#2196F3',description:'2+ sessions/week'},{name:'Balance',value:weeklyCategories.flexibilitySessions,goal:1,percentage:categoryPercentages.flexibility,color:'#FF9800',description:'1+ session/week'}];return/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-chart-container \".concat(isExpanded?'expanded':''),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-header\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Exercise Goals Progress\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getFormattedDateRange()}),viewMode==='unified'&&/*#__PURE__*/_jsxs(\"div\",{className:\"view-toggle\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(!showWeeklyGoals?'active':''),onClick:()=>setShowWeeklyGoals(false),children:\"Activity Breakdown\"}),/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(showWeeklyGoals?'active':''),onClick:()=>setShowWeeklyGoals(true),children:\"Weekly Goals\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"physician-exercise-bars\",children:categories.map((category,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-category-bar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"category-header\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"category-name\",children:category.name}),/*#__PURE__*/_jsxs(\"span\",{className:\"category-percentage\",children:[category.percentage,\"%\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"bar-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"bar-fill\",style:{width:\"\".concat(category.percentage,\"%\"),backgroundColor:category.color,opacity:category.percentage>0?0.8:0.3}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"category-details\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"category-value\",children:category.name==='Aerobic'?\"\".concat(category.value,\" min\"):\"\".concat(category.value,\" sessions\")}),/*#__PURE__*/_jsxs(\"span\",{className:\"category-goal\",children:[\"Goal: \",category.description]})]})]},category.name))}),/*#__PURE__*/_jsx(\"div\",{className:\"summary-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Week Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Aerobic Activity:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weeklyCategories.aerobic,\" minutes\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Strength Sessions:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weeklyCategories.strengthSessions,\" sessions\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Balance Sessions:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weeklyCategories.flexibilitySessions,\" sessions\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Goal Achievement:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[Object.values(categoryPercentages).filter(p=>p>=100).length,\"/3 categories\"]})]})]})]})})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-chart-container \".concat(isExpanded?'expanded':''),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-header\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Activity Breakdown by Type\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getFormattedDateRange()}),viewMode==='unified'&&/*#__PURE__*/_jsxs(\"div\",{className:\"view-toggle\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(!showWeeklyGoals?'active':''),onClick:()=>setShowWeeklyGoals(false),children:\"Activity Breakdown\"}),/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(showWeeklyGoals?'active':''),onClick:()=>setShowWeeklyGoals(true),children:\"Weekly Goals\"})]})]}),/*#__PURE__*/_jsxs(\"svg\",{width:\"100%\",viewBox:\"0 0 \".concat(config.width,\" \").concat(config.height),className:\"exercise-svg\",children:[/*#__PURE__*/_jsxs(\"g\",{className:\"y-axis\",children:[yAxisLabels.map(value=>{const y=config.padding.top+chartHeight-value/maxDuration*chartHeight;return/*#__PURE__*/_jsxs(\"g\",{className:\"y-axis-grid-group\",children:[/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-horizontal\",x1:config.padding.left,y1:y,x2:config.width-config.padding.right,y2:y}),/*#__PURE__*/_jsx(\"text\",{x:config.padding.left-15,y:y+3,fontSize:config.fontSize.yAxis,textAnchor:\"end\",fill:\"var(--chart-color-text-secondary)\",className:\"chart-tick-label\",children:value})]},value);}),/*#__PURE__*/_jsx(\"text\",{x:-(config.padding.top+chartHeight/2),y:config.padding.left/2-5,fontSize:config.fontSize.yAxisTitle,textAnchor:\"middle\",fill:\"var(--chart-color-text-primary)\",transform:\"rotate(-90)\",className:\"y-axis-title\",children:\"Minutes\"})]}),/*#__PURE__*/_jsx(\"g\",{className:\"x-axis\",children:daysOfWeek.map((day,dayIndex)=>{const date=new Date(startOfWeek);date.setDate(date.getDate()+dayIndex);const x=config.padding.left+dayIndex*config.dayWidth+config.dayWidth/2;const dayData=groupedData[day];const performedExercises=exerciseTypes.filter(type=>(dayData[type.key]||0)>0);const emojis=performedExercises.map(type=>type.emoji).join(' ');return/*#__PURE__*/_jsxs(\"g\",{className:\"x-axis-label-group\",children:[/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-vertical\",x1:config.padding.left+dayIndex*config.dayWidth,y1:config.padding.top,x2:config.padding.left+dayIndex*config.dayWidth,y2:config.height-config.padding.bottom}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+15,textAnchor:\"middle\",fontSize:config.fontSize.dayLabel,fill:\"var(--chart-color-text-primary)\",className:\"x-axis-day-label\",children:day}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+30,textAnchor:\"middle\",fontSize:config.fontSize.dateLabel,fill:\"var(--chart-color-text-secondary)\",className:\"x-axis-date-label\",children:date.getDate()}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+48,textAnchor:\"middle\",fontSize:config.fontSize.emoji,children:emojis})]},dayIndex);})}),/*#__PURE__*/_jsx(\"g\",{className:\"data-bars\",children:daysOfWeek.map((day,dayIndex)=>{const dayData=groupedData[day];const x=config.padding.left+dayIndex*config.dayWidth+config.dayWidth/2;let currentY=config.height-config.padding.bottom;return/*#__PURE__*/_jsx(\"g\",{children:exerciseTypes.map(type=>{const minutes=Number(dayData[type.key])||0;if(minutes<=0)return null;const segmentHeight=minutes/maxDuration*chartHeight;const segmentY=currentY-segmentHeight;const segment=/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"rect\",{x:x-config.barWidth/2,y:segmentY,width:config.barWidth,height:segmentHeight,fill:type.color,className:\"data-bar\",children:/*#__PURE__*/_jsx(\"title\",{children:\"\".concat(type.label,\": \").concat(Math.round(minutes),\" min\")})}),segmentHeight>=12&&/*#__PURE__*/_jsx(\"text\",{x:x,y:segmentY+segmentHeight/2,textAnchor:\"middle\",fontSize:isExpanded?8:6,fill:\"black\",className:\"duration-label\",children:Math.round(minutes)})]},type.key);currentY=segmentY;return segment;})},day);})})]}),/*#__PURE__*/_jsx(Legend,{title:\"Exercise Type\",items:exerciseLegendItems,orientation:\"horizontal\",size:\"medium\",hide:screenshotMode}),(viewMode==='physician'||viewMode==='unified')&&weekSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"summary-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Week Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Exercise:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.totalMinutes,\" minutes\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Daily Average:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.avgMinutesPerDay,\" minutes/day\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Exercise Days:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.daysWithExercise,\"/7 days\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[(_exerciseTypes$find=exerciseTypes.find(t=>t.key===weekSummary.mostCommonExercise))===null||_exerciseTypes$find===void 0?void 0:_exerciseTypes$find.emoji,\" \",weekSummary.mostCommonExercise,\" (\",weekSummary.mostCommonExerciseMinutes,\" min)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Avg Session:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.avgSessionLength,\" minutes\"]})]})]})]}),showThreeMonthSummaries&&threeMonthSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"3-Month Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Exercise:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.totalMinutes,\" minutes\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Daily Average:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.avgMinutesPerDay,\" minutes/day\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Exercise Days:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.daysWithExercise,\" days\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[(_exerciseTypes$find2=exerciseTypes.find(t=>t.key===threeMonthSummary.mostCommonExercise))===null||_exerciseTypes$find2===void 0?void 0:_exerciseTypes$find2.emoji,\" \",threeMonthSummary.mostCommonExercise,\" (\",threeMonthSummary.mostCommonExerciseMinutes,\" min)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Avg Session:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.avgSessionLength,\" minutes\"]})]})]})]})]})]});};export default ExerciseChart;","map":{"version":3,"names":["React","useState","useRef","usePatientData","useChartNavigation","Legend","jsx","_jsx","jsxs","_jsxs","exerciseTypes","key","label","color","emoji","exerciseLegendItems","map","_ref","concat","ExerciseChart","_ref2","_exerciseTypes$find","_exerciseTypes$find2","patientId","isExpanded","onExpand","viewMode","navigation","screenshotMode","showThreeMonthSummaries","exerciseData","loading","error","showWeeklyGoals","setShowWeeklyGoals","useInternalNavigation","internalNavigation","nav","config","width","height","padding","top","right","bottom","left","dayWidth","fontSize","yAxis","yAxisTitle","timeLabel","dayLabel","dateLabel","barWidth","chartHeight","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthData","daysOfWeek","initializeDayData","walking","swimming","running","biking","balance","other","totalMinutes","processExerciseData","groupedData","forEach","day","item","dayName","isNaN","getTime","getDay","dayData","Number","aerobic","Object","values","reduce","sum","strength","flexibility","strengthSessions","length","flexibilitySessions","weeklyCategories","aerobicGoal","strengthGoal","flexibilityGoal","categoryPercentages","Math","min","round","exerciseValues","maxVal","max","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","weekSummary","avgMinutesPerDay","toFixed","daysWithExercise","exerciseTypeTotals","type","mostCommonExercise","entries","sort","_ref3","_ref4","a","b","daysWithAdequateExercise","totalSessions","avgSessionLength","mostCommonExerciseMinutes","threeMonthSummary","threeMonthGroupedData","daysInThreeMonths","_ref5","_ref6","formatDateRange","startStr","toLocaleDateString","month","endStr","categories","name","value","goal","percentage","description","className","children","getFormattedDateRange","onClick","category","index","style","backgroundColor","opacity","p","viewBox","y","x1","y1","x2","y2","x","textAnchor","fill","transform","dayIndex","setDate","getDate","performedExercises","emojis","join","currentY","minutes","segmentHeight","segmentY","segment","title","items","orientation","size","hide","find","t"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["/**\n ExerciseChart.js - Exercise Activity Tracking Visualization\n \n This component provides comprehensive exercise monitoring:\n - Activity type breakdown (walking, swimming, running, biking, muscle-strengthening, balance)\n - Duration tracking and weekly summaries\n - Color-coded activity categorization\n - Interactive tooltips with exercise details\n - Navigation controls for time periods\n - Integration with patient data and chart navigation\n \n Architecture:\n - Uses custom SVG for stacked bar chart visualization\n - Implements activity categorization system with emoji indicators\n - Provides color-coded activity types for easy identification\n - Supports expandable views\n - Implements time-based navigation and data filtering\n \n Visualization Features:\n - Stacked bar chart showing daily activity breakdown\n - Color-coded activity types with emoji indicators\n - Interactive tooltips with detailed exercise information\n - Design adapting to container size\n - Dynamic Y-axis scaling based on data range\n \n Activity Categories:\n - Walking: Low-impact cardiovascular exercise\n - Swimming: Full-body cardiovascular workout\n - Running: High-impact cardiovascular exercise\n - Biking: Low-impact cardiovascular exercise\n - Muscle-Strengthening: Strength training activities\n - Balance: Balance and stability training\n - Other: Miscellaneous physical activities\n \n Component Structure:\n - Chart Container: Main SVG container with sizing\n - Y-Axis: Duration scale with dynamic labeling\n - X-Axis: Day-of-week labels with date information\n - Data Bars: Stacked activity bars with color coding\n - Legend: Activity type explanations with emojis\n - Tooltip: Detailed exercise information on hover\n \n Essential for physical activity monitoring and fitness tracking.\n */\n\nimport React, { useState, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport './ExerciseChart.css';\n\nconst exerciseTypes = [\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\n  { key: 'muscle-strengthening', label: 'Muscle-Strengthening', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\n  { key: 'balance', label: 'Balance', color: 'var(--chart-color-balance)', emoji: '🧘' },\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\n];\n\nconst exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\n  label: `${emoji} ${label}`,\n  color,\n}));\n\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation, screenshotMode = false, showThreeMonthSummaries = false }) => {\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\n  \n  // State for toggling between activity breakdown and weekly goals view\n  const [showWeeklyGoals, setShowWeeklyGoals] = useState(false);\n  \n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n\n  // Simple inline config - no factory pattern needed\n  const config = isExpanded \n    ? {\n        width: 700,\n        height: 550,\n        padding: { top: 80, right: 60, bottom: 100, left: 80 },\n        dayWidth: 80,\n        fontSize: {\n          yAxis: 16,\n          yAxisTitle: 18,\n          timeLabel: 14,\n          dayLabel: 14,\n          dateLabel: 14,\n          emoji: 12,\n        },\n        barWidth: 12,\n      }\n    : {\n        width: 450,\n        height: 350,\n        padding: { top: 60, right: 40, bottom: 80, left: 60 },\n        dayWidth: 50,\n        fontSize: {\n          yAxis: 14,\n          yAxisTitle: 16,\n          timeLabel: 12,\n          dayLabel: 12,\n          dateLabel: 12,\n          emoji: 10,\n        },\n        barWidth: 8,\n      };\n  \n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\n\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Get 3-month data\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n  const threeMonthData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\n  });\n\n  // Helper functions for exercise data processing\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  \n  const initializeDayData = () => ({\n    walking: 0,\n    swimming: 0,\n    running: 0,\n    biking: 0,\n    'muscle-strengthening': 0,\n    balance: 0,\n    other: 0,\n    totalMinutes: 0\n  });\n\n  const processExerciseData = (weekData) => {\n    const groupedData = {};\n    \n    // Initialize all days\n    daysOfWeek.forEach(day => {\n      groupedData[day] = initializeDayData();\n    });\n    \n    // Process each exercise item\n    weekData.forEach(item => {\n      if (!item.date) return;\n      \n      const date = new Date(item.date);\n      const dayName = !isNaN(date.getTime()) ? daysOfWeek[date.getDay()] : 'Invalid';\n      const dayData = groupedData[dayName];\n      \n      if (dayData) {\n        dayData.walking += Number(item.walking) || 0;\n        dayData.swimming += Number(item.swimming) || 0;\n        dayData.running += Number(item.running) || 0;\n        dayData.biking += Number(item.biking) || 0;\n        dayData['muscle-strengthening'] += Number(item['muscle-strengthening']) || 0;\n        dayData.balance += Number(item.balance) || 0;\n        dayData.other += Number(item.other) || 0;\n        \n        // Calculate total minutes\n        dayData.totalMinutes = dayData.walking + dayData.swimming + dayData.running + \n                             dayData.biking + dayData['muscle-strengthening'] + \n                             dayData.balance + dayData.other;\n      }\n    });\n    \n    return groupedData;\n  };\n\n  const groupedData = processExerciseData(weekData);\n\n  // Calculate weekly exercise categories for physician view\n  const aerobic = Object.values(groupedData).reduce((sum, day) => \n    sum + day.walking + day.swimming + day.running + day.biking, 0);\n  const strength = Object.values(groupedData).reduce((sum, day) => \n    sum + day['muscle-strengthening'], 0);\n  const flexibility = Object.values(groupedData).reduce((sum, day) => \n    sum + day.balance, 0);\n  \n  const strengthSessions = Object.values(groupedData).filter(day => day['muscle-strengthening'] > 0).length;\n  const flexibilitySessions = Object.values(groupedData).filter(day => day.balance > 0).length;\n  \n  const weeklyCategories = {\n    aerobic,\n    strength,\n    flexibility,\n    strengthSessions,\n    flexibilitySessions\n  };\n\n  // Calculate percentages for physician view\n  const aerobicGoal = 150;\n  const strengthGoal = 2;\n  const flexibilityGoal = 1;\n  \n  const categoryPercentages = {\n    aerobic: Math.min(100, Math.round((weeklyCategories.aerobic / aerobicGoal) * 100)),\n    strength: Math.min(100, Math.round((weeklyCategories.strengthSessions / strengthGoal) * 100)),\n    flexibility: Math.min(100, Math.round((weeklyCategories.flexibilitySessions / flexibilityGoal) * 100))\n  };\n\n  const exerciseValues = Object.values(groupedData).map(day => day.totalMinutes);\n  const maxVal = exerciseValues.length > 0 ? Math.max(...exerciseValues, 0) : 0;\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n\n  const generateYAxisLabels = (max) => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate summary statistics for physician view\n  let weekSummary = null;\n  if (weekData.length > 0) {\n\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\n    \n    // Count days with exercise\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\n    \n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    \n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\n      .sort(([,a], [,b]) => b - a)[0];\n    \n    // Calculate exercise consistency (days with 30+ minutes)\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\n    \n    // Calculate average session length\n    const totalSessions = weekData.filter(item => {\n      const date = new Date(item.date);\n      const dayName = !isNaN(date.getTime()) ? daysOfWeek[date.getDay()] : 'Invalid';\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\n    }).length;\n    \n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n\n    weekSummary = {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      daysWithAdequateExercise,\n      totalSessions,\n      avgSessionLength\n    };\n  }\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthData.length > 0) {\n\n    // Group 3-month data by day\n    const threeMonthGroupedData = {};\n    threeMonthData.forEach(item => {\n      if (!item.date) return;\n      const date = new Date(item.date);\n      const dayName = !isNaN(date.getTime()) ? daysOfWeek[date.getDay()] : 'Invalid';\n      if (!threeMonthGroupedData[dayName]) {\n        threeMonthGroupedData[dayName] = { walking: 0, swimming: 0, running: 0, biking: 0, 'muscle-strengthening': 0, balance: 0, other: 0, totalMinutes: 0 };\n      }\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\n      threeMonthGroupedData[dayName]['muscle-strengthening'] += Number(item['muscle-strengthening']) || 0;\n      threeMonthGroupedData[dayName].balance += Number(item.balance) || 0;\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['muscle-strengthening'] + threeMonthGroupedData[dayName].balance + threeMonthGroupedData[dayName].other;\n    });\n\n    const totalMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    \n    // Calculate actual days in the 3-month period\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const avgMinutesPerDay = (totalMinutes / daysInThreeMonths).toFixed(0);\n    \n    // Count days with exercise\n    const daysWithExercise = Object.values(threeMonthGroupedData).filter(day => day.totalMinutes > 0).length;\n    \n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    \n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\n      .sort(([,a], [,b]) => b - a)[0];\n    \n    // Calculate average session length\n    const totalSessions = threeMonthData.filter(item => {\n      const date = new Date(item.date);\n      const dayName = !isNaN(date.getTime()) ? daysOfWeek[date.getDay()] : 'Invalid';\n      return threeMonthGroupedData[dayName] && threeMonthGroupedData[dayName].totalMinutes > 0;\n    }).length;\n    \n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n\n    threeMonthSummary = {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      totalSessions,\n      avgSessionLength\n    };\n  }\n\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${startStr} to ${endStr}`;\n  };\n\n  // Physician/Unified view - simplified bar chart or weekly goals\n  if (viewMode === 'physician' || (viewMode === 'unified' && showWeeklyGoals)) {\n    const categories = [\n      { \n        name: 'Aerobic', \n        value: weeklyCategories.aerobic, \n        goal: 150, \n        percentage: categoryPercentages.aerobic,\n        color: '#4CAF50',\n        description: '150 min/week goal'\n      },\n      { \n        name: 'Strength', \n        value: weeklyCategories.strengthSessions, \n        goal: 2, \n        percentage: categoryPercentages.strength,\n        color: '#2196F3',\n        description: '2+ sessions/week'\n      },\n      { \n        name: 'Balance', \n        value: weeklyCategories.flexibilitySessions, \n        goal: 1, \n        percentage: categoryPercentages.flexibility,\n        color: '#FF9800',\n        description: '1+ session/week'\n      }\n    ];\n\n    return (\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\n        <div className=\"exercise-header\">\n          <h3 className=\"chart-title\">Exercise Goals Progress</h3>\n          <h4 className=\"chart-subtitle\">{nav.getFormattedDateRange()}</h4>\n          \n          {/* View Toggle - Always show for unified mode */}\n          {viewMode === 'unified' && (\n            <div className=\"view-toggle\">\n              <button \n                className={`toggle-btn ${!showWeeklyGoals ? 'active' : ''}`}\n                onClick={() => setShowWeeklyGoals(false)}\n              >\n                Activity Breakdown\n              </button>\n              <button \n                className={`toggle-btn ${showWeeklyGoals ? 'active' : ''}`}\n                onClick={() => setShowWeeklyGoals(true)}\n              >\n                Weekly Goals\n              </button>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"physician-exercise-bars\">\n          {categories.map((category, index) => (\n            <div key={category.name} className=\"exercise-category-bar\">\n              <div className=\"category-header\">\n                <span className=\"category-name\">{category.name}</span>\n                <span className=\"category-percentage\">{category.percentage}%</span>\n              </div>\n              <div className=\"bar-container\">\n                <div \n                  className=\"bar-fill\" \n                  style={{ \n                    width: `${category.percentage}%`,\n                    backgroundColor: category.color,\n                    opacity: category.percentage > 0 ? 0.8 : 0.3\n                  }}\n                />\n              </div>\n              <div className=\"category-details\">\n                <span className=\"category-value\">\n                  {category.name === 'Aerobic' ? `${category.value} min` : `${category.value} sessions`}\n                </span>\n                <span className=\"category-goal\">Goal: {category.description}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"summary-container\">\n          <div className=\"chart-summary\">\n            <h4>Week Summary</h4>\n            <div className=\"summary-stats\">\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Aerobic Activity:</span>\n                <span className=\"stat-value\">{weeklyCategories.aerobic} minutes</span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Strength Sessions:</span>\n                <span className=\"stat-value\">{weeklyCategories.strengthSessions} sessions</span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Balance Sessions:</span>\n                <span className=\"stat-value\">{weeklyCategories.flexibilitySessions} sessions</span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Goal Achievement:</span>\n                <span className=\"stat-value\">\n                  {Object.values(categoryPercentages).filter(p => p >= 100).length}/3 categories\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\n        <div className=\"exercise-header\">\n          <h3 className=\"chart-title\">Activity Breakdown by Type</h3>\n          <h4 className=\"chart-subtitle\">{nav.getFormattedDateRange()}</h4>\n          \n          {/* View Toggle */}\n          {viewMode === 'unified' && (\n            <div className=\"view-toggle\">\n              <button \n                className={`toggle-btn ${!showWeeklyGoals ? 'active' : ''}`}\n                onClick={() => setShowWeeklyGoals(false)}\n              >\n                Activity Breakdown\n              </button>\n              <button \n                className={`toggle-btn ${showWeeklyGoals ? 'active' : ''}`}\n                onClick={() => setShowWeeklyGoals(true)}\n              >\n                Weekly Goals\n              </button>\n            </div>\n          )}\n        </div>\n        \n        <svg \n          width=\"100%\" \n          viewBox={`0 0 ${config.width} ${config.height}`}\n          className=\"exercise-svg\"\n        >\n          <g className=\"y-axis\">\n            {yAxisLabels.map(value => {\n              const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\n              return (\n                <g key={value} className=\"y-axis-grid-group\">\n                  <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\n                  <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\n                </g>\n              );\n            })}\n            <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\n          </g>\n\n          <g className=\"x-axis\">\n            {daysOfWeek.map((day, dayIndex) => {\n              const date = new Date(startOfWeek);\n              date.setDate(date.getDate() + dayIndex);\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n\n              const dayData = groupedData[day];\n              const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n              const emojis = performedExercises.map(type => type.emoji).join(' ');\n\n              return (\n                <g key={dayIndex} className=\"x-axis-label-group\">\n                  <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\n                  <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\n                  <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\n                  <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\n                </g>\n              );\n            })}\n          </g>\n\n          <g className=\"data-bars\">\n            {daysOfWeek.map((day, dayIndex) => {\n              const dayData = groupedData[day];\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n              let currentY = config.height - config.padding.bottom;\n\n              return (\n                <g key={day}>\n                  {exerciseTypes.map(type => {\n                    const minutes = Number(dayData[type.key]) || 0;\n                    if (minutes <= 0) return null;\n\n                    const segmentHeight = (minutes / maxDuration) * chartHeight;\n                    const segmentY = currentY - segmentHeight;\n\n                    const segment = (\n                      <g key={type.key}>\n                        <rect\n                          x={x - config.barWidth / 2}\n                          y={segmentY}\n                          width={config.barWidth}\n                          height={segmentHeight}\n                          fill={type.color}\n                          className=\"data-bar\"\n                        >\n                          <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\n                        </rect>\n                        {/* Duration label inside the segment */}\n                        {segmentHeight >= 12 && (\n                          <text\n                            x={x}\n                            y={segmentY + segmentHeight / 2}\n                            textAnchor=\"middle\"\n                            fontSize={isExpanded ? 8 : 6}\n                            fill=\"black\"\n                            className=\"duration-label\"\n                          >\n                            {Math.round(minutes)}\n                          </text>\n                        )}\n                      </g>\n                    );\n\n                    currentY = segmentY;\n                    return segment;\n                  })}\n                </g>\n              );\n            })}\n          </g>\n        </svg>\n        \n        <Legend \n          title=\"Exercise Type\" \n          items={exerciseLegendItems} \n          orientation=\"horizontal\" \n          size=\"medium\" \n          hide={screenshotMode}\n        />\n\n        {/* Show summary for physician/unified view */}\n        {(viewMode === 'physician' || viewMode === 'unified') && weekSummary && (\n          <div className=\"summary-container\">\n            <div className=\"chart-summary\">\n              <h4>Week Summary</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Total Exercise:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.totalMinutes} minutes\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Daily Average:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.avgMinutesPerDay} minutes/day\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Exercise Days:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.daysWithExercise}/7 days\n                  </span>\n                </div>\n\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Most Common:</span>\n                  <span className=\"stat-value\">\n                    {exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)?.emoji} {weekSummary.mostCommonExercise} ({weekSummary.mostCommonExerciseMinutes} min)\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Avg Session:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.avgSessionLength} minutes\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            {showThreeMonthSummaries && threeMonthSummary && (\n              <div className=\"chart-summary\">\n                <h4>3-Month Summary</h4>\n                <div className=\"summary-stats\">\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Total Exercise:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.totalMinutes} minutes\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Daily Average:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.avgMinutesPerDay} minutes/day\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Exercise Days:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.daysWithExercise} days\n                    </span>\n                  </div>\n\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Most Common:</span>\n                    <span className=\"stat-value\">\n                      {exerciseTypes.find(t => t.key === threeMonthSummary.mostCommonExercise)?.emoji} {threeMonthSummary.mostCommonExercise} ({threeMonthSummary.mostCommonExerciseMinutes} min)\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Avg Session:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.avgSessionLength} minutes\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n  );\n};\n\nexport default ExerciseChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}