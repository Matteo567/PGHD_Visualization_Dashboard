{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExerciseChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport useContainerWidth from '../../hooks/useContainerWidth';\nimport Legend from '../Legend';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport '../ChartStyles.css';\nimport './ExerciseChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseTypes = [{\n  key: 'walking',\n  label: 'Walking',\n  color: 'var(--chart-color-walking)',\n  emoji: '🚶'\n}, {\n  key: 'swimming',\n  label: 'Swimming',\n  color: 'var(--chart-color-swimming)',\n  emoji: '🏊‍♀️'\n}, {\n  key: 'running',\n  label: 'Running',\n  color: 'var(--chart-color-running)',\n  emoji: '🏃‍♂️'\n}, {\n  key: 'resistance/weights',\n  label: 'Resistance/Weights',\n  color: 'var(--chart-color-resistance)',\n  emoji: '🏋️'\n}, {\n  key: 'biking',\n  label: 'Biking',\n  color: 'var(--chart-color-biking)',\n  emoji: '🚴'\n}, {\n  key: 'balance/stretching',\n  label: 'Balance/Stretching',\n  color: 'var(--chart-color-balance)',\n  emoji: '🧘'\n}, {\n  key: 'other',\n  label: 'Other',\n  color: 'var(--chart-color-other)',\n  emoji: '➕'\n}];\nconst exerciseLegendItems = exerciseTypes.map(({\n  label,\n  color,\n  emoji\n}) => ({\n  label: `${emoji} ${label}`,\n  color\n}));\nconst ExerciseChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient',\n  navigation\n}) => {\n  _s();\n  var _exerciseTypes$find;\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId);\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n\n  // Use our new consistent container width hook\n  const {\n    containerRef,\n    containerWidth\n  } = useContainerWidth(isExpanded);\n\n  // Get consistent chart configuration\n  const config = createChartConfig('exercise', isExpanded, containerWidth);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = {\n      walking: 0,\n      swimming: 0,\n      running: 0,\n      'resistance/weights': 0,\n      biking: 0,\n      'balance/stretching': 0,\n      other: 0,\n      totalMinutes: 0\n    };\n    return acc;\n  }, {});\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\n      groupedData[dayName].running += Number(item.running) || 0;\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      groupedData[dayName].biking += Number(item.biking) || 0;\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\n    }\n  });\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n  const generateYAxisLabels = max => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate summary statistics for physician view\n  const weekSummary = useMemo(() => {\n    if (!weekData.length) return null;\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\n\n    // Count days with exercise\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\n\n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    const mostCommonExercise = Object.entries(exerciseTypeTotals).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate exercise consistency (days with 30+ minutes)\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\n\n    // Calculate average session length\n    const totalSessions = weekData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\n    }).length;\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n    return {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      daysWithAdequateExercise,\n      totalSessions,\n      avgSessionLength\n    };\n  }, [weekData, groupedData]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exercise-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `exercise-chart-content ${isExpanded ? 'expanded' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chart-title\",\n        children: \"Activity Breakdown by Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"chart-subtitle\",\n        children: nav.getCurrentMonthYear()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"100%\",\n        viewBox: `0 0 ${config.width} ${config.height}`,\n        className: \"exercise-svg\",\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"y-axis\",\n          children: [yAxisLabels.map(value => {\n            const y = config.padding.top + chartHeight - value / maxDuration * chartHeight;\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              className: \"y-axis-grid-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                className: \"chart-grid-line-horizontal\",\n                x1: config.padding.left,\n                y1: y,\n                x2: config.width - config.padding.right,\n                y2: y\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: config.padding.left - 15,\n                y: y + 3,\n                fontSize: config.fontSize.yAxis,\n                textAnchor: \"end\",\n                fill: \"var(--chart-color-text-secondary)\",\n                className: \"chart-tick-label\",\n                children: value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 21\n              }, this)]\n            }, value, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 19\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: -(config.padding.top + chartHeight / 2),\n            y: config.padding.left / 2 - 5,\n            fontSize: config.fontSize.yAxisTitle,\n            textAnchor: \"middle\",\n            fill: \"var(--chart-color-text-primary)\",\n            transform: \"rotate(-90)\",\n            className: \"y-axis-title\",\n            children: \"Minutes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"x-axis\",\n          children: daysOfWeek.map((day, dayIndex) => {\n            const date = new Date(startOfWeek);\n            date.setDate(date.getDate() + dayIndex);\n            const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n            const dayData = groupedData[day];\n            const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n            const emojis = performedExercises.map(type => type.emoji).join(' ');\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              className: \"x-axis-label-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                className: \"chart-grid-line-vertical\",\n                x1: config.padding.left + dayIndex * config.dayWidth,\n                y1: config.padding.top,\n                x2: config.padding.left + dayIndex * config.dayWidth,\n                y2: config.height - config.padding.bottom\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: x,\n                y: config.height - config.padding.bottom + 15,\n                textAnchor: \"middle\",\n                fontSize: config.fontSize.dayLabel,\n                fill: \"var(--chart-color-text-primary)\",\n                className: \"x-axis-day-label\",\n                children: day\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: x,\n                y: config.height - config.padding.bottom + 30,\n                textAnchor: \"middle\",\n                fontSize: config.fontSize.dateLabel,\n                fill: \"var(--chart-color-text-secondary)\",\n                className: \"x-axis-date-label\",\n                children: date.getDate()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: x,\n                y: config.height - config.padding.bottom + 48,\n                textAnchor: \"middle\",\n                fontSize: config.fontSize.emoji,\n                children: emojis\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 21\n              }, this)]\n            }, dayIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"data-bars\",\n          children: daysOfWeek.map((day, dayIndex) => {\n            const dayData = groupedData[day];\n            const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n            let currentY = config.height - config.padding.bottom;\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              children: exerciseTypes.map(type => {\n                const minutes = Number(dayData[type.key]) || 0;\n                if (minutes <= 0) return null;\n                const segmentHeight = minutes / maxDuration * chartHeight;\n                const segmentY = currentY - segmentHeight;\n                const segment = /*#__PURE__*/_jsxDEV(\"g\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                    x: x - config.barWidth / 2,\n                    y: segmentY,\n                    width: config.barWidth,\n                    height: segmentHeight,\n                    fill: type.color,\n                    className: \"data-bar\",\n                    children: /*#__PURE__*/_jsxDEV(\"title\", {\n                      children: `${type.label}: ${Math.round(minutes)} min`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 203,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 195,\n                    columnNumber: 27\n                  }, this), segmentHeight >= 12 && /*#__PURE__*/_jsxDEV(\"text\", {\n                    x: x,\n                    y: segmentY + segmentHeight / 2,\n                    textAnchor: \"middle\",\n                    fontSize: isExpanded ? 8 : 6,\n                    fill: \"white\",\n                    className: \"duration-label\",\n                    style: {\n                      textShadow: '0.5px 0.5px 1px rgba(0,0,0,0.5)',\n                      fontWeight: 'normal'\n                    },\n                    children: Math.round(minutes)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 29\n                  }, this)]\n                }, type.key, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 25\n                }, this);\n                currentY = segmentY;\n                return segment;\n              })\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {\n      title: \"Exercise Type\",\n      items: exerciseLegendItems,\n      orientation: \"horizontal\",\n      size: \"medium\",\n      isExpanded: isExpanded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this), viewMode === 'physician' && weekSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Week Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Total Exercise:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [weekSummary.totalMinutes, \" minutes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Daily Average:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [weekSummary.avgMinutesPerDay, \" minutes/day\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Exercise Days:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [weekSummary.daysWithExercise, \"/7 days\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Adequate Exercise:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [weekSummary.daysWithAdequateExercise, \"/7 days (30+ min)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Most Common:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [(_exerciseTypes$find = exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)) === null || _exerciseTypes$find === void 0 ? void 0 : _exerciseTypes$find.emoji, \" \", weekSummary.mostCommonExercise, \" (\", weekSummary.mostCommonExerciseMinutes, \" min)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Avg Session:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [weekSummary.avgSessionLength, \" minutes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 7\n  }, this);\n};\n_s(ExerciseChart, \"jWRAlffZXvH5PX4DODGl2c46POM=\", false, function () {\n  return [usePatientData, useChartNavigation, useContainerWidth];\n});\n_c = ExerciseChart;\nexport default ExerciseChart;\nvar _c;\n$RefreshReg$(_c, \"ExerciseChart\");","map":{"version":3,"names":["React","useState","useMemo","usePatientData","useChartNavigation","useContainerWidth","Legend","createChartConfig","jsxDEV","_jsxDEV","exerciseTypes","key","label","color","emoji","exerciseLegendItems","map","ExerciseChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","_exerciseTypes$find","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","containerRef","containerWidth","config","chartHeight","height","padding","top","bottom","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","daysOfWeek","groupedData","reduce","acc","day","walking","swimming","running","biking","other","totalMinutes","forEach","item","dayName","getDay","Number","maxVal","Math","max","Object","values","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","weekSummary","length","sum","avgMinutesPerDay","toFixed","daysWithExercise","exerciseTypeTotals","type","mostCommonExercise","entries","sort","a","b","daysWithAdequateExercise","totalSessions","avgSessionLength","mostCommonExerciseMinutes","formatDateRange","startStr","toLocaleDateString","month","endStr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getCurrentMonthYear","width","viewBox","value","y","x1","left","y1","x2","right","y2","x","fontSize","yAxis","textAnchor","fill","yAxisTitle","transform","dayIndex","setDate","getDate","dayWidth","dayData","performedExercises","emojis","join","dayLabel","dateLabel","currentY","minutes","segmentHeight","segmentY","segment","barWidth","round","style","textShadow","fontWeight","title","items","orientation","size","find","t","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport useContainerWidth from '../../hooks/useContainerWidth';\nimport Legend from '../Legend';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport '../ChartStyles.css';\nimport './ExerciseChart.css';\n\nconst exerciseTypes = [\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\n  { key: 'resistance/weights', label: 'Resistance/Weights', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\n  { key: 'balance/stretching', label: 'Balance/Stretching', color: 'var(--chart-color-balance)', emoji: '🧘' },\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\n];\n\nconst exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\n  label: `${emoji} ${label}`,\n  color,\n}));\n\n\n\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\n  const { exerciseData, loading, error } = usePatientData(patientId);\n  \n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n  \n  // Use our new consistent container width hook\n  const { containerRef, containerWidth } = useContainerWidth(isExpanded);\n  \n  // Get consistent chart configuration\n  const config = createChartConfig('exercise', isExpanded, containerWidth);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\n\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\n    return acc;\n  }, {});\n\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\n      groupedData[dayName].running += Number(item.running) || 0;\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      groupedData[dayName].biking += Number(item.biking) || 0;\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\n    }\n  });\n\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n\n  const generateYAxisLabels = (max) => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate summary statistics for physician view\n  const weekSummary = useMemo(() => {\n    if (!weekData.length) return null;\n\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\n    \n    // Count days with exercise\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\n    \n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    \n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\n      .sort(([,a], [,b]) => b - a)[0];\n    \n    // Calculate exercise consistency (days with 30+ minutes)\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\n    \n    // Calculate average session length\n    const totalSessions = weekData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\n    }).length;\n    \n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n\n    return {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      daysWithAdequateExercise,\n      totalSessions,\n      avgSessionLength\n    };\n  }, [weekData, groupedData]);\n\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${startStr} to ${endStr}`;\n  };\n\n  return (\n      <div className=\"exercise-chart-container\">\n        <div className={`exercise-chart-content ${isExpanded ? 'expanded' : ''}`}>\n          <h3 className=\"chart-title\">Activity Breakdown by Type</h3>\n          <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\n          <svg \n            width=\"100%\" \n            viewBox={`0 0 ${config.width} ${config.height}`}\n            className=\"exercise-svg\"\n          >\n            <g className=\"y-axis\">\n              {yAxisLabels.map(value => {\n                const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\n                return (\n                  <g key={value} className=\"y-axis-grid-group\">\n                    <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\n                    <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\n                  </g>\n                );\n              })}\n              <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\n            </g>\n\n            <g className=\"x-axis\">\n              {daysOfWeek.map((day, dayIndex) => {\n                const date = new Date(startOfWeek);\n                date.setDate(date.getDate() + dayIndex);\n                const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n\n                const dayData = groupedData[day];\n                const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n                const emojis = performedExercises.map(type => type.emoji).join(' ');\n\n                return (\n                  <g key={dayIndex} className=\"x-axis-label-group\">\n                    <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\n                    <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\n                    <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\n                    <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\n                  </g>\n                );\n              })}\n            </g>\n\n            <g className=\"data-bars\">\n              {daysOfWeek.map((day, dayIndex) => {\n                const dayData = groupedData[day];\n                const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n                let currentY = config.height - config.padding.bottom;\n\n                return (\n                  <g key={day}>\n                    {exerciseTypes.map(type => {\n                      const minutes = Number(dayData[type.key]) || 0;\n                      if (minutes <= 0) return null;\n\n                      const segmentHeight = (minutes / maxDuration) * chartHeight;\n                      const segmentY = currentY - segmentHeight;\n\n                      const segment = (\n                        <g key={type.key}>\n                          <rect\n                            x={x - config.barWidth / 2}\n                            y={segmentY}\n                            width={config.barWidth}\n                            height={segmentHeight}\n                            fill={type.color}\n                            className=\"data-bar\"\n                          >\n                            <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\n                          </rect>\n                          {/* Duration label inside the segment */}\n                          {segmentHeight >= 12 && (\n                            <text\n                              x={x}\n                              y={segmentY + segmentHeight / 2}\n                              textAnchor=\"middle\"\n                              fontSize={isExpanded ? 8 : 6}\n                              fill=\"white\"\n                              className=\"duration-label\"\n                              style={{ \n                                textShadow: '0.5px 0.5px 1px rgba(0,0,0,0.5)',\n                                fontWeight: 'normal'\n                              }}\n                            >\n                              {Math.round(minutes)}\n                            </text>\n                          )}\n                        </g>\n                      );\n\n                      currentY = segmentY;\n                      return segment;\n                    })}\n                  </g>\n                );\n              })}\n            </g>\n          </svg>\n        </div>\n        \n        <Legend title=\"Exercise Type\" items={exerciseLegendItems} orientation=\"horizontal\" size=\"medium\" isExpanded={isExpanded} />\n\n        {/* Show summary for physician view only */}\n        {viewMode === 'physician' && weekSummary && (\n          <div className=\"chart-summary\">\n            <h4>Week Summary</h4>\n            <div className=\"summary-stats\">\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Total Exercise:</span>\n                <span className=\"stat-value\">\n                  {weekSummary.totalMinutes} minutes\n                </span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Daily Average:</span>\n                <span className=\"stat-value\">\n                  {weekSummary.avgMinutesPerDay} minutes/day\n                </span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Exercise Days:</span>\n                <span className=\"stat-value\">\n                  {weekSummary.daysWithExercise}/7 days\n                </span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Adequate Exercise:</span>\n                <span className=\"stat-value\">\n                  {weekSummary.daysWithAdequateExercise}/7 days (30+ min)\n                </span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Most Common:</span>\n                <span className=\"stat-value\">\n                  {exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)?.emoji} {weekSummary.mostCommonExercise} ({weekSummary.mostCommonExerciseMinutes} min)\n                </span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Avg Session:</span>\n                <span className=\"stat-value\">\n                  {weekSummary.avgSessionLength} minutes\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n  );\n};\n\nexport default ExerciseChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}