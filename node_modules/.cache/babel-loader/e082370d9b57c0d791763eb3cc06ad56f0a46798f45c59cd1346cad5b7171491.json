{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import DataService from'../services/dataService';/**\n * Enhanced custom hook for loading and managing patient data\n * @param {string} patientId - The patient identifier\n * @returns {Object} Object containing data, loading state, error state, and utility functions\n */const usePatientData=patientId=>{const[data,setData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[lastFetchedId,setLastFetchedId]=useState(null);const loadData=useCallback(async id=>{// Don't reload if we already have data for this patient\nif(id===lastFetchedId&&data&&!error){return;}if(!id||typeof id!=='string'){setLoading(false);setData(null);setError(null);return;}try{setLoading(true);setError(null);const patientData=await DataService.getPatientData(id);if(patientData&&patientData.patientInfo){setData(patientData);setLastFetchedId(id);}else{throw new Error('Invalid data structure received');}}catch(err){const errorMessage=err instanceof Error?err.message:'Unknown error occurred';setError(errorMessage);setData(null);console.error('Error loading patient data:',err);}finally{setLoading(false);}},[lastFetchedId,data,error]);useEffect(()=>{if(patientId){loadData(patientId);}else{setData(null);setError(null);setLastFetchedId(null);setLoading(false);}},[patientId,loadData]);const refetch=useCallback(()=>{if(patientId){setLastFetchedId(null);// Force reload\nloadData(patientId);}},[patientId,loadData]);const clearData=useCallback(()=>{setData(null);setError(null);setLastFetchedId(null);setLoading(false);},[]);return{// Core data\ndata,loading,error,// Patient info\npatientInfo:(data===null||data===void 0?void 0:data.patientInfo)||null,// Individual data types for convenience\nglucoseData:(data===null||data===void 0?void 0:data.glucoseData)||[],bloodPressureData:(data===null||data===void 0?void 0:data.bloodPressureData)||[],exerciseData:(data===null||data===void 0?void 0:data.exerciseData)||[],moodData:(data===null||data===void 0?void 0:data.moodData)||[],painData:(data===null||data===void 0?void 0:data.painData)||[],mealData:(data===null||data===void 0?void 0:data.mealData)||[],sleepData:(data===null||data===void 0?void 0:data.sleepData)||[],// Actions\nrefetch,clearData,// Helper flags\nhasData:!!data,isEmpty:!loading&&!error&&!data,isError:!!error,// Data availability flags\nhasGlucoseData:((data===null||data===void 0?void 0:data.glucoseData)||[]).length>0,hasBloodPressureData:((data===null||data===void 0?void 0:data.bloodPressureData)||[]).length>0,hasExerciseData:((data===null||data===void 0?void 0:data.exerciseData)||[]).length>0,hasMoodData:((data===null||data===void 0?void 0:data.moodData)||[]).length>0,hasPainData:((data===null||data===void 0?void 0:data.painData)||[]).length>0,hasSleepData:((data===null||data===void 0?void 0:data.sleepData)||[]).length>0,hasMealData:((data===null||data===void 0?void 0:data.mealData)||[]).length>0};};export default usePatientData;","map":{"version":3,"names":["useState","useEffect","useCallback","DataService","usePatientData","patientId","data","setData","loading","setLoading","error","setError","lastFetchedId","setLastFetchedId","loadData","id","patientData","getPatientData","patientInfo","Error","err","errorMessage","message","console","refetch","clearData","glucoseData","bloodPressureData","exerciseData","moodData","painData","mealData","sleepData","hasData","isEmpty","isError","hasGlucoseData","length","hasBloodPressureData","hasExerciseData","hasMoodData","hasPainData","hasSleepData","hasMealData"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/usePatientData.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport DataService from '../services/dataService';\n\n/**\n * Enhanced custom hook for loading and managing patient data\n * @param {string} patientId - The patient identifier\n * @returns {Object} Object containing data, loading state, error state, and utility functions\n */\nconst usePatientData = (patientId) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetchedId, setLastFetchedId] = useState(null);\n\n  const loadData = useCallback(async (id) => {\n    // Don't reload if we already have data for this patient\n    if (id === lastFetchedId && data && !error) {\n      return;\n    }\n\n    if (!id || typeof id !== 'string') {\n      setLoading(false);\n      setData(null);\n      setError(null);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const patientData = await DataService.getPatientData(id);\n      \n      if (patientData && patientData.patientInfo) {\n        setData(patientData);\n        setLastFetchedId(id);\n      } else {\n        throw new Error('Invalid data structure received');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      setData(null);\n      console.error('Error loading patient data:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [lastFetchedId, data, error]);\n\n  useEffect(() => {\n    if (patientId) {\n      loadData(patientId);\n    } else {\n      setData(null);\n      setError(null);\n      setLastFetchedId(null);\n      setLoading(false);\n    }\n  }, [patientId, loadData]);\n\n  const refetch = useCallback(() => {\n    if (patientId) {\n      setLastFetchedId(null); // Force reload\n      loadData(patientId);\n    }\n  }, [patientId, loadData]);\n\n  const clearData = useCallback(() => {\n    setData(null);\n    setError(null);\n    setLastFetchedId(null);\n    setLoading(false);\n  }, []);\n\n  return {\n    // Core data\n    data,\n    loading,\n    error,\n    \n    // Patient info\n    patientInfo: data?.patientInfo || null,\n    \n    // Individual data types for convenience\n    glucoseData: data?.glucoseData || [],\n    bloodPressureData: data?.bloodPressureData || [],\n    exerciseData: data?.exerciseData || [],\n    moodData: data?.moodData || [],\n    painData: data?.painData || [],\n    mealData: data?.mealData || [],\n    sleepData: data?.sleepData || [],\n    \n    // Actions\n    refetch,\n    clearData,\n    \n    // Helper flags\n    hasData: !!data,\n    isEmpty: !loading && !error && !data,\n    isError: !!error,\n    \n    // Data availability flags\n    hasGlucoseData: (data?.glucoseData || []).length > 0,\n    hasBloodPressureData: (data?.bloodPressureData || []).length > 0,\n    hasExerciseData: (data?.exerciseData || []).length > 0,\n    hasMoodData: (data?.moodData || []).length > 0,\n    hasPainData: (data?.painData || []).length > 0,\n    hasSleepData: (data?.sleepData || []).length > 0,\n    hasMealData: (data?.mealData || []).length > 0\n  };\n};\n\nexport default usePatientData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}