{"ast":null,"code":"var _s = $RefreshSig$();\n/*\n useVisualizations.js - Visualization Management Hook\n \n This hook manages the visualization system across dashboard types by creating and\n maintaining visualization component registry, determining available visualizations\n based on data availability, managing visualization selection and ordering, and\n supporting both patient and physician dashboard configurations.\n \n Architecture:\n - Uses React hooks for state management and memoization\n - Implements component registry pattern for dynamic rendering\n - Provides data-driven visualization availability\n - Supports multiple dashboard configurations\n \n Visualization Types:\n - glucose: Blood glucose monitoring charts\n - bloodPressure: Blood pressure tracking charts\n - exercise: Physical activity visualization\n - mood: Mood calendar and tracking\n - pain: Pain reporting with body mapping\n - mealContents: Nutritional intake tracking\n - sleep: Sleep pattern analysis\n \n Component Registry:\n - Maps visualization types to React components\n - Provides configuration for each visualization type\n - Handles component imports and lazy loading\n - Maintains consistent component interfaces\n \n Data Availability:\n - Checks data availability for each visualization type\n - Filters visualizations based on actual data presence\n - Provides fallback for missing data scenarios\n - Ensures only relevant visualizations are shown\n */\n\nimport React, { useState, useMemo } from 'react';\nimport { VISUALIZATION_CONFIG, DASHBOARD_CONFIG } from '../constants';\n\n// Import all chart components\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\nimport ExerciseProgressChart from '../components/patient_charts/ExerciseProgressChart';\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\nimport PainChart from '../components/patient_charts/PainChart';\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\nimport SleepChart from '../components/patient_charts/SleepChart';\n\n/*\n Shared hook for managing visualizations across different dashboard types\n \n @param {string} viewMode - 'patient' or 'physician'\n @param {Object} data - Patient data object\n @returns {Object} Visualization state and utilities\n */\nconst useVisualizations = (viewMode, data) => {\n  _s();\n  const config = DASHBOARD_CONFIG[viewMode];\n\n  // Create visualization registry with components\n  const allVisualizations = useMemo(() => ({\n    pain: {\n      ...VISUALIZATION_CONFIG.pain,\n      component: PainChart\n    },\n    bloodPressure: {\n      ...VISUALIZATION_CONFIG.bloodPressure,\n      component: BloodPressureChart\n    },\n    glucose: {\n      ...VISUALIZATION_CONFIG.glucose,\n      component: GlucoseChart\n    },\n    exercise: {\n      ...VISUALIZATION_CONFIG.exercise,\n      component: ExerciseChart\n    },\n    mealContents: {\n      ...VISUALIZATION_CONFIG.mealContents,\n      component: MealContentsChart\n    },\n    mood: {\n      ...VISUALIZATION_CONFIG.mood,\n      component: MoodCalendar\n    },\n    sleep: {\n      ...VISUALIZATION_CONFIG.sleep,\n      component: SleepChart\n    }\n  }), []);\n\n  // Determine available visualizations based on data\n  const availableVisualizations = useMemo(() => {\n    if (!data) return {};\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\n      const dataKey = `${key}Data`;\n      // Special case for meal contents\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\n        acc[key] = viz;\n      } else if (data[dataKey] && data[dataKey].length > 0) {\n        acc[key] = viz;\n      }\n      return acc;\n    }, {});\n  }, [data, allVisualizations]);\n\n  // Create dynamic selected visualizations based on available ones\n  const selectedVisualizations = useMemo(() => {\n    const availableKeys = Object.keys(availableVisualizations);\n\n    // Create chart IDs for all available visualizations in the same order as they appear\n    const chartIds = availableKeys.map((_, index) => `${viewMode}-chart-${index}`);\n    return chartIds.reduce((acc, chartId, index) => {\n      acc[chartId] = availableKeys[index];\n      return acc;\n    }, {});\n  }, [availableVisualizations, viewMode]);\n  const handleVisualizationChange = (chartId, visualizationType) => {\n    // This function is kept for compatibility but may not be needed\n    // since we're now showing all available visualizations\n  };\n  return {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange,\n    config\n  };\n};\n_s(useVisualizations, \"RqGwn3LU1AqjwR3dTYu3lB9gvno=\");\nexport default useVisualizations;","map":{"version":3,"names":["React","useState","useMemo","VISUALIZATION_CONFIG","DASHBOARD_CONFIG","GlucoseChart","BloodPressureChart","ExerciseChart","ExerciseProgressChart","MoodCalendar","PainChart","MealContentsChart","SleepChart","useVisualizations","viewMode","data","_s","config","allVisualizations","pain","component","bloodPressure","glucose","exercise","mealContents","mood","sleep","availableVisualizations","Object","entries","reduce","acc","key","viz","dataKey","length","selectedVisualizations","availableKeys","keys","chartIds","map","_","index","chartId","handleVisualizationChange","visualizationType"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/useVisualizations.js"],"sourcesContent":["/*\n useVisualizations.js - Visualization Management Hook\n \n This hook manages the visualization system across dashboard types by creating and\n maintaining visualization component registry, determining available visualizations\n based on data availability, managing visualization selection and ordering, and\n supporting both patient and physician dashboard configurations.\n \n Architecture:\n - Uses React hooks for state management and memoization\n - Implements component registry pattern for dynamic rendering\n - Provides data-driven visualization availability\n - Supports multiple dashboard configurations\n \n Visualization Types:\n - glucose: Blood glucose monitoring charts\n - bloodPressure: Blood pressure tracking charts\n - exercise: Physical activity visualization\n - mood: Mood calendar and tracking\n - pain: Pain reporting with body mapping\n - mealContents: Nutritional intake tracking\n - sleep: Sleep pattern analysis\n \n Component Registry:\n - Maps visualization types to React components\n - Provides configuration for each visualization type\n - Handles component imports and lazy loading\n - Maintains consistent component interfaces\n \n Data Availability:\n - Checks data availability for each visualization type\n - Filters visualizations based on actual data presence\n - Provides fallback for missing data scenarios\n - Ensures only relevant visualizations are shown\n */\n\nimport React, { useState, useMemo } from 'react';\nimport { VISUALIZATION_CONFIG, DASHBOARD_CONFIG } from '../constants';\n\n// Import all chart components\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\nimport ExerciseProgressChart from '../components/patient_charts/ExerciseProgressChart';\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\nimport PainChart from '../components/patient_charts/PainChart';\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\nimport SleepChart from '../components/patient_charts/SleepChart';\n\n/*\n Shared hook for managing visualizations across different dashboard types\n \n @param {string} viewMode - 'patient' or 'physician'\n @param {Object} data - Patient data object\n @returns {Object} Visualization state and utilities\n */\nconst useVisualizations = (viewMode, data) => {\n  const config = DASHBOARD_CONFIG[viewMode];\n  \n  // Create visualization registry with components\n  const allVisualizations = useMemo(() => ({\n    pain: { ...VISUALIZATION_CONFIG.pain, component: PainChart },\n    bloodPressure: { ...VISUALIZATION_CONFIG.bloodPressure, component: BloodPressureChart },\n    glucose: { ...VISUALIZATION_CONFIG.glucose, component: GlucoseChart },\n    exercise: { ...VISUALIZATION_CONFIG.exercise, component: ExerciseChart },\n    mealContents: { ...VISUALIZATION_CONFIG.mealContents, component: MealContentsChart },\n    mood: { ...VISUALIZATION_CONFIG.mood, component: MoodCalendar },\n    sleep: { ...VISUALIZATION_CONFIG.sleep, component: SleepChart },\n  }), []);\n\n  // Determine available visualizations based on data\n  const availableVisualizations = useMemo(() => {\n    if (!data) return {};\n\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\n      const dataKey = `${key}Data`;\n      // Special case for meal contents\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\n        acc[key] = viz;\n      } else if (data[dataKey] && data[dataKey].length > 0) {\n        acc[key] = viz;\n      }\n      return acc;\n    }, {});\n  }, [data, allVisualizations]);\n\n  // Create dynamic selected visualizations based on available ones\n  const selectedVisualizations = useMemo(() => {\n    const availableKeys = Object.keys(availableVisualizations);\n    \n    // Create chart IDs for all available visualizations in the same order as they appear\n    const chartIds = availableKeys.map((_, index) => `${viewMode}-chart-${index}`);\n    \n    return chartIds.reduce((acc, chartId, index) => {\n      acc[chartId] = availableKeys[index];\n      return acc;\n    }, {});\n  }, [availableVisualizations, viewMode]);\n\n  const handleVisualizationChange = (chartId, visualizationType) => {\n    // This function is kept for compatibility but may not be needed\n    // since we're now showing all available visualizations\n  };\n\n  return {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange,\n    config\n  };\n};\n\nexport default useVisualizations;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}