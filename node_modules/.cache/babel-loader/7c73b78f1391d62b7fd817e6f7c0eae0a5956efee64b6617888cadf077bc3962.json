{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport usePatientData from '../hooks/usePatientDataImproved';\nimport Card from './ui/Card';\nimport LoadingSpinner from './ui/LoadingSpinner';\nimport ErrorMessage from './ui/ErrorMessage';\n\n// Import unified chart components\nimport GlucoseChart from './charts/GlucoseChart';\nimport BloodPressureChart from './charts/BloodPressureChart';\nimport ExerciseChart from './charts/ExerciseChart';\nimport MoodCalendar from './charts/MoodCalendar';\nimport PainChart from './charts/PainChart';\nimport SleepChart from './charts/SleepChart';\nimport MealChart from './charts/MealChart';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CHART_TYPES = {\n  glucose: {\n    name: 'Blood Glucose',\n    component: GlucoseChart,\n    icon: '🩸'\n  },\n  bloodPressure: {\n    name: 'Blood Pressure',\n    component: BloodPressureChart,\n    icon: '❤️'\n  },\n  exercise: {\n    name: 'Exercise',\n    component: ExerciseChart,\n    icon: '🏃'\n  },\n  mood: {\n    name: 'Mood',\n    component: MoodCalendar,\n    icon: '😊'\n  },\n  pain: {\n    name: 'Pain',\n    component: PainChart,\n    icon: '😣'\n  },\n  sleep: {\n    name: 'Sleep',\n    component: SleepChart,\n    icon: '😴'\n  },\n  meals: {\n    name: 'Meal Contents',\n    component: MealChart,\n    icon: '🍽️'\n  }\n};\n\n/**\r\n * Unified Dashboard component that works for both Patient and Physician views\r\n * \r\n * @param {string} patientId - Patient identifier\r\n * @param {string} viewMode - 'patient' or 'physician'\r\n */\nfunction Dashboard({\n  patientId,\n  viewMode = 'patient'\n}) {\n  _s();\n  const {\n    data,\n    loading,\n    error,\n    retry\n  } = usePatientData(patientId);\n\n  // Determine available visualizations based on data\n  const availableVisualizations = useMemo(() => {\n    if (!data) return {};\n    return Object.entries(CHART_TYPES).reduce((acc, [key, config]) => {\n      const dataKey = `${key}Data`;\n      // Special case for meal contents\n      if (key === 'meals' && data.mealData && data.mealData.length > 0) {\n        acc[key] = config;\n      } else if (data[dataKey] && data[dataKey].length > 0) {\n        acc[key] = config;\n      }\n      return acc;\n    }, {});\n  }, [data]);\n\n  // Chart selection logic based on view mode\n  const getDefaultCharts = () => {\n    const availableKeys = Object.keys(availableVisualizations);\n    if (viewMode === 'physician') {\n      // Physician view: show all available charts\n      const defaultOrder = ['glucose', 'bloodPressure', 'exercise', 'sleep', 'mood', 'pain', 'meals'];\n      const orderedAvailable = defaultOrder.filter(key => availableKeys.includes(key));\n      const remaining = availableKeys.filter(key => !orderedAvailable.includes(key));\n      return [...orderedAvailable, ...remaining];\n    } else {\n      // Patient view: show first 3 available charts\n      return availableKeys.slice(0, 3);\n    }\n  };\n  const [selectedCharts, setSelectedCharts] = useState([]);\n  const [expandedChart, setExpandedChart] = useState(null);\n\n  // Update selected charts when available visualizations change\n  useEffect(() => {\n    if (Object.keys(availableVisualizations).length > 0) {\n      setSelectedCharts(getDefaultCharts());\n    }\n  }, [availableVisualizations, viewMode]);\n\n  // Debug information\n  console.log('🔍 Dashboard render:', {\n    patientId,\n    viewMode,\n    loading,\n    error,\n    data,\n    availableVisualizations\n  });\n\n  // Loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(LoadingSpinner, {\n        message: `Loading ${viewMode} dashboard for ${patientId}...`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '20px',\n          textAlign: 'center',\n          color: '#666'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Debug: Loading state = \", loading ? 'true' : 'false']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n        title: \"Failed to load patient data\",\n        message: error,\n        onRetry: retryLoad,\n        type: \"error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '20px',\n          textAlign: 'center',\n          color: '#666'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Debug: Error = \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n  // No data available\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        title: \"No Data Available\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"No health data is available for patient \", patientId, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Debug: data = \", data ? 'exists' : 'null']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Data exists but no visualizations\n  if (Object.keys(availableVisualizations).length === 0) {\n    var _data$glucoseData;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        title: \"Data Available but No Visualizations\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Patient data loaded but no charts available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Debug: data keys = \", Object.keys(data || {}).join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Debug: glucose data length = \", (data === null || data === void 0 ? void 0 : (_data$glucoseData = data.glucoseData) === null || _data$glucoseData === void 0 ? void 0 : _data$glucoseData.length) || 0]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  }\n  const handleChartToggle = chartType => {\n    setSelectedCharts(prev => prev.includes(chartType) ? prev.filter(type => type !== chartType) : [...prev, chartType]);\n  };\n  const handleExpandChart = chartType => {\n    setExpandedChart(expandedChart === chartType ? null : chartType);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `dashboard dashboard--${viewMode}`,\n    children: [data.patientInfo && /*#__PURE__*/_jsxDEV(Card, {\n      title: `📋 Patient Information`,\n      className: \"patient-info\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"patient-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"detail-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Patient ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this), \" \", data.patientInfo.patientId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), data.patientInfo.age && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"detail-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Age:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this), \" \", data.patientInfo.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this), data.patientInfo.gender && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"detail-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Gender:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this), \" \", data.patientInfo.gender]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }, this), data.patientInfo.conditions && data.patientInfo.conditions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"detail-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Conditions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this), \" \", data.patientInfo.conditions.join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), viewMode === 'patient' && /*#__PURE__*/_jsxDEV(Card, {\n      title: \"\\uD83D\\uDCCA Select Health Metrics to View\",\n      className: \"chart-selector\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-toggles\",\n        children: Object.entries(availableVisualizations).map(([key, config]) => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"chart-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedCharts.includes(key),\n            onChange: () => handleChartToggle(key)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"toggle-label\",\n            children: [config.icon, \" \", config.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 17\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `charts-grid charts-grid--${viewMode}`,\n      children: selectedCharts.map(chartType => {\n        const config = availableVisualizations[chartType];\n        if (!config) return null;\n        const ChartComponent = config.component;\n        const isExpanded = expandedChart === chartType;\n        return /*#__PURE__*/_jsxDEV(Card, {\n          title: `${config.icon} ${config.name}`,\n          className: `chart-card ${isExpanded ? 'chart-card--expanded' : ''}`,\n          headerActions: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleExpandChart(chartType),\n            className: \"expand-button\",\n            \"aria-label\": isExpanded ? 'Collapse chart' : 'Expand chart',\n            children: isExpanded ? '🗙' : '🔍'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 17\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            children: /*#__PURE__*/_jsxDEV(ChartComponent, {\n              patientId: patientId,\n              data: data,\n              viewMode: viewMode,\n              isExpanded: isExpanded\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this)\n        }, chartType, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), viewMode === 'physician' && /*#__PURE__*/_jsxDEV(Card, {\n      title: \"\\uD83D\\uDCC8 Clinical Summary\",\n      className: \"clinical-summary\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Data Period:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), \" Last 31 days\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Available Metrics:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this), \" \", Object.keys(availableVisualizations).length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Last Updated:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this), \" \", new Date().toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"tkXHMjlUaRHR/0TNPBkk5JzTPIE=\", false, function () {\n  return [usePatientData];\n});\n_c = Dashboard;\nDashboard.propTypes = {\n  patientId: PropTypes.string.isRequired,\n  viewMode: PropTypes.oneOf(['patient', 'physician'])\n};\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","PropTypes","usePatientData","Card","LoadingSpinner","ErrorMessage","GlucoseChart","BloodPressureChart","ExerciseChart","MoodCalendar","PainChart","SleepChart","MealChart","jsxDEV","_jsxDEV","CHART_TYPES","glucose","name","component","icon","bloodPressure","exercise","mood","pain","sleep","meals","Dashboard","patientId","viewMode","_s","data","loading","error","retry","availableVisualizations","Object","entries","reduce","acc","key","config","dataKey","mealData","length","getDefaultCharts","availableKeys","keys","defaultOrder","orderedAvailable","filter","includes","remaining","slice","selectedCharts","setSelectedCharts","expandedChart","setExpandedChart","console","log","className","children","message","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","textAlign","color","title","onRetry","retryLoad","type","_data$glucoseData","join","glucoseData","handleChartToggle","chartType","prev","handleExpandChart","patientInfo","age","gender","conditions","map","checked","onChange","ChartComponent","isExpanded","headerActions","onClick","Date","toLocaleDateString","_c","propTypes","string","isRequired","oneOf","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport usePatientData from '../hooks/usePatientDataImproved';\r\nimport Card from './ui/Card';\r\nimport LoadingSpinner from './ui/LoadingSpinner';\r\nimport ErrorMessage from './ui/ErrorMessage';\r\n\r\n// Import unified chart components\r\nimport GlucoseChart from './charts/GlucoseChart';\r\nimport BloodPressureChart from './charts/BloodPressureChart';\r\nimport ExerciseChart from './charts/ExerciseChart';\r\nimport MoodCalendar from './charts/MoodCalendar';\r\nimport PainChart from './charts/PainChart';\r\nimport SleepChart from './charts/SleepChart';\r\nimport MealChart from './charts/MealChart';\r\n\r\nimport './Dashboard.css';\r\n\r\nconst CHART_TYPES = {\r\n  glucose: { name: 'Blood Glucose', component: GlucoseChart, icon: '🩸' },\r\n  bloodPressure: { name: 'Blood Pressure', component: BloodPressureChart, icon: '❤️' },\r\n  exercise: { name: 'Exercise', component: ExerciseChart, icon: '🏃' },\r\n  mood: { name: 'Mood', component: MoodCalendar, icon: '😊' },\r\n  pain: { name: 'Pain', component: PainChart, icon: '😣' },\r\n  sleep: { name: 'Sleep', component: SleepChart, icon: '😴' },\r\n  meals: { name: 'Meal Contents', component: MealChart, icon: '🍽️' }\r\n};\r\n\r\n/**\r\n * Unified Dashboard component that works for both Patient and Physician views\r\n * \r\n * @param {string} patientId - Patient identifier\r\n * @param {string} viewMode - 'patient' or 'physician'\r\n */\r\nfunction Dashboard({ patientId, viewMode = 'patient' }) {\r\n  const { data, loading, error, retry } = usePatientData(patientId);\r\n  \r\n  // Determine available visualizations based on data\r\n  const availableVisualizations = useMemo(() => {\r\n    if (!data) return {};\r\n\r\n    return Object.entries(CHART_TYPES).reduce((acc, [key, config]) => {\r\n      const dataKey = `${key}Data`;\r\n      // Special case for meal contents\r\n      if (key === 'meals' && data.mealData && data.mealData.length > 0) {\r\n        acc[key] = config;\r\n      } else if (data[dataKey] && data[dataKey].length > 0) {\r\n        acc[key] = config;\r\n      }\r\n      return acc;\r\n    }, {});\r\n  }, [data]);\r\n  \r\n  // Chart selection logic based on view mode\r\n  const getDefaultCharts = () => {\r\n    const availableKeys = Object.keys(availableVisualizations);\r\n    \r\n    if (viewMode === 'physician') {\r\n      // Physician view: show all available charts\r\n      const defaultOrder = ['glucose', 'bloodPressure', 'exercise', 'sleep', 'mood', 'pain', 'meals'];\r\n      const orderedAvailable = defaultOrder.filter(key => availableKeys.includes(key));\r\n      const remaining = availableKeys.filter(key => !orderedAvailable.includes(key));\r\n      return [...orderedAvailable, ...remaining];\r\n    } else {\r\n      // Patient view: show first 3 available charts\r\n      return availableKeys.slice(0, 3);\r\n    }\r\n  };\r\n\r\n  const [selectedCharts, setSelectedCharts] = useState([]);\r\n  const [expandedChart, setExpandedChart] = useState(null);\r\n  \r\n  // Update selected charts when available visualizations change\r\n  useEffect(() => {\r\n    if (Object.keys(availableVisualizations).length > 0) {\r\n      setSelectedCharts(getDefaultCharts());\r\n    }\r\n  }, [availableVisualizations, viewMode]);\r\n\r\n  // Debug information\r\n  console.log('🔍 Dashboard render:', { patientId, viewMode, loading, error, data, availableVisualizations });\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <LoadingSpinner message={`Loading ${viewMode} dashboard for ${patientId}...`} />\r\n        <div style={{ padding: '20px', textAlign: 'center', color: '#666' }}>\r\n          <p>Debug: Loading state = {loading ? 'true' : 'false'}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <ErrorMessage \r\n          title=\"Failed to load patient data\"\r\n          message={error}\r\n          onRetry={retryLoad}\r\n          type=\"error\"\r\n        />\r\n        <div style={{ padding: '20px', textAlign: 'center', color: '#666' }}>\r\n          <p>Debug: Error = {error}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // No data available\r\n  if (!data) {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <Card title=\"No Data Available\">\r\n          <p>No health data is available for patient {patientId}.</p>\r\n          <p>Debug: data = {data ? 'exists' : 'null'}</p>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Data exists but no visualizations\r\n  if (Object.keys(availableVisualizations).length === 0) {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <Card title=\"Data Available but No Visualizations\">\r\n          <p>Patient data loaded but no charts available.</p>\r\n          <p>Debug: data keys = {Object.keys(data || {}).join(', ')}</p>\r\n          <p>Debug: glucose data length = {data?.glucoseData?.length || 0}</p>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleChartToggle = (chartType) => {\r\n    setSelectedCharts(prev => \r\n      prev.includes(chartType) \r\n        ? prev.filter(type => type !== chartType)\r\n        : [...prev, chartType]\r\n    );\r\n  };\r\n\r\n  const handleExpandChart = (chartType) => {\r\n    setExpandedChart(expandedChart === chartType ? null : chartType);\r\n  };\r\n\r\n  return (\r\n    <div className={`dashboard dashboard--${viewMode}`}>\r\n      {/* Patient Info */}\r\n      {data.patientInfo && (\r\n        <Card \r\n          title={`📋 Patient Information`}\r\n          className=\"patient-info\"\r\n        >\r\n          <div className=\"patient-details\">\r\n            <div className=\"detail-item\">\r\n              <strong>Patient ID:</strong> {data.patientInfo.patientId}\r\n            </div>\r\n            {data.patientInfo.age && (\r\n              <div className=\"detail-item\">\r\n                <strong>Age:</strong> {data.patientInfo.age}\r\n              </div>\r\n            )}\r\n            {data.patientInfo.gender && (\r\n              <div className=\"detail-item\">\r\n                <strong>Gender:</strong> {data.patientInfo.gender}\r\n              </div>\r\n            )}\r\n            {data.patientInfo.conditions && data.patientInfo.conditions.length > 0 && (\r\n              <div className=\"detail-item\">\r\n                <strong>Conditions:</strong> {data.patientInfo.conditions.join(', ')}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Chart Selection (for patient view) */}\r\n      {viewMode === 'patient' && (\r\n        <Card \r\n          title=\"📊 Select Health Metrics to View\"\r\n          className=\"chart-selector\"\r\n        >\r\n          <div className=\"chart-toggles\">\r\n            {Object.entries(availableVisualizations).map(([key, config]) => (\r\n              <label key={key} className=\"chart-toggle\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedCharts.includes(key)}\r\n                  onChange={() => handleChartToggle(key)}\r\n                />\r\n                <span className=\"toggle-label\">\r\n                  {config.icon} {config.name}\r\n                </span>\r\n              </label>\r\n            ))}\r\n          </div>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Charts Grid */}\r\n      <div className={`charts-grid charts-grid--${viewMode}`}>\r\n        {selectedCharts.map(chartType => {\r\n          const config = availableVisualizations[chartType];\r\n          if (!config) return null;\r\n\r\n          const ChartComponent = config.component;\r\n          const isExpanded = expandedChart === chartType;\r\n\r\n          return (\r\n            <Card\r\n              key={chartType}\r\n              title={`${config.icon} ${config.name}`}\r\n              className={`chart-card ${isExpanded ? 'chart-card--expanded' : ''}`}\r\n              headerActions={\r\n                <button\r\n                  onClick={() => handleExpandChart(chartType)}\r\n                  className=\"expand-button\"\r\n                  aria-label={isExpanded ? 'Collapse chart' : 'Expand chart'}\r\n                >\r\n                  {isExpanded ? '🗙' : '🔍'}\r\n                </button>\r\n              }\r\n            >\r\n              <div className=\"chart-container\">\r\n                <ChartComponent \r\n                  patientId={patientId}\r\n                  data={data}\r\n                  viewMode={viewMode}\r\n                  isExpanded={isExpanded}\r\n                />\r\n              </div>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Summary for physician view */}\r\n      {viewMode === 'physician' && (\r\n        <Card \r\n          title=\"📈 Clinical Summary\"\r\n          className=\"clinical-summary\"\r\n        >\r\n          <div className=\"summary-grid\">\r\n            <div className=\"summary-item\">\r\n              <strong>Data Period:</strong> Last 31 days\r\n            </div>\r\n            <div className=\"summary-item\">\r\n              <strong>Available Metrics:</strong> {Object.keys(availableVisualizations).length}\r\n            </div>\r\n            <div className=\"summary-item\">\r\n              <strong>Last Updated:</strong> {new Date().toLocaleDateString()}\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nDashboard.propTypes = {\r\n  patientId: PropTypes.string.isRequired,\r\n  viewMode: PropTypes.oneOf(['patient', 'physician'])\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AAC3D,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,cAAc,MAAM,qBAAqB;AAChD,OAAOC,YAAY,MAAM,mBAAmB;;AAE5C;AACA,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,kBAAkB,MAAM,6BAA6B;AAC5D,OAAOC,aAAa,MAAM,wBAAwB;AAClD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,SAAS,MAAM,oBAAoB;AAE1C,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE;IAAEC,IAAI,EAAE,eAAe;IAAEC,SAAS,EAAEZ,YAAY;IAAEa,IAAI,EAAE;EAAK,CAAC;EACvEC,aAAa,EAAE;IAAEH,IAAI,EAAE,gBAAgB;IAAEC,SAAS,EAAEX,kBAAkB;IAAEY,IAAI,EAAE;EAAK,CAAC;EACpFE,QAAQ,EAAE;IAAEJ,IAAI,EAAE,UAAU;IAAEC,SAAS,EAAEV,aAAa;IAAEW,IAAI,EAAE;EAAK,CAAC;EACpEG,IAAI,EAAE;IAAEL,IAAI,EAAE,MAAM;IAAEC,SAAS,EAAET,YAAY;IAAEU,IAAI,EAAE;EAAK,CAAC;EAC3DI,IAAI,EAAE;IAAEN,IAAI,EAAE,MAAM;IAAEC,SAAS,EAAER,SAAS;IAAES,IAAI,EAAE;EAAK,CAAC;EACxDK,KAAK,EAAE;IAAEP,IAAI,EAAE,OAAO;IAAEC,SAAS,EAAEP,UAAU;IAAEQ,IAAI,EAAE;EAAK,CAAC;EAC3DM,KAAK,EAAE;IAAER,IAAI,EAAE,eAAe;IAAEC,SAAS,EAAEN,SAAS;IAAEO,IAAI,EAAE;EAAM;AACpE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,SAASA,CAAC;EAAEC,SAAS;EAAEC,QAAQ,GAAG;AAAU,CAAC,EAAE;EAAAC,EAAA;EACtD,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAG/B,cAAc,CAACyB,SAAS,CAAC;;EAEjE;EACA,MAAMO,uBAAuB,GAAGnC,OAAO,CAAC,MAAM;IAC5C,IAAI,CAAC+B,IAAI,EAAE,OAAO,CAAC,CAAC;IAEpB,OAAOK,MAAM,CAACC,OAAO,CAACrB,WAAW,CAAC,CAACsB,MAAM,CAAC,CAACC,GAAG,EAAE,CAACC,GAAG,EAAEC,MAAM,CAAC,KAAK;MAChE,MAAMC,OAAO,GAAG,GAAGF,GAAG,MAAM;MAC5B;MACA,IAAIA,GAAG,KAAK,OAAO,IAAIT,IAAI,CAACY,QAAQ,IAAIZ,IAAI,CAACY,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;QAChEL,GAAG,CAACC,GAAG,CAAC,GAAGC,MAAM;MACnB,CAAC,MAAM,IAAIV,IAAI,CAACW,OAAO,CAAC,IAAIX,IAAI,CAACW,OAAO,CAAC,CAACE,MAAM,GAAG,CAAC,EAAE;QACpDL,GAAG,CAACC,GAAG,CAAC,GAAGC,MAAM;MACnB;MACA,OAAOF,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMc,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,aAAa,GAAGV,MAAM,CAACW,IAAI,CAACZ,uBAAuB,CAAC;IAE1D,IAAIN,QAAQ,KAAK,WAAW,EAAE;MAC5B;MACA,MAAMmB,YAAY,GAAG,CAAC,SAAS,EAAE,eAAe,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;MAC/F,MAAMC,gBAAgB,GAAGD,YAAY,CAACE,MAAM,CAACV,GAAG,IAAIM,aAAa,CAACK,QAAQ,CAACX,GAAG,CAAC,CAAC;MAChF,MAAMY,SAAS,GAAGN,aAAa,CAACI,MAAM,CAACV,GAAG,IAAI,CAACS,gBAAgB,CAACE,QAAQ,CAACX,GAAG,CAAC,CAAC;MAC9E,OAAO,CAAC,GAAGS,gBAAgB,EAAE,GAAGG,SAAS,CAAC;IAC5C,CAAC,MAAM;MACL;MACA,OAAON,aAAa,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAClC;EACF,CAAC;EAED,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGxD,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACyD,aAAa,EAAEC,gBAAgB,CAAC,GAAG1D,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACAE,SAAS,CAAC,MAAM;IACd,IAAImC,MAAM,CAACW,IAAI,CAACZ,uBAAuB,CAAC,CAACS,MAAM,GAAG,CAAC,EAAE;MACnDW,iBAAiB,CAACV,gBAAgB,CAAC,CAAC,CAAC;IACvC;EACF,CAAC,EAAE,CAACV,uBAAuB,EAAEN,QAAQ,CAAC,CAAC;;EAEvC;EACA6B,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE;IAAE/B,SAAS;IAAEC,QAAQ;IAAEG,OAAO;IAAEC,KAAK;IAAEF,IAAI;IAAEI;EAAwB,CAAC,CAAC;;EAE3G;EACA,IAAIH,OAAO,EAAE;IACX,oBACEjB,OAAA;MAAK6C,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxB9C,OAAA,CAACV,cAAc;QAACyD,OAAO,EAAE,WAAWjC,QAAQ,kBAAkBD,SAAS;MAAM;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChFnD,OAAA;QAAKoD,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,SAAS,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAO,CAAE;QAAAT,QAAA,eAClE9C,OAAA;UAAA8C,QAAA,GAAG,yBAAuB,EAAC7B,OAAO,GAAG,MAAM,GAAG,OAAO;QAAA;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;;EAEA;EACA,IAAIjC,KAAK,EAAE;IACT,oBACElB,OAAA;MAAK6C,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxB9C,OAAA,CAACT,YAAY;QACXiE,KAAK,EAAC,6BAA6B;QACnCT,OAAO,EAAE7B,KAAM;QACfuC,OAAO,EAAEC,SAAU;QACnBC,IAAI,EAAC;MAAO;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eACFnD,OAAA;QAAKoD,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,SAAS,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAO,CAAE;QAAAT,QAAA,eAClE9C,OAAA;UAAA8C,QAAA,GAAG,iBAAe,EAAC5B,KAAK;QAAA;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;;EAEA;EACA,IAAI,CAACnC,IAAI,EAAE;IACT,oBACEhB,OAAA;MAAK6C,SAAS,EAAC,WAAW;MAAAC,QAAA,eACxB9C,OAAA,CAACX,IAAI;QAACmE,KAAK,EAAC,mBAAmB;QAAAV,QAAA,gBAC7B9C,OAAA;UAAA8C,QAAA,GAAG,0CAAwC,EAACjC,SAAS,EAAC,GAAC;QAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC3DnD,OAAA;UAAA8C,QAAA,GAAG,gBAAc,EAAC9B,IAAI,GAAG,QAAQ,GAAG,MAAM;QAAA;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAEV;;EAEA;EACA,IAAI9B,MAAM,CAACW,IAAI,CAACZ,uBAAuB,CAAC,CAACS,MAAM,KAAK,CAAC,EAAE;IAAA,IAAA+B,iBAAA;IACrD,oBACE5D,OAAA;MAAK6C,SAAS,EAAC,WAAW;MAAAC,QAAA,eACxB9C,OAAA,CAACX,IAAI;QAACmE,KAAK,EAAC,sCAAsC;QAAAV,QAAA,gBAChD9C,OAAA;UAAA8C,QAAA,EAAG;QAA4C;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACnDnD,OAAA;UAAA8C,QAAA,GAAG,qBAAmB,EAACzB,MAAM,CAACW,IAAI,CAAChB,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC6C,IAAI,CAAC,IAAI,CAAC;QAAA;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9DnD,OAAA;UAAA8C,QAAA,GAAG,+BAA6B,EAAC,CAAA9B,IAAI,aAAJA,IAAI,wBAAA4C,iBAAA,GAAJ5C,IAAI,CAAE8C,WAAW,cAAAF,iBAAA,uBAAjBA,iBAAA,CAAmB/B,MAAM,KAAI,CAAC;QAAA;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAEV;EAEA,MAAMY,iBAAiB,GAAIC,SAAS,IAAK;IACvCxB,iBAAiB,CAACyB,IAAI,IACpBA,IAAI,CAAC7B,QAAQ,CAAC4B,SAAS,CAAC,GACpBC,IAAI,CAAC9B,MAAM,CAACwB,IAAI,IAAIA,IAAI,KAAKK,SAAS,CAAC,GACvC,CAAC,GAAGC,IAAI,EAAED,SAAS,CACzB,CAAC;EACH,CAAC;EAED,MAAME,iBAAiB,GAAIF,SAAS,IAAK;IACvCtB,gBAAgB,CAACD,aAAa,KAAKuB,SAAS,GAAG,IAAI,GAAGA,SAAS,CAAC;EAClE,CAAC;EAED,oBACEhE,OAAA;IAAK6C,SAAS,EAAE,wBAAwB/B,QAAQ,EAAG;IAAAgC,QAAA,GAEhD9B,IAAI,CAACmD,WAAW,iBACfnE,OAAA,CAACX,IAAI;MACHmE,KAAK,EAAE,wBAAyB;MAChCX,SAAS,EAAC,cAAc;MAAAC,QAAA,eAExB9C,OAAA;QAAK6C,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B9C,OAAA;UAAK6C,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1B9C,OAAA;YAAA8C,QAAA,EAAQ;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACnC,IAAI,CAACmD,WAAW,CAACtD,SAAS;QAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD,CAAC,EACLnC,IAAI,CAACmD,WAAW,CAACC,GAAG,iBACnBpE,OAAA;UAAK6C,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1B9C,OAAA;YAAA8C,QAAA,EAAQ;UAAI;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACnC,IAAI,CAACmD,WAAW,CAACC,GAAG;QAAA;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CACN,EACAnC,IAAI,CAACmD,WAAW,CAACE,MAAM,iBACtBrE,OAAA;UAAK6C,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1B9C,OAAA;YAAA8C,QAAA,EAAQ;UAAO;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACnC,IAAI,CAACmD,WAAW,CAACE,MAAM;QAAA;UAAArB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CACN,EACAnC,IAAI,CAACmD,WAAW,CAACG,UAAU,IAAItD,IAAI,CAACmD,WAAW,CAACG,UAAU,CAACzC,MAAM,GAAG,CAAC,iBACpE7B,OAAA;UAAK6C,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1B9C,OAAA;YAAA8C,QAAA,EAAQ;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACnC,IAAI,CAACmD,WAAW,CAACG,UAAU,CAACT,IAAI,CAAC,IAAI,CAAC;QAAA;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACP,EAGArC,QAAQ,KAAK,SAAS,iBACrBd,OAAA,CAACX,IAAI;MACHmE,KAAK,EAAC,4CAAkC;MACxCX,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAE1B9C,OAAA;QAAK6C,SAAS,EAAC,eAAe;QAAAC,QAAA,EAC3BzB,MAAM,CAACC,OAAO,CAACF,uBAAuB,CAAC,CAACmD,GAAG,CAAC,CAAC,CAAC9C,GAAG,EAAEC,MAAM,CAAC,kBACzD1B,OAAA;UAAiB6C,SAAS,EAAC,cAAc;UAAAC,QAAA,gBACvC9C,OAAA;YACE2D,IAAI,EAAC,UAAU;YACfa,OAAO,EAAEjC,cAAc,CAACH,QAAQ,CAACX,GAAG,CAAE;YACtCgD,QAAQ,EAAEA,CAAA,KAAMV,iBAAiB,CAACtC,GAAG;UAAE;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CAAC,eACFnD,OAAA;YAAM6C,SAAS,EAAC,cAAc;YAAAC,QAAA,GAC3BpB,MAAM,CAACrB,IAAI,EAAC,GAAC,EAACqB,MAAM,CAACvB,IAAI;UAAA;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtB,CAAC;QAAA,GARG1B,GAAG;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASR,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACP,eAGDnD,OAAA;MAAK6C,SAAS,EAAE,4BAA4B/B,QAAQ,EAAG;MAAAgC,QAAA,EACpDP,cAAc,CAACgC,GAAG,CAACP,SAAS,IAAI;QAC/B,MAAMtC,MAAM,GAAGN,uBAAuB,CAAC4C,SAAS,CAAC;QACjD,IAAI,CAACtC,MAAM,EAAE,OAAO,IAAI;QAExB,MAAMgD,cAAc,GAAGhD,MAAM,CAACtB,SAAS;QACvC,MAAMuE,UAAU,GAAGlC,aAAa,KAAKuB,SAAS;QAE9C,oBACEhE,OAAA,CAACX,IAAI;UAEHmE,KAAK,EAAE,GAAG9B,MAAM,CAACrB,IAAI,IAAIqB,MAAM,CAACvB,IAAI,EAAG;UACvC0C,SAAS,EAAE,cAAc8B,UAAU,GAAG,sBAAsB,GAAG,EAAE,EAAG;UACpEC,aAAa,eACX5E,OAAA;YACE6E,OAAO,EAAEA,CAAA,KAAMX,iBAAiB,CAACF,SAAS,CAAE;YAC5CnB,SAAS,EAAC,eAAe;YACzB,cAAY8B,UAAU,GAAG,gBAAgB,GAAG,cAAe;YAAA7B,QAAA,EAE1D6B,UAAU,GAAG,IAAI,GAAG;UAAI;YAAA3B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnB,CACT;UAAAL,QAAA,eAED9C,OAAA;YAAK6C,SAAS,EAAC,iBAAiB;YAAAC,QAAA,eAC9B9C,OAAA,CAAC0E,cAAc;cACb7D,SAAS,EAAEA,SAAU;cACrBG,IAAI,EAAEA,IAAK;cACXF,QAAQ,EAAEA,QAAS;cACnB6D,UAAU,EAAEA;YAAW;cAAA3B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC;QAAC,GApBDa,SAAS;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAqBV,CAAC;MAEX,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAGLrC,QAAQ,KAAK,WAAW,iBACvBd,OAAA,CAACX,IAAI;MACHmE,KAAK,EAAC,+BAAqB;MAC3BX,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAE5B9C,OAAA;QAAK6C,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B9C,OAAA;UAAK6C,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B9C,OAAA;YAAA8C,QAAA,EAAQ;UAAY;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,iBAC/B;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACNnD,OAAA;UAAK6C,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B9C,OAAA;YAAA8C,QAAA,EAAQ;UAAkB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC9B,MAAM,CAACW,IAAI,CAACZ,uBAAuB,CAAC,CAACS,MAAM;QAAA;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7E,CAAC,eACNnD,OAAA;UAAK6C,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B9C,OAAA;YAAA8C,QAAA,EAAQ;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC,IAAI2B,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;QAAA;UAAA/B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACP;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACpC,EAAA,CAlOQH,SAAS;EAAA,QACwBxB,cAAc;AAAA;AAAA4F,EAAA,GAD/CpE,SAAS;AAoOlBA,SAAS,CAACqE,SAAS,GAAG;EACpBpE,SAAS,EAAE1B,SAAS,CAAC+F,MAAM,CAACC,UAAU;EACtCrE,QAAQ,EAAE3B,SAAS,CAACiG,KAAK,CAAC,CAAC,SAAS,EAAE,WAAW,CAAC;AACpD,CAAC;AAED,eAAexE,SAAS;AAAC,IAAAoE,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}