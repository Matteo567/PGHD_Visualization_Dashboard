{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExerciseChart.js\",\n  _s = $RefreshSig$();\n/**\n ExerciseChart.js - Exercise Activity Tracking Visualization\n \n This component provides comprehensive exercise monitoring:\n - Activity type breakdown (walking, swimming, running, biking, muscle-strengthening, balance)\n - Duration tracking and weekly summaries\n - Color-coded activity categorization\n - Interactive tooltips with exercise details\n - Navigation controls for time periods\n - Integration with patient data and chart navigation\n \n Architecture:\n - Uses custom SVG for stacked bar chart visualization\n - Implements activity categorization system with emoji indicators\n - Provides color-coded activity types for easy identification\n - Supports expandable views\n - Implements time-based navigation and data filtering\n \n Visualization Features:\n - Stacked bar chart showing daily activity breakdown\n - Color-coded activity types with emoji indicators\n - Interactive tooltips with detailed exercise information\n - Design adapting to container size\n - Dynamic Y-axis scaling based on data range\n \n Activity Categories:\n - Walking: Low-impact cardiovascular exercise\n - Swimming: Full-body cardiovascular workout\n - Running: High-impact cardiovascular exercise\n - Biking: Low-impact cardiovascular exercise\n - Muscle-Strengthening: Strength training activities\n - Balance: Balance and stability training\n - Other: Miscellaneous physical activities\n \n Component Structure:\n - Chart Container: Main SVG container with sizing\n - Y-Axis: Duration scale with dynamic labeling\n - X-Axis: Day-of-week labels with date information\n - Data Bars: Stacked activity bars with color coding\n - Legend: Activity type explanations with emojis\n - Tooltip: Detailed exercise information on hover\n \n Essential for physical activity monitoring and fitness tracking.\n */\n\nimport React, { useState, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport './ExerciseChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseTypes = [{\n  key: 'walking',\n  label: 'Walking',\n  color: 'var(--chart-color-walking)',\n  emoji: '🚶'\n}, {\n  key: 'swimming',\n  label: 'Swimming',\n  color: 'var(--chart-color-swimming)',\n  emoji: '🏊‍♀️'\n}, {\n  key: 'running',\n  label: 'Running',\n  color: 'var(--chart-color-running)',\n  emoji: '🏃‍♂️'\n}, {\n  key: 'biking',\n  label: 'Biking',\n  color: 'var(--chart-color-biking)',\n  emoji: '🚴'\n}, {\n  key: 'muscle-strengthening',\n  label: 'Muscle-Strengthening',\n  color: 'var(--chart-color-resistance)',\n  emoji: '🏋️'\n}, {\n  key: 'balance',\n  label: 'Balance',\n  color: 'var(--chart-color-balance)',\n  emoji: '🧘'\n}, {\n  key: 'other',\n  label: 'Other',\n  color: 'var(--chart-color-other)',\n  emoji: '➕'\n}];\nconst exerciseLegendItems = exerciseTypes.map(({\n  label,\n  color,\n  emoji\n}) => ({\n  label: `${emoji} ${label}`,\n  color\n}));\nconst ExerciseChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient',\n  navigation\n}) => {\n  _s();\n  var _exerciseTypes$find, _exerciseTypes$find2;\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId, 'exercise');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n  const config = createChartConfig('exercise', isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Get 3-month data\n  const {\n    start: startOfThreeMonths,\n    end: endOfThreeMonths\n  } = nav.getThreeMonthRange();\n  const threeMonthData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\n  });\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = {\n      walking: 0,\n      swimming: 0,\n      running: 0,\n      biking: 0,\n      'muscle-strengthening': 0,\n      balance: 0,\n      other: 0,\n      totalMinutes: 0\n    };\n    return acc;\n  }, {});\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\n      groupedData[dayName].running += Number(item.running) || 0;\n      groupedData[dayName].biking += Number(item.biking) || 0;\n      groupedData[dayName]['muscle-strengthening'] += Number(item['muscle-strengthening']) || 0;\n      groupedData[dayName].balance += Number(item.balance) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName].biking + groupedData[dayName]['muscle-strengthening'] + groupedData[dayName].balance + groupedData[dayName].other;\n    }\n  });\n\n  // Calculate weekly exercise categories for physician view\n  const aerobic = Object.values(groupedData).reduce((sum, day) => sum + day.walking + day.swimming + day.running + day.biking, 0);\n  const strength = Object.values(groupedData).reduce((sum, day) => sum + day['muscle-strengthening'], 0);\n  const flexibility = Object.values(groupedData).reduce((sum, day) => sum + day.balance, 0);\n  const strengthSessions = Object.values(groupedData).filter(day => day['muscle-strengthening'] > 0).length;\n  const flexibilitySessions = Object.values(groupedData).filter(day => day.balance > 0).length;\n  const weeklyCategories = {\n    aerobic,\n    strength,\n    flexibility,\n    strengthSessions,\n    flexibilitySessions\n  };\n\n  // Calculate percentages for physician view\n  const aerobicGoal = 150;\n  const strengthGoal = 2;\n  const flexibilityGoal = 1;\n  const categoryPercentages = {\n    aerobic: Math.min(100, Math.round(weeklyCategories.aerobic / aerobicGoal * 100)),\n    strength: Math.min(100, Math.round(weeklyCategories.strengthSessions / strengthGoal * 100)),\n    flexibility: Math.min(100, Math.round(weeklyCategories.flexibilitySessions / flexibilityGoal * 100))\n  };\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n  const generateYAxisLabels = max => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate summary statistics for physician view\n  let weekSummary = null;\n  if (weekData.length > 0) {\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\n\n    // Count days with exercise\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\n\n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    const mostCommonExercise = Object.entries(exerciseTypeTotals).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate exercise consistency (days with 30+ minutes)\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\n\n    // Calculate average session length\n    const totalSessions = weekData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\n    }).length;\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n    weekSummary = {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      daysWithAdequateExercise,\n      totalSessions,\n      avgSessionLength\n    };\n  }\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthData.length > 0) {\n    // Group 3-month data by day\n    const threeMonthGroupedData = {};\n    threeMonthData.forEach(item => {\n      if (!item.date) return;\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      if (!threeMonthGroupedData[dayName]) {\n        threeMonthGroupedData[dayName] = {\n          walking: 0,\n          swimming: 0,\n          running: 0,\n          biking: 0,\n          'muscle-strengthening': 0,\n          balance: 0,\n          other: 0,\n          totalMinutes: 0\n        };\n      }\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\n      threeMonthGroupedData[dayName]['muscle-strengthening'] += Number(item['muscle-strengthening']) || 0;\n      threeMonthGroupedData[dayName].balance += Number(item.balance) || 0;\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['muscle-strengthening'] + threeMonthGroupedData[dayName].balance + threeMonthGroupedData[dayName].other;\n    });\n    const totalMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n\n    // Calculate actual days in the 3-month period\n    const {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const avgMinutesPerDay = (totalMinutes / daysInThreeMonths).toFixed(0);\n\n    // Count days with exercise\n    const daysWithExercise = Object.values(threeMonthGroupedData).filter(day => day.totalMinutes > 0).length;\n\n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    const mostCommonExercise = Object.entries(exerciseTypeTotals).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate average session length\n    const totalSessions = threeMonthData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return threeMonthGroupedData[dayName] && threeMonthGroupedData[dayName].totalMinutes > 0;\n    }).length;\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n    threeMonthSummary = {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      totalSessions,\n      avgSessionLength\n    };\n  }\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n\n  // Physician view - simplified bar chart\n  if (viewMode === 'physician') {\n    const categories = [{\n      name: 'Aerobic',\n      value: weeklyCategories.aerobic,\n      goal: 150,\n      percentage: categoryPercentages.aerobic,\n      color: '#4CAF50',\n      description: '150 min/week goal'\n    }, {\n      name: 'Strength',\n      value: weeklyCategories.strengthSessions,\n      goal: 2,\n      percentage: categoryPercentages.strength,\n      color: '#2196F3',\n      description: '2+ sessions/week'\n    }, {\n      name: 'Balance',\n      value: weeklyCategories.flexibilitySessions,\n      goal: 1,\n      percentage: categoryPercentages.flexibility,\n      color: '#FF9800',\n      description: '1+ session/week'\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `exercise-chart-container ${isExpanded ? 'expanded' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chart-title\",\n        children: \"Exercise Goals Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"chart-subtitle\",\n        children: nav.getCurrentMonthYear()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"physician-exercise-bars\",\n        children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exercise-category-bar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"category-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"category-name\",\n              children: category.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"category-percentage\",\n              children: [category.percentage, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bar-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bar-fill\",\n              style: {\n                width: `${category.percentage}%`,\n                backgroundColor: category.color,\n                opacity: category.percentage > 0 ? 0.8 : 0.3\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"category-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"category-value\",\n              children: category.name === 'Aerobic' ? `${category.value} min` : `${category.value} sessions`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"category-goal\",\n              children: [\"Goal: \", category.description]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 15\n          }, this)]\n        }, category.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Week Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Aerobic Activity:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [weeklyCategories.aerobic, \" minutes\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Strength Sessions:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [weeklyCategories.strengthSessions, \" sessions\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Balance Sessions:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [weeklyCategories.flexibilitySessions, \" sessions\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Goal Achievement:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [Object.values(categoryPercentages).filter(p => p >= 100).length, \"/3 categories\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `exercise-chart-container ${isExpanded ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Activity Breakdown by Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"chart-subtitle\",\n      children: nav.getCurrentMonthYear()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      viewBox: `0 0 ${config.width} ${config.height}`,\n      className: \"exercise-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"y-axis\",\n        children: [yAxisLabels.map(value => {\n          const y = config.padding.top + chartHeight - value / maxDuration * chartHeight;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"y-axis-grid-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              className: \"chart-grid-line-horizontal\",\n              x1: config.padding.left,\n              y1: y,\n              x2: config.width - config.padding.right,\n              y2: y\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: config.padding.left - 15,\n              y: y + 3,\n              fontSize: config.fontSize.yAxis,\n              textAnchor: \"end\",\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"chart-tick-label\",\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 19\n            }, this)]\n          }, value, true, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: -(config.padding.top + chartHeight / 2),\n          y: config.padding.left / 2 - 5,\n          fontSize: config.fontSize.yAxisTitle,\n          textAnchor: \"middle\",\n          fill: \"var(--chart-color-text-primary)\",\n          transform: \"rotate(-90)\",\n          className: \"y-axis-title\",\n          children: \"Minutes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\",\n        children: daysOfWeek.map((day, dayIndex) => {\n          const date = new Date(startOfWeek);\n          date.setDate(date.getDate() + dayIndex);\n          const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n          const dayData = groupedData[day];\n          const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n          const emojis = performedExercises.map(type => type.emoji).join(' ');\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"x-axis-label-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              className: \"chart-grid-line-vertical\",\n              x1: config.padding.left + dayIndex * config.dayWidth,\n              y1: config.padding.top,\n              x2: config.padding.left + dayIndex * config.dayWidth,\n              y2: config.height - config.padding.bottom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 15,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.dayLabel,\n              fill: \"var(--chart-color-text-primary)\",\n              className: \"x-axis-day-label\",\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 30,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.dateLabel,\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"x-axis-date-label\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 48,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.emoji,\n              children: emojis\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 19\n            }, this)]\n          }, dayIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"data-bars\",\n        children: daysOfWeek.map((day, dayIndex) => {\n          const dayData = groupedData[day];\n          const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n          let currentY = config.height - config.padding.bottom;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: exerciseTypes.map(type => {\n              const minutes = Number(dayData[type.key]) || 0;\n              if (minutes <= 0) return null;\n              const segmentHeight = minutes / maxDuration * chartHeight;\n              const segmentY = currentY - segmentHeight;\n              const segment = /*#__PURE__*/_jsxDEV(\"g\", {\n                children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                  x: x - config.barWidth / 2,\n                  y: segmentY,\n                  width: config.barWidth,\n                  height: segmentHeight,\n                  fill: type.color,\n                  className: \"data-bar\",\n                  children: /*#__PURE__*/_jsxDEV(\"title\", {\n                    children: `${type.label}: ${Math.round(minutes)} min`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 427,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 25\n                }, this), segmentHeight >= 12 && /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: x,\n                  y: segmentY + segmentHeight / 2,\n                  textAnchor: \"middle\",\n                  fontSize: isExpanded ? 8 : 6,\n                  fill: \"black\",\n                  className: \"duration-label\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: Math.round(minutes)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 27\n                }, this)]\n              }, type.key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 23\n              }, this);\n              currentY = segmentY;\n              return segment;\n            })\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {\n      title: \"Exercise Type\",\n      items: exerciseLegendItems,\n      orientation: \"horizontal\",\n      size: \"medium\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 9\n    }, this), viewMode === 'physician' && weekSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Week Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Total Exercise:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.totalMinutes, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Daily Average:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.avgMinutesPerDay, \" minutes/day\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Exercise Days:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.daysWithExercise, \"/7 days\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [(_exerciseTypes$find = exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)) === null || _exerciseTypes$find === void 0 ? void 0 : _exerciseTypes$find.emoji, \" \", weekSummary.mostCommonExercise, \" (\", weekSummary.mostCommonExerciseMinutes, \" min)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Avg Session:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.avgSessionLength, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 13\n      }, this), threeMonthSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"3-Month Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Total Exercise:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.totalMinutes, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Daily Average:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.avgMinutesPerDay, \" minutes/day\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Exercise Days:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.daysWithExercise, \" days\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [(_exerciseTypes$find2 = exerciseTypes.find(t => t.key === threeMonthSummary.mostCommonExercise)) === null || _exerciseTypes$find2 === void 0 ? void 0 : _exerciseTypes$find2.emoji, \" \", threeMonthSummary.mostCommonExercise, \" (\", threeMonthSummary.mostCommonExerciseMinutes, \" min)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Avg Session:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.avgSessionLength, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 7\n  }, this);\n};\n_s(ExerciseChart, \"AwikmLRMuelEPmhOHS1lAdbb8fI=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = ExerciseChart;\nexport default ExerciseChart;\nvar _c;\n$RefreshReg$(_c, \"ExerciseChart\");","map":{"version":3,"names":["React","useState","useRef","usePatientData","useChartNavigation","Legend","jsxDEV","_jsxDEV","exerciseTypes","key","label","color","emoji","exerciseLegendItems","map","ExerciseChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","_exerciseTypes$find","_exerciseTypes$find2","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","config","createChartConfig","chartHeight","height","padding","top","bottom","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthData","daysOfWeek","groupedData","reduce","acc","day","walking","swimming","running","biking","balance","other","totalMinutes","forEach","item","dayName","getDay","Number","aerobic","Object","values","sum","strength","flexibility","strengthSessions","length","flexibilitySessions","weeklyCategories","aerobicGoal","strengthGoal","flexibilityGoal","categoryPercentages","Math","min","round","maxVal","max","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","weekSummary","avgMinutesPerDay","toFixed","daysWithExercise","exerciseTypeTotals","type","mostCommonExercise","entries","sort","a","b","daysWithAdequateExercise","totalSessions","avgSessionLength","mostCommonExerciseMinutes","threeMonthSummary","threeMonthGroupedData","daysInThreeMonths","formatDateRange","startStr","toLocaleDateString","month","endStr","categories","name","value","goal","percentage","description","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getCurrentMonthYear","category","index","style","width","backgroundColor","opacity","p","viewBox","y","x1","left","y1","x2","right","y2","x","fontSize","yAxis","textAnchor","fill","yAxisTitle","transform","dayIndex","setDate","getDate","dayWidth","dayData","performedExercises","emojis","join","dayLabel","dateLabel","currentY","minutes","segmentHeight","segmentY","segment","barWidth","fontWeight","title","items","orientation","size","find","t","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["/**\n ExerciseChart.js - Exercise Activity Tracking Visualization\n \n This component provides comprehensive exercise monitoring:\n - Activity type breakdown (walking, swimming, running, biking, muscle-strengthening, balance)\n - Duration tracking and weekly summaries\n - Color-coded activity categorization\n - Interactive tooltips with exercise details\n - Navigation controls for time periods\n - Integration with patient data and chart navigation\n \n Architecture:\n - Uses custom SVG for stacked bar chart visualization\n - Implements activity categorization system with emoji indicators\n - Provides color-coded activity types for easy identification\n - Supports expandable views\n - Implements time-based navigation and data filtering\n \n Visualization Features:\n - Stacked bar chart showing daily activity breakdown\n - Color-coded activity types with emoji indicators\n - Interactive tooltips with detailed exercise information\n - Design adapting to container size\n - Dynamic Y-axis scaling based on data range\n \n Activity Categories:\n - Walking: Low-impact cardiovascular exercise\n - Swimming: Full-body cardiovascular workout\n - Running: High-impact cardiovascular exercise\n - Biking: Low-impact cardiovascular exercise\n - Muscle-Strengthening: Strength training activities\n - Balance: Balance and stability training\n - Other: Miscellaneous physical activities\n \n Component Structure:\n - Chart Container: Main SVG container with sizing\n - Y-Axis: Duration scale with dynamic labeling\n - X-Axis: Day-of-week labels with date information\n - Data Bars: Stacked activity bars with color coding\n - Legend: Activity type explanations with emojis\n - Tooltip: Detailed exercise information on hover\n \n Essential for physical activity monitoring and fitness tracking.\n */\n\nimport React, { useState, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport './ExerciseChart.css';\n\nconst exerciseTypes = [\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\n  { key: 'muscle-strengthening', label: 'Muscle-Strengthening', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\n  { key: 'balance', label: 'Balance', color: 'var(--chart-color-balance)', emoji: '🧘' },\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\n];\n\nconst exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\n  label: `${emoji} ${label}`,\n  color,\n}));\n\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\n  \n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n\n  const config = createChartConfig('exercise', isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\n\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Get 3-month data\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n  const threeMonthData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\n  });\n\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = { walking: 0, swimming: 0, running: 0, biking: 0, 'muscle-strengthening': 0, balance: 0, other: 0, totalMinutes: 0 };\n    return acc;\n  }, {});\n\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\n      groupedData[dayName].running += Number(item.running) || 0;\n      groupedData[dayName].biking += Number(item.biking) || 0;\n      groupedData[dayName]['muscle-strengthening'] += Number(item['muscle-strengthening']) || 0;\n      groupedData[dayName].balance += Number(item.balance) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName].biking + groupedData[dayName]['muscle-strengthening'] + groupedData[dayName].balance + groupedData[dayName].other;\n    }\n  });\n\n  // Calculate weekly exercise categories for physician view\n  const aerobic = Object.values(groupedData).reduce((sum, day) => \n    sum + day.walking + day.swimming + day.running + day.biking, 0);\n  const strength = Object.values(groupedData).reduce((sum, day) => \n    sum + day['muscle-strengthening'], 0);\n  const flexibility = Object.values(groupedData).reduce((sum, day) => \n    sum + day.balance, 0);\n  \n  const strengthSessions = Object.values(groupedData).filter(day => day['muscle-strengthening'] > 0).length;\n  const flexibilitySessions = Object.values(groupedData).filter(day => day.balance > 0).length;\n  \n  const weeklyCategories = {\n    aerobic,\n    strength,\n    flexibility,\n    strengthSessions,\n    flexibilitySessions\n  };\n\n  // Calculate percentages for physician view\n  const aerobicGoal = 150;\n  const strengthGoal = 2;\n  const flexibilityGoal = 1;\n  \n  const categoryPercentages = {\n    aerobic: Math.min(100, Math.round((weeklyCategories.aerobic / aerobicGoal) * 100)),\n    strength: Math.min(100, Math.round((weeklyCategories.strengthSessions / strengthGoal) * 100)),\n    flexibility: Math.min(100, Math.round((weeklyCategories.flexibilitySessions / flexibilityGoal) * 100))\n  };\n\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n\n  const generateYAxisLabels = (max) => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate summary statistics for physician view\n  let weekSummary = null;\n  if (weekData.length > 0) {\n\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\n    \n    // Count days with exercise\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\n    \n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    \n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\n      .sort(([,a], [,b]) => b - a)[0];\n    \n    // Calculate exercise consistency (days with 30+ minutes)\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\n    \n    // Calculate average session length\n    const totalSessions = weekData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\n    }).length;\n    \n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n\n    weekSummary = {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      daysWithAdequateExercise,\n      totalSessions,\n      avgSessionLength\n    };\n  }\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthData.length > 0) {\n\n    // Group 3-month data by day\n    const threeMonthGroupedData = {};\n    threeMonthData.forEach(item => {\n      if (!item.date) return;\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      if (!threeMonthGroupedData[dayName]) {\n        threeMonthGroupedData[dayName] = { walking: 0, swimming: 0, running: 0, biking: 0, 'muscle-strengthening': 0, balance: 0, other: 0, totalMinutes: 0 };\n      }\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\n      threeMonthGroupedData[dayName]['muscle-strengthening'] += Number(item['muscle-strengthening']) || 0;\n      threeMonthGroupedData[dayName].balance += Number(item.balance) || 0;\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['muscle-strengthening'] + threeMonthGroupedData[dayName].balance + threeMonthGroupedData[dayName].other;\n    });\n\n    const totalMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    \n    // Calculate actual days in the 3-month period\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const avgMinutesPerDay = (totalMinutes / daysInThreeMonths).toFixed(0);\n    \n    // Count days with exercise\n    const daysWithExercise = Object.values(threeMonthGroupedData).filter(day => day.totalMinutes > 0).length;\n    \n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    \n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\n      .sort(([,a], [,b]) => b - a)[0];\n    \n    // Calculate average session length\n    const totalSessions = threeMonthData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return threeMonthGroupedData[dayName] && threeMonthGroupedData[dayName].totalMinutes > 0;\n    }).length;\n    \n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n\n    threeMonthSummary = {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      totalSessions,\n      avgSessionLength\n    };\n  }\n\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${startStr} to ${endStr}`;\n  };\n\n  // Physician view - simplified bar chart\n  if (viewMode === 'physician') {\n    const categories = [\n      { \n        name: 'Aerobic', \n        value: weeklyCategories.aerobic, \n        goal: 150, \n        percentage: categoryPercentages.aerobic,\n        color: '#4CAF50',\n        description: '150 min/week goal'\n      },\n      { \n        name: 'Strength', \n        value: weeklyCategories.strengthSessions, \n        goal: 2, \n        percentage: categoryPercentages.strength,\n        color: '#2196F3',\n        description: '2+ sessions/week'\n      },\n      { \n        name: 'Balance', \n        value: weeklyCategories.flexibilitySessions, \n        goal: 1, \n        percentage: categoryPercentages.flexibility,\n        color: '#FF9800',\n        description: '1+ session/week'\n      }\n    ];\n\n    return (\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\n        <h3 className=\"chart-title\">Exercise Goals Progress</h3>\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\n        \n        <div className=\"physician-exercise-bars\">\n          {categories.map((category, index) => (\n            <div key={category.name} className=\"exercise-category-bar\">\n              <div className=\"category-header\">\n                <span className=\"category-name\">{category.name}</span>\n                <span className=\"category-percentage\">{category.percentage}%</span>\n              </div>\n              <div className=\"bar-container\">\n                <div \n                  className=\"bar-fill\" \n                  style={{ \n                    width: `${category.percentage}%`,\n                    backgroundColor: category.color,\n                    opacity: category.percentage > 0 ? 0.8 : 0.3\n                  }}\n                />\n              </div>\n              <div className=\"category-details\">\n                <span className=\"category-value\">\n                  {category.name === 'Aerobic' ? `${category.value} min` : `${category.value} sessions`}\n                </span>\n                <span className=\"category-goal\">Goal: {category.description}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"summary-container\">\n          <div className=\"chart-summary\">\n            <h4>Week Summary</h4>\n            <div className=\"summary-stats\">\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Aerobic Activity:</span>\n                <span className=\"stat-value\">{weeklyCategories.aerobic} minutes</span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Strength Sessions:</span>\n                <span className=\"stat-value\">{weeklyCategories.strengthSessions} sessions</span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Balance Sessions:</span>\n                <span className=\"stat-value\">{weeklyCategories.flexibilitySessions} sessions</span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Goal Achievement:</span>\n                <span className=\"stat-value\">\n                  {Object.values(categoryPercentages).filter(p => p >= 100).length}/3 categories\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\n        <h3 className=\"chart-title\">Activity Breakdown by Type</h3>\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\n        \n        <svg \n          width=\"100%\" \n          viewBox={`0 0 ${config.width} ${config.height}`}\n          className=\"exercise-svg\"\n        >\n          <g className=\"y-axis\">\n            {yAxisLabels.map(value => {\n              const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\n              return (\n                <g key={value} className=\"y-axis-grid-group\">\n                  <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\n                  <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\n                </g>\n              );\n            })}\n            <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\n          </g>\n\n          <g className=\"x-axis\">\n            {daysOfWeek.map((day, dayIndex) => {\n              const date = new Date(startOfWeek);\n              date.setDate(date.getDate() + dayIndex);\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n\n              const dayData = groupedData[day];\n              const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n              const emojis = performedExercises.map(type => type.emoji).join(' ');\n\n              return (\n                <g key={dayIndex} className=\"x-axis-label-group\">\n                  <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\n                  <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\n                  <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\n                  <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\n                </g>\n              );\n            })}\n          </g>\n\n          <g className=\"data-bars\">\n            {daysOfWeek.map((day, dayIndex) => {\n              const dayData = groupedData[day];\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n              let currentY = config.height - config.padding.bottom;\n\n              return (\n                <g key={day}>\n                  {exerciseTypes.map(type => {\n                    const minutes = Number(dayData[type.key]) || 0;\n                    if (minutes <= 0) return null;\n\n                    const segmentHeight = (minutes / maxDuration) * chartHeight;\n                    const segmentY = currentY - segmentHeight;\n\n                    const segment = (\n                      <g key={type.key}>\n                        <rect\n                          x={x - config.barWidth / 2}\n                          y={segmentY}\n                          width={config.barWidth}\n                          height={segmentHeight}\n                          fill={type.color}\n                          className=\"data-bar\"\n                        >\n                          <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\n                        </rect>\n                        {/* Duration label inside the segment */}\n                        {segmentHeight >= 12 && (\n                          <text\n                            x={x}\n                            y={segmentY + segmentHeight / 2}\n                            textAnchor=\"middle\"\n                            fontSize={isExpanded ? 8 : 6}\n                            fill=\"black\"\n                            className=\"duration-label\"\n                            style={{ \n                              fontWeight: 'bold'\n                            }}\n                          >\n                            {Math.round(minutes)}\n                          </text>\n                        )}\n                      </g>\n                    );\n\n                    currentY = segmentY;\n                    return segment;\n                  })}\n                </g>\n              );\n            })}\n          </g>\n        </svg>\n        \n        <Legend \n          title=\"Exercise Type\" \n          items={exerciseLegendItems} \n          orientation=\"horizontal\" \n          size=\"medium\" \n        />\n\n        {/* Show summary for physician view only */}\n        {viewMode === 'physician' && weekSummary && (\n          <div className=\"summary-container\">\n            <div className=\"chart-summary\">\n              <h4>Week Summary</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Total Exercise:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.totalMinutes} minutes\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Daily Average:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.avgMinutesPerDay} minutes/day\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Exercise Days:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.daysWithExercise}/7 days\n                  </span>\n                </div>\n\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Most Common:</span>\n                  <span className=\"stat-value\">\n                    {exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)?.emoji} {weekSummary.mostCommonExercise} ({weekSummary.mostCommonExerciseMinutes} min)\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Avg Session:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.avgSessionLength} minutes\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            {threeMonthSummary && (\n              <div className=\"chart-summary\">\n                <h4>3-Month Summary</h4>\n                <div className=\"summary-stats\">\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Total Exercise:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.totalMinutes} minutes\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Daily Average:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.avgMinutesPerDay} minutes/day\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Exercise Days:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.daysWithExercise} days\n                    </span>\n                  </div>\n\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Most Common:</span>\n                    <span className=\"stat-value\">\n                      {exerciseTypes.find(t => t.key === threeMonthSummary.mostCommonExercise)?.emoji} {threeMonthSummary.mostCommonExercise} ({threeMonthSummary.mostCommonExerciseMinutes} min)\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Avg Session:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.avgSessionLength} minutes\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n  );\n};\n\nexport default ExerciseChart;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,kBAAkB,MAAM,gCAAgC;AAC/D,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAG,CACpB;EAAEC,GAAG,EAAE,SAAS;EAAEC,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,4BAA4B;EAAEC,KAAK,EAAE;AAAK,CAAC,EACtF;EAAEH,GAAG,EAAE,UAAU;EAAEC,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,6BAA6B;EAAEC,KAAK,EAAE;AAAQ,CAAC,EAC5F;EAAEH,GAAG,EAAE,SAAS;EAAEC,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,4BAA4B;EAAEC,KAAK,EAAE;AAAQ,CAAC,EACzF;EAAEH,GAAG,EAAE,QAAQ;EAAEC,KAAK,EAAE,QAAQ;EAAEC,KAAK,EAAE,2BAA2B;EAAEC,KAAK,EAAE;AAAK,CAAC,EACnF;EAAEH,GAAG,EAAE,sBAAsB;EAAEC,KAAK,EAAE,sBAAsB;EAAEC,KAAK,EAAE,+BAA+B;EAAEC,KAAK,EAAE;AAAM,CAAC,EACpH;EAAEH,GAAG,EAAE,SAAS;EAAEC,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,4BAA4B;EAAEC,KAAK,EAAE;AAAK,CAAC,EACtF;EAAEH,GAAG,EAAE,OAAO;EAAEC,KAAK,EAAE,OAAO;EAAEC,KAAK,EAAE,0BAA0B;EAAEC,KAAK,EAAE;AAAI,CAAC,CAChF;AAED,MAAMC,mBAAmB,GAAGL,aAAa,CAACM,GAAG,CAAC,CAAC;EAAEJ,KAAK;EAAEC,KAAK;EAAEC;AAAM,CAAC,MAAM;EAC1EF,KAAK,EAAE,GAAGE,KAAK,IAAIF,KAAK,EAAE;EAC1BC;AACF,CAAC,CAAC,CAAC;AAEH,MAAMI,aAAa,GAAGA,CAAC;EAAEC,SAAS;EAAEC,UAAU,GAAG,KAAK;EAAEC,QAAQ;EAAEC,QAAQ,GAAG,SAAS;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,mBAAA,EAAAC,oBAAA;EACvG,MAAM;IAAEC,YAAY;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGvB,cAAc,CAACa,SAAS,EAAE,UAAU,CAAC;;EAE9E;EACA,MAAMW,qBAAqB,GAAG,CAACP,UAAU;EACzC,MAAMQ,kBAAkB,GAAGxB,kBAAkB,CAAC,UAAU,CAAC;EACzD,MAAMyB,GAAG,GAAGT,UAAU,IAAIQ,kBAAkB;EAE5C,MAAME,MAAM,GAAGC,iBAAiB,CAAC,UAAU,EAAEd,UAAU,CAAC;EACxD,MAAMe,WAAW,GAAGF,MAAM,CAACG,MAAM,GAAGH,MAAM,CAACI,OAAO,CAACC,GAAG,GAAGL,MAAM,CAACI,OAAO,CAACE,MAAM;EAE9E,MAAM;IAAEC,KAAK,EAAEC,WAAW;IAAEC,GAAG,EAAEC;EAAU,CAAC,GAAGX,GAAG,CAACY,YAAY,CAAC,CAAC;EAEjE,MAAMC,QAAQ,GAAGlB,YAAY,CAACmB,MAAM,CAACC,CAAC,IAAI;IACxC,IAAI,CAACA,CAAC,CAACC,IAAI,EAAE,OAAO,KAAK;IACzB,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAACH,CAAC,CAACC,IAAI,CAAC;IACjC,OAAOC,QAAQ,IAAIR,WAAW,IAAIQ,QAAQ,IAAIN,SAAS;EACzD,CAAC,CAAC;;EAEF;EACA,MAAM;IAAEH,KAAK,EAAEW,kBAAkB;IAAET,GAAG,EAAEU;EAAiB,CAAC,GAAGpB,GAAG,CAACqB,kBAAkB,CAAC,CAAC;EACrF,MAAMC,cAAc,GAAG3B,YAAY,CAACmB,MAAM,CAACC,CAAC,IAAI;IAC9C,IAAI,CAACA,CAAC,CAACC,IAAI,EAAE,OAAO,KAAK;IACzB,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAACH,CAAC,CAACC,IAAI,CAAC;IACjC,OAAOC,QAAQ,IAAIE,kBAAkB,IAAIF,QAAQ,IAAIG,gBAAgB;EACvE,CAAC,CAAC;EAEF,MAAMG,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EACpE,MAAMC,WAAW,GAAGD,UAAU,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;IAClDD,GAAG,CAACC,GAAG,CAAC,GAAG;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC;MAAE,sBAAsB,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,KAAK,EAAE,CAAC;MAAEC,YAAY,EAAE;IAAE,CAAC;IAC/H,OAAOR,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EAENb,QAAQ,CAACsB,OAAO,CAACC,IAAI,IAAI;IACvB,IAAI,CAACA,IAAI,CAACpB,IAAI,EAAE;IAChB,MAAMqB,OAAO,GAAGd,UAAU,CAAC,IAAIL,IAAI,CAACkB,IAAI,CAACpB,IAAI,CAAC,CAACsB,MAAM,CAAC,CAAC,CAAC;IACxD,IAAId,WAAW,CAACa,OAAO,CAAC,EAAE;MACxBb,WAAW,CAACa,OAAO,CAAC,CAACT,OAAO,IAAIW,MAAM,CAACH,IAAI,CAACR,OAAO,CAAC,IAAI,CAAC;MACzDJ,WAAW,CAACa,OAAO,CAAC,CAACR,QAAQ,IAAIU,MAAM,CAACH,IAAI,CAACP,QAAQ,CAAC,IAAI,CAAC;MAC3DL,WAAW,CAACa,OAAO,CAAC,CAACP,OAAO,IAAIS,MAAM,CAACH,IAAI,CAACN,OAAO,CAAC,IAAI,CAAC;MACzDN,WAAW,CAACa,OAAO,CAAC,CAACN,MAAM,IAAIQ,MAAM,CAACH,IAAI,CAACL,MAAM,CAAC,IAAI,CAAC;MACvDP,WAAW,CAACa,OAAO,CAAC,CAAC,sBAAsB,CAAC,IAAIE,MAAM,CAACH,IAAI,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC;MACzFZ,WAAW,CAACa,OAAO,CAAC,CAACL,OAAO,IAAIO,MAAM,CAACH,IAAI,CAACJ,OAAO,CAAC,IAAI,CAAC;MACzDR,WAAW,CAACa,OAAO,CAAC,CAACJ,KAAK,IAAIM,MAAM,CAACH,IAAI,CAACH,KAAK,CAAC,IAAI,CAAC;MACrDT,WAAW,CAACa,OAAO,CAAC,CAACH,YAAY,GAAGV,WAAW,CAACa,OAAO,CAAC,CAACT,OAAO,GAAGJ,WAAW,CAACa,OAAO,CAAC,CAACR,QAAQ,GAAGL,WAAW,CAACa,OAAO,CAAC,CAACP,OAAO,GAAGN,WAAW,CAACa,OAAO,CAAC,CAACN,MAAM,GAAGP,WAAW,CAACa,OAAO,CAAC,CAAC,sBAAsB,CAAC,GAAGb,WAAW,CAACa,OAAO,CAAC,CAACL,OAAO,GAAGR,WAAW,CAACa,OAAO,CAAC,CAACJ,KAAK;IAC1Q;EACF,CAAC,CAAC;;EAEF;EACA,MAAMO,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAClB,WAAW,CAAC,CAACC,MAAM,CAAC,CAACkB,GAAG,EAAEhB,GAAG,KACzDgB,GAAG,GAAGhB,GAAG,CAACC,OAAO,GAAGD,GAAG,CAACE,QAAQ,GAAGF,GAAG,CAACG,OAAO,GAAGH,GAAG,CAACI,MAAM,EAAE,CAAC,CAAC;EACjE,MAAMa,QAAQ,GAAGH,MAAM,CAACC,MAAM,CAAClB,WAAW,CAAC,CAACC,MAAM,CAAC,CAACkB,GAAG,EAAEhB,GAAG,KAC1DgB,GAAG,GAAGhB,GAAG,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;EACvC,MAAMkB,WAAW,GAAGJ,MAAM,CAACC,MAAM,CAAClB,WAAW,CAAC,CAACC,MAAM,CAAC,CAACkB,GAAG,EAAEhB,GAAG,KAC7DgB,GAAG,GAAGhB,GAAG,CAACK,OAAO,EAAE,CAAC,CAAC;EAEvB,MAAMc,gBAAgB,GAAGL,MAAM,CAACC,MAAM,CAAClB,WAAW,CAAC,CAACV,MAAM,CAACa,GAAG,IAAIA,GAAG,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAACoB,MAAM;EACzG,MAAMC,mBAAmB,GAAGP,MAAM,CAACC,MAAM,CAAClB,WAAW,CAAC,CAACV,MAAM,CAACa,GAAG,IAAIA,GAAG,CAACK,OAAO,GAAG,CAAC,CAAC,CAACe,MAAM;EAE5F,MAAME,gBAAgB,GAAG;IACvBT,OAAO;IACPI,QAAQ;IACRC,WAAW;IACXC,gBAAgB;IAChBE;EACF,CAAC;;EAED;EACA,MAAME,WAAW,GAAG,GAAG;EACvB,MAAMC,YAAY,GAAG,CAAC;EACtB,MAAMC,eAAe,GAAG,CAAC;EAEzB,MAAMC,mBAAmB,GAAG;IAC1Bb,OAAO,EAAEc,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,KAAK,CAAEP,gBAAgB,CAACT,OAAO,GAAGU,WAAW,GAAI,GAAG,CAAC,CAAC;IAClFN,QAAQ,EAAEU,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,KAAK,CAAEP,gBAAgB,CAACH,gBAAgB,GAAGK,YAAY,GAAI,GAAG,CAAC,CAAC;IAC7FN,WAAW,EAAES,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,KAAK,CAAEP,gBAAgB,CAACD,mBAAmB,GAAGI,eAAe,GAAI,GAAG,CAAC;EACvG,CAAC;EAED,MAAMK,MAAM,GAAGH,IAAI,CAACI,GAAG,CAAC,GAAGjB,MAAM,CAACC,MAAM,CAAClB,WAAW,CAAC,CAACvC,GAAG,CAAC0C,GAAG,IAAIA,GAAG,CAACO,YAAY,CAAC,EAAE,CAAC,CAAC;EACtF,MAAMyB,WAAW,GAAGL,IAAI,CAACI,GAAG,CAAC,EAAE,EAAEJ,IAAI,CAACM,IAAI,CAACH,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;EAE7D,MAAMI,mBAAmB,GAAIH,GAAG,IAAK;IACnC,IAAIA,GAAG,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IACzB,MAAMI,IAAI,GAAGR,IAAI,CAACI,GAAG,CAAC,EAAE,EAAEJ,IAAI,CAACM,IAAI,CAACF,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;IACvD,MAAMK,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIN,GAAG,EAAEM,CAAC,IAAIF,IAAI,EAAE;MACnCC,MAAM,CAACE,IAAI,CAACD,CAAC,CAAC;IAChB;IACA,OAAOD,MAAM;EACf,CAAC;EAED,MAAMG,WAAW,GAAGL,mBAAmB,CAACF,WAAW,CAAC;;EAEpD;EACA,IAAIQ,WAAW,GAAG,IAAI;EACtB,IAAItD,QAAQ,CAACkC,MAAM,GAAG,CAAC,EAAE;IAEvB,MAAMb,YAAY,GAAGO,MAAM,CAACC,MAAM,CAAClB,WAAW,CAAC,CAACC,MAAM,CAAC,CAACkB,GAAG,EAAEhB,GAAG,KAAKgB,GAAG,GAAGhB,GAAG,CAACO,YAAY,EAAE,CAAC,CAAC;IAC/F,MAAMkC,gBAAgB,GAAG,CAAClC,YAAY,GAAG,CAAC,EAAEmC,OAAO,CAAC,CAAC,CAAC;;IAEtD;IACA,MAAMC,gBAAgB,GAAG7B,MAAM,CAACC,MAAM,CAAClB,WAAW,CAAC,CAACV,MAAM,CAACa,GAAG,IAAIA,GAAG,CAACO,YAAY,GAAG,CAAC,CAAC,CAACa,MAAM;;IAE9F;IACA,MAAMwB,kBAAkB,GAAG,CAAC,CAAC;IAC7B5F,aAAa,CAACwD,OAAO,CAACqC,IAAI,IAAI;MAC5BD,kBAAkB,CAACC,IAAI,CAAC5F,GAAG,CAAC,GAAG6D,MAAM,CAACC,MAAM,CAAClB,WAAW,CAAC,CAACC,MAAM,CAAC,CAACkB,GAAG,EAAEhB,GAAG,KAAKgB,GAAG,GAAGhB,GAAG,CAAC6C,IAAI,CAAC5F,GAAG,CAAC,EAAE,CAAC,CAAC;IACxG,CAAC,CAAC;IAEF,MAAM6F,kBAAkB,GAAGhC,MAAM,CAACiC,OAAO,CAACH,kBAAkB,CAAC,CAC1DI,IAAI,CAAC,CAAC,GAAEC,CAAC,CAAC,EAAE,GAAEC,CAAC,CAAC,KAAKA,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEjC;IACA,MAAME,wBAAwB,GAAGrC,MAAM,CAACC,MAAM,CAAClB,WAAW,CAAC,CAACV,MAAM,CAACa,GAAG,IAAIA,GAAG,CAACO,YAAY,IAAI,EAAE,CAAC,CAACa,MAAM;;IAExG;IACA,MAAMgC,aAAa,GAAGlE,QAAQ,CAACC,MAAM,CAACsB,IAAI,IAAI;MAC5C,MAAMC,OAAO,GAAGd,UAAU,CAAC,IAAIL,IAAI,CAACkB,IAAI,CAACpB,IAAI,CAAC,CAACsB,MAAM,CAAC,CAAC,CAAC;MACxD,OAAOd,WAAW,CAACa,OAAO,CAAC,IAAIb,WAAW,CAACa,OAAO,CAAC,CAACH,YAAY,GAAG,CAAC;IACtE,CAAC,CAAC,CAACa,MAAM;IAET,MAAMiC,gBAAgB,GAAGD,aAAa,GAAG,CAAC,GAAG,CAAC7C,YAAY,GAAG6C,aAAa,EAAEV,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IAE1FF,WAAW,GAAG;MACZjC,YAAY;MACZkC,gBAAgB;MAChBE,gBAAgB;MAChBG,kBAAkB,EAAEA,kBAAkB,CAAC,CAAC,CAAC;MACzCQ,yBAAyB,EAAER,kBAAkB,CAAC,CAAC,CAAC;MAChDK,wBAAwB;MACxBC,aAAa;MACbC;IACF,CAAC;EACH;;EAEA;EACA,IAAIE,iBAAiB,GAAG,IAAI;EAC5B,IAAI5D,cAAc,CAACyB,MAAM,GAAG,CAAC,EAAE;IAE7B;IACA,MAAMoC,qBAAqB,GAAG,CAAC,CAAC;IAChC7D,cAAc,CAACa,OAAO,CAACC,IAAI,IAAI;MAC7B,IAAI,CAACA,IAAI,CAACpB,IAAI,EAAE;MAChB,MAAMqB,OAAO,GAAGd,UAAU,CAAC,IAAIL,IAAI,CAACkB,IAAI,CAACpB,IAAI,CAAC,CAACsB,MAAM,CAAC,CAAC,CAAC;MACxD,IAAI,CAAC6C,qBAAqB,CAAC9C,OAAO,CAAC,EAAE;QACnC8C,qBAAqB,CAAC9C,OAAO,CAAC,GAAG;UAAET,OAAO,EAAE,CAAC;UAAEC,QAAQ,EAAE,CAAC;UAAEC,OAAO,EAAE,CAAC;UAAEC,MAAM,EAAE,CAAC;UAAE,sBAAsB,EAAE,CAAC;UAAEC,OAAO,EAAE,CAAC;UAAEC,KAAK,EAAE,CAAC;UAAEC,YAAY,EAAE;QAAE,CAAC;MACvJ;MACAiD,qBAAqB,CAAC9C,OAAO,CAAC,CAACT,OAAO,IAAIW,MAAM,CAACH,IAAI,CAACR,OAAO,CAAC,IAAI,CAAC;MACnEuD,qBAAqB,CAAC9C,OAAO,CAAC,CAACR,QAAQ,IAAIU,MAAM,CAACH,IAAI,CAACP,QAAQ,CAAC,IAAI,CAAC;MACrEsD,qBAAqB,CAAC9C,OAAO,CAAC,CAACP,OAAO,IAAIS,MAAM,CAACH,IAAI,CAACN,OAAO,CAAC,IAAI,CAAC;MACnEqD,qBAAqB,CAAC9C,OAAO,CAAC,CAACN,MAAM,IAAIQ,MAAM,CAACH,IAAI,CAACL,MAAM,CAAC,IAAI,CAAC;MACjEoD,qBAAqB,CAAC9C,OAAO,CAAC,CAAC,sBAAsB,CAAC,IAAIE,MAAM,CAACH,IAAI,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC;MACnG+C,qBAAqB,CAAC9C,OAAO,CAAC,CAACL,OAAO,IAAIO,MAAM,CAACH,IAAI,CAACJ,OAAO,CAAC,IAAI,CAAC;MACnEmD,qBAAqB,CAAC9C,OAAO,CAAC,CAACJ,KAAK,IAAIM,MAAM,CAACH,IAAI,CAACH,KAAK,CAAC,IAAI,CAAC;MAC/DkD,qBAAqB,CAAC9C,OAAO,CAAC,CAACH,YAAY,GAAGiD,qBAAqB,CAAC9C,OAAO,CAAC,CAACT,OAAO,GAAGuD,qBAAqB,CAAC9C,OAAO,CAAC,CAACR,QAAQ,GAAGsD,qBAAqB,CAAC9C,OAAO,CAAC,CAACP,OAAO,GAAGqD,qBAAqB,CAAC9C,OAAO,CAAC,CAACN,MAAM,GAAGoD,qBAAqB,CAAC9C,OAAO,CAAC,CAAC,sBAAsB,CAAC,GAAG8C,qBAAqB,CAAC9C,OAAO,CAAC,CAACL,OAAO,GAAGmD,qBAAqB,CAAC9C,OAAO,CAAC,CAACJ,KAAK;IAC1V,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAGO,MAAM,CAACC,MAAM,CAACyC,qBAAqB,CAAC,CAAC1D,MAAM,CAAC,CAACkB,GAAG,EAAEhB,GAAG,KAAKgB,GAAG,GAAGhB,GAAG,CAACO,YAAY,EAAE,CAAC,CAAC;;IAEzG;IACA,MAAM;MAAE1B,KAAK,EAAEW,kBAAkB;MAAET,GAAG,EAAEU;IAAiB,CAAC,GAAGpB,GAAG,CAACqB,kBAAkB,CAAC,CAAC;IACrF,MAAM+D,iBAAiB,GAAG9B,IAAI,CAACM,IAAI,CAAC,CAACxC,gBAAgB,GAAGD,kBAAkB,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC;IACxG,MAAMiD,gBAAgB,GAAG,CAAClC,YAAY,GAAGkD,iBAAiB,EAAEf,OAAO,CAAC,CAAC,CAAC;;IAEtE;IACA,MAAMC,gBAAgB,GAAG7B,MAAM,CAACC,MAAM,CAACyC,qBAAqB,CAAC,CAACrE,MAAM,CAACa,GAAG,IAAIA,GAAG,CAACO,YAAY,GAAG,CAAC,CAAC,CAACa,MAAM;;IAExG;IACA,MAAMwB,kBAAkB,GAAG,CAAC,CAAC;IAC7B5F,aAAa,CAACwD,OAAO,CAACqC,IAAI,IAAI;MAC5BD,kBAAkB,CAACC,IAAI,CAAC5F,GAAG,CAAC,GAAG6D,MAAM,CAACC,MAAM,CAACyC,qBAAqB,CAAC,CAAC1D,MAAM,CAAC,CAACkB,GAAG,EAAEhB,GAAG,KAAKgB,GAAG,GAAGhB,GAAG,CAAC6C,IAAI,CAAC5F,GAAG,CAAC,EAAE,CAAC,CAAC;IAClH,CAAC,CAAC;IAEF,MAAM6F,kBAAkB,GAAGhC,MAAM,CAACiC,OAAO,CAACH,kBAAkB,CAAC,CAC1DI,IAAI,CAAC,CAAC,GAAEC,CAAC,CAAC,EAAE,GAAEC,CAAC,CAAC,KAAKA,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEjC;IACA,MAAMG,aAAa,GAAGzD,cAAc,CAACR,MAAM,CAACsB,IAAI,IAAI;MAClD,MAAMC,OAAO,GAAGd,UAAU,CAAC,IAAIL,IAAI,CAACkB,IAAI,CAACpB,IAAI,CAAC,CAACsB,MAAM,CAAC,CAAC,CAAC;MACxD,OAAO6C,qBAAqB,CAAC9C,OAAO,CAAC,IAAI8C,qBAAqB,CAAC9C,OAAO,CAAC,CAACH,YAAY,GAAG,CAAC;IAC1F,CAAC,CAAC,CAACa,MAAM;IAET,MAAMiC,gBAAgB,GAAGD,aAAa,GAAG,CAAC,GAAG,CAAC7C,YAAY,GAAG6C,aAAa,EAAEV,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IAE1Fa,iBAAiB,GAAG;MAClBhD,YAAY;MACZkC,gBAAgB;MAChBE,gBAAgB;MAChBG,kBAAkB,EAAEA,kBAAkB,CAAC,CAAC,CAAC;MACzCQ,yBAAyB,EAAER,kBAAkB,CAAC,CAAC,CAAC;MAChDM,aAAa;MACbC;IACF,CAAC;EACH;EAEA,MAAMK,eAAe,GAAGA,CAAC7E,KAAK,EAAEE,GAAG,KAAK;IACtC,MAAM4E,QAAQ,GAAG9E,KAAK,CAAC+E,kBAAkB,CAAC,OAAO,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAE7D,GAAG,EAAE;IAAU,CAAC,CAAC;IACtF,MAAM8D,MAAM,GAAG/E,GAAG,CAAC6E,kBAAkB,CAAC,OAAO,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAE7D,GAAG,EAAE;IAAU,CAAC,CAAC;IAClF,OAAO,GAAG2D,QAAQ,OAAOG,MAAM,EAAE;EACnC,CAAC;;EAED;EACA,IAAInG,QAAQ,KAAK,WAAW,EAAE;IAC5B,MAAMoG,UAAU,GAAG,CACjB;MACEC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE3C,gBAAgB,CAACT,OAAO;MAC/BqD,IAAI,EAAE,GAAG;MACTC,UAAU,EAAEzC,mBAAmB,CAACb,OAAO;MACvC1D,KAAK,EAAE,SAAS;MAChBiH,WAAW,EAAE;IACf,CAAC,EACD;MACEJ,IAAI,EAAE,UAAU;MAChBC,KAAK,EAAE3C,gBAAgB,CAACH,gBAAgB;MACxC+C,IAAI,EAAE,CAAC;MACPC,UAAU,EAAEzC,mBAAmB,CAACT,QAAQ;MACxC9D,KAAK,EAAE,SAAS;MAChBiH,WAAW,EAAE;IACf,CAAC,EACD;MACEJ,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE3C,gBAAgB,CAACD,mBAAmB;MAC3C6C,IAAI,EAAE,CAAC;MACPC,UAAU,EAAEzC,mBAAmB,CAACR,WAAW;MAC3C/D,KAAK,EAAE,SAAS;MAChBiH,WAAW,EAAE;IACf,CAAC,CACF;IAED,oBACErH,OAAA;MAAKsH,SAAS,EAAE,4BAA4B5G,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;MAAA6G,QAAA,gBACzEvH,OAAA;QAAIsH,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxD3H,OAAA;QAAIsH,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAEjG,GAAG,CAACsG,mBAAmB,CAAC;MAAC;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAE/D3H,OAAA;QAAKsH,SAAS,EAAC,yBAAyB;QAAAC,QAAA,EACrCP,UAAU,CAACzG,GAAG,CAAC,CAACsH,QAAQ,EAAEC,KAAK,kBAC9B9H,OAAA;UAAyBsH,SAAS,EAAC,uBAAuB;UAAAC,QAAA,gBACxDvH,OAAA;YAAKsH,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAC9BvH,OAAA;cAAMsH,SAAS,EAAC,eAAe;cAAAC,QAAA,EAAEM,QAAQ,CAACZ;YAAI;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACtD3H,OAAA;cAAMsH,SAAS,EAAC,qBAAqB;cAAAC,QAAA,GAAEM,QAAQ,CAACT,UAAU,EAAC,GAAC;YAAA;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChE,CAAC,eACN3H,OAAA;YAAKsH,SAAS,EAAC,eAAe;YAAAC,QAAA,eAC5BvH,OAAA;cACEsH,SAAS,EAAC,UAAU;cACpBS,KAAK,EAAE;gBACLC,KAAK,EAAE,GAAGH,QAAQ,CAACT,UAAU,GAAG;gBAChCa,eAAe,EAAEJ,QAAQ,CAACzH,KAAK;gBAC/B8H,OAAO,EAAEL,QAAQ,CAACT,UAAU,GAAG,CAAC,GAAG,GAAG,GAAG;cAC3C;YAAE;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACN3H,OAAA;YAAKsH,SAAS,EAAC,kBAAkB;YAAAC,QAAA,gBAC/BvH,OAAA;cAAMsH,SAAS,EAAC,gBAAgB;cAAAC,QAAA,EAC7BM,QAAQ,CAACZ,IAAI,KAAK,SAAS,GAAG,GAAGY,QAAQ,CAACX,KAAK,MAAM,GAAG,GAAGW,QAAQ,CAACX,KAAK;YAAW;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjF,CAAC,eACP3H,OAAA;cAAMsH,SAAS,EAAC,eAAe;cAAAC,QAAA,GAAC,QAAM,EAACM,QAAQ,CAACR,WAAW;YAAA;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChE,CAAC;QAAA,GApBEE,QAAQ,CAACZ,IAAI;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAqBlB,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAEN3H,OAAA;QAAKsH,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eAChCvH,OAAA;UAAKsH,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BvH,OAAA;YAAAuH,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrB3H,OAAA;YAAKsH,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5BvH,OAAA;cAAKsH,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBvH,OAAA;gBAAMsH,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACrD3H,OAAA;gBAAMsH,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAEhD,gBAAgB,CAACT,OAAO,EAAC,UAAQ;cAAA;gBAAA0D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnE,CAAC,eACN3H,OAAA;cAAKsH,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBvH,OAAA;gBAAMsH,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAkB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACtD3H,OAAA;gBAAMsH,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAEhD,gBAAgB,CAACH,gBAAgB,EAAC,WAAS;cAAA;gBAAAoD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7E,CAAC,eACN3H,OAAA;cAAKsH,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBvH,OAAA;gBAAMsH,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACrD3H,OAAA;gBAAMsH,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAEhD,gBAAgB,CAACD,mBAAmB,EAAC,WAAS;cAAA;gBAAAkD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChF,CAAC,eACN3H,OAAA;cAAKsH,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBvH,OAAA;gBAAMsH,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACrD3H,OAAA;gBAAMsH,SAAS,EAAC,YAAY;gBAAAC,QAAA,GACzBxD,MAAM,CAACC,MAAM,CAACW,mBAAmB,CAAC,CAACvC,MAAM,CAAC+F,CAAC,IAAIA,CAAC,IAAI,GAAG,CAAC,CAAC9D,MAAM,EAAC,eACnE;cAAA;gBAAAmD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACI3H,OAAA;IAAKsH,SAAS,EAAE,4BAA4B5G,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;IAAA6G,QAAA,gBACzEvH,OAAA;MAAIsH,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3D3H,OAAA;MAAIsH,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAEjG,GAAG,CAACsG,mBAAmB,CAAC;IAAC;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAE/D3H,OAAA;MACEgI,KAAK,EAAC,MAAM;MACZI,OAAO,EAAE,OAAO7G,MAAM,CAACyG,KAAK,IAAIzG,MAAM,CAACG,MAAM,EAAG;MAChD4F,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAExBvH,OAAA;QAAGsH,SAAS,EAAC,QAAQ;QAAAC,QAAA,GAClB/B,WAAW,CAACjF,GAAG,CAAC2G,KAAK,IAAI;UACxB,MAAMmB,CAAC,GAAG9G,MAAM,CAACI,OAAO,CAACC,GAAG,GAAGH,WAAW,GAAIyF,KAAK,GAAGjC,WAAW,GAAIxD,WAAW;UAChF,oBACEzB,OAAA;YAAesH,SAAS,EAAC,mBAAmB;YAAAC,QAAA,gBAC1CvH,OAAA;cAAMsH,SAAS,EAAC,4BAA4B;cAACgB,EAAE,EAAE/G,MAAM,CAACI,OAAO,CAAC4G,IAAK;cAACC,EAAE,EAAEH,CAAE;cAACI,EAAE,EAAElH,MAAM,CAACyG,KAAK,GAAGzG,MAAM,CAACI,OAAO,CAAC+G,KAAM;cAACC,EAAE,EAAEN;YAAE;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC/H3H,OAAA;cAAM4I,CAAC,EAAErH,MAAM,CAACI,OAAO,CAAC4G,IAAI,GAAG,EAAG;cAACF,CAAC,EAAEA,CAAC,GAAG,CAAE;cAACQ,QAAQ,EAAEtH,MAAM,CAACsH,QAAQ,CAACC,KAAM;cAACC,UAAU,EAAC,KAAK;cAACC,IAAI,EAAC,mCAAmC;cAAC1B,SAAS,EAAC,kBAAkB;cAAAC,QAAA,EAAEL;YAAK;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA,GAF7KT,KAAK;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGV,CAAC;QAER,CAAC,CAAC,eACF3H,OAAA;UAAM4I,CAAC,EAAE,EAAErH,MAAM,CAACI,OAAO,CAACC,GAAG,GAAGH,WAAW,GAAG,CAAC,CAAE;UAAC4G,CAAC,EAAE9G,MAAM,CAACI,OAAO,CAAC4G,IAAI,GAAG,CAAC,GAAG,CAAE;UAACM,QAAQ,EAAEtH,MAAM,CAACsH,QAAQ,CAACI,UAAW;UAACF,UAAU,EAAC,QAAQ;UAACC,IAAI,EAAC,iCAAiC;UAACE,SAAS,EAAC,aAAa;UAAC5B,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjP,CAAC,eAEJ3H,OAAA;QAAGsH,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAClB1E,UAAU,CAACtC,GAAG,CAAC,CAAC0C,GAAG,EAAEkG,QAAQ,KAAK;UACjC,MAAM7G,IAAI,GAAG,IAAIE,IAAI,CAACT,WAAW,CAAC;UAClCO,IAAI,CAAC8G,OAAO,CAAC9G,IAAI,CAAC+G,OAAO,CAAC,CAAC,GAAGF,QAAQ,CAAC;UACvC,MAAMP,CAAC,GAAGrH,MAAM,CAACI,OAAO,CAAC4G,IAAI,GAAGY,QAAQ,GAAG5H,MAAM,CAAC+H,QAAQ,GAAG/H,MAAM,CAAC+H,QAAQ,GAAG,CAAC;UAEhF,MAAMC,OAAO,GAAGzG,WAAW,CAACG,GAAG,CAAC;UAChC,MAAMuG,kBAAkB,GAAGvJ,aAAa,CAACmC,MAAM,CAAC0D,IAAI,IAAI,CAACyD,OAAO,CAACzD,IAAI,CAAC5F,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;UACrF,MAAMuJ,MAAM,GAAGD,kBAAkB,CAACjJ,GAAG,CAACuF,IAAI,IAAIA,IAAI,CAACzF,KAAK,CAAC,CAACqJ,IAAI,CAAC,GAAG,CAAC;UAEnE,oBACE1J,OAAA;YAAkBsH,SAAS,EAAC,oBAAoB;YAAAC,QAAA,gBAC9CvH,OAAA;cAAMsH,SAAS,EAAC,0BAA0B;cAACgB,EAAE,EAAE/G,MAAM,CAACI,OAAO,CAAC4G,IAAI,GAAGY,QAAQ,GAAG5H,MAAM,CAAC+H,QAAS;cAACd,EAAE,EAAEjH,MAAM,CAACI,OAAO,CAACC,GAAI;cAAC6G,EAAE,EAAElH,MAAM,CAACI,OAAO,CAAC4G,IAAI,GAAGY,QAAQ,GAAG5H,MAAM,CAAC+H,QAAS;cAACX,EAAE,EAAEpH,MAAM,CAACG,MAAM,GAAGH,MAAM,CAACI,OAAO,CAACE;YAAO;cAAA2F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC5N3H,OAAA;cAAM4I,CAAC,EAAEA,CAAE;cAACP,CAAC,EAAE9G,MAAM,CAACG,MAAM,GAAGH,MAAM,CAACI,OAAO,CAACE,MAAM,GAAG,EAAG;cAACkH,UAAU,EAAC,QAAQ;cAACF,QAAQ,EAAEtH,MAAM,CAACsH,QAAQ,CAACc,QAAS;cAACX,IAAI,EAAC,iCAAiC;cAAC1B,SAAS,EAAC,kBAAkB;cAAAC,QAAA,EAAEtE;YAAG;cAAAuE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACnM3H,OAAA;cAAM4I,CAAC,EAAEA,CAAE;cAACP,CAAC,EAAE9G,MAAM,CAACG,MAAM,GAAGH,MAAM,CAACI,OAAO,CAACE,MAAM,GAAG,EAAG;cAACkH,UAAU,EAAC,QAAQ;cAACF,QAAQ,EAAEtH,MAAM,CAACsH,QAAQ,CAACe,SAAU;cAACZ,IAAI,EAAC,mCAAmC;cAAC1B,SAAS,EAAC,mBAAmB;cAAAC,QAAA,EAAEjF,IAAI,CAAC+G,OAAO,CAAC;YAAC;cAAA7B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAClN3H,OAAA;cAAM4I,CAAC,EAAEA,CAAE;cAACP,CAAC,EAAE9G,MAAM,CAACG,MAAM,GAAGH,MAAM,CAACI,OAAO,CAACE,MAAM,GAAG,EAAG;cAACkH,UAAU,EAAC,QAAQ;cAACF,QAAQ,EAAEtH,MAAM,CAACsH,QAAQ,CAACxI,KAAM;cAAAkH,QAAA,EAAEkC;YAAM;cAAAjC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA,GAJzHwB,QAAQ;YAAA3B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKb,CAAC;QAER,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEJ3H,OAAA;QAAGsH,SAAS,EAAC,WAAW;QAAAC,QAAA,EACrB1E,UAAU,CAACtC,GAAG,CAAC,CAAC0C,GAAG,EAAEkG,QAAQ,KAAK;UACjC,MAAMI,OAAO,GAAGzG,WAAW,CAACG,GAAG,CAAC;UAChC,MAAM2F,CAAC,GAAGrH,MAAM,CAACI,OAAO,CAAC4G,IAAI,GAAGY,QAAQ,GAAG5H,MAAM,CAAC+H,QAAQ,GAAG/H,MAAM,CAAC+H,QAAQ,GAAG,CAAC;UAChF,IAAIO,QAAQ,GAAGtI,MAAM,CAACG,MAAM,GAAGH,MAAM,CAACI,OAAO,CAACE,MAAM;UAEpD,oBACE7B,OAAA;YAAAuH,QAAA,EACGtH,aAAa,CAACM,GAAG,CAACuF,IAAI,IAAI;cACzB,MAAMgE,OAAO,GAAGjG,MAAM,CAAC0F,OAAO,CAACzD,IAAI,CAAC5F,GAAG,CAAC,CAAC,IAAI,CAAC;cAC9C,IAAI4J,OAAO,IAAI,CAAC,EAAE,OAAO,IAAI;cAE7B,MAAMC,aAAa,GAAID,OAAO,GAAG7E,WAAW,GAAIxD,WAAW;cAC3D,MAAMuI,QAAQ,GAAGH,QAAQ,GAAGE,aAAa;cAEzC,MAAME,OAAO,gBACXjK,OAAA;gBAAAuH,QAAA,gBACEvH,OAAA;kBACE4I,CAAC,EAAEA,CAAC,GAAGrH,MAAM,CAAC2I,QAAQ,GAAG,CAAE;kBAC3B7B,CAAC,EAAE2B,QAAS;kBACZhC,KAAK,EAAEzG,MAAM,CAAC2I,QAAS;kBACvBxI,MAAM,EAAEqI,aAAc;kBACtBf,IAAI,EAAElD,IAAI,CAAC1F,KAAM;kBACjBkH,SAAS,EAAC,UAAU;kBAAAC,QAAA,eAEpBvH,OAAA;oBAAAuH,QAAA,EAAQ,GAAGzB,IAAI,CAAC3F,KAAK,KAAKyE,IAAI,CAACE,KAAK,CAACgF,OAAO,CAAC;kBAAM;oBAAAtC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACxD,CAAC,EAENoC,aAAa,IAAI,EAAE,iBAClB/J,OAAA;kBACE4I,CAAC,EAAEA,CAAE;kBACLP,CAAC,EAAE2B,QAAQ,GAAGD,aAAa,GAAG,CAAE;kBAChChB,UAAU,EAAC,QAAQ;kBACnBF,QAAQ,EAAEnI,UAAU,GAAG,CAAC,GAAG,CAAE;kBAC7BsI,IAAI,EAAC,OAAO;kBACZ1B,SAAS,EAAC,gBAAgB;kBAC1BS,KAAK,EAAE;oBACLoC,UAAU,EAAE;kBACd,CAAE;kBAAA5C,QAAA,EAED3C,IAAI,CAACE,KAAK,CAACgF,OAAO;gBAAC;kBAAAtC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAChB,CACP;cAAA,GA1BK7B,IAAI,CAAC5F,GAAG;gBAAAsH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OA2Bb,CACJ;cAEDkC,QAAQ,GAAGG,QAAQ;cACnB,OAAOC,OAAO;YAChB,CAAC;UAAC,GAzCIhH,GAAG;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA0CR,CAAC;QAER,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAEN3H,OAAA,CAACF,MAAM;MACLsK,KAAK,EAAC,eAAe;MACrBC,KAAK,EAAE/J,mBAAoB;MAC3BgK,WAAW,EAAC,YAAY;MACxBC,IAAI,EAAC;IAAQ;MAAA/C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC,EAGD/G,QAAQ,KAAK,WAAW,IAAI6E,WAAW,iBACtCzF,OAAA;MAAKsH,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCvH,OAAA;QAAKsH,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BvH,OAAA;UAAAuH,QAAA,EAAI;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrB3H,OAAA;UAAKsH,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BvH,OAAA;YAAKsH,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBvH,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACnD3H,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,GACzB9B,WAAW,CAACjC,YAAY,EAAC,UAC5B;YAAA;cAAAgE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACN3H,OAAA;YAAKsH,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBvH,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAClD3H,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,GACzB9B,WAAW,CAACC,gBAAgB,EAAC,cAChC;YAAA;cAAA8B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACN3H,OAAA;YAAKsH,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBvH,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAClD3H,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,GACzB9B,WAAW,CAACG,gBAAgB,EAAC,SAChC;YAAA;cAAA4B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eAEN3H,OAAA;YAAKsH,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBvH,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAChD3H,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,IAAAxG,mBAAA,GACzBd,aAAa,CAACuK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvK,GAAG,KAAKuF,WAAW,CAACM,kBAAkB,CAAC,cAAAhF,mBAAA,uBAAjEA,mBAAA,CAAmEV,KAAK,EAAC,GAAC,EAACoF,WAAW,CAACM,kBAAkB,EAAC,IAAE,EAACN,WAAW,CAACc,yBAAyB,EAAC,OACtJ;YAAA;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACN3H,OAAA;YAAKsH,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBvH,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAChD3H,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,GACzB9B,WAAW,CAACa,gBAAgB,EAAC,UAChC;YAAA;cAAAkB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAELnB,iBAAiB,iBAChBxG,OAAA;QAAKsH,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BvH,OAAA;UAAAuH,QAAA,EAAI;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxB3H,OAAA;UAAKsH,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BvH,OAAA;YAAKsH,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBvH,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACnD3H,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,GACzBf,iBAAiB,CAAChD,YAAY,EAAC,UAClC;YAAA;cAAAgE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACN3H,OAAA;YAAKsH,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBvH,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAClD3H,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,GACzBf,iBAAiB,CAACd,gBAAgB,EAAC,cACtC;YAAA;cAAA8B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACN3H,OAAA;YAAKsH,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBvH,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAClD3H,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,GACzBf,iBAAiB,CAACZ,gBAAgB,EAAC,OACtC;YAAA;cAAA4B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eAEN3H,OAAA;YAAKsH,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBvH,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAChD3H,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,IAAAvG,oBAAA,GACzBf,aAAa,CAACuK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvK,GAAG,KAAKsG,iBAAiB,CAACT,kBAAkB,CAAC,cAAA/E,oBAAA,uBAAvEA,oBAAA,CAAyEX,KAAK,EAAC,GAAC,EAACmG,iBAAiB,CAACT,kBAAkB,EAAC,IAAE,EAACS,iBAAiB,CAACD,yBAAyB,EAAC,OACxK;YAAA;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACN3H,OAAA;YAAKsH,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBvH,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAChD3H,OAAA;cAAMsH,SAAS,EAAC,YAAY;cAAAC,QAAA,GACzBf,iBAAiB,CAACF,gBAAgB,EAAC,UACtC;YAAA;cAAAkB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEZ,CAAC;AAAC7G,EAAA,CA/dIN,aAAa;EAAA,QACwBZ,cAAc,EAI5BC,kBAAkB;AAAA;AAAA6K,EAAA,GALzClK,aAAa;AAienB,eAAeA,aAAa;AAAC,IAAAkK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}