{"ast":null,"code":"/**\r\n ExerciseChart.js - Exercise Activity Tracking Visualization\r\n \r\n This component provides comprehensive exercise monitoring:\r\n - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\r\n - Duration tracking and weekly summaries\r\n - Color-coded activity categorization\r\n - Interactive tooltips with exercise details\r\n - Navigation controls for time periods\r\n - Integration with patient data and chart navigation\r\n \r\n Architecture:\r\n - Uses custom SVG for stacked bar chart visualization\r\n - Implements activity categorization system with emoji indicators\r\n - Provides color-coded activity types for easy identification\r\n - Supports expandable views\r\n - Implements time-based navigation and data filtering\r\n \r\n Visualization Features:\r\n - Stacked bar chart showing daily activity breakdown\r\n - Color-coded activity types with emoji indicators\r\n - Interactive tooltips with detailed exercise information\r\n - Design adapting to container size\r\n - Dynamic Y-axis scaling based on data range\r\n \r\n Activity Categories:\r\n - Walking: Low-impact cardiovascular exercise\r\n - Swimming: Full-body cardiovascular workout\r\n - Running: High-impact cardiovascular exercise\r\n - Resistance/Weights: Strength training activities\r\n - Biking: Low-impact cardiovascular exercise\r\n - Balance/Stretching: Flexibility and balance training\r\n - Other: Miscellaneous physical activities\r\n \r\n Component Structure:\r\n - Chart Container: Main SVG container with sizing\r\n - Y-Axis: Duration scale with dynamic labeling\r\n - X-Axis: Day-of-week labels with date information\r\n - Data Bars: Stacked activity bars with color coding\r\n - Legend: Activity type explanations with emojis\r\n - Tooltip: Detailed exercise information on hover\r\n \r\n Essential for physical activity monitoring and fitness tracking.\r\n */import React,{useState,useMemo,useRef}from'react';import usePatientData from'../../hooks/usePatientData';import useChartNavigation from'../../hooks/useChartNavigation';import Legend from'../Legend';import{createChartConfig}from'../chart-utils/ChartConfigFactory';import'./ExerciseChart.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const exerciseTypes=[{key:'walking',label:'Walking',color:'var(--chart-color-walking)',emoji:'🚶'},{key:'swimming',label:'Swimming',color:'var(--chart-color-swimming)',emoji:'🏊‍♀️'},{key:'running',label:'Running',color:'var(--chart-color-running)',emoji:'🏃‍♂️'},{key:'resistance/weights',label:'Resistance/Weights',color:'var(--chart-color-resistance)',emoji:'🏋️'},{key:'biking',label:'Biking',color:'var(--chart-color-biking)',emoji:'🚴'},{key:'balance/stretching',label:'Balance/Stretching',color:'var(--chart-color-balance)',emoji:'🧘'},{key:'other',label:'Other',color:'var(--chart-color-other)',emoji:'➕'}];const exerciseLegendItems=exerciseTypes.map(_ref=>{let{label,color,emoji}=_ref;return{label:\"\".concat(emoji,\" \").concat(label),color};});const ExerciseChart=_ref2=>{var _exerciseTypes$find,_exerciseTypes$find2;let{patientId,isExpanded=false,onExpand,viewMode='patient',navigation}=_ref2;const{exerciseData,loading,error}=usePatientData(patientId,'exercise');// Use navigation from parent or fallback to internal navigation\nconst useInternalNavigation=!navigation;const internalNavigation=useChartNavigation('exercise');const nav=navigation||internalNavigation;const config=createChartConfig('exercise',isExpanded);const chartHeight=config.height-config.padding.top-config.padding.bottom;const{start:startOfWeek,end:endOfWeek}=nav.getDateRange();const weekData=exerciseData.filter(d=>{if(!d.date)return false;const itemDate=new Date(d.date);return itemDate>=startOfWeek&&itemDate<=endOfWeek;});// Get 3-month data\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const threeMonthData=exerciseData.filter(d=>{if(!d.date)return false;const itemDate=new Date(d.date);return itemDate>=startOfThreeMonths&&itemDate<=endOfThreeMonths;});const daysOfWeek=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];const groupedData=daysOfWeek.reduce((acc,day)=>{acc[day]={walking:0,swimming:0,running:0,'resistance/weights':0,biking:0,'balance/stretching':0,other:0,totalMinutes:0};return acc;},{});weekData.forEach(item=>{if(!item.date)return;const dayName=daysOfWeek[new Date(item.date).getDay()];if(groupedData[dayName]){groupedData[dayName].walking+=Number(item.walking)||0;groupedData[dayName].swimming+=Number(item.swimming)||0;groupedData[dayName].running+=Number(item.running)||0;groupedData[dayName]['resistance/weights']+=Number(item['resistance/weights'])||0;groupedData[dayName].biking+=Number(item.biking)||0;groupedData[dayName]['balance/stretching']+=Number(item['balance/stretching'])||0;groupedData[dayName].other+=Number(item.other)||0;groupedData[dayName].totalMinutes=groupedData[dayName].walking+groupedData[dayName].swimming+groupedData[dayName].running+groupedData[dayName]['resistance/weights']+groupedData[dayName].biking+groupedData[dayName]['balance/stretching']+groupedData[dayName].other;}});const maxVal=Math.max(...Object.values(groupedData).map(day=>day.totalMinutes),0);const maxDuration=Math.max(60,Math.ceil(maxVal/30)*30);const generateYAxisLabels=max=>{if(max===0)return[0];const step=Math.max(15,Math.ceil(max/6/15)*15);const labels=[];for(let i=0;i<=max;i+=step){labels.push(i);}return labels;};const yAxisLabels=generateYAxisLabels(maxDuration);// Calculate summary statistics for physician view\nconst weekSummary=useMemo(()=>{if(!weekData.length)return null;const totalMinutes=Object.values(groupedData).reduce((sum,day)=>sum+day.totalMinutes,0);const avgMinutesPerDay=(totalMinutes/7).toFixed(0);// Count days with exercise\nconst daysWithExercise=Object.values(groupedData).filter(day=>day.totalMinutes>0).length;// Find most common exercise type\nconst exerciseTypeTotals={};exerciseTypes.forEach(type=>{exerciseTypeTotals[type.key]=Object.values(groupedData).reduce((sum,day)=>sum+day[type.key],0);});const mostCommonExercise=Object.entries(exerciseTypeTotals).sort((_ref3,_ref4)=>{let[,a]=_ref3;let[,b]=_ref4;return b-a;})[0];// Calculate exercise consistency (days with 30+ minutes)\nconst daysWithAdequateExercise=Object.values(groupedData).filter(day=>day.totalMinutes>=30).length;// Calculate average session length\nconst totalSessions=weekData.filter(item=>{const dayName=daysOfWeek[new Date(item.date).getDay()];return groupedData[dayName]&&groupedData[dayName].totalMinutes>0;}).length;const avgSessionLength=totalSessions>0?(totalMinutes/totalSessions).toFixed(0):0;return{totalMinutes,avgMinutesPerDay,daysWithExercise,mostCommonExercise:mostCommonExercise[0],mostCommonExerciseMinutes:mostCommonExercise[1],daysWithAdequateExercise,totalSessions,avgSessionLength};},[weekData,groupedData]);// Calculate 3-month summary statistics for physician view\nconst threeMonthSummary=useMemo(()=>{if(!threeMonthData.length)return null;// Group 3-month data by day\nconst threeMonthGroupedData={};threeMonthData.forEach(item=>{if(!item.date)return;const dayName=daysOfWeek[new Date(item.date).getDay()];if(!threeMonthGroupedData[dayName]){threeMonthGroupedData[dayName]={walking:0,swimming:0,running:0,'resistance/weights':0,biking:0,'balance/stretching':0,other:0,totalMinutes:0};}threeMonthGroupedData[dayName].walking+=Number(item.walking)||0;threeMonthGroupedData[dayName].swimming+=Number(item.swimming)||0;threeMonthGroupedData[dayName].running+=Number(item.running)||0;threeMonthGroupedData[dayName]['resistance/weights']+=Number(item['resistance/weights'])||0;threeMonthGroupedData[dayName].biking+=Number(item.biking)||0;threeMonthGroupedData[dayName]['balance/stretching']+=Number(item['balance/stretching'])||0;threeMonthGroupedData[dayName].other+=Number(item.other)||0;threeMonthGroupedData[dayName].totalMinutes=threeMonthGroupedData[dayName].walking+threeMonthGroupedData[dayName].swimming+threeMonthGroupedData[dayName].running+threeMonthGroupedData[dayName]['resistance/weights']+threeMonthGroupedData[dayName].biking+threeMonthGroupedData[dayName]['balance/stretching']+threeMonthGroupedData[dayName].other;});const totalMinutes=Object.values(threeMonthGroupedData).reduce((sum,day)=>sum+day.totalMinutes,0);// Calculate actual days in the 3-month period\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const daysInThreeMonths=Math.ceil((endOfThreeMonths-startOfThreeMonths)/(1000*60*60*24))+1;const avgMinutesPerDay=(totalMinutes/daysInThreeMonths).toFixed(0);// Count days with exercise\nconst daysWithExercise=Object.values(threeMonthGroupedData).filter(day=>day.totalMinutes>0).length;// Find most common exercise type\nconst exerciseTypeTotals={};exerciseTypes.forEach(type=>{exerciseTypeTotals[type.key]=Object.values(threeMonthGroupedData).reduce((sum,day)=>sum+day[type.key],0);});const mostCommonExercise=Object.entries(exerciseTypeTotals).sort((_ref5,_ref6)=>{let[,a]=_ref5;let[,b]=_ref6;return b-a;})[0];// Calculate average session length\nconst totalSessions=threeMonthData.filter(item=>{const dayName=daysOfWeek[new Date(item.date).getDay()];return threeMonthGroupedData[dayName]&&threeMonthGroupedData[dayName].totalMinutes>0;}).length;const avgSessionLength=totalSessions>0?(totalMinutes/totalSessions).toFixed(0):0;return{totalMinutes,avgMinutesPerDay,daysWithExercise,mostCommonExercise:mostCommonExercise[0],mostCommonExerciseMinutes:mostCommonExercise[1],totalSessions,avgSessionLength};},[threeMonthData]);const formatDateRange=(start,end)=>{const startStr=start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" to \").concat(endStr);};return/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-chart-container \".concat(isExpanded?'expanded':''),children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Activity Breakdown by Type\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getCurrentMonthYear()}),/*#__PURE__*/_jsxs(\"svg\",{width:\"100%\",viewBox:\"0 0 \".concat(config.width,\" \").concat(config.height),className:\"exercise-svg\",children:[/*#__PURE__*/_jsxs(\"g\",{className:\"y-axis\",children:[yAxisLabels.map(value=>{const y=config.padding.top+chartHeight-value/maxDuration*chartHeight;return/*#__PURE__*/_jsxs(\"g\",{className:\"y-axis-grid-group\",children:[/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-horizontal\",x1:config.padding.left,y1:y,x2:config.width-config.padding.right,y2:y}),/*#__PURE__*/_jsx(\"text\",{x:config.padding.left-15,y:y+3,fontSize:config.fontSize.yAxis,textAnchor:\"end\",fill:\"var(--chart-color-text-secondary)\",className:\"chart-tick-label\",children:value})]},value);}),/*#__PURE__*/_jsx(\"text\",{x:-(config.padding.top+chartHeight/2),y:config.padding.left/2-5,fontSize:config.fontSize.yAxisTitle,textAnchor:\"middle\",fill:\"var(--chart-color-text-primary)\",transform:\"rotate(-90)\",className:\"y-axis-title\",children:\"Minutes\"})]}),/*#__PURE__*/_jsx(\"g\",{className:\"x-axis\",children:daysOfWeek.map((day,dayIndex)=>{const date=new Date(startOfWeek);date.setDate(date.getDate()+dayIndex);const x=config.padding.left+dayIndex*config.dayWidth+config.dayWidth/2;const dayData=groupedData[day];const performedExercises=exerciseTypes.filter(type=>(dayData[type.key]||0)>0);const emojis=performedExercises.map(type=>type.emoji).join(' ');return/*#__PURE__*/_jsxs(\"g\",{className:\"x-axis-label-group\",children:[/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-vertical\",x1:config.padding.left+dayIndex*config.dayWidth,y1:config.padding.top,x2:config.padding.left+dayIndex*config.dayWidth,y2:config.height-config.padding.bottom}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+15,textAnchor:\"middle\",fontSize:config.fontSize.dayLabel,fill:\"var(--chart-color-text-primary)\",className:\"x-axis-day-label\",children:day}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+30,textAnchor:\"middle\",fontSize:config.fontSize.dateLabel,fill:\"var(--chart-color-text-secondary)\",className:\"x-axis-date-label\",children:date.getDate()}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+48,textAnchor:\"middle\",fontSize:config.fontSize.emoji,children:emojis})]},dayIndex);})}),/*#__PURE__*/_jsx(\"g\",{className:\"data-bars\",children:daysOfWeek.map((day,dayIndex)=>{const dayData=groupedData[day];const x=config.padding.left+dayIndex*config.dayWidth+config.dayWidth/2;let currentY=config.height-config.padding.bottom;return/*#__PURE__*/_jsx(\"g\",{children:exerciseTypes.map(type=>{const minutes=Number(dayData[type.key])||0;if(minutes<=0)return null;const segmentHeight=minutes/maxDuration*chartHeight;const segmentY=currentY-segmentHeight;const segment=/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"rect\",{x:x-config.barWidth/2,y:segmentY,width:config.barWidth,height:segmentHeight,fill:type.color,className:\"data-bar\",children:/*#__PURE__*/_jsx(\"title\",{children:\"\".concat(type.label,\": \").concat(Math.round(minutes),\" min\")})}),segmentHeight>=12&&/*#__PURE__*/_jsx(\"text\",{x:x,y:segmentY+segmentHeight/2,textAnchor:\"middle\",fontSize:isExpanded?8:6,fill:\"black\",className:\"duration-label\",style:{fontWeight:'bold'},children:Math.round(minutes)})]},type.key);currentY=segmentY;return segment;})},day);})})]}),/*#__PURE__*/_jsx(Legend,{title:\"Exercise Type\",items:exerciseLegendItems,orientation:\"horizontal\",size:\"medium\"}),viewMode==='physician'&&weekSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"summary-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Week Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Exercise:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.totalMinutes,\" minutes\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Daily Average:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.avgMinutesPerDay,\" minutes/day\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Exercise Days:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.daysWithExercise,\"/7 days\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[(_exerciseTypes$find=exerciseTypes.find(t=>t.key===weekSummary.mostCommonExercise))===null||_exerciseTypes$find===void 0?void 0:_exerciseTypes$find.emoji,\" \",weekSummary.mostCommonExercise,\" (\",weekSummary.mostCommonExerciseMinutes,\" min)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Avg Session:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.avgSessionLength,\" minutes\"]})]})]})]}),threeMonthSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"3-Month Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Exercise:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.totalMinutes,\" minutes\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Daily Average:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.avgMinutesPerDay,\" minutes/day\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Exercise Days:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.daysWithExercise,\" days\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[(_exerciseTypes$find2=exerciseTypes.find(t=>t.key===threeMonthSummary.mostCommonExercise))===null||_exerciseTypes$find2===void 0?void 0:_exerciseTypes$find2.emoji,\" \",threeMonthSummary.mostCommonExercise,\" (\",threeMonthSummary.mostCommonExerciseMinutes,\" min)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Avg Session:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.avgSessionLength,\" minutes\"]})]})]})]})]})]});};export default ExerciseChart;","map":{"version":3,"names":["React","useState","useMemo","useRef","usePatientData","useChartNavigation","Legend","createChartConfig","jsx","_jsx","jsxs","_jsxs","exerciseTypes","key","label","color","emoji","exerciseLegendItems","map","_ref","concat","ExerciseChart","_ref2","_exerciseTypes$find","_exerciseTypes$find2","patientId","isExpanded","onExpand","viewMode","navigation","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","config","chartHeight","height","padding","top","bottom","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthData","daysOfWeek","groupedData","reduce","acc","day","walking","swimming","running","biking","other","totalMinutes","forEach","item","dayName","getDay","Number","maxVal","Math","max","Object","values","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","weekSummary","length","sum","avgMinutesPerDay","toFixed","daysWithExercise","exerciseTypeTotals","type","mostCommonExercise","entries","sort","_ref3","_ref4","a","b","daysWithAdequateExercise","totalSessions","avgSessionLength","mostCommonExerciseMinutes","threeMonthSummary","threeMonthGroupedData","daysInThreeMonths","_ref5","_ref6","formatDateRange","startStr","toLocaleDateString","month","endStr","className","children","getCurrentMonthYear","width","viewBox","value","y","x1","left","y1","x2","right","y2","x","fontSize","yAxis","textAnchor","fill","yAxisTitle","transform","dayIndex","setDate","getDate","dayWidth","dayData","performedExercises","emojis","join","dayLabel","dateLabel","currentY","minutes","segmentHeight","segmentY","segment","barWidth","round","style","fontWeight","title","items","orientation","size","find","t"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/Health_data_dashboard-MCC_project_checkpoint/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["/**\r\n ExerciseChart.js - Exercise Activity Tracking Visualization\r\n \r\n This component provides comprehensive exercise monitoring:\r\n - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\r\n - Duration tracking and weekly summaries\r\n - Color-coded activity categorization\r\n - Interactive tooltips with exercise details\r\n - Navigation controls for time periods\r\n - Integration with patient data and chart navigation\r\n \r\n Architecture:\r\n - Uses custom SVG for stacked bar chart visualization\r\n - Implements activity categorization system with emoji indicators\r\n - Provides color-coded activity types for easy identification\r\n - Supports expandable views\r\n - Implements time-based navigation and data filtering\r\n \r\n Visualization Features:\r\n - Stacked bar chart showing daily activity breakdown\r\n - Color-coded activity types with emoji indicators\r\n - Interactive tooltips with detailed exercise information\r\n - Design adapting to container size\r\n - Dynamic Y-axis scaling based on data range\r\n \r\n Activity Categories:\r\n - Walking: Low-impact cardiovascular exercise\r\n - Swimming: Full-body cardiovascular workout\r\n - Running: High-impact cardiovascular exercise\r\n - Resistance/Weights: Strength training activities\r\n - Biking: Low-impact cardiovascular exercise\r\n - Balance/Stretching: Flexibility and balance training\r\n - Other: Miscellaneous physical activities\r\n \r\n Component Structure:\r\n - Chart Container: Main SVG container with sizing\r\n - Y-Axis: Duration scale with dynamic labeling\r\n - X-Axis: Day-of-week labels with date information\r\n - Data Bars: Stacked activity bars with color coding\r\n - Legend: Activity type explanations with emojis\r\n - Tooltip: Detailed exercise information on hover\r\n \r\n Essential for physical activity monitoring and fitness tracking.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport './ExerciseChart.css';\r\n\r\nconst exerciseTypes = [\r\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\r\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\r\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\r\n  { key: 'resistance/weights', label: 'Resistance/Weights', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\r\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\r\n  { key: 'balance/stretching', label: 'Balance/Stretching', color: 'var(--chart-color-balance)', emoji: '🧘' },\r\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\r\n];\r\n\r\nconst exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\r\n  label: `${emoji} ${label}`,\r\n  color,\r\n}));\r\n\r\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('exercise');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const config = createChartConfig('exercise', isExpanded);\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\r\n  });\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\r\n  });\r\n\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const groupedData = daysOfWeek.reduce((acc, day) => {\r\n    acc[day] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  weekData.forEach(item => {\r\n    if (!item.date) return;\r\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n    if (groupedData[dayName]) {\r\n      groupedData[dayName].walking += Number(item.walking) || 0;\r\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      groupedData[dayName].running += Number(item.running) || 0;\r\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      groupedData[dayName].biking += Number(item.biking) || 0;\r\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      groupedData[dayName].other += Number(item.other) || 0;\r\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\r\n    }\r\n  });\r\n\r\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\r\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\r\n\r\n  const generateYAxisLabels = (max) => {\r\n    if (max === 0) return [0];\r\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\r\n    const labels = [];\r\n    for (let i = 0; i <= max; i += step) {\r\n      labels.push(i);\r\n    }\r\n    return labels;\r\n  };\r\n\r\n  const yAxisLabels = generateYAxisLabels(maxDuration);\r\n\r\n  // Calculate summary statistics for physician view\r\n  const weekSummary = useMemo(() => {\r\n    if (!weekData.length) return null;\r\n\r\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\r\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\r\n    \r\n    // Count days with exercise\r\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\r\n    \r\n    // Find most common exercise type\r\n    const exerciseTypeTotals = {};\r\n    exerciseTypes.forEach(type => {\r\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\r\n    });\r\n    \r\n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n    \r\n    // Calculate exercise consistency (days with 30+ minutes)\r\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\r\n    \r\n    // Calculate average session length\r\n    const totalSessions = weekData.filter(item => {\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\r\n    }).length;\r\n    \r\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\r\n\r\n    return {\r\n      totalMinutes,\r\n      avgMinutesPerDay,\r\n      daysWithExercise,\r\n      mostCommonExercise: mostCommonExercise[0],\r\n      mostCommonExerciseMinutes: mostCommonExercise[1],\r\n      daysWithAdequateExercise,\r\n      totalSessions,\r\n      avgSessionLength\r\n    };\r\n  }, [weekData, groupedData]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = useMemo(() => {\r\n    if (!threeMonthData.length) return null;\r\n\r\n    // Group 3-month data by day\r\n    const threeMonthGroupedData = {};\r\n    threeMonthData.forEach(item => {\r\n      if (!item.date) return;\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      if (!threeMonthGroupedData[dayName]) {\r\n        threeMonthGroupedData[dayName] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n      }\r\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\r\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\r\n      threeMonthGroupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\r\n      threeMonthGroupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\r\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName]['resistance/weights'] + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['balance/stretching'] + threeMonthGroupedData[dayName].other;\r\n    });\r\n\r\n    const totalMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\r\n    \r\n    // Calculate actual days in the 3-month period\r\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\r\n    const avgMinutesPerDay = (totalMinutes / daysInThreeMonths).toFixed(0);\r\n    \r\n    // Count days with exercise\r\n    const daysWithExercise = Object.values(threeMonthGroupedData).filter(day => day.totalMinutes > 0).length;\r\n    \r\n    // Find most common exercise type\r\n    const exerciseTypeTotals = {};\r\n    exerciseTypes.forEach(type => {\r\n      exerciseTypeTotals[type.key] = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day[type.key], 0);\r\n    });\r\n    \r\n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n    \r\n    // Calculate average session length\r\n    const totalSessions = threeMonthData.filter(item => {\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      return threeMonthGroupedData[dayName] && threeMonthGroupedData[dayName].totalMinutes > 0;\r\n    }).length;\r\n    \r\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\r\n\r\n    return {\r\n      totalMinutes,\r\n      avgMinutesPerDay,\r\n      daysWithExercise,\r\n      mostCommonExercise: mostCommonExercise[0],\r\n      mostCommonExerciseMinutes: mostCommonExercise[1],\r\n      totalSessions,\r\n      avgSessionLength\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  return (\r\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\r\n        <h3 className=\"chart-title\">Activity Breakdown by Type</h3>\r\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n        \r\n        <svg \r\n          width=\"100%\" \r\n          viewBox={`0 0 ${config.width} ${config.height}`}\r\n          className=\"exercise-svg\"\r\n        >\r\n          <g className=\"y-axis\">\r\n            {yAxisLabels.map(value => {\r\n              const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\r\n              return (\r\n                <g key={value} className=\"y-axis-grid-group\">\r\n                  <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\r\n                  <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\r\n                </g>\r\n              );\r\n            })}\r\n            <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\r\n          </g>\r\n\r\n          <g className=\"x-axis\">\r\n            {daysOfWeek.map((day, dayIndex) => {\r\n              const date = new Date(startOfWeek);\r\n              date.setDate(date.getDate() + dayIndex);\r\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n\r\n              const dayData = groupedData[day];\r\n              const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\r\n              const emojis = performedExercises.map(type => type.emoji).join(' ');\r\n\r\n              return (\r\n                <g key={dayIndex} className=\"x-axis-label-group\">\r\n                  <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\r\n                  <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\r\n                  <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\r\n                  <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n\r\n          <g className=\"data-bars\">\r\n            {daysOfWeek.map((day, dayIndex) => {\r\n              const dayData = groupedData[day];\r\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n              let currentY = config.height - config.padding.bottom;\r\n\r\n              return (\r\n                <g key={day}>\r\n                  {exerciseTypes.map(type => {\r\n                    const minutes = Number(dayData[type.key]) || 0;\r\n                    if (minutes <= 0) return null;\r\n\r\n                    const segmentHeight = (minutes / maxDuration) * chartHeight;\r\n                    const segmentY = currentY - segmentHeight;\r\n\r\n                    const segment = (\r\n                      <g key={type.key}>\r\n                        <rect\r\n                          x={x - config.barWidth / 2}\r\n                          y={segmentY}\r\n                          width={config.barWidth}\r\n                          height={segmentHeight}\r\n                          fill={type.color}\r\n                          className=\"data-bar\"\r\n                        >\r\n                          <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\r\n                        </rect>\r\n                        {/* Duration label inside the segment */}\r\n                        {segmentHeight >= 12 && (\r\n                          <text\r\n                            x={x}\r\n                            y={segmentY + segmentHeight / 2}\r\n                            textAnchor=\"middle\"\r\n                            fontSize={isExpanded ? 8 : 6}\r\n                            fill=\"black\"\r\n                            className=\"duration-label\"\r\n                            style={{ \r\n                              fontWeight: 'bold'\r\n                            }}\r\n                          >\r\n                            {Math.round(minutes)}\r\n                          </text>\r\n                        )}\r\n                      </g>\r\n                    );\r\n\r\n                    currentY = segmentY;\r\n                    return segment;\r\n                  })}\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n        </svg>\r\n        \r\n        <Legend \r\n          title=\"Exercise Type\" \r\n          items={exerciseLegendItems} \r\n          orientation=\"horizontal\" \r\n          size=\"medium\" \r\n        />\r\n\r\n        {/* Show summary for physician view only */}\r\n        {viewMode === 'physician' && weekSummary && (\r\n          <div className=\"summary-container\">\r\n            <div className=\"chart-summary\">\r\n              <h4>Week Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Total Exercise:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.totalMinutes} minutes\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Daily Average:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.avgMinutesPerDay} minutes/day\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Exercise Days:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.daysWithExercise}/7 days\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Most Common:</span>\r\n                  <span className=\"stat-value\">\r\n                    {exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)?.emoji} {weekSummary.mostCommonExercise} ({weekSummary.mostCommonExerciseMinutes} min)\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Avg Session:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.avgSessionLength} minutes\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {threeMonthSummary && (\r\n              <div className=\"chart-summary\">\r\n                <h4>3-Month Summary</h4>\r\n                <div className=\"summary-stats\">\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Total Exercise:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.totalMinutes} minutes\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Daily Average:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.avgMinutesPerDay} minutes/day\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Exercise Days:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.daysWithExercise} days\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Most Common:</span>\r\n                    <span className=\"stat-value\">\r\n                      {exerciseTypes.find(t => t.key === threeMonthSummary.mostCommonExercise)?.emoji} {threeMonthSummary.mostCommonExercise} ({threeMonthSummary.mostCommonExerciseMinutes} min)\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Avg Session:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.avgSessionLength} minutes\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ExerciseChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}