{"ast":null,"code":"import React from'react';import usePatientData from'./hooks/usePatientData';import useVisualizations from'./hooks/useVisualizations';import useVisualizationHelpers from'./hooks/useVisualizationHelpers';import useChartNavigation from'./hooks/useChartNavigation';import PatientInfoCard from'./components/PatientInfoCard';import DashboardGrid from'./components/DashboardGrid';import'./PatientDashboard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PatientDashboard=_ref=>{let{patientId}=_ref;const{data,loading,error}=usePatientData(patientId);const{allVisualizations,availableVisualizations,selectedVisualizations,handleVisualizationChange}=useVisualizations('patient',data);const{expandedItem,handleExpand,renderVisualization}=useVisualizationHelpers(patientId,allVisualizations,selectedVisualizations);// Create universal navigation for each chart type\nconst chartNavigation={};Object.keys(availableVisualizations).forEach(chartType=>{chartNavigation[chartType]=useChartNavigation(chartType);});// Override renderVisualization to set correct viewMode\nconst renderVisualizationWithMode=function(visualizationType,boxId){let{getNavigationProps}=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const viz=allVisualizations[visualizationType];if(!viz)return/*#__PURE__*/_jsx(\"div\",{children:\"Invalid visualization\"});const Component=viz.component;const isExpanded=expandedItem===boxId;const navigation=chartNavigation[visualizationType];return/*#__PURE__*/_jsx(Component,{patientId:patientId,isExpanded:isExpanded,onExpand:()=>handleExpand(boxId),viewMode:\"patient\",navigation:navigation,getNavigationProps:getNavigationProps});};const patientInfo=data===null||data===void 0?void 0:data.patientInfo;if(loading)return/*#__PURE__*/_jsx(\"div\",{className:\"loading-screen\",children:\"Loading patient data...\"});if(error)return/*#__PURE__*/_jsxs(\"div\",{className:\"error-screen\",children:[\"Error: \",error]});return/*#__PURE__*/_jsxs(\"div\",{className:\"patient-dashboard\",children:[/*#__PURE__*/_jsx(PatientInfoCard,{patientInfo:patientInfo,loading:loading,error:error,variant:\"patient\"}),/*#__PURE__*/_jsx(DashboardGrid,{viewMode:\"patient\",selectedVisualizations:selectedVisualizations,availableVisualizations:availableVisualizations,allVisualizations:allVisualizations,onVisualizationChange:handleVisualizationChange,onExpand:handleExpand,expandedItem:expandedItem,renderVisualization:renderVisualizationWithMode})]});};export default PatientDashboard;","map":{"version":3,"names":["React","usePatientData","useVisualizations","useVisualizationHelpers","useChartNavigation","PatientInfoCard","DashboardGrid","jsx","_jsx","jsxs","_jsxs","PatientDashboard","_ref","patientId","data","loading","error","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedItem","handleExpand","renderVisualization","chartNavigation","Object","keys","forEach","chartType","renderVisualizationWithMode","visualizationType","boxId","getNavigationProps","arguments","length","undefined","viz","children","Component","component","isExpanded","navigation","onExpand","viewMode","patientInfo","className","variant","onVisualizationChange"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PatientDashboard.js"],"sourcesContent":["import React from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PatientDashboard.css';\n\nconst PatientDashboard = ({ patientId }) => {\n  const { data, loading, error } = usePatientData(patientId);\n  const { \n    allVisualizations, \n    availableVisualizations, \n    selectedVisualizations, \n    handleVisualizationChange \n  } = useVisualizations('patient', data);\n  \n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\n    patientId, \n    allVisualizations, \n    selectedVisualizations\n  );\n\n  // Create universal navigation for each chart type\n  const chartNavigation = {};\n  Object.keys(availableVisualizations).forEach(chartType => {\n    chartNavigation[chartType] = useChartNavigation(chartType);\n  });\n\n  // Override renderVisualization to set correct viewMode\n  const renderVisualizationWithMode = (visualizationType, boxId, { getNavigationProps } = {}) => {\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <div>Invalid visualization</div>;\n\n    const Component = viz.component;\n    const isExpanded = expandedItem === boxId;\n    const navigation = chartNavigation[visualizationType];\n    \n    return <Component \n      patientId={patientId} \n      isExpanded={isExpanded} \n      onExpand={() => handleExpand(boxId)}\n      viewMode=\"patient\"\n      navigation={navigation}\n      getNavigationProps={getNavigationProps}\n    />;\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  if (loading) return <div className=\"loading-screen\">Loading patient data...</div>;\n  if (error) return <div className=\"error-screen\">Error: {error}</div>;\n\n  return (\n    <div className=\"patient-dashboard\">\n      <PatientInfoCard \n        patientInfo={patientInfo}\n        loading={loading}\n        error={error}\n        variant=\"patient\"\n      />\n\n      <DashboardGrid\n        viewMode=\"patient\"\n        selectedVisualizations={selectedVisualizations}\n        availableVisualizations={availableVisualizations}\n        allVisualizations={allVisualizations}\n        onVisualizationChange={handleVisualizationChange}\n        onExpand={handleExpand}\n        expandedItem={expandedItem}\n        renderVisualization={renderVisualizationWithMode}\n      />\n    </div>\n  );\n};\n\nexport default PatientDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}