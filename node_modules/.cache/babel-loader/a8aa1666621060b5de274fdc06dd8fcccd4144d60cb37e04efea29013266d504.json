{"ast":null,"code":"/**\n ExerciseChart.js - Exercise Activity Tracking Visualization\n \n This component provides comprehensive exercise monitoring:\n - Activity type breakdown (walking, swimming, running, biking, muscle-strengthening, balance)\n - Duration tracking and weekly summaries\n - Color-coded activity categorization\n - Interactive tooltips with exercise details\n - Navigation controls for time periods\n - Integration with patient data and chart navigation\n \n Architecture:\n - Uses custom SVG for stacked bar chart visualization\n - Implements activity categorization system with emoji indicators\n - Provides color-coded activity types for easy identification\n - Supports expandable views\n - Implements time-based navigation and data filtering\n \n Visualization Features:\n - Stacked bar chart showing daily activity breakdown\n - Color-coded activity types with emoji indicators\n - Interactive tooltips with detailed exercise information\n - Design adapting to container size\n - Dynamic Y-axis scaling based on data range\n \n Activity Categories:\n - Walking: Low-impact cardiovascular exercise\n - Swimming: Full-body cardiovascular workout\n - Running: High-impact cardiovascular exercise\n - Biking: Low-impact cardiovascular exercise\n - Muscle-Strengthening: Strength training activities\n - Balance: Balance and stability training\n - Other: Miscellaneous physical activities\n \n Component Structure:\n - Chart Container: Main SVG container with sizing\n - Y-Axis: Duration scale with dynamic labeling\n - X-Axis: Day-of-week labels with date information\n - Data Bars: Stacked activity bars with color coding\n - Legend: Activity type explanations with emojis\n - Tooltip: Detailed exercise information on hover\n \n Essential for physical activity monitoring and fitness tracking.\n */import React,{useState,useRef}from'react';import usePatientData from'../../hooks/usePatientData';import useChartNavigation from'../../hooks/useChartNavigation';import Legend from'../Legend';import'./ExerciseChart.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const exerciseTypes=[{key:'walking',label:'Walking',color:'var(--chart-color-walking)',emoji:'🚶'},{key:'swimming',label:'Swimming',color:'var(--chart-color-swimming)',emoji:'🏊‍♀️'},{key:'running',label:'Running',color:'var(--chart-color-running)',emoji:'🏃‍♂️'},{key:'biking',label:'Biking',color:'var(--chart-color-biking)',emoji:'🚴'},{key:'muscle-strengthening',label:'Muscle-Strengthening',color:'var(--chart-color-resistance)',emoji:'🏋️'},{key:'balance',label:'Balance',color:'var(--chart-color-balance)',emoji:'🧘'},{key:'other',label:'Other',color:'var(--chart-color-other)',emoji:'➕'}];const exerciseLegendItems=exerciseTypes.map(_ref=>{let{label,color,emoji}=_ref;return{label:\"\".concat(emoji,\" \").concat(label),color};});const ExerciseChart=_ref2=>{var _exerciseTypes$find,_exerciseTypes$find2;let{patientId,isExpanded=false,onExpand,viewMode='patient',navigation,screenshotMode=false,showThreeMonthSummaries=false}=_ref2;const{exerciseData,loading,error}=usePatientData(patientId,'exercise');// State for toggling between activity breakdown and weekly goals view\nconst[showWeeklyGoals,setShowWeeklyGoals]=useState(false);// Use navigation from parent or fallback to internal navigation\nconst useInternalNavigation=!navigation;const internalNavigation=useChartNavigation('exercise');const nav=navigation||internalNavigation;// Simple inline config - no factory pattern needed\nconst config=isExpanded?{width:700,height:550,padding:{top:80,right:60,bottom:100,left:80},dayWidth:80,fontSize:{yAxis:16,yAxisTitle:18,timeLabel:14,dayLabel:14,dateLabel:14,emoji:12},barWidth:12}:{width:450,height:350,padding:{top:60,right:40,bottom:80,left:60},dayWidth:50,fontSize:{yAxis:14,yAxisTitle:16,timeLabel:12,dayLabel:12,dateLabel:12,emoji:10},barWidth:8};const chartHeight=config.height-config.padding.top-config.padding.bottom;const{start:startOfWeek,end:endOfWeek}=nav.getDateRange();const weekData=exerciseData.filter(d=>{if(!d.date)return false;const itemDate=new Date(d.date);return itemDate>=startOfWeek&&itemDate<=endOfWeek;});// Get 3-month data\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const threeMonthData=exerciseData.filter(d=>{if(!d.date)return false;const itemDate=new Date(d.date);return itemDate>=startOfThreeMonths&&itemDate<=endOfThreeMonths;});// Helper functions for exercise data processing\nconst daysOfWeek=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];const initializeDayData=()=>({walking:0,swimming:0,running:0,biking:0,'muscle-strengthening':0,balance:0,other:0,totalMinutes:0});const processExerciseData=weekData=>{const groupedData={};// Initialize all days\ndaysOfWeek.forEach(day=>{groupedData[day]=initializeDayData();});// Process each exercise item\nweekData.forEach(item=>{if(!item.date)return;const date=new Date(item.date);const dayName=!isNaN(date.getTime())?daysOfWeek[date.getDay()]:'Invalid';const dayData=groupedData[dayName];if(dayData){dayData.walking+=Number(item.walking)||0;dayData.swimming+=Number(item.swimming)||0;dayData.running+=Number(item.running)||0;dayData.biking+=Number(item.biking)||0;dayData['muscle-strengthening']+=Number(item['muscle-strengthening'])||0;dayData.balance+=Number(item.balance)||0;dayData.other+=Number(item.other)||0;// Calculate total minutes\ndayData.totalMinutes=dayData.walking+dayData.swimming+dayData.running+dayData.biking+dayData['muscle-strengthening']+dayData.balance+dayData.other;}});return groupedData;};const groupedData=processExerciseData(weekData);// Calculate weekly exercise categories for physician view\nconst aerobic=Object.values(groupedData).reduce((sum,day)=>sum+day.walking+day.swimming+day.running+day.biking,0);const strength=Object.values(groupedData).reduce((sum,day)=>sum+day['muscle-strengthening'],0);const flexibility=Object.values(groupedData).reduce((sum,day)=>sum+day.balance,0);const strengthSessions=Object.values(groupedData).filter(day=>day['muscle-strengthening']>0).length;const flexibilitySessions=Object.values(groupedData).filter(day=>day.balance>0).length;const weeklyCategories={aerobic,strength,flexibility,strengthSessions,flexibilitySessions};// Calculate percentages for physician view\nconst aerobicGoal=150;const strengthGoal=2;const flexibilityGoal=1;const categoryPercentages={aerobic:Math.min(100,Math.round(weeklyCategories.aerobic/aerobicGoal*100)),strength:Math.min(100,Math.round(weeklyCategories.strengthSessions/strengthGoal*100)),flexibility:Math.min(100,Math.round(weeklyCategories.flexibilitySessions/flexibilityGoal*100))};const exerciseValues=Object.values(groupedData).map(day=>day.totalMinutes);const maxVal=exerciseValues.length>0?Math.max(...exerciseValues,0):0;const maxDuration=Math.max(60,Math.ceil(maxVal/30)*30);const generateYAxisLabels=max=>{if(max===0)return[0];const step=Math.max(15,Math.ceil(max/6/15)*15);const labels=[];for(let i=0;i<=max;i+=step){labels.push(i);}return labels;};const yAxisLabels=generateYAxisLabels(maxDuration);// Calculate summary statistics for physician view\nlet weekSummary=null;if(weekData.length>0){const totalMinutes=Object.values(groupedData).reduce((sum,day)=>sum+day.totalMinutes,0);const avgMinutesPerDay=(totalMinutes/7).toFixed(0);// Count days with exercise\nconst daysWithExercise=Object.values(groupedData).filter(day=>day.totalMinutes>0).length;// Find most common exercise type\nconst exerciseTypeTotals={};exerciseTypes.forEach(type=>{exerciseTypeTotals[type.key]=Object.values(groupedData).reduce((sum,day)=>sum+day[type.key],0);});const mostCommonExercise=Object.entries(exerciseTypeTotals).sort((_ref3,_ref4)=>{let[,a]=_ref3;let[,b]=_ref4;return b-a;})[0];// Calculate exercise consistency (days with 30+ minutes)\nconst daysWithAdequateExercise=Object.values(groupedData).filter(day=>day.totalMinutes>=30).length;// Calculate average session length\nconst totalSessions=weekData.filter(item=>{const date=new Date(item.date);const dayName=!isNaN(date.getTime())?daysOfWeek[date.getDay()]:'Invalid';return groupedData[dayName]&&groupedData[dayName].totalMinutes>0;}).length;const avgSessionLength=totalSessions>0?(totalMinutes/totalSessions).toFixed(0):0;weekSummary={totalMinutes,avgMinutesPerDay,daysWithExercise,mostCommonExercise:mostCommonExercise[0],mostCommonExerciseMinutes:mostCommonExercise[1],daysWithAdequateExercise,totalSessions,avgSessionLength};}// Calculate 3-month summary statistics for physician view\nlet threeMonthSummary=null;if(threeMonthData.length>0){// Group 3-month data by day\nconst threeMonthGroupedData={};threeMonthData.forEach(item=>{if(!item.date)return;const date=new Date(item.date);const dayName=!isNaN(date.getTime())?daysOfWeek[date.getDay()]:'Invalid';if(!threeMonthGroupedData[dayName]){threeMonthGroupedData[dayName]={walking:0,swimming:0,running:0,biking:0,'muscle-strengthening':0,balance:0,other:0,totalMinutes:0};}threeMonthGroupedData[dayName].walking+=Number(item.walking)||0;threeMonthGroupedData[dayName].swimming+=Number(item.swimming)||0;threeMonthGroupedData[dayName].running+=Number(item.running)||0;threeMonthGroupedData[dayName].biking+=Number(item.biking)||0;threeMonthGroupedData[dayName]['muscle-strengthening']+=Number(item['muscle-strengthening'])||0;threeMonthGroupedData[dayName].balance+=Number(item.balance)||0;threeMonthGroupedData[dayName].other+=Number(item.other)||0;threeMonthGroupedData[dayName].totalMinutes=threeMonthGroupedData[dayName].walking+threeMonthGroupedData[dayName].swimming+threeMonthGroupedData[dayName].running+threeMonthGroupedData[dayName].biking+threeMonthGroupedData[dayName]['muscle-strengthening']+threeMonthGroupedData[dayName].balance+threeMonthGroupedData[dayName].other;});const totalMinutes=Object.values(threeMonthGroupedData).reduce((sum,day)=>sum+day.totalMinutes,0);// Calculate actual days in the 3-month period\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const daysInThreeMonths=Math.ceil((endOfThreeMonths-startOfThreeMonths)/(1000*60*60*24))+1;const avgMinutesPerDay=(totalMinutes/daysInThreeMonths).toFixed(0);// Count days with exercise\nconst daysWithExercise=Object.values(threeMonthGroupedData).filter(day=>day.totalMinutes>0).length;// Find most common exercise type\nconst exerciseTypeTotals={};exerciseTypes.forEach(type=>{exerciseTypeTotals[type.key]=Object.values(threeMonthGroupedData).reduce((sum,day)=>sum+day[type.key],0);});const mostCommonExercise=Object.entries(exerciseTypeTotals).sort((_ref5,_ref6)=>{let[,a]=_ref5;let[,b]=_ref6;return b-a;})[0];// Calculate average session length\nconst totalSessions=threeMonthData.filter(item=>{const date=new Date(item.date);const dayName=!isNaN(date.getTime())?daysOfWeek[date.getDay()]:'Invalid';return threeMonthGroupedData[dayName]&&threeMonthGroupedData[dayName].totalMinutes>0;}).length;const avgSessionLength=totalSessions>0?(totalMinutes/totalSessions).toFixed(0):0;threeMonthSummary={totalMinutes,avgMinutesPerDay,daysWithExercise,mostCommonExercise:mostCommonExercise[0],mostCommonExerciseMinutes:mostCommonExercise[1],totalSessions,avgSessionLength};}const formatDateRange=(start,end)=>{const startStr=start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" to \").concat(endStr);};// Physician/Unified view - simplified bar chart or weekly goals\nif(viewMode==='physician'||viewMode==='unified'&&showWeeklyGoals){const categories=[{name:'Aerobic',value:weeklyCategories.aerobic,goal:150,percentage:categoryPercentages.aerobic,color:'#4CAF50',description:'150 min/week goal'},{name:'Strength',value:weeklyCategories.strengthSessions,goal:2,percentage:categoryPercentages.strength,color:'#2196F3',description:'2+ sessions/week'},{name:'Balance',value:weeklyCategories.flexibilitySessions,goal:1,percentage:categoryPercentages.flexibility,color:'#FF9800',description:'1+ session/week'}];return/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-chart-container \".concat(isExpanded?'expanded':''),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-header\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Exercise Goals Progress\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getFormattedDateRange()}),viewMode==='unified'&&/*#__PURE__*/_jsxs(\"div\",{className:\"view-toggle\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(!showWeeklyGoals?'active':''),onClick:()=>setShowWeeklyGoals(false),children:\"Activity Breakdown\"}),/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(showWeeklyGoals?'active':''),onClick:()=>setShowWeeklyGoals(true),children:\"Weekly Goals\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"physician-exercise-bars\",children:categories.map((category,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-category-bar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"category-header\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"category-name\",children:category.name}),/*#__PURE__*/_jsxs(\"span\",{className:\"category-percentage\",children:[category.percentage,\"%\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"bar-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"bar-fill\",style:{width:\"\".concat(category.percentage,\"%\"),backgroundColor:category.color,opacity:category.percentage>0?0.8:0.3}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"category-details\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"category-value\",children:category.name==='Aerobic'?\"\".concat(category.value,\" min\"):\"\".concat(category.value,\" sessions\")}),/*#__PURE__*/_jsxs(\"span\",{className:\"category-goal\",children:[\"Goal: \",category.description]})]})]},category.name))}),/*#__PURE__*/_jsx(\"div\",{className:\"summary-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Week Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Aerobic Activity:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weeklyCategories.aerobic,\" minutes\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Strength Sessions:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weeklyCategories.strengthSessions,\" sessions\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Balance Sessions:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weeklyCategories.flexibilitySessions,\" sessions\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Goal Achievement:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[Object.values(categoryPercentages).filter(p=>p>=100).length,\"/3 categories\"]})]})]})]})})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-chart-container \".concat(isExpanded?'expanded':''),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-header\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Activity Breakdown by Type\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getFormattedDateRange()}),viewMode==='unified'&&/*#__PURE__*/_jsxs(\"div\",{className:\"view-toggle\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(!showWeeklyGoals?'active':''),onClick:()=>setShowWeeklyGoals(false),children:\"Activity Breakdown\"}),/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(showWeeklyGoals?'active':''),onClick:()=>setShowWeeklyGoals(true),children:\"Weekly Goals\"})]})]}),/*#__PURE__*/_jsxs(\"svg\",{width:\"100%\",viewBox:\"0 0 \".concat(config.width,\" \").concat(config.height),className:\"exercise-svg\",children:[/*#__PURE__*/_jsxs(\"g\",{className:\"y-axis\",children:[yAxisLabels.map(value=>{const y=config.padding.top+chartHeight-value/maxDuration*chartHeight;return/*#__PURE__*/_jsxs(\"g\",{className:\"y-axis-grid-group\",children:[/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-horizontal\",x1:config.padding.left,y1:y,x2:config.width-config.padding.right,y2:y}),/*#__PURE__*/_jsx(\"text\",{x:config.padding.left-15,y:y+3,fontSize:config.fontSize.yAxis,textAnchor:\"end\",fill:\"var(--chart-color-text-secondary)\",className:\"chart-tick-label\",children:value})]},value);}),/*#__PURE__*/_jsx(\"text\",{x:-(config.padding.top+chartHeight/2),y:config.padding.left/2-5,fontSize:config.fontSize.yAxisTitle,textAnchor:\"middle\",fill:\"var(--chart-color-text-primary)\",transform:\"rotate(-90)\",className:\"y-axis-title\",children:\"Minutes\"})]}),/*#__PURE__*/_jsx(\"g\",{className:\"x-axis\",children:daysOfWeek.map((day,dayIndex)=>{const date=new Date(startOfWeek);date.setDate(date.getDate()+dayIndex);const x=config.padding.left+dayIndex*config.dayWidth+config.dayWidth/2;const dayData=groupedData[day];const performedExercises=exerciseTypes.filter(type=>(dayData[type.key]||0)>0);const emojis=performedExercises.map(type=>type.emoji).join(' ');return/*#__PURE__*/_jsxs(\"g\",{className:\"x-axis-label-group\",children:[/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-vertical\",x1:config.padding.left+dayIndex*config.dayWidth,y1:config.padding.top,x2:config.padding.left+dayIndex*config.dayWidth,y2:config.height-config.padding.bottom}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+15,textAnchor:\"middle\",fontSize:config.fontSize.dayLabel,fill:\"var(--chart-color-text-primary)\",className:\"x-axis-day-label\",children:day}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+30,textAnchor:\"middle\",fontSize:config.fontSize.dateLabel,fill:\"var(--chart-color-text-secondary)\",className:\"x-axis-date-label\",children:date.getDate()}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+48,textAnchor:\"middle\",fontSize:config.fontSize.emoji,children:emojis})]},dayIndex);})}),/*#__PURE__*/_jsx(\"g\",{className:\"data-bars\",children:daysOfWeek.map((day,dayIndex)=>{const dayData=groupedData[day];const x=config.padding.left+dayIndex*config.dayWidth+config.dayWidth/2;let currentY=config.height-config.padding.bottom;return/*#__PURE__*/_jsx(\"g\",{children:exerciseTypes.map(type=>{const minutes=Number(dayData[type.key])||0;if(minutes<=0)return null;const segmentHeight=minutes/maxDuration*chartHeight;const segmentY=currentY-segmentHeight;const segment=/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"rect\",{x:x-config.barWidth/2,y:segmentY,width:config.barWidth,height:segmentHeight,fill:type.color,className:\"data-bar\",children:/*#__PURE__*/_jsx(\"title\",{children:\"\".concat(type.label,\": \").concat(Math.round(minutes),\" min\")})}),segmentHeight>=12&&/*#__PURE__*/_jsx(\"text\",{x:x,y:segmentY+segmentHeight/2,textAnchor:\"middle\",fontSize:isExpanded?8:6,fill:\"black\",className:\"duration-label\",children:Math.round(minutes)})]},type.key);currentY=segmentY;return segment;})},day);})})]}),/*#__PURE__*/_jsx(Legend,{title:\"Exercise Type\",items:exerciseLegendItems,orientation:\"horizontal\",size:\"medium\",hide:screenshotMode}),(viewMode==='physician'||viewMode==='unified')&&weekSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"summary-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Week Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Exercise:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.totalMinutes,\" minutes\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Daily Average:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.avgMinutesPerDay,\" minutes/day\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Exercise Days:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.daysWithExercise,\"/7 days\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[(_exerciseTypes$find=exerciseTypes.find(t=>t.key===weekSummary.mostCommonExercise))===null||_exerciseTypes$find===void 0?void 0:_exerciseTypes$find.emoji,\" \",weekSummary.mostCommonExercise,\" (\",weekSummary.mostCommonExerciseMinutes,\" min)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Avg Session:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.avgSessionLength,\" minutes\"]})]})]})]}),showThreeMonthSummaries&&threeMonthSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"3-Month Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Exercise:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.totalMinutes,\" minutes\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Daily Average:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.avgMinutesPerDay,\" minutes/day\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Exercise Days:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.daysWithExercise,\" days\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[(_exerciseTypes$find2=exerciseTypes.find(t=>t.key===threeMonthSummary.mostCommonExercise))===null||_exerciseTypes$find2===void 0?void 0:_exerciseTypes$find2.emoji,\" \",threeMonthSummary.mostCommonExercise,\" (\",threeMonthSummary.mostCommonExerciseMinutes,\" min)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Avg Session:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.avgSessionLength,\" minutes\"]})]})]})]})]})]});};export default ExerciseChart;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}