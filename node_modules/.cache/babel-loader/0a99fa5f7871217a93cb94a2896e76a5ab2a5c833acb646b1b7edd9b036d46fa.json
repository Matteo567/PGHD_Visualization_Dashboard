{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExerciseChart.js\",\n  _s = $RefreshSig$();\n/**\r\n * ExerciseChart.js - Exercise Activity Tracking Visualization\r\n * \r\n * This component provides comprehensive exercise monitoring:\r\n * - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\r\n * - Duration tracking and weekly summaries\r\n * - Color-coded activity categorization\r\n * - Interactive tooltips with exercise details\r\n * - Navigation controls for time periods\r\n * - Integration with patient data and chart navigation\r\n * \r\n * Architecture:\r\n * - Uses custom SVG for stacked bar chart visualization\r\n * - Implements activity categorization system with emoji indicators\r\n * - Provides color-coded activity types for easy identification\r\n * - Supports expandable views\r\n * - Implements time-based navigation and data filtering\r\n * \r\n * Visualization Features:\r\n * - Stacked bar chart showing daily activity breakdown\r\n * - Color-coded activity types with emoji indicators\r\n * - Interactive tooltips with detailed exercise information\r\n * - Design adapting to container size\r\n * - Dynamic Y-axis scaling based on data range\r\n * \r\n * Activity Categories:\r\n * - Walking: Low-impact cardiovascular exercise\r\n * - Swimming: Full-body cardiovascular workout\r\n * - Running: High-impact cardiovascular exercise\r\n * - Resistance/Weights: Strength training activities\r\n * - Biking: Low-impact cardiovascular exercise\r\n * - Balance/Stretching: Flexibility and balance training\r\n * - Other: Miscellaneous physical activities\r\n * \r\n * Component Structure:\r\n * - Chart Container: Main SVG container with sizing\r\n * - Y-Axis: Duration scale with dynamic labeling\r\n * - X-Axis: Day-of-week labels with date information\r\n * - Data Bars: Stacked activity bars with color coding\r\n * - Legend: Activity type explanations with emojis\r\n * - Tooltip: Detailed exercise information on hover\r\n * \r\n * Essential for physical activity monitoring and fitness tracking.\r\n */\n\nimport React, { useState, useMemo, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport InfoBox from '../InfoBox';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport './ExerciseChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseTypes = [{\n  key: 'walking',\n  label: 'Walking',\n  color: 'var(--chart-color-walking)',\n  emoji: '🚶'\n}, {\n  key: 'swimming',\n  label: 'Swimming',\n  color: 'var(--chart-color-swimming)',\n  emoji: '🏊‍♀️'\n}, {\n  key: 'running',\n  label: 'Running',\n  color: 'var(--chart-color-running)',\n  emoji: '🏃‍♂️'\n}, {\n  key: 'resistance/weights',\n  label: 'Resistance/Weights',\n  color: 'var(--chart-color-resistance)',\n  emoji: '🏋️'\n}, {\n  key: 'biking',\n  label: 'Biking',\n  color: 'var(--chart-color-biking)',\n  emoji: '🚴'\n}, {\n  key: 'balance/stretching',\n  label: 'Balance/Stretching',\n  color: 'var(--chart-color-balance)',\n  emoji: '🧘'\n}, {\n  key: 'other',\n  label: 'Other',\n  color: 'var(--chart-color-other)',\n  emoji: '➕'\n}];\n\n// Exercise goals for physician view\nconst EXERCISE_GOALS = {\n  aerobic: {\n    target: 150,\n    // minutes per week\n    label: 'Aerobic Activity',\n    color: '#1f78b4',\n    description: '150 minutes/week'\n  },\n  strength: {\n    target: 2,\n    // sessions per week (minimum 10 minutes each)\n    label: 'Strength Training',\n    color: '#e31a1c',\n    description: '2 sessions/week (10+ min each)'\n  },\n  flexibility: {\n    target: 1,\n    // session per week\n    label: 'Flexibility/Balance',\n    color: '#33a02c',\n    description: '1 session/week'\n  }\n};\nconst ExerciseChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient',\n  navigation\n}) => {\n  _s();\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId, 'exercise');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n  const config = createChartConfig('exercise', isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Get 3-month data\n  const {\n    start: startOfThreeMonths,\n    end: endOfThreeMonths\n  } = nav.getThreeMonthRange();\n  const threeMonthData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\n  });\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = {\n      walking: 0,\n      swimming: 0,\n      running: 0,\n      'resistance/weights': 0,\n      biking: 0,\n      'balance/stretching': 0,\n      other: 0,\n      totalMinutes: 0\n    };\n    return acc;\n  }, {});\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\n      groupedData[dayName].running += Number(item.running) || 0;\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      groupedData[dayName].biking += Number(item.biking) || 0;\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\n    }\n  });\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n  const generateYAxisLabels = max => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate exercise progress for physician view\n  const exerciseProgress = useMemo(() => {\n    if (!weekData.length) return null;\n\n    // Calculate aerobic activity (walking, swimming, running, biking)\n    const aerobicMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.walking + day.swimming + day.running + day.biking, 0);\n\n    // Calculate strength training sessions (resistance/weights with 10+ minutes)\n    const strengthSessions = Object.values(groupedData).filter(day => day['resistance/weights'] >= 10).length;\n\n    // Calculate flexibility/balance sessions\n    const flexibilitySessions = Object.values(groupedData).filter(day => day['balance/stretching'] > 0).length;\n    return {\n      aerobic: {\n        current: aerobicMinutes,\n        target: EXERCISE_GOALS.aerobic.target,\n        percentage: Math.min(100, aerobicMinutes / EXERCISE_GOALS.aerobic.target * 100)\n      },\n      strength: {\n        current: strengthSessions,\n        target: EXERCISE_GOALS.strength.target,\n        percentage: Math.min(100, strengthSessions / EXERCISE_GOALS.strength.target * 100)\n      },\n      flexibility: {\n        current: flexibilitySessions,\n        target: EXERCISE_GOALS.flexibility.target,\n        percentage: Math.min(100, flexibilitySessions / EXERCISE_GOALS.flexibility.target * 100)\n      }\n    };\n  }, [weekData, groupedData]);\n\n  // Calculate 3-month exercise progress\n  const threeMonthProgress = useMemo(() => {\n    if (!threeMonthData.length) return null;\n\n    // Group 3-month data by day\n    const threeMonthGroupedData = {};\n    threeMonthData.forEach(item => {\n      if (!item.date) return;\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      if (!threeMonthGroupedData[dayName]) {\n        threeMonthGroupedData[dayName] = {\n          walking: 0,\n          swimming: 0,\n          running: 0,\n          'resistance/weights': 0,\n          biking: 0,\n          'balance/stretching': 0,\n          other: 0,\n          totalMinutes: 0\n        };\n      }\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\n      threeMonthGroupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\n      threeMonthGroupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName]['resistance/weights'] + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['balance/stretching'] + threeMonthGroupedData[dayName].other;\n    });\n\n    // Calculate actual weeks in the 3-month period\n    const {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const weeksInThreeMonths = daysInThreeMonths / 7;\n\n    // Calculate aerobic activity\n    const aerobicMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.walking + day.swimming + day.running + day.biking, 0);\n    const avgAerobicPerWeek = aerobicMinutes / weeksInThreeMonths;\n\n    // Calculate strength training sessions\n    const strengthSessions = Object.values(threeMonthGroupedData).filter(day => day['resistance/weights'] >= 10).length;\n    const avgStrengthPerWeek = strengthSessions / weeksInThreeMonths;\n\n    // Calculate flexibility/balance sessions\n    const flexibilitySessions = Object.values(threeMonthGroupedData).filter(day => day['balance/stretching'] > 0).length;\n    const avgFlexibilityPerWeek = flexibilitySessions / weeksInThreeMonths;\n    return {\n      aerobic: {\n        current: avgAerobicPerWeek,\n        target: EXERCISE_GOALS.aerobic.target,\n        percentage: Math.min(100, avgAerobicPerWeek / EXERCISE_GOALS.aerobic.target * 100)\n      },\n      strength: {\n        current: avgStrengthPerWeek,\n        target: EXERCISE_GOALS.strength.target,\n        percentage: Math.min(100, avgStrengthPerWeek / EXERCISE_GOALS.strength.target * 100)\n      },\n      flexibility: {\n        current: avgFlexibilityPerWeek,\n        target: EXERCISE_GOALS.flexibility.target,\n        percentage: Math.min(100, avgFlexibilityPerWeek / EXERCISE_GOALS.flexibility.target * 100)\n      }\n    };\n  }, [threeMonthData]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n\n  // Render physician view with exercise progress bars\n  if (viewMode === 'physician') {\n    const categories = [{\n      key: 'aerobic',\n      ...EXERCISE_GOALS.aerobic\n    }, {\n      key: 'strength',\n      ...EXERCISE_GOALS.strength\n    }, {\n      key: 'flexibility',\n      ...EXERCISE_GOALS.flexibility\n    }];\n\n    // Calculate dimensions for vertical bars\n    const barChartHeight = chartHeight;\n    const barChartWidth = config.width - config.padding.left - config.padding.right;\n    const barWidth = Math.min(80, barChartWidth / 5);\n    const barSpacing = (barChartWidth - barWidth * 3) / 4;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `exercise-chart-container ${isExpanded ? 'expanded' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chart-title\",\n        children: \"Exercise Goals Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"chart-subtitle\",\n        children: formatDateRange(startOfWeek, endOfWeek)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), exerciseProgress && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-progress-container\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          viewBox: `0 0 ${config.width} ${config.height}`,\n          className: \"exercise-progress-svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"y-axis\",\n            children: [[0, 25, 50, 75, 100].map(value => {\n              const y = config.padding.top + barChartHeight - value / 100 * barChartHeight;\n              return /*#__PURE__*/_jsxDEV(\"g\", {\n                className: \"y-axis-grid-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  className: \"chart-grid-line-horizontal\",\n                  x1: config.padding.left,\n                  y1: y,\n                  x2: config.width - config.padding.right,\n                  y2: y,\n                  stroke: \"var(--chart-color-grid)\",\n                  strokeWidth: \"1\",\n                  opacity: \"0.3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: config.padding.left - 10,\n                  y: y + 4,\n                  fontSize: config.fontSize.yAxis,\n                  textAnchor: \"end\",\n                  fill: \"var(--chart-color-text-secondary)\",\n                  className: \"chart-tick-label\",\n                  children: [value, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 23\n                }, this)]\n              }, value, true, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 21\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: -(config.padding.top + barChartHeight / 2),\n              y: config.padding.left / 2 - 10,\n              fontSize: config.fontSize.yAxisTitle,\n              textAnchor: \"middle\",\n              fill: \"var(--chart-color-text-primary)\",\n              transform: \"rotate(-90)\",\n              className: \"y-axis-title\",\n              children: \"Goal Completion\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"progress-bars\",\n            children: categories.map((category, index) => {\n              const progress = exerciseProgress[category.key];\n              const percentage = Math.min(100, progress.percentage);\n              const barX = config.padding.left + barSpacing + index * (barWidth + barSpacing);\n              const barY = config.padding.top + barChartHeight;\n              const fillHeight = percentage / 100 * barChartHeight;\n              return /*#__PURE__*/_jsxDEV(\"g\", {\n                className: \"progress-bar-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                  x: barX,\n                  y: config.padding.top,\n                  width: barWidth,\n                  height: barChartHeight,\n                  fill: \"#e8e8e8\",\n                  stroke: \"var(--chart-color-grid)\",\n                  strokeWidth: \"1\",\n                  rx: \"4\",\n                  ry: \"4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n                  x: barX,\n                  y: barY - fillHeight,\n                  width: barWidth,\n                  height: fillHeight,\n                  fill: category.color,\n                  opacity: \"0.85\",\n                  rx: \"4\",\n                  ry: \"4\",\n                  children: /*#__PURE__*/_jsxDEV(\"title\", {\n                    children: `${category.label}: ${Math.round(percentage)}% complete`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 361,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: barX + barWidth / 2,\n                  y: fillHeight > 30 ? barY - fillHeight + 20 : barY - fillHeight - 10,\n                  textAnchor: \"middle\",\n                  fontSize: isExpanded ? 14 : 12,\n                  fontWeight: \"bold\",\n                  fill: fillHeight > 30 ? \"white\" : \"var(--chart-color-text-primary)\",\n                  className: \"progress-percentage\",\n                  children: [Math.round(percentage), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: barX + barWidth / 2,\n                  y: config.height - config.padding.bottom + 20,\n                  textAnchor: \"middle\",\n                  fontSize: config.fontSize.xAxis,\n                  fontWeight: \"600\",\n                  fill: \"var(--chart-color-text-primary)\",\n                  className: \"x-axis-category-label\",\n                  children: category.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: barX + barWidth / 2,\n                  y: config.height - config.padding.bottom + 36,\n                  textAnchor: \"middle\",\n                  fontSize: config.fontSize.dateLabel,\n                  fill: \"var(--chart-color-text-secondary)\",\n                  className: \"progress-details\",\n                  children: category.key === 'aerobic' ? `${Math.round(progress.current)}/${progress.target} min` : `${Math.round(progress.current)}/${progress.target} sessions`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: barX + barWidth / 2,\n                  y: config.height - config.padding.bottom + 50,\n                  textAnchor: \"middle\",\n                  fontSize: config.fontSize.dateLabel - 1,\n                  fill: \"var(--chart-color-text-secondary)\",\n                  className: \"progress-goal\",\n                  children: category.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 23\n                }, this)]\n              }, category.key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Original patient view with stacked bar chart\n  const exerciseLegendItems = exerciseTypes.map(({\n    label,\n    color,\n    emoji\n  }) => ({\n    label: `${emoji} ${label}`,\n    color\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `exercise-chart-container ${isExpanded ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Activity Breakdown by Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"chart-subtitle\",\n      children: nav.getCurrentMonthYear()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      viewBox: `0 0 ${config.width} ${config.height}`,\n      className: \"exercise-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"y-axis\",\n        children: [yAxisLabels.map(value => {\n          const y = config.padding.top + chartHeight - value / maxDuration * chartHeight;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"y-axis-grid-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              className: \"chart-grid-line-horizontal\",\n              x1: config.padding.left,\n              y1: y,\n              x2: config.width - config.padding.right,\n              y2: y\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: config.padding.left - 15,\n              y: y + 3,\n              fontSize: config.fontSize.yAxis,\n              textAnchor: \"end\",\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"chart-tick-label\",\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 19\n            }, this)]\n          }, value, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: -(config.padding.top + chartHeight / 2),\n          y: config.padding.left / 2 - 5,\n          fontSize: config.fontSize.yAxisTitle,\n          textAnchor: \"middle\",\n          fill: \"var(--chart-color-text-primary)\",\n          transform: \"rotate(-90)\",\n          className: \"y-axis-title\",\n          children: \"Minutes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\",\n        children: daysOfWeek.map((day, dayIndex) => {\n          const date = new Date(startOfWeek);\n          date.setDate(date.getDate() + dayIndex);\n          const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n          const dayData = groupedData[day];\n          const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n          const emojis = performedExercises.map(type => type.emoji).join(' ');\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"x-axis-label-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              className: \"chart-grid-line-vertical\",\n              x1: config.padding.left + dayIndex * config.dayWidth,\n              y1: config.padding.top,\n              x2: config.padding.left + dayIndex * config.dayWidth,\n              y2: config.height - config.padding.bottom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 15,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.dayLabel,\n              fill: \"var(--chart-color-text-primary)\",\n              className: \"x-axis-day-label\",\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 30,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.dateLabel,\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"x-axis-date-label\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 48,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.emoji,\n              children: emojis\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 19\n            }, this)]\n          }, dayIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"data-bars\",\n        children: daysOfWeek.map((day, dayIndex) => {\n          const dayData = groupedData[day];\n          const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n          let currentY = config.height - config.padding.bottom;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: exerciseTypes.map(type => {\n              const minutes = Number(dayData[type.key]) || 0;\n              if (minutes <= 0) return null;\n              const segmentHeight = minutes / maxDuration * chartHeight;\n              const segmentY = currentY - segmentHeight;\n              const segment = /*#__PURE__*/_jsxDEV(\"g\", {\n                children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                  x: x - config.barWidth / 2,\n                  y: segmentY,\n                  width: config.barWidth,\n                  height: segmentHeight,\n                  fill: type.color,\n                  className: \"data-bar\",\n                  children: /*#__PURE__*/_jsxDEV(\"title\", {\n                    children: `${type.label}: ${Math.round(minutes)} min`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 501,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 493,\n                  columnNumber: 25\n                }, this), segmentHeight >= 12 && /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: x,\n                  y: segmentY + segmentHeight / 2,\n                  textAnchor: \"middle\",\n                  fontSize: isExpanded ? 8 : 6,\n                  fill: \"black\",\n                  className: \"duration-label\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: Math.round(minutes)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 505,\n                  columnNumber: 27\n                }, this)]\n              }, type.key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 23\n              }, this);\n              currentY = segmentY;\n              return segment;\n            })\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {\n      title: \"Exercise Type\",\n      items: exerciseLegendItems,\n      orientation: \"horizontal\",\n      size: \"medium\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 7\n  }, this);\n};\n_s(ExerciseChart, \"gERe3LoXulZy8fjWNx0G0xFALWc=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = ExerciseChart;\nexport default ExerciseChart;\nvar _c;\n$RefreshReg$(_c, \"ExerciseChart\");","map":{"version":3,"names":["React","useState","useMemo","useRef","usePatientData","useChartNavigation","Legend","InfoBox","createChartConfig","jsxDEV","_jsxDEV","exerciseTypes","key","label","color","emoji","EXERCISE_GOALS","aerobic","target","description","strength","flexibility","ExerciseChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","config","chartHeight","height","padding","top","bottom","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthData","daysOfWeek","groupedData","reduce","acc","day","walking","swimming","running","biking","other","totalMinutes","forEach","item","dayName","getDay","Number","maxVal","Math","max","Object","values","map","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","exerciseProgress","length","aerobicMinutes","sum","strengthSessions","flexibilitySessions","current","percentage","min","threeMonthProgress","threeMonthGroupedData","daysInThreeMonths","weeksInThreeMonths","avgAerobicPerWeek","avgStrengthPerWeek","avgFlexibilityPerWeek","formatDateRange","startStr","toLocaleDateString","month","endStr","categories","barChartHeight","barChartWidth","width","left","right","barWidth","barSpacing","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","value","y","x1","y1","x2","y2","stroke","strokeWidth","opacity","x","fontSize","yAxis","textAnchor","fill","yAxisTitle","transform","category","index","progress","barX","barY","fillHeight","rx","ry","round","fontWeight","xAxis","dateLabel","exerciseLegendItems","getCurrentMonthYear","dayIndex","setDate","getDate","dayWidth","dayData","performedExercises","type","emojis","join","dayLabel","currentY","minutes","segmentHeight","segmentY","segment","style","title","items","orientation","size","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["/**\r\n * ExerciseChart.js - Exercise Activity Tracking Visualization\r\n * \r\n * This component provides comprehensive exercise monitoring:\r\n * - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\r\n * - Duration tracking and weekly summaries\r\n * - Color-coded activity categorization\r\n * - Interactive tooltips with exercise details\r\n * - Navigation controls for time periods\r\n * - Integration with patient data and chart navigation\r\n * \r\n * Architecture:\r\n * - Uses custom SVG for stacked bar chart visualization\r\n * - Implements activity categorization system with emoji indicators\r\n * - Provides color-coded activity types for easy identification\r\n * - Supports expandable views\r\n * - Implements time-based navigation and data filtering\r\n * \r\n * Visualization Features:\r\n * - Stacked bar chart showing daily activity breakdown\r\n * - Color-coded activity types with emoji indicators\r\n * - Interactive tooltips with detailed exercise information\r\n * - Design adapting to container size\r\n * - Dynamic Y-axis scaling based on data range\r\n * \r\n * Activity Categories:\r\n * - Walking: Low-impact cardiovascular exercise\r\n * - Swimming: Full-body cardiovascular workout\r\n * - Running: High-impact cardiovascular exercise\r\n * - Resistance/Weights: Strength training activities\r\n * - Biking: Low-impact cardiovascular exercise\r\n * - Balance/Stretching: Flexibility and balance training\r\n * - Other: Miscellaneous physical activities\r\n * \r\n * Component Structure:\r\n * - Chart Container: Main SVG container with sizing\r\n * - Y-Axis: Duration scale with dynamic labeling\r\n * - X-Axis: Day-of-week labels with date information\r\n * - Data Bars: Stacked activity bars with color coding\r\n * - Legend: Activity type explanations with emojis\r\n * - Tooltip: Detailed exercise information on hover\r\n * \r\n * Essential for physical activity monitoring and fitness tracking.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport InfoBox from '../InfoBox';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport './ExerciseChart.css';\r\n\r\nconst exerciseTypes = [\r\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\r\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\r\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\r\n  { key: 'resistance/weights', label: 'Resistance/Weights', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\r\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\r\n  { key: 'balance/stretching', label: 'Balance/Stretching', color: 'var(--chart-color-balance)', emoji: '🧘' },\r\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\r\n];\r\n\r\n// Exercise goals for physician view\r\nconst EXERCISE_GOALS = {\r\n  aerobic: {\r\n    target: 150, // minutes per week\r\n    label: 'Aerobic Activity',\r\n    color: '#1f78b4',\r\n    description: '150 minutes/week'\r\n  },\r\n  strength: {\r\n    target: 2, // sessions per week (minimum 10 minutes each)\r\n    label: 'Strength Training',\r\n    color: '#e31a1c',\r\n    description: '2 sessions/week (10+ min each)'\r\n  },\r\n  flexibility: {\r\n    target: 1, // session per week\r\n    label: 'Flexibility/Balance',\r\n    color: '#33a02c',\r\n    description: '1 session/week'\r\n  }\r\n};\r\n\r\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('exercise');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const config = createChartConfig('exercise', isExpanded);\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\r\n  });\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\r\n  });\r\n\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const groupedData = daysOfWeek.reduce((acc, day) => {\r\n    acc[day] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  weekData.forEach(item => {\r\n    if (!item.date) return;\r\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n    if (groupedData[dayName]) {\r\n      groupedData[dayName].walking += Number(item.walking) || 0;\r\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      groupedData[dayName].running += Number(item.running) || 0;\r\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      groupedData[dayName].biking += Number(item.biking) || 0;\r\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      groupedData[dayName].other += Number(item.other) || 0;\r\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\r\n    }\r\n  });\r\n\r\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\r\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\r\n\r\n  const generateYAxisLabels = (max) => {\r\n    if (max === 0) return [0];\r\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\r\n    const labels = [];\r\n    for (let i = 0; i <= max; i += step) {\r\n      labels.push(i);\r\n    }\r\n    return labels;\r\n  };\r\n\r\n  const yAxisLabels = generateYAxisLabels(maxDuration);\r\n\r\n  // Calculate exercise progress for physician view\r\n  const exerciseProgress = useMemo(() => {\r\n    if (!weekData.length) return null;\r\n\r\n    // Calculate aerobic activity (walking, swimming, running, biking)\r\n    const aerobicMinutes = Object.values(groupedData).reduce((sum, day) => \r\n      sum + day.walking + day.swimming + day.running + day.biking, 0\r\n    );\r\n\r\n    // Calculate strength training sessions (resistance/weights with 10+ minutes)\r\n    const strengthSessions = Object.values(groupedData).filter(day => \r\n      day['resistance/weights'] >= 10\r\n    ).length;\r\n\r\n    // Calculate flexibility/balance sessions\r\n    const flexibilitySessions = Object.values(groupedData).filter(day => \r\n      day['balance/stretching'] > 0\r\n    ).length;\r\n\r\n    return {\r\n      aerobic: {\r\n        current: aerobicMinutes,\r\n        target: EXERCISE_GOALS.aerobic.target,\r\n        percentage: Math.min(100, (aerobicMinutes / EXERCISE_GOALS.aerobic.target) * 100)\r\n      },\r\n      strength: {\r\n        current: strengthSessions,\r\n        target: EXERCISE_GOALS.strength.target,\r\n        percentage: Math.min(100, (strengthSessions / EXERCISE_GOALS.strength.target) * 100)\r\n      },\r\n      flexibility: {\r\n        current: flexibilitySessions,\r\n        target: EXERCISE_GOALS.flexibility.target,\r\n        percentage: Math.min(100, (flexibilitySessions / EXERCISE_GOALS.flexibility.target) * 100)\r\n      }\r\n    };\r\n  }, [weekData, groupedData]);\r\n\r\n  // Calculate 3-month exercise progress\r\n  const threeMonthProgress = useMemo(() => {\r\n    if (!threeMonthData.length) return null;\r\n\r\n    // Group 3-month data by day\r\n    const threeMonthGroupedData = {};\r\n    threeMonthData.forEach(item => {\r\n      if (!item.date) return;\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      if (!threeMonthGroupedData[dayName]) {\r\n        threeMonthGroupedData[dayName] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n      }\r\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\r\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\r\n      threeMonthGroupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\r\n      threeMonthGroupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\r\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName]['resistance/weights'] + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['balance/stretching'] + threeMonthGroupedData[dayName].other;\r\n    });\r\n\r\n    // Calculate actual weeks in the 3-month period\r\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\r\n    const weeksInThreeMonths = daysInThreeMonths / 7;\r\n\r\n    // Calculate aerobic activity\r\n    const aerobicMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => \r\n      sum + day.walking + day.swimming + day.running + day.biking, 0\r\n    );\r\n    const avgAerobicPerWeek = aerobicMinutes / weeksInThreeMonths;\r\n\r\n    // Calculate strength training sessions\r\n    const strengthSessions = Object.values(threeMonthGroupedData).filter(day => \r\n      day['resistance/weights'] >= 10\r\n    ).length;\r\n    const avgStrengthPerWeek = strengthSessions / weeksInThreeMonths;\r\n\r\n    // Calculate flexibility/balance sessions\r\n    const flexibilitySessions = Object.values(threeMonthGroupedData).filter(day => \r\n      day['balance/stretching'] > 0\r\n    ).length;\r\n    const avgFlexibilityPerWeek = flexibilitySessions / weeksInThreeMonths;\r\n\r\n    return {\r\n      aerobic: {\r\n        current: avgAerobicPerWeek,\r\n        target: EXERCISE_GOALS.aerobic.target,\r\n        percentage: Math.min(100, (avgAerobicPerWeek / EXERCISE_GOALS.aerobic.target) * 100)\r\n      },\r\n      strength: {\r\n        current: avgStrengthPerWeek,\r\n        target: EXERCISE_GOALS.strength.target,\r\n        percentage: Math.min(100, (avgStrengthPerWeek / EXERCISE_GOALS.strength.target) * 100)\r\n      },\r\n      flexibility: {\r\n        current: avgFlexibilityPerWeek,\r\n        target: EXERCISE_GOALS.flexibility.target,\r\n        percentage: Math.min(100, (avgFlexibilityPerWeek / EXERCISE_GOALS.flexibility.target) * 100)\r\n      }\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  // Render physician view with exercise progress bars\r\n  if (viewMode === 'physician') {\r\n    const categories = [\r\n      { key: 'aerobic', ...EXERCISE_GOALS.aerobic },\r\n      { key: 'strength', ...EXERCISE_GOALS.strength },\r\n      { key: 'flexibility', ...EXERCISE_GOALS.flexibility }\r\n    ];\r\n\r\n    // Calculate dimensions for vertical bars\r\n    const barChartHeight = chartHeight;\r\n    const barChartWidth = config.width - config.padding.left - config.padding.right;\r\n    const barWidth = Math.min(80, barChartWidth / 5);\r\n    const barSpacing = (barChartWidth - (barWidth * 3)) / 4;\r\n\r\n    return (\r\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\r\n        <h3 className=\"chart-title\">Exercise Goals Progress</h3>\r\n        <h4 className=\"chart-subtitle\">{formatDateRange(startOfWeek, endOfWeek)}</h4>\r\n        \r\n        {exerciseProgress && (\r\n          <div className=\"exercise-progress-container\">\r\n            <svg \r\n              width=\"100%\" \r\n              viewBox={`0 0 ${config.width} ${config.height}`}\r\n              className=\"exercise-progress-svg\"\r\n            >\r\n              {/* Y-axis (percentage scale) */}\r\n              <g className=\"y-axis\">\r\n                {[0, 25, 50, 75, 100].map(value => {\r\n                  const y = config.padding.top + barChartHeight - (value / 100) * barChartHeight;\r\n                  return (\r\n                    <g key={value} className=\"y-axis-grid-group\">\r\n                      <line \r\n                        className=\"chart-grid-line-horizontal\" \r\n                        x1={config.padding.left} \r\n                        y1={y} \r\n                        x2={config.width - config.padding.right} \r\n                        y2={y} \r\n                        stroke=\"var(--chart-color-grid)\"\r\n                        strokeWidth=\"1\"\r\n                        opacity=\"0.3\"\r\n                      />\r\n                      <text \r\n                        x={config.padding.left - 10} \r\n                        y={y + 4} \r\n                        fontSize={config.fontSize.yAxis} \r\n                        textAnchor=\"end\" \r\n                        fill=\"var(--chart-color-text-secondary)\"\r\n                        className=\"chart-tick-label\"\r\n                      >\r\n                        {value}%\r\n                      </text>\r\n                    </g>\r\n                  );\r\n                })}\r\n                <text \r\n                  x={-(config.padding.top + barChartHeight / 2)} \r\n                  y={config.padding.left / 2 - 10} \r\n                  fontSize={config.fontSize.yAxisTitle} \r\n                  textAnchor=\"middle\" \r\n                  fill=\"var(--chart-color-text-primary)\" \r\n                  transform=\"rotate(-90)\"\r\n                  className=\"y-axis-title\"\r\n                >\r\n                  Goal Completion\r\n                </text>\r\n              </g>\r\n\r\n              {/* Vertical bars */}\r\n              <g className=\"progress-bars\">\r\n                {categories.map((category, index) => {\r\n                  const progress = exerciseProgress[category.key];\r\n                  const percentage = Math.min(100, progress.percentage);\r\n                  \r\n                  const barX = config.padding.left + barSpacing + (index * (barWidth + barSpacing));\r\n                  const barY = config.padding.top + barChartHeight;\r\n                  const fillHeight = (percentage / 100) * barChartHeight;\r\n                  \r\n                  return (\r\n                    <g key={category.key} className=\"progress-bar-group\">\r\n                      {/* Background bar (full height) */}\r\n                      <rect\r\n                        x={barX}\r\n                        y={config.padding.top}\r\n                        width={barWidth}\r\n                        height={barChartHeight}\r\n                        fill=\"#e8e8e8\"\r\n                        stroke=\"var(--chart-color-grid)\"\r\n                        strokeWidth=\"1\"\r\n                        rx=\"4\"\r\n                        ry=\"4\"\r\n                      />\r\n                      \r\n                      {/* Filled bar (progress) */}\r\n                      <rect\r\n                        x={barX}\r\n                        y={barY - fillHeight}\r\n                        width={barWidth}\r\n                        height={fillHeight}\r\n                        fill={category.color}\r\n                        opacity=\"0.85\"\r\n                        rx=\"4\"\r\n                        ry=\"4\"\r\n                      >\r\n                        <title>{`${category.label}: ${Math.round(percentage)}% complete`}</title>\r\n                      </rect>\r\n                      \r\n                      {/* Percentage text inside or above bar */}\r\n                      <text\r\n                        x={barX + barWidth / 2}\r\n                        y={fillHeight > 30 ? barY - fillHeight + 20 : barY - fillHeight - 10}\r\n                        textAnchor=\"middle\"\r\n                        fontSize={isExpanded ? 14 : 12}\r\n                        fontWeight=\"bold\"\r\n                        fill={fillHeight > 30 ? \"white\" : \"var(--chart-color-text-primary)\"}\r\n                        className=\"progress-percentage\"\r\n                      >\r\n                        {Math.round(percentage)}%\r\n                      </text>\r\n                      \r\n                      {/* Category label */}\r\n                      <text\r\n                        x={barX + barWidth / 2}\r\n                        y={config.height - config.padding.bottom + 20}\r\n                        textAnchor=\"middle\"\r\n                        fontSize={config.fontSize.xAxis}\r\n                        fontWeight=\"600\"\r\n                        fill=\"var(--chart-color-text-primary)\"\r\n                        className=\"x-axis-category-label\"\r\n                      >\r\n                        {category.label}\r\n                      </text>\r\n                      \r\n                      {/* Current/Target text */}\r\n                      <text\r\n                        x={barX + barWidth / 2}\r\n                        y={config.height - config.padding.bottom + 36}\r\n                        textAnchor=\"middle\"\r\n                        fontSize={config.fontSize.dateLabel}\r\n                        fill=\"var(--chart-color-text-secondary)\"\r\n                        className=\"progress-details\"\r\n                      >\r\n                        {category.key === 'aerobic' \r\n                          ? `${Math.round(progress.current)}/${progress.target} min` \r\n                          : `${Math.round(progress.current)}/${progress.target} sessions`}\r\n                      </text>\r\n                      \r\n                      {/* Goal description */}\r\n                      <text\r\n                        x={barX + barWidth / 2}\r\n                        y={config.height - config.padding.bottom + 50}\r\n                        textAnchor=\"middle\"\r\n                        fontSize={config.fontSize.dateLabel - 1}\r\n                        fill=\"var(--chart-color-text-secondary)\"\r\n                        className=\"progress-goal\"\r\n                      >\r\n                        {category.description}\r\n                      </text>\r\n                    </g>\r\n                  );\r\n                })}\r\n              </g>\r\n            </svg>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Original patient view with stacked bar chart\r\n  const exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\r\n    label: `${emoji} ${label}`,\r\n    color,\r\n  }));\r\n\r\n  return (\r\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\r\n        <h3 className=\"chart-title\">Activity Breakdown by Type</h3>\r\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n        \r\n        <svg \r\n          width=\"100%\" \r\n          viewBox={`0 0 ${config.width} ${config.height}`}\r\n          className=\"exercise-svg\"\r\n        >\r\n          <g className=\"y-axis\">\r\n            {yAxisLabels.map(value => {\r\n              const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\r\n              return (\r\n                <g key={value} className=\"y-axis-grid-group\">\r\n                  <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\r\n                  <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\r\n                </g>\r\n              );\r\n            })}\r\n            <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\r\n          </g>\r\n\r\n          <g className=\"x-axis\">\r\n            {daysOfWeek.map((day, dayIndex) => {\r\n              const date = new Date(startOfWeek);\r\n              date.setDate(date.getDate() + dayIndex);\r\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n\r\n              const dayData = groupedData[day];\r\n              const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\r\n              const emojis = performedExercises.map(type => type.emoji).join(' ');\r\n\r\n              return (\r\n                <g key={dayIndex} className=\"x-axis-label-group\">\r\n                  <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\r\n                  <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\r\n                  <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\r\n                  <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n\r\n          <g className=\"data-bars\">\r\n            {daysOfWeek.map((day, dayIndex) => {\r\n              const dayData = groupedData[day];\r\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n              let currentY = config.height - config.padding.bottom;\r\n\r\n              return (\r\n                <g key={day}>\r\n                  {exerciseTypes.map(type => {\r\n                    const minutes = Number(dayData[type.key]) || 0;\r\n                    if (minutes <= 0) return null;\r\n\r\n                    const segmentHeight = (minutes / maxDuration) * chartHeight;\r\n                    const segmentY = currentY - segmentHeight;\r\n\r\n                    const segment = (\r\n                      <g key={type.key}>\r\n                        <rect\r\n                          x={x - config.barWidth / 2}\r\n                          y={segmentY}\r\n                          width={config.barWidth}\r\n                          height={segmentHeight}\r\n                          fill={type.color}\r\n                          className=\"data-bar\"\r\n                        >\r\n                          <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\r\n                        </rect>\r\n                        {/* Duration label inside the segment */}\r\n                        {segmentHeight >= 12 && (\r\n                          <text\r\n                            x={x}\r\n                            y={segmentY + segmentHeight / 2}\r\n                            textAnchor=\"middle\"\r\n                            fontSize={isExpanded ? 8 : 6}\r\n                            fill=\"black\"\r\n                            className=\"duration-label\"\r\n                            style={{ \r\n                              fontWeight: 'bold'\r\n                            }}\r\n                          >\r\n                            {Math.round(minutes)}\r\n                          </text>\r\n                        )}\r\n                      </g>\r\n                    );\r\n\r\n                    currentY = segmentY;\r\n                    return segment;\r\n                  })}\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n        </svg>\r\n        \r\n        <Legend \r\n          title=\"Exercise Type\" \r\n          items={exerciseLegendItems} \r\n          orientation=\"horizontal\" \r\n          size=\"medium\" \r\n        />\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ExerciseChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}