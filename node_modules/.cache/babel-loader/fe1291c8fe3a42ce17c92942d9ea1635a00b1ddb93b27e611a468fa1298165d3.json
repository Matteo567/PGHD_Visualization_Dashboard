{"ast":null,"code":"/**\r\n * Ultra-simple data service for testing\r\n * This will work for sure and help us debug\r\n */\n\n// Mock data for testing\nconst createMockPatientData = patientId => ({\n  patientInfo: {\n    patientId,\n    age: 45,\n    gender: 'Male',\n    conditions: ['Diabetes', 'Hypertension']\n  },\n  glucoseData: [{\n    date: new Date(),\n    value: 120,\n    range: 'In Range',\n    measurementType: 'Fasting'\n  }, {\n    date: new Date(Date.now() - 24 * 60 * 60 * 1000),\n    value: 95,\n    range: 'In Range',\n    measurementType: 'Random'\n  }, {\n    date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n    value: 140,\n    range: 'Above Range',\n    measurementType: 'Post-meal'\n  }],\n  bloodPressureData: [{\n    date: new Date(),\n    systolic: 120,\n    diastolic: 80\n  }, {\n    date: new Date(Date.now() - 24 * 60 * 60 * 1000),\n    systolic: 115,\n    diastolic: 75\n  }],\n  exerciseData: [{\n    date: new Date(),\n    type: 'Walking',\n    duration: 30\n  }, {\n    date: new Date(Date.now() - 24 * 60 * 60 * 1000),\n    type: 'Running',\n    duration: 20\n  }],\n  moodData: [{\n    date: new Date(),\n    mood: 'happy'\n  }, {\n    date: new Date(Date.now() - 24 * 60 * 60 * 1000),\n    mood: 'sad'\n  }],\n  painData: [{\n    date: new Date(),\n    location: 'back',\n    level: 3\n  }],\n  sleepData: [{\n    date: new Date(),\n    hours: 7.5,\n    quality: 'Good'\n  }, {\n    date: new Date(Date.now() - 24 * 60 * 60 * 1000),\n    hours: 6.2,\n    quality: 'Fair'\n  }],\n  mealData: [{\n    date: new Date(),\n    type: 'breakfast',\n    protein: '1',\n    vegetables: '0',\n    fruit: '1'\n  }]\n});\n\n// Simple fetch function with fallback to mock data\nexport const loadPatientData = async patientId => {\n  console.log(`üîÑ Loading data for ${patientId}...`);\n  try {\n    // Try to fetch real CSV data\n    const response = await fetch(`/synthetic_patients/${patientId}.csv`);\n    if (response.ok) {\n      const csvText = await response.text();\n      console.log(`‚úÖ Successfully fetched CSV for ${patientId}, length: ${csvText.length}`);\n\n      // For now, return mock data but we know the CSV is available\n      // TODO: Parse the actual CSV\n      const mockData = createMockPatientData(patientId);\n      console.log(`üìä Returning mock data for ${patientId}:`, mockData);\n      return mockData;\n    } else {\n      console.warn(`‚ö†Ô∏è CSV fetch failed with status ${response.status}, using mock data`);\n      return createMockPatientData(patientId);\n    }\n  } catch (error) {\n    console.error(`‚ùå Error fetching ${patientId}:`, error);\n    console.log(`üîÑ Falling back to mock data for ${patientId}`);\n    return createMockPatientData(patientId);\n  }\n};\nexport default {\n  loadPatientData\n};","map":{"version":3,"names":["createMockPatientData","patientId","patientInfo","age","gender","conditions","glucoseData","date","Date","value","range","measurementType","now","bloodPressureData","systolic","diastolic","exerciseData","type","duration","moodData","mood","painData","location","level","sleepData","hours","quality","mealData","protein","vegetables","fruit","loadPatientData","console","log","response","fetch","ok","csvText","text","length","mockData","warn","status","error"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/services/simpleDataService.js"],"sourcesContent":["/**\r\n * Ultra-simple data service for testing\r\n * This will work for sure and help us debug\r\n */\r\n\r\n// Mock data for testing\r\nconst createMockPatientData = (patientId) => ({\r\n  patientInfo: {\r\n    patientId,\r\n    age: 45,\r\n    gender: 'Male',\r\n    conditions: ['Diabetes', 'Hypertension']\r\n  },\r\n  glucoseData: [\r\n    { date: new Date(), value: 120, range: 'In Range', measurementType: 'Fasting' },\r\n    { date: new Date(Date.now() - 24*60*60*1000), value: 95, range: 'In Range', measurementType: 'Random' },\r\n    { date: new Date(Date.now() - 2*24*60*60*1000), value: 140, range: 'Above Range', measurementType: 'Post-meal' },\r\n  ],\r\n  bloodPressureData: [\r\n    { date: new Date(), systolic: 120, diastolic: 80 },\r\n    { date: new Date(Date.now() - 24*60*60*1000), systolic: 115, diastolic: 75 }\r\n  ],\r\n  exerciseData: [\r\n    { date: new Date(), type: 'Walking', duration: 30 },\r\n    { date: new Date(Date.now() - 24*60*60*1000), type: 'Running', duration: 20 }\r\n  ],\r\n  moodData: [\r\n    { date: new Date(), mood: 'happy' },\r\n    { date: new Date(Date.now() - 24*60*60*1000), mood: 'sad' }\r\n  ],\r\n  painData: [\r\n    { date: new Date(), location: 'back', level: 3 }\r\n  ],\r\n  sleepData: [\r\n    { date: new Date(), hours: 7.5, quality: 'Good' },\r\n    { date: new Date(Date.now() - 24*60*60*1000), hours: 6.2, quality: 'Fair' }\r\n  ],\r\n  mealData: [\r\n    { date: new Date(), type: 'breakfast', protein: '1', vegetables: '0', fruit: '1' }\r\n  ]\r\n});\r\n\r\n// Simple fetch function with fallback to mock data\r\nexport const loadPatientData = async (patientId) => {\r\n  console.log(`üîÑ Loading data for ${patientId}...`);\r\n  \r\n  try {\r\n    // Try to fetch real CSV data\r\n    const response = await fetch(`/synthetic_patients/${patientId}.csv`);\r\n    \r\n    if (response.ok) {\r\n      const csvText = await response.text();\r\n      console.log(`‚úÖ Successfully fetched CSV for ${patientId}, length: ${csvText.length}`);\r\n      \r\n      // For now, return mock data but we know the CSV is available\r\n      // TODO: Parse the actual CSV\r\n      const mockData = createMockPatientData(patientId);\r\n      console.log(`üìä Returning mock data for ${patientId}:`, mockData);\r\n      return mockData;\r\n    } else {\r\n      console.warn(`‚ö†Ô∏è CSV fetch failed with status ${response.status}, using mock data`);\r\n      return createMockPatientData(patientId);\r\n    }\r\n  } catch (error) {\r\n    console.error(`‚ùå Error fetching ${patientId}:`, error);\r\n    console.log(`üîÑ Falling back to mock data for ${patientId}`);\r\n    return createMockPatientData(patientId);\r\n  }\r\n};\r\n\r\nexport default { loadPatientData };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}