{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local Experimental\\\\PGHD_Visualization_Dashboard\\\\src\\\\components\\\\DashboardGrid.js\";\n/**\n DashboardGrid.js - Chart Grid Layout Component\n \n This component provides a flexible grid layout system for organizing charts by rendering all \n available visualizations in a grid, handling expanded/collapsed chart states, integrating chart \n navigation controls, and providing placeholder states for empty data scenarios.\n \n Acts as the main container for organizing multiple health metric visualizations.\n */\n\nimport React from 'react';\nimport VisualizationWrapper from './VisualizationWrapper';\nimport Placeholder from './ui/Placeholder';\nimport './DashboardGrid.css';\n\n/*\n Shared component for rendering dashboard grids with visualization wrappers\n Shows all available visualizations instead of using dropdown selectors\n \n @param {Object} props - Component props\n @param {string} props.viewMode - 'patient' or 'physician'\n @param {Object} props.availableVisualizations - Available visualizations\n @param {Object} props.allVisualizations - All visualization configurations\n @param {Function} props.onExpand - Handler for expand/collapse\n @param {string|null} props.expandedItem - Currently expanded item ID\n @param {Function} props.renderVisualization - Function to render visualizations\n @param {string} props.placeholderText - Text to show when no data is available\n @param {Object} props.chartNavigation - Navigation objects for each chart type\n @param {boolean} props.screenshotMode - Whether in screenshot mode\n @returns {JSX.Element} The dashboard grid component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardGrid = ({\n  viewMode,\n  // 'patient' or 'physician'\n  availableVisualizations,\n  allVisualizations,\n  onExpand,\n  expandedItem,\n  renderVisualization,\n  placeholderText = \"No data available for this patient.\",\n  // Navigation props\n  chartNavigation = {},\n  // Screenshot mode\n  screenshotMode = false\n}) => {\n  // Configuration for different view modes\n  const gridConfig = {\n    patient: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    },\n    physician: {\n      className: 'physician-charts-grid',\n      chartClassNames: ['physician-chart-container']\n    },\n    unified: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    }\n  };\n  const config = gridConfig[viewMode];\n\n  // Get all available visualization types\n  const availableVizTypes = Object.keys(availableVisualizations);\n\n  // If there's an expanded item, show only that chart in expanded view\n  if (expandedItem) {\n    // Extract the chart index from the chart ID (format: \"viewMode-chart-index\")\n    const chartIdParts = expandedItem.split('-');\n    const chartIndex = parseInt(chartIdParts[chartIdParts.length - 1]);\n    const selectedViz = availableVizTypes[chartIndex];\n    if (!selectedViz) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: config.className,\n        children: /*#__PURE__*/_jsxDEV(Placeholder, {\n          message: \"Invalid expanded chart\",\n          type: \"error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this);\n    }\n    const navigation = chartNavigation[selectedViz];\n    return /*#__PURE__*/_jsxDEV(VisualizationWrapper, {\n      id: expandedItem,\n      className: `${config.chartClassNames[0]} expanded-view`,\n      selectedViz: selectedViz,\n      availableVisualizations: availableVisualizations,\n      allVisualizations: allVisualizations,\n      onExpand: onExpand,\n      isExpanded: true,\n      renderVisualization: renderVisualization,\n      placeholderText: placeholderText,\n      onPrev: navigation === null || navigation === void 0 ? void 0 : navigation.goToPrevious,\n      onNext: navigation === null || navigation === void 0 ? void 0 : navigation.goToNext,\n      navigationLabel: (navigation === null || navigation === void 0 ? void 0 : navigation.navigationLabel) || 'Week',\n      screenshotMode: screenshotMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If no visualizations available, show placeholder\n  if (availableVizTypes.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: config.className,\n      children: /*#__PURE__*/_jsxDEV(Placeholder, {\n        message: placeholderText,\n        type: \"no-data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render all available visualizations\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: config.className,\n    children: availableVizTypes.map((vizType, index) => {\n      const chartId = `${viewMode}-chart-${index}`;\n      const navigation = chartNavigation[vizType];\n      const wrapperProps = {\n        key: chartId,\n        id: chartId,\n        className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\n        selectedViz: vizType,\n        availableVisualizations: availableVisualizations,\n        allVisualizations: allVisualizations,\n        onExpand: onExpand,\n        isExpanded: expandedItem === chartId,\n        renderVisualization: renderVisualization,\n        placeholderText: placeholderText,\n        onPrev: navigation === null || navigation === void 0 ? void 0 : navigation.goToPrevious,\n        onNext: navigation === null || navigation === void 0 ? void 0 : navigation.goToNext,\n        navigationLabel: (navigation === null || navigation === void 0 ? void 0 : navigation.navigationLabel) || 'Week',\n        screenshotMode: screenshotMode\n      };\n      return /*#__PURE__*/_jsxDEV(VisualizationWrapper, {\n        ...wrapperProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_c = DashboardGrid;\nexport default DashboardGrid;\nvar _c;\n$RefreshReg$(_c, \"DashboardGrid\");","map":{"version":3,"names":["React","VisualizationWrapper","Placeholder","jsxDEV","_jsxDEV","DashboardGrid","viewMode","availableVisualizations","allVisualizations","onExpand","expandedItem","renderVisualization","placeholderText","chartNavigation","screenshotMode","gridConfig","patient","className","chartClassNames","physician","unified","config","availableVizTypes","Object","keys","chartIdParts","split","chartIndex","parseInt","length","selectedViz","children","message","type","fileName","_jsxFileName","lineNumber","columnNumber","navigation","id","isExpanded","onPrev","goToPrevious","onNext","goToNext","navigationLabel","map","vizType","index","chartId","wrapperProps","key","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/components/DashboardGrid.js"],"sourcesContent":["/**\n DashboardGrid.js - Chart Grid Layout Component\n \n This component provides a flexible grid layout system for organizing charts by rendering all \n available visualizations in a grid, handling expanded/collapsed chart states, integrating chart \n navigation controls, and providing placeholder states for empty data scenarios.\n \n Acts as the main container for organizing multiple health metric visualizations.\n */\n\nimport React from 'react';\nimport VisualizationWrapper from './VisualizationWrapper';\nimport Placeholder from './ui/Placeholder';\nimport './DashboardGrid.css';\n\n/*\n Shared component for rendering dashboard grids with visualization wrappers\n Shows all available visualizations instead of using dropdown selectors\n \n @param {Object} props - Component props\n @param {string} props.viewMode - 'patient' or 'physician'\n @param {Object} props.availableVisualizations - Available visualizations\n @param {Object} props.allVisualizations - All visualization configurations\n @param {Function} props.onExpand - Handler for expand/collapse\n @param {string|null} props.expandedItem - Currently expanded item ID\n @param {Function} props.renderVisualization - Function to render visualizations\n @param {string} props.placeholderText - Text to show when no data is available\n @param {Object} props.chartNavigation - Navigation objects for each chart type\n @param {boolean} props.screenshotMode - Whether in screenshot mode\n @returns {JSX.Element} The dashboard grid component\n */\nconst DashboardGrid = ({\n  viewMode, // 'patient' or 'physician'\n  availableVisualizations,\n  allVisualizations,\n  onExpand,\n  expandedItem,\n  renderVisualization,\n  placeholderText = \"No data available for this patient.\",\n  // Navigation props\n  chartNavigation = {},\n  // Screenshot mode\n  screenshotMode = false\n}) => {\n  // Configuration for different view modes\n  const gridConfig = {\n    patient: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    },\n    physician: {\n      className: 'physician-charts-grid',\n      chartClassNames: ['physician-chart-container']\n    },\n    unified: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    }\n  };\n\n  const config = gridConfig[viewMode];\n\n  // Get all available visualization types\n  const availableVizTypes = Object.keys(availableVisualizations);\n\n  // If there's an expanded item, show only that chart in expanded view\n  if (expandedItem) {\n    // Extract the chart index from the chart ID (format: \"viewMode-chart-index\")\n    const chartIdParts = expandedItem.split('-');\n    const chartIndex = parseInt(chartIdParts[chartIdParts.length - 1]);\n    const selectedViz = availableVizTypes[chartIndex];\n    \n    if (!selectedViz) {\n      return (\n        <div className={config.className}>\n          <Placeholder message=\"Invalid expanded chart\" type=\"error\" />\n        </div>\n      );\n    }\n    \n    const navigation = chartNavigation[selectedViz];\n    \n    return (\n      <VisualizationWrapper\n        id={expandedItem}\n        className={`${config.chartClassNames[0]} expanded-view`}\n        selectedViz={selectedViz}\n        availableVisualizations={availableVisualizations}\n        allVisualizations={allVisualizations}\n        onExpand={onExpand}\n        isExpanded={true}\n        renderVisualization={renderVisualization}\n        placeholderText={placeholderText}\n        onPrev={navigation?.goToPrevious}\n        onNext={navigation?.goToNext}\n        navigationLabel={navigation?.navigationLabel || 'Week'}\n        screenshotMode={screenshotMode}\n      />\n    );\n  }\n\n  // If no visualizations available, show placeholder\n  if (availableVizTypes.length === 0) {\n    return (\n      <div className={config.className}>\n        <Placeholder message={placeholderText} type=\"no-data\" />\n      </div>\n    );\n  }\n\n  // Render all available visualizations\n  return (\n    <div className={config.className}>\n      {availableVizTypes.map((vizType, index) => {\n        const chartId = `${viewMode}-chart-${index}`;\n        \n        const navigation = chartNavigation[vizType];\n        const wrapperProps = {\n          key: chartId,\n          id: chartId,\n          className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\n          selectedViz: vizType,\n          availableVisualizations: availableVisualizations,\n          allVisualizations: allVisualizations,\n          onExpand: onExpand,\n          isExpanded: expandedItem === chartId,\n          renderVisualization: renderVisualization,\n          placeholderText: placeholderText,\n          onPrev: navigation?.goToPrevious,\n          onNext: navigation?.goToNext,\n          navigationLabel: navigation?.navigationLabel || 'Week',\n          screenshotMode: screenshotMode\n        };\n\n        return <VisualizationWrapper {...wrapperProps} />;\n      })}\n    </div>\n  );\n};\n\nexport default DashboardGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}