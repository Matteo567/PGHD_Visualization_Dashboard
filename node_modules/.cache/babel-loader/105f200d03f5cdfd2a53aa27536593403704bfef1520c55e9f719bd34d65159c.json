{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\PatientDashboard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PatientDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientDashboard = ({\n  patientId\n}) => {\n  _s();\n  const {\n    data,\n    loading,\n    error\n  } = usePatientData(patientId);\n  const {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange\n  } = useVisualizations('patient', data);\n  const {\n    expandedItem,\n    handleExpand,\n    renderVisualization\n  } = useVisualizationHelpers(patientId, allVisualizations, selectedVisualizations);\n\n  // Create universal navigation for each chart type\n  const glucoseNavigation = useChartNavigation('glucose');\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\n  const exerciseNavigation = useChartNavigation('exercise');\n  const sleepNavigation = useChartNavigation('sleep');\n  const painNavigation = useChartNavigation('pain');\n  const moodNavigation = useChartNavigation('mood');\n  const mealContentsNavigation = useChartNavigation('mealContents');\n  const chartNavigation = {\n    glucose: glucoseNavigation,\n    bloodPressure: bloodPressureNavigation,\n    exercise: exerciseNavigation,\n    sleep: sleepNavigation,\n    pain: painNavigation,\n    mood: moodNavigation,\n    mealContents: mealContentsNavigation\n  };\n\n  // Override renderVisualization to set correct viewMode\n  const renderVisualizationWithMode = (visualizationType, boxId) => {\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Invalid visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 22\n    }, this);\n    const Component = viz.component;\n    const isExpanded = expandedItem === boxId;\n    const navigation = chartNavigation[visualizationType];\n    return /*#__PURE__*/_jsxDEV(Component, {\n      patientId: patientId,\n      isExpanded: isExpanded,\n      onExpand: () => handleExpand(boxId),\n      viewMode: \"patient\",\n      navigation: navigation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  };\n  const patientInfo = data === null || data === void 0 ? void 0 : data.patientInfo;\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-screen\",\n    children: \"Loading patient data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-screen\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(PatientInfoCard, {\n      patientInfo: patientInfo,\n      loading: loading,\n      error: error,\n      variant: \"patient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DashboardGrid, {\n      viewMode: \"patient\",\n      selectedVisualizations: selectedVisualizations,\n      availableVisualizations: availableVisualizations,\n      allVisualizations: allVisualizations,\n      onVisualizationChange: handleVisualizationChange,\n      onExpand: handleExpand,\n      expandedItem: expandedItem,\n      renderVisualization: renderVisualizationWithMode,\n      chartNavigation: chartNavigation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientDashboard, \"T+ufefrpAyq2/EC/oGQ3yFjkYIs=\", false, function () {\n  return [usePatientData, useVisualizations, useVisualizationHelpers, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation];\n});\n_c = PatientDashboard;\nexport default PatientDashboard;\nvar _c;\n$RefreshReg$(_c, \"PatientDashboard\");","map":{"version":3,"names":["React","usePatientData","useVisualizations","useVisualizationHelpers","useChartNavigation","PatientInfoCard","DashboardGrid","jsxDEV","_jsxDEV","PatientDashboard","patientId","_s","data","loading","error","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedItem","handleExpand","renderVisualization","glucoseNavigation","bloodPressureNavigation","exerciseNavigation","sleepNavigation","painNavigation","moodNavigation","mealContentsNavigation","chartNavigation","glucose","bloodPressure","exercise","sleep","pain","mood","mealContents","renderVisualizationWithMode","visualizationType","boxId","viz","children","fileName","_jsxFileName","lineNumber","columnNumber","Component","component","isExpanded","navigation","onExpand","viewMode","patientInfo","className","variant","onVisualizationChange","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PatientDashboard.js"],"sourcesContent":["import React from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PatientDashboard.css';\n\nconst PatientDashboard = ({ patientId }) => {\n  const { data, loading, error } = usePatientData(patientId);\n  const { \n    allVisualizations, \n    availableVisualizations, \n    selectedVisualizations, \n    handleVisualizationChange \n  } = useVisualizations('patient', data);\n  \n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\n    patientId, \n    allVisualizations, \n    selectedVisualizations\n  );\n\n  // Create universal navigation for each chart type\n  const glucoseNavigation = useChartNavigation('glucose');\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\n  const exerciseNavigation = useChartNavigation('exercise');\n  const sleepNavigation = useChartNavigation('sleep');\n  const painNavigation = useChartNavigation('pain');\n  const moodNavigation = useChartNavigation('mood');\n  const mealContentsNavigation = useChartNavigation('mealContents');\n\n  const chartNavigation = {\n    glucose: glucoseNavigation,\n    bloodPressure: bloodPressureNavigation,\n    exercise: exerciseNavigation,\n    sleep: sleepNavigation,\n    pain: painNavigation,\n    mood: moodNavigation,\n    mealContents: mealContentsNavigation\n  };\n\n  // Override renderVisualization to set correct viewMode\n  const renderVisualizationWithMode = (visualizationType, boxId) => {\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <div>Invalid visualization</div>;\n\n    const Component = viz.component;\n    const isExpanded = expandedItem === boxId;\n    const navigation = chartNavigation[visualizationType];\n    \n    return <Component \n      patientId={patientId} \n      isExpanded={isExpanded} \n      onExpand={() => handleExpand(boxId)}\n      viewMode=\"patient\"\n      navigation={navigation}\n    />;\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  if (loading) return <div className=\"loading-screen\">Loading patient data...</div>;\n  if (error) return <div className=\"error-screen\">Error: {error}</div>;\n\n  return (\n    <div className=\"patient-dashboard\">\n      <PatientInfoCard \n        patientInfo={patientInfo}\n        loading={loading}\n        error={error}\n        variant=\"patient\"\n      />\n\n      <DashboardGrid\n        viewMode=\"patient\"\n        selectedVisualizations={selectedVisualizations}\n        availableVisualizations={availableVisualizations}\n        allVisualizations={allVisualizations}\n        onVisualizationChange={handleVisualizationChange}\n        onExpand={handleExpand}\n        expandedItem={expandedItem}\n        renderVisualization={renderVisualizationWithMode}\n        chartNavigation={chartNavigation}\n      />\n    </div>\n  );\n};\n\nexport default PatientDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}