{"version":3,"file":"static/js/653.978ff6d4.chunk.js","mappings":"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","sources":["services/dataService.js","hooks/usePatientData.js","hooks/useChartNavigation.js","components/Legend.js","components/InfoBox.js","components/ui/Tooltip.js","components/chart-utils/ChartConfigFactory.js","components/chart-utils/SharedYAxis.js","components/patient_charts/GlucoseChart.js","components/patient_charts/BloodPressureChart.js","components/patient_charts/ExerciseChart.js","components/patient_charts/MoodCalendar.js","components/patient_charts/BodySvg.js","components/patient_charts/PainChart.js","components/patient_charts/MealContentsChart.js","components/patient_charts/SleepChart.js","hooks/useVisualizations.js","components/ui/Placeholder.js","hooks/useVisualizationHelpers.js","components/PatientInfoCard.js","components/VisualizationWrapper.js","components/DashboardGrid.js","PatientDashboard.js","PhysicianDashboard.js","components/Dashboard.js"],"sourcesContent":["/*\r\n dataService.js - Patient Data Service\r\n \r\n This service handles all data operations for the health dashboard:\r\n - Fetches patient CSV data from the server\r\n - Parses and processes CSV data using PapaParse\r\n - Transforms raw data into structured health metrics\r\n - Provides data validation and error handling\r\n - Manages patient information, medications, and health tracking data\r\n - Supports all health metric types (glucose, BP, exercise, mood, pain, sleep, meals)\r\n \r\n Architecture:\r\n - Uses PapaParse library for CSV parsing\r\n - Implements service class pattern for data operations\r\n - Provides comprehensive error handling and validation\r\n - Supports multiple data formats and structures\r\n \r\n Data Processing:\r\n - CSV parsing with header validation\r\n - Data transformation and normalization\r\n - Type conversion and validation\r\n - Error recovery and fallback mechanisms\r\n \r\n Health Metrics Supported:\r\n - Blood glucose monitoring with meal context\r\n - Blood pressure tracking with risk categorization\r\n - Exercise activity tracking and categorization\r\n - Mood assessment and tracking\r\n - Pain reporting with anatomical mapping\r\n - Sleep quality and duration analysis\r\n - Nutritional intake and meal composition\r\n \r\n Error Handling:\r\n - Network error recovery\r\n - CSV parsing error handling\r\n - Data validation and sanitization\r\n - Graceful degradation for missing data\r\n \r\n Core service for data management and processing throughout the application.\r\n */\r\n\r\nimport Papa from 'papaparse';\r\n\r\n// Configuration for CSV parsing\r\nconst CSV_CONFIG = {\r\n  header: true,\r\n  skipEmptyLines: true,\r\n  transformHeader: (header) => header.trim(),\r\n  transform: (value) => value?.trim(),\r\n};\r\n\r\n/*\r\n Fetches and parses CSV data for a specific patient\r\n \r\n - @param {string} patientId - The patient identifier\r\n - @returns {Promise<Array>} Parsed CSV data as array of objects\r\n - @throws {Error} If CSV fetch or parsing fails\r\n */\r\nconst fetchPatientCsvData = async (patientId) => {\r\n  try {\r\n    // Add cache busting to ensure fresh data\r\n    const response = await fetch(`/synthetic_patients/${patientId}.csv?v=${Date.now()}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch CSV for ${patientId}: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const csvText = await response.text();\r\n    \r\n    if (!csvText || csvText.trim().length === 0) {\r\n      throw new Error(`Empty CSV file for patient ${patientId}`);\r\n    }\r\n    \r\n    const parsed = Papa.parse(csvText, CSV_CONFIG);\r\n    \r\n    if (parsed.errors.length > 0) {\r\n      // Log parsing errors for debugging but don't throw\r\n      console.error(`CSV parsing errors for ${patientId}:`, parsed.errors);\r\n    }\r\n    \r\n    return parsed.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching or parsing CSV for ${patientId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/*\r\n Service class for handling patient data operations\r\n Provides methods for fetching and processing patient health data from CSV files\r\n */\r\nclass DataService {\r\n  /*\r\n   Retrieves and processes all data for a specific patient\r\n   \r\n   - @param {string} patientId - The patient identifier\r\n   - @returns {Promise<Object>} Processed patient data including all health metrics\r\n   - @throws {Error} If patient data cannot be retrieved or processed\r\n   */\r\n  static async getPatientData(patientId) {\r\n    if (!patientId) {\r\n      throw new Error('Patient ID is required');\r\n    }\r\n\r\n    try {\r\n      const patientRows = await fetchPatientCsvData(patientId);\r\n\r\n      if (!Array.isArray(patientRows) || patientRows.length === 0) {\r\n        throw new Error(`No data found for patient ${patientId}`);\r\n      }\r\n\r\n      return this.processPatientData(patientRows, patientId);\r\n    } catch (error) {\r\n      console.error(`Error fetching patient data for ${patientId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   Processes raw CSV data into structured patient information and health metrics\r\n   \r\n   - @param {Array} rows - Raw CSV data rows\r\n   - @param {string} patientId - The patient identifier\r\n   - @returns {Object} Structured patient data object\r\n   -  @throws {Error} If data structure is invalid or processing fails\r\n   */\r\n  static processPatientData(rows, patientId) {\r\n    if (!Array.isArray(rows) || rows.length === 0) {\r\n      throw new Error(`Invalid data structure for patient ${patientId}`);\r\n    }\r\n\r\n    const firstRowData = rows[0];\r\n    if (!firstRowData) {\r\n      throw new Error(`No valid data rows found for patient ${patientId}`);\r\n    }\r\n\r\n    const patientInfo = {\r\n      patientId,\r\n      patientNumber: patientId,\r\n      name: firstRowData['Name'] || 'Not specified',\r\n      age: firstRowData['Age'] || 'Not specified',\r\n      gender: firstRowData['Gender'] || 'Not specified',\r\n      dataAvailable: 'May 2025'\r\n    };\r\n\r\n    // Process medications using the cleaner individual medication fields\r\n    const detailedMedications = [];\r\n    \r\n    // Get medication data from the first row (should be consistent across all rows for a patient)\r\n    const medicationNamesStr = firstRowData['Medication_Names'] || '';\r\n    const medicationTypesStr = firstRowData['Medication_Types'] || '';\r\n    const medicationCategoriesStr = firstRowData['Medication_Categories'] || '';\r\n    const medicationDosagesStr = firstRowData['Medication_Dosages'] || '';\r\n    \r\n    // Split the semicolon-separated strings into arrays\r\n    const medicationNames = medicationNamesStr ? medicationNamesStr.split('; ').filter(Boolean) : [];\r\n    const medicationTypes = medicationTypesStr ? medicationTypesStr.split('; ').filter(Boolean) : [];\r\n    const medicationCategories = medicationCategoriesStr ? medicationCategoriesStr.split('; ').filter(Boolean) : [];\r\n    const medicationDosages = medicationDosagesStr ? medicationDosagesStr.split('; ').filter(Boolean) : [];\r\n    \r\n    // Process each medication\r\n    for (let i = 0; i < Math.max(medicationNames.length, medicationTypes.length, medicationCategories.length, medicationDosages.length); i++) {\r\n        const name = medicationNames[i] || '';\r\n        const type = medicationTypes[i] || '';\r\n        const category = medicationCategories[i] || '';\r\n        const dosage = medicationDosages[i] || '';\r\n        \r\n        if (name && name.trim() && \r\n            !name.includes('Dose not specified') && \r\n            name.length < 100 && // Filter out extremely long medication names\r\n            !name.includes('Folic Acid Iron Magnesium Calcium Pain and Inflammation')) {\r\n            detailedMedications.push({\r\n                name: name.trim(),\r\n                schedule: dosage.trim(), // Use dosage as schedule\r\n                category: '', // Don't include category in visualization\r\n                dosage: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    // Process conditions\r\n    const conditionsSet = new Set();\r\n    const conditionsRaw = [...new Set(rows.map(row => row['Chronic_Conditions'] || row['Conditions']).filter(Boolean))];\r\n    conditionsRaw.forEach(conditionString => {\r\n        conditionString.split(',').forEach(c => conditionsSet.add(c.trim()));\r\n    });\r\n\r\n    // Process all data types\r\n    const glucoseData = this.processGlucoseData(rows);\r\n    const bloodPressureData = this.processBloodPressureData(rows);\r\n    const exerciseData = this.processExerciseData(rows);\r\n    const moodData = this.processMoodData(rows);\r\n    const painData = this.processPainData(rows);\r\n    const sleepData = this.processSleepData(rows);\r\n    const mealData = this.processMealData(rows);\r\n\r\n    return {\r\n      patientInfo: { \r\n        ...patientInfo, \r\n        detailedMedications, \r\n        conditions: Array.from(conditionsSet)\r\n      },\r\n      glucoseData,\r\n      bloodPressureData,\r\n      exerciseData,\r\n      moodData,\r\n      painData,\r\n      mealData,\r\n      sleepData,\r\n      rawData: rows\r\n    };\r\n  }\r\n\r\n  /**\r\n   Processes blood glucose data from CSV rows\r\n   \r\n   - @param {Array} rows - CSV data rows\r\n   - @returns {Array} Processed glucose data with timestamps and ranges\r\n   */\r\n  static processGlucoseData(rows) {\r\n    return rows.flatMap(row => {\r\n      const baseDate = new Date(row['Date']);\r\n      const readings = [];\r\n      \r\n      const hasMultiColumn = row['Glucose_1'] !== undefined;\r\n      \r\n      if (hasMultiColumn) {\r\n        for (let i = 1; i <= 4; i++) {\r\n          const value = parseFloat(row[`Glucose_${i}`]);\r\n          const timeStr = row[`Glucose_Time_${i}`];\r\n          if (value > 0 && timeStr) {\r\n            const [hours, minutes] = timeStr.split(':').map(Number);\r\n            const date = new Date(baseDate);\r\n            date.setHours(hours, minutes);\r\n            readings.push({\r\n              date,\r\n              value,\r\n              range: row[`Glucose_Range_${i}`],\r\n              measurementType: row[`Glucose_Measurement_Type_${i}`]\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        const value = parseFloat(row['Glucose_Level']);\r\n        if (value > 0) {\r\n          const randomHour = Math.floor(Math.random() * 24);\r\n          const randomMinute = Math.floor(Math.random() * 60);\r\n          const date = new Date(baseDate);\r\n          date.setHours(randomHour, randomMinute);\r\n          \r\n          let range = 'in range';\r\n          if (value < 70) range = 'below range';\r\n          else if (value > 180) range = 'above range';\r\n          \r\n          readings.push({\r\n            date,\r\n            value,\r\n            range,\r\n            measurementType: 'Random'\r\n          });\r\n        }\r\n      }\r\n      \r\n      return readings;\r\n    });\r\n  }\r\n\r\n  /**\r\n   Processes blood pressure data from CSV rows\r\n   \r\n   - @param {Array} rows - CSV data rows\r\n   - @returns {Array} Processed blood pressure data with systolic/diastolic values\r\n   */\r\n  static processBloodPressureData(rows) {\r\n    return rows.flatMap(row => {\r\n        const baseDate = new Date(row['Date']);\r\n        const readings = [];\r\n        \r\n        const hasMultiColumn = row['Systolic_1'] !== undefined;\r\n        \r\n        if (hasMultiColumn) {\r\n            for (let i = 1; i <= 4; i++) {\r\n                const systolic = parseInt(row[`Systolic_${i}`]);\r\n                const diastolic = parseInt(row[`Diastolic_${i}`]);\r\n                const timeStr = row[`BP_Time_${i}`];\r\n                if (systolic > 0 && diastolic > 0 && timeStr) {\r\n                    const [hours, minutes] = timeStr.split(':').map(Number);\r\n                    const date = new Date(baseDate);\r\n                    date.setHours(hours, minutes);\r\n                    readings.push({ \r\n                        date, \r\n                        systolic, \r\n                        diastolic, \r\n                        systolicType: row[`Systolic_Type_${i}`],\r\n                        diastolicType: row[`Diastolic_Type_${i}`]\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            const systolic = parseInt(row['Systolic_BP']);\r\n            const diastolic = parseInt(row['Diastolic_BP']);\r\n            if (systolic > 0 && diastolic > 0) {\r\n                const randomHour = Math.floor(Math.random() * 24);\r\n                const randomMinute = Math.floor(Math.random() * 60);\r\n                const date = new Date(baseDate);\r\n                date.setHours(randomHour, randomMinute);\r\n                \r\n                let systolicType = 'normal';\r\n                let diastolicType = 'normal';\r\n                if (systolic >= 180 || diastolic >= 120) {\r\n                    systolicType = 'hypertensive crisis';\r\n                    diastolicType = 'hypertensive crisis';\r\n                } else if (systolic >= 140 || diastolic >= 90) {\r\n                    systolicType = 'high';\r\n                    diastolicType = 'high';\r\n                } else if (systolic >= 130 || diastolic >= 80) {\r\n                    systolicType = 'elevated';\r\n                    diastolicType = 'elevated';\r\n                }\r\n                \r\n                readings.push({ \r\n                    date, \r\n                    systolic, \r\n                    diastolic, \r\n                    systolicType,\r\n                    diastolicType\r\n                });\r\n            }\r\n        }\r\n        \r\n        return readings;\r\n    });\r\n  }\r\n\r\n  /**\r\n   Processes exercise data from CSV rows\r\n   \r\n   - @param {Array} rows - CSV data rows\r\n   - @returns {Array} Processed exercise data with activity types and durations\r\n   */\r\n  static processExerciseData(rows) {\r\n    const exerciseByDate = {};\r\n    \r\n    rows.forEach(row => {\r\n        const date = new Date(row['Date']);\r\n        const dateKey = date.toDateString();\r\n        if (!exerciseByDate[dateKey]) {\r\n            exerciseByDate[dateKey] = { date, walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n        }\r\n        \r\n        const hasMultiColumn = row['Exercise_Type_1'] !== undefined;\r\n        \r\n        if (hasMultiColumn) {\r\n            for (let i = 1; i <= 3; i++) {\r\n                const type = row[`Exercise_Type_${i}`]?.toLowerCase();\r\n                const minutes = parseFloat(row[`Exercise_Minutes_${i}`]);\r\n                if (type && minutes > 0) {\r\n                    this.categorizeExercise(type, minutes, exerciseByDate[dateKey]);\r\n                }\r\n            }\r\n        } else {\r\n            const type = row['Exercise_Type']?.toLowerCase();\r\n            const minutes = parseFloat(row['Exercise_Minutes']);\r\n            if (type && minutes > 0) {\r\n                this.categorizeExercise(type, minutes, exerciseByDate[dateKey]);\r\n            }\r\n        }\r\n    });\r\n    \r\n    return Object.values(exerciseByDate).filter(d => d.totalMinutes > 0);\r\n  }\r\n\r\n  /**\r\n   Categorizes exercise activities into predefined types\r\n   \r\n   - @param {string} type - Exercise type from CSV\r\n   - @param {number} minutes - Duration in minutes\r\n   - @param {Object} dayData - Daily exercise data object\r\n   */\r\n  static categorizeExercise(type, minutes, dayData) {\r\n    if (type.includes('walking')) dayData.walking += minutes;\r\n    else if (type.includes('swimming')) dayData.swimming += minutes;\r\n    else if (type.includes('running')) dayData.running += minutes;\r\n    else if (type.includes('resistance') || type.includes('weights')) dayData['resistance/weights'] += minutes;\r\n    else if (type.includes('biking')) dayData.biking += minutes;\r\n    else if (type.includes('balance') || type.includes('stretching')) dayData['balance/stretching'] += minutes;\r\n    else dayData.other += minutes;\r\n    dayData.totalMinutes += minutes;\r\n  }\r\n\r\n  /**\r\n   Processes mood data from CSV rows\r\n   \r\n   - @param {Array} rows - CSV data rows\r\n   - @returns {Array} Processed mood data with categories\r\n   */\r\n  static processMoodData(rows) {\r\n    return rows.filter(row => row['Mood']).map(row => ({\r\n        date: new Date(row['Date']),\r\n        mood: row['Mood'],\r\n        category: row['Mood'] || 'neutral'\r\n    }));\r\n  }\r\n\r\n  /**\r\n   Processes pain data from CSV rows\r\n   \r\n   - @param {Array} rows - CSV data rows\r\n   - @returns {Array} Processed pain data with location and intensity\r\n   */\r\n  static processPainData(rows) {\r\n    return rows.filter(row => row['Pain_Location'] && row['Pain_Level']).map(row => ({\r\n        date: new Date(row['Date']),\r\n        location: row['Pain_Location'].toLowerCase(),\r\n        level: parseInt(row['Pain_Level'])\r\n    }));\r\n  }\r\n\r\n  /**\r\n   Processes sleep data from CSV rows\r\n   \r\n   - @param {Array} rows - CSV data rows\r\n   - @returns {Array} Processed sleep data with duration and quality\r\n   */\r\n  static processSleepData(rows) {\r\n    return rows.filter(row => row['Sleep_Hours'] && row['Sleep_Quality']).map(row => ({\r\n        date: new Date(row['Date']),\r\n        hours: parseFloat(row['Sleep_Hours']),\r\n        quality: row['Sleep_Quality'],\r\n        qualityCode: parseInt(row['Sleep_Quality_Code'])\r\n    }));\r\n  }\r\n\r\n  /**\r\n   Processes meal data from CSV rows\r\n   \r\n   - @param {Array} rows - CSV data rows\r\n   - @returns {Array} Processed meal data with nutritional components\r\n   */\r\n  static processMealData(rows) {\r\n    // Return the raw rows with meal data since MealContentsChart expects individual meal components\r\n    const filteredRows = rows.filter(row => {\r\n      // Check if any meal data exists for this row\r\n      const mealTypes = ['Breakfast', 'Lunch', 'Dinner', 'Late Night Snack'];\r\n      \r\n      const hasMealData = mealTypes.some(mealType => {\r\n        const time = row[`${mealType}_Time`];\r\n        const protein = row[`${mealType}_Protein`];\r\n        const carbs = row[`${mealType}_Carbohydrates`];\r\n        const vegetables = row[`${mealType}_Vegetables`];\r\n        const fruit = row[`${mealType}_Fruit`];\r\n        const alcohol = row[`${mealType}_Alcohol`];\r\n        const sugar = row[`${mealType}_Added_Sugar`];\r\n        \r\n        // Check if time exists and at least one food component is present\r\n        // Handle both numeric (1, 0) and string ('1', '0') values\r\n        const hasFood = protein === 1 || protein === '1' || \r\n                       carbs === 1 || carbs === '1' || \r\n                       vegetables === 1 || vegetables === '1' || \r\n                       fruit === 1 || fruit === '1' || \r\n                       alcohol === 1 || alcohol === '1' || \r\n                       (sugar && sugar !== '' && sugar !== 'NaN');\r\n        \r\n        return time && hasFood;\r\n      });\r\n      \r\n      return hasMealData;\r\n    });\r\n    \r\n    return filteredRows;\r\n  }\r\n}\r\n\r\nexport default DataService;\r\n","/*\r\n usePatientData.js - Patient Data Management Hook\r\n \r\n This custom hook manages all patient data operations including fetching and caching\r\n patient data from CSV files, providing loading, error, and data states, handling\r\n data validation and error recovery, and offering convenient access to individual\r\n health metric datasets.\r\n \r\n Architecture:\r\n - Uses React hooks for state management (useState, useEffect, useCallback)\r\n - Implements data caching to optimize performance\r\n - Provides comprehensive error handling and recovery\r\n - Offers convenient data access patterns for components\r\n \r\n State Management:\r\n - data: The complete patient data object\r\n - loading: Boolean indicating if data is being fetched\r\n - error: Error message if data fetching failed\r\n - lastFetchedId: Tracks the last patient ID to prevent unnecessary re-fetching\r\n \r\n Data Structure:\r\n - patientInfo: Patient demographics and medical information\r\n - glucoseData: Blood glucose readings with timestamps and ranges\r\n - bloodPressureData: Blood pressure measurements with systolic/diastolic values\r\n - exerciseData: Physical activity tracking with duration and type\r\n - moodData: Daily mood assessments\r\n - painData: Pain reports with location and intensity\r\n - sleepData: Sleep duration and quality measurements\r\n - mealData: Nutritional intake tracking\r\n \r\n Utility Functions:\r\n - refetch: Forces a fresh data fetch for the current patient\r\n - clearData: Clears all cached data and resets state\r\n - hasData: Boolean indicating if data is available\r\n - isEmpty: Boolean indicating if no data is available and not loading\r\n - isError: Boolean indicating if an error occurred\r\n */\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport DataService from '../services/dataService';\r\n\r\n/*\r\n Enhanced custom hook for loading and managing patient data\r\n \r\n - @param {string} patientId - The patient identifier\r\n - @returns {Object} Object containing data, loading state, error state, and utility functions\r\n */\r\nconst usePatientData = (patientId) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [lastFetchedId, setLastFetchedId] = useState(null);\r\n\r\n  const loadData = useCallback(async (id) => {\r\n    // Don't reload if we already have data for this patient\r\n    if (id === lastFetchedId && data && !error) {\r\n      return;\r\n    }\r\n\r\n    if (!id || typeof id !== 'string') {\r\n      setLoading(false);\r\n      setData(null);\r\n      setError(null);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const patientData = await DataService.getPatientData(id);\r\n      \r\n      if (patientData && patientData.patientInfo) {\r\n        setData(patientData);\r\n        setLastFetchedId(id);\r\n      } else {\r\n        throw new Error('Invalid data structure received');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n      setError(errorMessage);\r\n      setData(null);\r\n      console.error('Error loading patient data:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [lastFetchedId, data, error]);\r\n\r\n  useEffect(() => {\r\n    if (patientId) {\r\n      loadData(patientId);\r\n    } else {\r\n      setData(null);\r\n      setError(null);\r\n      setLastFetchedId(null);\r\n      setLoading(false);\r\n    }\r\n  }, [patientId, loadData]);\r\n\r\n  const refetch = useCallback(() => {\r\n    if (patientId) {\r\n      setLastFetchedId(null); // Force reload\r\n      loadData(patientId);\r\n    }\r\n  }, [patientId, loadData]);\r\n\r\n  const clearData = useCallback(() => {\r\n    setData(null);\r\n    setError(null);\r\n    setLastFetchedId(null);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  return {\r\n    // Core data\r\n    data,\r\n    loading,\r\n    error,\r\n    \r\n    // Patient info\r\n    patientInfo: data?.patientInfo || null,\r\n    \r\n    // Individual data types for convenience\r\n    glucoseData: data?.glucoseData || [],\r\n    bloodPressureData: data?.bloodPressureData || [],\r\n    exerciseData: data?.exerciseData || [],\r\n    moodData: data?.moodData || [],\r\n    painData: data?.painData || [],\r\n    mealData: data?.mealData || [],\r\n    sleepData: data?.sleepData || [],\r\n    \r\n    // Actions\r\n    refetch,\r\n    clearData,\r\n    \r\n    // Helper flags\r\n    hasData: !!data,\r\n    isEmpty: !loading && !error && !data,\r\n    isError: !!error,\r\n    \r\n    // Data availability flags\r\n    hasGlucoseData: (data?.glucoseData || []).length > 0,\r\n    hasBloodPressureData: (data?.bloodPressureData || []).length > 0,\r\n    hasExerciseData: (data?.exerciseData || []).length > 0,\r\n    hasMoodData: (data?.moodData || []).length > 0,\r\n    hasPainData: (data?.painData || []).length > 0,\r\n    hasSleepData: (data?.sleepData || []).length > 0,\r\n    hasMealData: (data?.mealData || []).length > 0\r\n  };\r\n};\r\n\r\nexport default usePatientData;\r\n","/*\r\n useChartNavigation.js - Universal Chart Navigation Hook\r\n \r\n This hook provides consistent navigation functionality for all charts including\r\n week/month navigation based on chart type, date range calculations and formatting,\r\n navigation state management, previous/next navigation functions, and display\r\n formatting for current time periods.\r\n \r\n Ensures consistent navigation behavior across all health metric visualizations.\r\n */\r\n\r\nimport { useState, useCallback } from 'react';\r\n\r\n/*\r\n Universal navigation hook for chart components\r\n Provides navigation state and functions that can be used by any chart\r\n \r\n - @param {string} chartType - The type of chart (glucose, bloodPressure, etc.)\r\n - @param {Date} initialDate - Initial date for navigation (defaults to May 1, 2025)\r\n - @returns {Object} Navigation state and functions\r\n */\r\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\r\n  const [currentDate, setCurrentDate] = useState(initialDate);\r\n\r\n  // Determine navigation type based on chart type\r\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\r\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\r\n\r\n  // Navigation functions\r\n  const goToPrevious = useCallback(() => {\r\n    setCurrentDate(prev => {\r\n      const newDate = new Date(prev);\r\n      if (navigationType === 'month') {\r\n        newDate.setMonth(newDate.getMonth() - 1);\r\n      } else {\r\n        newDate.setDate(newDate.getDate() - 7);\r\n      }\r\n      return newDate;\r\n    });\r\n  }, [navigationType]);\r\n\r\n  const goToNext = useCallback(() => {\r\n    setCurrentDate(prev => {\r\n      const newDate = new Date(prev);\r\n      if (navigationType === 'month') {\r\n        newDate.setMonth(newDate.getMonth() + 1);\r\n      } else {\r\n        newDate.setDate(newDate.getDate() + 7);\r\n      }\r\n      return newDate;\r\n    });\r\n  }, [navigationType]);\r\n\r\n  // Calculate date range based on navigation type\r\n  const getDateRange = useCallback(() => {\r\n    if (navigationType === 'month') {\r\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n      return { start: startOfMonth, end: endOfMonth };\r\n    } else {\r\n      const startOfWeek = new Date(currentDate);\r\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\r\n      startOfWeek.setHours(0, 0, 0, 0);\r\n      \r\n      const endOfWeek = new Date(startOfWeek);\r\n      endOfWeek.setDate(endOfWeek.getDate() + 6);\r\n      endOfWeek.setHours(23, 59, 59, 999);\r\n      \r\n      return { start: startOfWeek, end: endOfWeek };\r\n    }\r\n  }, [currentDate, navigationType]);\r\n\r\n  // Get current month/year display\r\n  const getCurrentMonthYear = useCallback(() => {\r\n    return currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\r\n  }, [currentDate]);\r\n\r\n  // Get current week display\r\n  const getCurrentWeekDisplay = useCallback(() => {\r\n    const { start, end } = getDateRange();\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} - ${endStr}`;\r\n  }, [getDateRange]);\r\n\r\n  // Calculate 3-month date range dynamically based on current date\r\n  const getThreeMonthRange = useCallback(() => {\r\n    // Calculate 3 months back from the current date\r\n    const endOfThreeMonths = new Date(currentDate);\r\n    const startOfThreeMonths = new Date(currentDate);\r\n    startOfThreeMonths.setMonth(startOfThreeMonths.getMonth() - 3);\r\n    \r\n    // Ensure we don't go before the data start date (July 1, 2024)\r\n    const dataStartDate = new Date(2024, 6, 1); // July 1, 2024\r\n    if (startOfThreeMonths < dataStartDate) {\r\n      startOfThreeMonths.setTime(dataStartDate.getTime());\r\n    }\r\n    \r\n    // Ensure we don't go beyond the data end date (July 31, 2025)\r\n    const dataEndDate = new Date(2025, 6, 31); // July 31, 2025\r\n    if (endOfThreeMonths > dataEndDate) {\r\n      endOfThreeMonths.setTime(dataEndDate.getTime());\r\n    }\r\n    \r\n    return { start: startOfThreeMonths, end: endOfThreeMonths };\r\n  }, [currentDate]);\r\n\r\n  // Get 3-month display string dynamically\r\n  const getThreeMonthDisplay = useCallback(() => {\r\n    const { start, end } = getThreeMonthRange();\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\r\n    return `${startStr} - ${endStr}`;\r\n  }, [getThreeMonthRange]);\r\n\r\n  return {\r\n    currentDate,\r\n    navigationType,\r\n    navigationLabel,\r\n    goToPrevious,\r\n    goToNext,\r\n    getDateRange,\r\n    getThreeMonthRange,\r\n    getCurrentMonthYear,\r\n    getCurrentWeekDisplay,\r\n    getThreeMonthDisplay\r\n  };\r\n};\r\n\r\nexport default useChartNavigation;\r\n","/*\r\n Legend.js - Dynamic Chart Legend Component\r\n \r\n This component provides interactive legends for chart visualizations:\r\n - Auto-sizes to fit chart container dimensions\r\n - Supports horizontal and vertical orientations\r\n - Dynamically positions based on chart type and container\r\n - Handles sizing for different chart contexts\r\n - Provides consistent legend formatting across all chart types\r\n \r\n Essential for interpreting chart data and color coding in health visualizations.\r\n */\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport './ChartStyles.css';\r\n\r\nconst Legend = ({ \r\n  title, \r\n  items, \r\n  orientation = 'horizontal', // horizontal | vertical\r\n  size = 'medium', // small | medium | large\r\n  containerWidth = null // Keep for backward compatibility, but will be overridden by auto-sizing\r\n}) => {\r\n  const legendRef = useRef(null);\r\n  const [parentWidth, setParentWidth] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const updateWidth = () => {\r\n      if (legendRef.current) {\r\n        // Find the most specific chart content container (not the wrapper)\r\n        const specificContainers = [\r\n          '.glucose-chart-wrapper', // Glucose chart wrapper (contains the actual chart)\r\n          '.chart-section', // Blood pressure chart sections\r\n          '.bp-svg-container', // Blood pressure SVG container\r\n          '.exercise-chart-content', // Exercise chart content\r\n          '.sleep-chart', // Sleep chart container\r\n          '.pain-chart-wrapper', // Pain chart wrapper\r\n          '.meal-chart-wrapper', // Meal chart wrapper\r\n          '.mood-calendar-wrapper', // Mood calendar wrapper\r\n          '.pain-line-chart-container', // Pain line chart container\r\n        ];\r\n        \r\n        let parentContainer = null;\r\n        let containerWidth = 0;\r\n        \r\n        // Try to find the most specific container first\r\n        for (const selector of specificContainers) {\r\n          const container = legendRef.current.closest(selector);\r\n          if (container) {\r\n            parentContainer = container;\r\n            // Get the content width excluding padding\r\n            const computedStyle = window.getComputedStyle(container);\r\n            const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\r\n            const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\r\n            containerWidth = container.offsetWidth - paddingLeft - paddingRight;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // Special handling for pain legends - prioritize pain-chart-wrapper\r\n        if (!parentContainer && legendRef.current.closest('.pain-legend-wrapper')) {\r\n          const painChartWrapper = legendRef.current.closest('.pain-chart-container')?.querySelector('.pain-chart-wrapper');\r\n          if (painChartWrapper) {\r\n            parentContainer = painChartWrapper;\r\n            const computedStyle = window.getComputedStyle(painChartWrapper);\r\n            const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\r\n            const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\r\n            containerWidth = painChartWrapper.offsetWidth - paddingLeft - paddingRight;\r\n          }\r\n        }\r\n        \r\n        // Fallback to chart-specific containers if no specific one found\r\n        if (!parentContainer) {\r\n          const chartContainers = [\r\n            '.glucose-chart-container',\r\n            '.bp-chart-container', // Changed from .bp-chart-content to .bp-chart-container\r\n            '.exercise-chart-container',\r\n            '.sleep-chart-content',\r\n            '.pain-chart-container',\r\n            '.meal-contents-chart-container',\r\n            '.mood-calendar-container'\r\n          ];\r\n          \r\n          for (const selector of chartContainers) {\r\n            const container = legendRef.current.closest(selector);\r\n            if (container) {\r\n              parentContainer = container;\r\n              // For chart containers, find the inner chart content\r\n              const innerChart = container.querySelector('.glucose-chart-wrapper, .chart-section, .bp-svg-container, .exercise-chart-content, .sleep-chart, .pain-chart-wrapper, .meal-chart-wrapper, .mood-calendar-wrapper');\r\n              \r\n              if (innerChart) {\r\n                // Use the inner chart width\r\n                const computedStyle = window.getComputedStyle(innerChart);\r\n                const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\r\n                const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\r\n                containerWidth = innerChart.offsetWidth - paddingLeft - paddingRight;\r\n              } else {\r\n                // Fallback to container width with padding subtraction\r\n                const computedStyle = window.getComputedStyle(container);\r\n                const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\r\n                const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\r\n                containerWidth = container.offsetWidth - paddingLeft - paddingRight;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Final fallback to visualization content\r\n        if (!parentContainer) {\r\n          const vizContent = legendRef.current.closest('.visualization-content');\r\n          if (vizContent) {\r\n            parentContainer = vizContent;\r\n            const computedStyle = window.getComputedStyle(vizContent);\r\n            const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;\r\n            const paddingRight = parseFloat(computedStyle.paddingRight) || 0;\r\n            containerWidth = vizContent.offsetWidth - paddingLeft - paddingRight;\r\n          }\r\n        }\r\n        \r\n        if (parentContainer && containerWidth > 0) {\r\n          // Add additional margin to prevent touching borders\r\n          const adjustedWidth = Math.max(containerWidth - 32, 200); // Ensure minimum width of 200px\r\n          setParentWidth(adjustedWidth);\r\n        }\r\n      }\r\n    };\r\n\r\n    updateWidth();\r\n    \r\n    // Update on resize\r\n    const resizeObserver = new ResizeObserver(updateWidth);\r\n    if (legendRef.current) {\r\n      resizeObserver.observe(legendRef.current);\r\n    }\r\n\r\n    // Also listen for window resize as fallback\r\n    window.addEventListener('resize', updateWidth);\r\n    \r\n    return () => {\r\n      resizeObserver.disconnect();\r\n      window.removeEventListener('resize', updateWidth);\r\n    };\r\n  }, []);\r\n\r\n  if (!items || items.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  // Use parent width if available, otherwise fall back to containerWidth prop or default\r\n  const finalWidth = parentWidth || containerWidth;\r\n  const containerStyle = finalWidth ? { width: finalWidth, maxWidth: finalWidth } : {};\r\n\r\n  return (\r\n    <div \r\n      ref={legendRef}\r\n      className={`legend-container legend-${orientation} legend-${size}`}\r\n      style={containerStyle}\r\n    >\r\n      {title && <h4 className=\"legend-title\">{title}</h4>}\r\n      <div className=\"legend-items\">\r\n        {items.map((item, index) => (\r\n          <div \r\n            key={index} \r\n            className=\"legend-item\" \r\n            style={item.style}\r\n            title={item.description || item.label}\r\n          >\r\n            {/* Color indicator */}\r\n            {item.color && (\r\n              <span \r\n                className=\"legend-color-indicator\" \r\n                style={{ backgroundColor: item.color }}\r\n                aria-label={`Color indicator for ${item.label}`}\r\n              />\r\n            )}\r\n            \r\n            {/* Icon/emoji indicator */}\r\n            {item.icon && (\r\n              <span \r\n                className=\"legend-icon\"\r\n                aria-label={`Icon for ${item.label}`}\r\n              >\r\n                {item.icon}\r\n              </span>\r\n            )}\r\n            \r\n            {/* Shape indicator for special cases */}\r\n            {item.shape && (\r\n              <span \r\n                className={`legend-shape legend-shape-${item.shape}`}\r\n                style={item.shapeStyle}\r\n                aria-label={`${item.shape} indicator for ${item.label}`}\r\n              />\r\n            )}\r\n            \r\n            {/* Label */}\r\n            <span className=\"legend-label\">{item.label}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Legend;\r\n","/**\r\n InfoBox.js - Information Display Component\r\n \r\n A simple, reusable component for displaying informational content:\r\n - Supports title and content sections\r\n - Customizable styling through className prop\r\n - Used for patient education and data summaries\r\n - Lightweight component for consistent information presentation\r\n \r\n Provides standardized formatting for informational content across the application.\r\n */\r\n\r\nimport React from 'react';\r\nimport './InfoBox.css';\r\n\r\nconst InfoBox = ({ title, content, className = '' }) => {\r\n  return (\r\n    <div className={`info-box ${className}`}>\r\n      {title && <h4 className=\"info-box-title\">{title}</h4>}\r\n      <div className=\"info-box-content\">\r\n        {content}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoBox;\r\n","/**\r\n Tooltip.js - Interactive Chart Tooltip Component\r\n \r\n This component provides contextual information on chart hover:\r\n - Displays detailed data point information\r\n - Automatically positions tooltips within viewport boundaries\r\n - Handles cursor positioning and offset calculations\r\n - Supports dynamic content rendering\r\n - Ensures tooltips remain visible and accessible\r\n \r\n Enhances chart interactivity by providing detailed data context on hover.\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './Tooltip.css';\r\n\r\nconst Tooltip = ({ \r\n  isVisible, \r\n  content, \r\n  position = { x: 0, y: 0 }, \r\n  containerRef = null \r\n}) => {\r\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    if (isVisible) {\r\n      // Use viewport coordinates directly\r\n      let x = position.x;\r\n      let y = position.y;\r\n      \r\n      // Adjust position to keep tooltip within viewport\r\n      const tooltipWidth = 180; // Approximate tooltip width\r\n      const tooltipHeight = 70; // Approximate tooltip height\r\n      \r\n      // Position tooltip closer to the cursor - slightly above and to the right\r\n      x = x + 15; // Small offset to the right\r\n      y = y - tooltipHeight - 5; // Position above the cursor with small gap\r\n      \r\n      // Adjust horizontal position if tooltip would go outside viewport\r\n      if (x + tooltipWidth > window.innerWidth) {\r\n        x = x - tooltipWidth - 30; // Move to the left of the cursor\r\n      }\r\n      \r\n      // Adjust vertical position if tooltip would go outside viewport\r\n      if (y < 0) {\r\n        y = y + tooltipHeight + 20; // Move below the cursor\r\n      }\r\n      \r\n      setTooltipPosition({ x, y });\r\n    }\r\n  }, [isVisible, position]);\r\n\r\n  if (!isVisible) return null;\r\n\r\n  return (\r\n    <div \r\n      className=\"custom-tooltip\"\r\n      style={{\r\n        left: `${tooltipPosition.x}px`,\r\n        top: `${tooltipPosition.y}px`,\r\n      }}\r\n    >\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n","/*\r\n Factory for creating chart configurations\r\n Eliminates duplicate getChartConfig functions across chart components\r\n Now provides universal dimensions for consistent aspect ratios\r\n */\r\nexport const createChartConfig = (type, isExpanded, containerWidth = 400) => {\r\n  const baseConfig = {\r\n    expanded: isExpanded,\r\n    containerWidth\r\n  };\r\n\r\n  // Universal dimensions for consistent aspect ratios\r\n  const universalConfig = {\r\n    // Dashboard view dimensions\r\n    dashboard: {\r\n      width: 450,\r\n      height: 350,\r\n      padding: { top: 60, right: 40, bottom: 80, left: 60 },\r\n      dayWidth: 50,\r\n      fontSize: {\r\n        yAxis: 14,\r\n        yAxisTitle: 16,\r\n        timeLabel: 12,\r\n        dayLabel: 12,\r\n        dateLabel: 12,\r\n      },\r\n      barWidth: 8,\r\n    },\r\n    // Expanded view dimensions\r\n    expanded: {\r\n      width: 700,\r\n      height: 550,\r\n      padding: { top: 80, right: 60, bottom: 100, left: 80 },\r\n      dayWidth: 80,\r\n      fontSize: {\r\n        yAxis: 16,\r\n        yAxisTitle: 18,\r\n        timeLabel: 14,\r\n        dayLabel: 14,\r\n        dateLabel: 14,\r\n      },\r\n      barWidth: 12,\r\n    }\r\n  };\r\n\r\n  const config = isExpanded ? universalConfig.expanded : universalConfig.dashboard;\r\n\r\n  switch (type) {\r\n    case 'glucose':\r\n      return {\r\n        ...config,\r\n        yAxisLabels: [0, 4, 8, 12],\r\n        yAxisRange: 12,\r\n      };\r\n\r\n    case 'bloodPressure':\r\n      return {\r\n        ...config,\r\n        yAxisRange: { systolic: 200, diastolic: 120 },\r\n        yAxisOffset: { systolic: 0, diastolic: 0 },\r\n        yAxisLabels: {\r\n          systolic: isExpanded ? [0, 40, 80, 120, 160, 200] : [0, 100, 200],\r\n          diastolic: isExpanded ? [0, 20, 40, 60, 80, 100, 120] : [0, 60, 120],\r\n        },\r\n        dayPadding: isExpanded ? 10 : 6,\r\n      };\r\n\r\n    case 'exercise':\r\n      return {\r\n        ...config,\r\n        fontSize: {\r\n          ...config.fontSize,\r\n          emoji: isExpanded ? 12 : 10,\r\n        },\r\n      };\r\n\r\n    case 'mealContents':\r\n      // Special handling for meal contents due to complex SVG structure\r\n      const mealMaxWidth = Math.min(containerWidth - 40, isExpanded ? 800 : 600);\r\n      const mealAvailableWidth = mealMaxWidth - 180;\r\n      \r\n      let mealDayWidth, mealTotalWidth, mealPadding;\r\n      \r\n      if (mealAvailableWidth < 500) {\r\n        const adjustedPadding = Math.max(140, mealAvailableWidth * 0.25);\r\n        const adjustedAvailableWidth = mealAvailableWidth - (180 - adjustedPadding);\r\n        mealDayWidth = Math.max(60, adjustedAvailableWidth / 7);\r\n        mealTotalWidth = adjustedPadding + (mealDayWidth * 7);\r\n        mealPadding = { top: 50, right: 30, bottom: 100, left: adjustedPadding };\r\n      } else {\r\n        mealDayWidth = Math.max(70, Math.min(100, mealAvailableWidth / 7));\r\n        mealTotalWidth = 180 + (mealDayWidth * 7);\r\n        mealPadding = { top: 50, right: 40, bottom: 100, left: 140 };\r\n      }\r\n      \r\n      const mealHeight = isExpanded ? 90 : 70;\r\n      const totalMealHeight = 4 * mealHeight;\r\n      const totalPadding = mealPadding.top + mealPadding.bottom;\r\n      const mealMaxHeight = totalMealHeight + totalPadding;\r\n      \r\n      return {\r\n        width: mealTotalWidth,\r\n        height: mealMaxHeight,\r\n        padding: mealPadding,\r\n        dayWidth: mealDayWidth,\r\n        mealHeight: mealHeight,\r\n        fontSize: {\r\n          dayLabel: isExpanded ? 12 : 10,\r\n          dateLabel: isExpanded ? 10 : 8,\r\n          mealLabel: isExpanded ? 10 : 8,\r\n          timeLabel: isExpanded ? 8 : 6,\r\n        },\r\n      };\r\n\r\n    case 'pain':\r\n      // Special handling for pain visualization due to multiple containers\r\n      return {\r\n        ...config,\r\n        // Pain charts may need additional space for body mapping\r\n        height: isExpanded ? 600 : 450,\r\n      };\r\n\r\n    case 'sleep':\r\n      return {\r\n        ...config,\r\n        yAxisLabels: [0, 2, 4, 6, 8, 10, 12],\r\n        yAxisRange: 12,\r\n      };\r\n\r\n    case 'mood':\r\n      return {\r\n        ...config,\r\n        yAxisLabels: [0, 25, 50, 75, 100],\r\n        yAxisRange: 100,\r\n      };\r\n\r\n    default:\r\n      return {\r\n        ...config,\r\n        yAxisLabels: [0, 25, 50, 75, 100],\r\n        yAxisRange: 100,\r\n      };\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\n//Shared Y-Axis component to eliminate duplicate YAxis implementations across chart components\r\n \r\nconst SharedYAxis = ({ \r\n  config, \r\n  type = 'single', \r\n  title = '', \r\n  unit = '',\r\n  className = 'y-axis'\r\n}) => {\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n  const chartWidth = config.width - config.padding.left - config.padding.right;\r\n\r\n  // Handle different Y-Axis configurations\r\n  const getYAxisLabels = () => {\r\n    if (type === 'bloodPressure') {\r\n      return {\r\n        systolic: config.yAxisLabels.systolic,\r\n        diastolic: config.yAxisLabels.diastolic\r\n      };\r\n    }\r\n    return { single: config.yAxisLabels };\r\n  };\r\n\r\n  const getYAxisRange = () => {\r\n    if (type === 'bloodPressure') {\r\n      return config.yAxisRange;\r\n    }\r\n    return { single: config.yAxisRange };\r\n  };\r\n\r\n  const yAxisLabels = getYAxisLabels();\r\n  const yAxisRange = getYAxisRange();\r\n\r\n  const renderYAxisLabels = (labels, range, offset = 0) => {\r\n    return labels.map(label => {\r\n      const y = config.height - config.padding.bottom - ((label - offset) / range) * chartHeight;\r\n      return (\r\n        <g key={label} className=\"y-axis-grid-group\">\r\n          <line \r\n            className=\"chart-grid-line-horizontal\" \r\n            x1={config.padding.left} \r\n            y1={y} \r\n            x2={config.width - config.padding.right} \r\n            y2={y} \r\n          />\r\n          <text \r\n            x={config.padding.left - 10} \r\n            y={y + 3} \r\n            fontSize={config.fontSize.yAxis} \r\n            textAnchor=\"end\" \r\n            fill=\"var(--chart-color-neutral)\"\r\n          >\r\n            {label}\r\n          </text>\r\n        </g>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <g className={className}>\r\n      {/* Y-Axis title */}\r\n      {title && (\r\n        <text\r\n          className=\"y-axis-title\"\r\n          x={config.padding.left / 3}\r\n          y={config.padding.top + chartHeight / 2}\r\n          fontSize={config.fontSize.yAxisTitle}\r\n          textAnchor=\"middle\"\r\n          fill=\"var(--chart-color-neutral)\"\r\n          transform={`rotate(-90, ${config.padding.left / 3}, ${config.padding.top + chartHeight / 2})`}\r\n        >\r\n          {title} {unit && `(${unit})`}\r\n        </text>\r\n      )}\r\n\r\n      {/* Render Y-axis labels based on type */}\r\n      {type === 'bloodPressure' ? (\r\n        <>\r\n          {renderYAxisLabels(yAxisLabels.systolic, yAxisRange.systolic, config.yAxisOffset?.systolic)}\r\n          {renderYAxisLabels(yAxisLabels.diastolic, yAxisRange.diastolic, config.yAxisOffset?.diastolic)}\r\n        </>\r\n      ) : (\r\n        renderYAxisLabels(yAxisLabels.single, yAxisRange.single)\r\n      )}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default SharedYAxis;\r\n","/*\r\n GlucoseChart.js - Blood Glucose Monitoring Visualization\r\n \r\n This component provides comprehensive blood glucose tracking:\r\n - Time-based glucose readings with meal context (pre/post meal)\r\n - Range-based color coding (below, in range, above target)\r\n - Daily and weekly trend visualization\r\n - Interactive tooltips with detailed glucose information\r\n - Navigation controls for time periods\r\n - Integration with patient data and chart navigation\r\n \r\n Essential for diabetes management and glucose trend analysis.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\n\r\nimport Legend from '../Legend';\r\nimport InfoBox from '../InfoBox';\r\nimport Tooltip from '../ui/Tooltip';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport SharedYAxis from '../chart-utils/SharedYAxis';\r\nimport './GlucoseChart.css';\r\n\r\n// --- Constants ---\r\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\nconst RANGE_COLORS = {\r\n  'below range': 'var(--chart-color-yellow)',\r\n  'in range': 'var(--chart-color-blue)',\r\n  'above range': 'var(--chart-color-orange)',\r\n};\r\nconst TIME_LABELS = ['12am', '12pm', '12am'];\r\nconst DEFAULT_WEEK = new Date(2025, 4, 1);\r\n\r\n// --- Helper Functions ---\r\nconst getPointColor = (range) => RANGE_COLORS[range.toLowerCase()] || RANGE_COLORS['in range'];\r\nconst isPreMeal = (measurementType) => measurementType === 'Pre meal';\r\nconst getTimePosition = (date, dayIndex, config) => {\r\n  const timeInHours = date.getHours() + date.getMinutes() / 60;\r\n  const timeRatio = timeInHours / 24;\r\n  const dayStart = config.padding.left + dayIndex * config.dayWidth;\r\n  return dayStart + (timeRatio * (config.dayWidth - 10)) + 5;\r\n};\r\n\r\n// --- Chart Sub-components ---\r\nconst XAxisAndGrid = ({ config, startOfWeek }) => (\r\n  <g className=\"x-axis-grid\">\r\n    {DAYS_OF_WEEK.map((day, i) => {\r\n      const x = config.padding.left + i * config.dayWidth;\r\n      const currentDay = new Date(startOfWeek);\r\n      currentDay.setDate(startOfWeek.getDate() + i);\r\n      \r\n      // Tick positions\r\n      const startTickX = x;\r\n      const middleTickX = x + config.dayWidth / 2;\r\n      \r\n      return (\r\n        <g key={i}>\r\n          {/* Vertical grid line */}\r\n          <line className=\"chart-grid-line-vertical\" x1={x} y1={config.padding.top} x2={x} y2={config.height - config.padding.bottom} />\r\n          \r\n          {/* X-axis tick marks */}\r\n          <line \r\n            className=\"x-axis-tick\" \r\n            x1={startTickX} \r\n            y1={config.height - config.padding.bottom} \r\n            x2={startTickX} \r\n            y2={config.height - config.padding.bottom + 5}\r\n            stroke=\"var(--chart-color-neutral)\"\r\n            strokeWidth=\"1\"\r\n          />\r\n          <line \r\n            className=\"x-axis-tick\" \r\n            x1={middleTickX} \r\n            y1={config.height - config.padding.bottom} \r\n            x2={middleTickX} \r\n            y2={config.height - config.padding.bottom + 5}\r\n            stroke=\"var(--chart-color-neutral)\"\r\n            strokeWidth=\"1\"\r\n          />\r\n          \r\n          {/* Time labels positioned at tick marks */}\r\n          <text \r\n            className=\"time-label\" \r\n            x={startTickX} \r\n            y={config.height - config.padding.bottom + 15} \r\n            textAnchor=\"middle\"\r\n            fontSize={config.fontSize.timeLabel}\r\n            style={{fontSize: '8px'}}\r\n          >\r\n            12a\r\n          </text>\r\n          <text \r\n            className=\"time-label\" \r\n            x={middleTickX} \r\n            y={config.height - config.padding.bottom + 15} \r\n            textAnchor=\"middle\"\r\n            fontSize={config.fontSize.timeLabel}\r\n            style={{fontSize: '8px'}}\r\n          >\r\n            12p\r\n          </text>\r\n          \r\n          {/* Day and date labels */}\r\n                    <text \r\n            className=\"x-axis-day-label\"\r\n            x={x + config.dayWidth / 2} \r\n            y={config.height - config.padding.bottom + 40} \r\n            textAnchor=\"middle\"\r\n            fontSize={config.fontSize.dayLabel}\r\n            style={{fontSize: '8px'}}\r\n          >\r\n            {day}\r\n          </text>\r\n          <text \r\n            className=\"x-axis-date-label\" \r\n            x={x + config.dayWidth / 2} \r\n            y={config.height - config.padding.bottom + 58} \r\n            textAnchor=\"middle\"\r\n            fontSize={config.fontSize.dateLabel}\r\n            style={{fontSize: '8px'}}\r\n          >\r\n            {currentDay.getDate()}\r\n          </text>\r\n        </g>\r\n      );\r\n    })}\r\n    {/* Final tick mark at the end of the last day */}\r\n    <line \r\n      className=\"x-axis-tick\" \r\n      x1={config.padding.left + DAYS_OF_WEEK.length * config.dayWidth} \r\n      y1={config.height - config.padding.bottom} \r\n      x2={config.padding.left + DAYS_OF_WEEK.length * config.dayWidth} \r\n      y2={config.height - config.padding.bottom + 5}\r\n      stroke=\"#666\"\r\n      strokeWidth=\"1\"\r\n    />\r\n    <text \r\n      className=\"time-label\" \r\n      x={config.padding.left + DAYS_OF_WEEK.length * config.dayWidth} \r\n      y={config.height - config.padding.bottom + 15} \r\n      textAnchor=\"middle\"\r\n      fontSize={config.fontSize.timeLabel}\r\n      style={{fontSize: '8px'}}\r\n    >\r\n      12a\r\n    </text>\r\n  </g>\r\n);\r\n\r\nconst DataPoints = ({ weekData, config, onBarHover, onBarLeave }) => {\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n  return (\r\n    <g className=\"data-points\">\r\n      {weekData.map((reading, index) => {\r\n        const dayIndex = reading.date.getDay();\r\n        const x = getTimePosition(reading.date, dayIndex, config);\r\n        const y = config.padding.top + chartHeight - (reading.value / config.yAxisRange) * chartHeight;\r\n        const color = getPointColor(reading.range);\r\n        const isPre = isPreMeal(reading.measurementType);\r\n        \r\n        const handleMouseEnter = (event) => {\r\n          const tooltipData = {\r\n            value: reading.value,\r\n            unit: 'mmol/L',\r\n            range: reading.range,\r\n            measurementType: reading.measurementType,\r\n            time: reading.date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true }),\r\n            date: reading.date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' }),\r\n            position: { x: event.clientX, y: event.clientY }\r\n          };\r\n          onBarHover(tooltipData);\r\n        };\r\n\r\n        const handleMouseLeave = () => {\r\n          onBarLeave();\r\n        };\r\n        \r\n        return (\r\n          <rect\r\n            key={index}\r\n            x={x - config.barWidth / 2}\r\n            y={y}\r\n            width={config.barWidth}\r\n            height={(reading.value / config.yAxisRange) * chartHeight}\r\n            fill={isPre ? 'none' : color}\r\n            stroke={color}\r\n            strokeWidth={isPre ? 2 : 1}\r\n            style={{ cursor: 'pointer' }}\r\n            onMouseEnter={handleMouseEnter}\r\n            onMouseLeave={handleMouseLeave}\r\n          />\r\n        );\r\n      })}\r\n    </g>\r\n  );\r\n};\r\n\r\nconst Chart = ({ weekData, isExpanded, startOfWeek, onBarHover, onBarLeave, monthLabel }) => {\r\n  const config = createChartConfig('glucose', isExpanded);\r\n  return (\r\n    <div className=\"glucose-svg-container\">\r\n      <h3 className=\"chart-title\">Blood Glucose</h3>\r\n      {monthLabel && <h4 className=\"chart-subtitle\">{monthLabel}</h4>}\r\n      <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${config.width} ${config.height}`} className=\"glucose-svg\">\r\n        <rect width={config.width} height={config.height} fill=\"white\" />\r\n        <XAxisAndGrid config={config} startOfWeek={startOfWeek} />\r\n        <SharedYAxis config={config} title=\"mmol/L\" />\r\n        <DataPoints weekData={weekData} config={config} onBarHover={onBarHover} onBarLeave={onBarLeave} />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\n// --- Main Component ---\r\nconst GlucoseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const healthRangeLegendItems = Object.entries(RANGE_COLORS).map(([label, color]) => ({\r\n    label: label.charAt(0).toUpperCase() + label.slice(1),\r\n    color,\r\n  }));\r\n\r\n  const mealTimeLegendItems = [\r\n    { \r\n      label: 'Pre-meal', \r\n      shape: 'outlined',\r\n      shapeStyle: { borderColor: 'var(--chart-color-text-secondary)' },\r\n      description: 'Blood glucose measurements taken before meals'\r\n    },\r\n    { \r\n      label: 'Post-meal', \r\n      shape: 'filled',\r\n      shapeStyle: { backgroundColor: 'var(--chart-color-text-secondary)' },\r\n      description: 'Blood glucose measurements taken after meals'\r\n    },\r\n  ];\r\n  const { glucoseData, loading, error } = usePatientData(patientId, 'glucose');\r\n  const [tooltipData, setTooltipData] = useState(null);\r\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\r\n  const containerRef = useRef(null);\r\n\r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('glucose');\r\n  const nav = navigation || internalNavigation;\r\n\r\n\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n  const weekData = glucoseData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = glucoseData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\r\n\r\n  // Calculate summary statistics for physician view\r\n  const weekSummary = useMemo(() => {\r\n    if (!weekData.length) return null;\r\n\r\n    const readings = weekData.filter(d => d.value && d.value > 0);\r\n    const preMealReadings = readings.filter(d => d.measurementType === 'Pre meal');\r\n    const postMealReadings = readings.filter(d => d.measurementType === 'Post meal');\r\n\r\n    const avgGlucose = readings.length > 0 ? \r\n      (readings.reduce((sum, val) => sum + val.value, 0) / readings.length).toFixed(1) : 0;\r\n    \r\n    const avgPreMeal = preMealReadings.length > 0 ? \r\n      (preMealReadings.reduce((sum, val) => sum + val.value, 0) / preMealReadings.length).toFixed(1) : 0;\r\n    \r\n    const avgPostMeal = postMealReadings.length > 0 ? \r\n      (postMealReadings.reduce((sum, val) => sum + val.value, 0) / postMealReadings.length).toFixed(1) : 0;\r\n\r\n    const highReadings = readings.filter(d => d.range.toLowerCase() === 'above range').length;\r\n    const lowReadings = readings.filter(d => d.range.toLowerCase() === 'below range').length;\r\n    const inRangeReadings = readings.filter(d => d.range.toLowerCase() === 'in range').length;\r\n\r\n    const rangePercentage = readings.length > 0 ? \r\n      ((inRangeReadings / readings.length) * 100).toFixed(0) : 0;\r\n\r\n    const daysWithReadings = new Set(weekData.map(d => d.date.toDateString())).size;\r\n\r\n    return {\r\n      avgGlucose,\r\n      avgPreMeal,\r\n      avgPostMeal,\r\n      highReadings,\r\n      lowReadings,\r\n      inRangeReadings,\r\n      rangePercentage,\r\n      daysWithReadings,\r\n      totalReadings: readings.length\r\n    };\r\n  }, [weekData]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = useMemo(() => {\r\n    if (!threeMonthData.length) return null;\r\n\r\n    const readings = threeMonthData.filter(d => d.value && d.value > 0);\r\n    const preMealReadings = readings.filter(d => d.measurementType === 'Pre meal');\r\n    const postMealReadings = readings.filter(d => d.measurementType === 'Post meal');\r\n\r\n    const avgGlucose = readings.length > 0 ? \r\n      (readings.reduce((sum, val) => sum + val.value, 0) / readings.length).toFixed(1) : 0;\r\n    \r\n    const avgPreMeal = preMealReadings.length > 0 ? \r\n      (preMealReadings.reduce((sum, val) => sum + val.value, 0) / preMealReadings.length).toFixed(1) : 0;\r\n    \r\n    const avgPostMeal = postMealReadings.length > 0 ? \r\n      (postMealReadings.reduce((sum, val) => sum + val.value, 0) / postMealReadings.length).toFixed(1) : 0;\r\n\r\n    const highReadings = readings.filter(d => d.range.toLowerCase() === 'above range').length;\r\n    const lowReadings = readings.filter(d => d.range.toLowerCase() === 'below range').length;\r\n    const inRangeReadings = readings.filter(d => d.range.toLowerCase() === 'in range').length;\r\n\r\n    const rangePercentage = readings.length > 0 ? \r\n      ((inRangeReadings / readings.length) * 100).toFixed(0) : 0;\r\n\r\n    const daysWithReadings = new Set(threeMonthData.map(d => d.date.toDateString())).size;\r\n\r\n    return {\r\n      avgGlucose,\r\n      avgPreMeal,\r\n      avgPostMeal,\r\n      highReadings,\r\n      lowReadings,\r\n      inRangeReadings,\r\n      rangePercentage,\r\n      daysWithReadings,\r\n      totalReadings: readings.length\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  const handleBarHover = (data) => {\r\n    setTooltipData(data);\r\n    setTooltipPosition(data.position);\r\n  };\r\n\r\n  const handleBarLeave = () => {\r\n    setTooltipData(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"glucose-chart-container\" ref={containerRef}>\r\n        <div className={`glucose-chart-wrapper ${isExpanded ? 'expanded' : ''}`}>\r\n                  <Chart \r\n          weekData={weekData} \r\n          isExpanded={isExpanded} \r\n          startOfWeek={startOfWeek} \r\n          onBarHover={handleBarHover} \r\n          onBarLeave={handleBarLeave} \r\n          monthLabel={nav.getCurrentMonthYear()}\r\n        />\r\n        </div>\r\n        <div className=\"glucose-legends-wrapper\">\r\n          <Legend title=\"Health Range\" items={healthRangeLegendItems} />\r\n          <Legend title=\"Prandial State\" items={mealTimeLegendItems} />\r\n        </div>\r\n        \r\n        {/* Show InfoBox for patient view, summary for physician view */}\r\n        {viewMode === 'physician' && weekSummary ? (\r\n          <div className=\"summary-container\">\r\n            <div className=\"chart-summary\">\r\n              <h4>Week Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Average Glucose:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.avgGlucose} mmol/L\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Readings In Range:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.rangePercentage}% ({weekSummary.inRangeReadings}/{weekSummary.totalReadings})\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">High/Low Readings:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.highReadings} high, {weekSummary.lowReadings} low\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Reading Days:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.daysWithReadings}/7 days\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {threeMonthSummary && (\r\n              <div className=\"chart-summary\">\r\n                <h4>3-Month Summary</h4>\r\n                <div className=\"summary-stats\">\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Average Glucose:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.avgGlucose} mmol/L\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Readings In Range:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.rangePercentage}% ({threeMonthSummary.inRangeReadings}/{threeMonthSummary.totalReadings})\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">High/Low Readings:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.highReadings} high, {threeMonthSummary.lowReadings} low\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Reading Days:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.daysWithReadings} days\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : viewMode === 'patient' ? (\r\n          <InfoBox \r\n            title=\"Blood Glucose Information\"\r\n            content=\"These are general targets for adults with diabetes: For blood sugar taken before a meal, the target is 4.0 to 7.0 mmol/L. For blood sugar two hours after a meal, the target is 5.0 to 10.0 mmol/L. The general target for an A1C is 7.0% or less (Diabetes Canada). Always consult your healthcare provider to confirm the right targets for you.\"\r\n          />\r\n        ) : null}\r\n      </div>\r\n      \r\n      {/* Custom Tooltip */}\r\n      <Tooltip\r\n        isVisible={!!tooltipData}\r\n        content={tooltipData && (\r\n          <div>\r\n            <div className=\"tooltip-title\">Blood Glucose</div>\r\n            <div className=\"tooltip-value\">{tooltipData.value} {tooltipData.unit}</div>\r\n            <div className={`tooltip-range ${tooltipData.range.toLowerCase().replace(' ', '-')}`}>\r\n              {tooltipData.range}\r\n            </div>\r\n            <div className=\"tooltip-time\">{tooltipData.measurementType} - {tooltipData.time}</div>\r\n            <div className=\"tooltip-date\">{tooltipData.date}</div>\r\n          </div>\r\n        )}\r\n        position={tooltipPosition}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GlucoseChart;\r\n","/*\r\n BloodPressureChart.js - Blood Pressure Monitoring Visualization\r\n \r\n This component provides comprehensive blood pressure tracking:\r\n - Systolic and diastolic pressure visualization\r\n - Risk categorization with color coding\r\n - Daily and weekly trend analysis\r\n - Multiple daily measurements display\r\n - Interactive tooltips with BP details\r\n - Navigation controls for time periods\r\n \r\n ARCHITECTURE:\r\n - Uses custom SVG for precise blood pressure visualization\r\n - Implements dual-axis system for systolic and diastolic values\r\n - Provides risk-based color coding for clinical interpretation\r\n - Supports multiple daily readings with time-based positioning\r\n - Implements configurable layouts\r\n \r\n Visualization Features:\r\n - Dual-line chart showing systolic and diastolic trends\r\n - Color-coded risk categories (normal, elevated, high, crisis)\r\n - Time-based positioning for multiple daily readings\r\n - Interactive tooltips with detailed BP information\r\n - Grid system with proper axis scaling\r\n \r\n CLlinical Features:\r\n - Risk categorization based on medical guidelines\r\n - Summary statistics for physician view\r\n - Trend analysis over time periods\r\n - Educational information for patient view\r\n \r\n Component Structure:\r\n - Y-Axis: Dual-axis system for systolic and diastolic values\r\n - X-Axis: Time-based axis with day and time labels\r\n - DataPoints: Interactive blood pressure readings\r\n - Legend: Risk category explanations\r\n - Tooltip: Detailed reading information\r\n \r\n Critical for cardiovascular health monitoring and hypertension management.\r\n */\r\n\r\nimport React, { useState, useRef, useLayoutEffect, useMemo } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport InfoBox from '../InfoBox';\r\nimport Tooltip from '../ui/Tooltip';\r\nimport './BloodPressureChart.css';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\n\r\n// Constants\r\nconst TIME_LABELS = ['12a', '12p', '12a'];\r\nconst TIME_HOURS = [0, 12, 24];\r\n\r\n// Helper Functions\r\nconst getWeekStart = (date) => {\r\n  const d = new Date(date);\r\n  const day = d.getDay();\r\n  const diff = d.getDate() - day;\r\n  return new Date(d.setDate(diff));\r\n};\r\n\r\nconst formatDayLabel = (date) => {\r\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  return dayNames[date.getDay()];\r\n};\r\n\r\nconst getTimePosition = (date, dayIndex, config) => {\r\n  const hour = date.getHours() + date.getMinutes() / 60;\r\n  const timeRatio = hour / 24;\r\n  const dayContentWidth = config.dayWidth - config.dayPadding * 2;\r\n  return config.padding.left + (dayIndex * config.dayWidth) + config.dayPadding + (timeRatio * dayContentWidth);\r\n};\r\n\r\n// Chart Sub-components\r\n\r\nconst YAxis = ({ config, type }) => {\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n  const yAxisLabels = config.yAxisLabels[type];\r\n  const valueRange = config.yAxisRange[type];\r\n  const yOffset = config.yAxisOffset[type];\r\n\r\n  return (\r\n    <g className=\"y-axis\">\r\n      <text\r\n        x={config.padding.left / 3}\r\n        y={config.padding.top + chartHeight / 2}\r\n        fontSize={config.fontSize.yAxisTitle}\r\n        textAnchor=\"middle\"\r\n        className=\"y-axis-title\"\r\n        transform={`rotate(-90, ${config.padding.left / 3}, ${config.padding.top + chartHeight / 2})`}\r\n      >\r\n        mm Hg\r\n      </text>\r\n      {yAxisLabels.map(value => {\r\n        const y = config.height - config.padding.bottom - ((value - yOffset) / valueRange) * chartHeight;\r\n        return (\r\n          <g key={value} className=\"y-axis-grid-group\">\r\n                        <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\r\n            <text x={config.padding.left - 10} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" className=\"chart-tick-label\">{value}</text>\r\n          </g>\r\n        );\r\n      })}\r\n    </g>\r\n  );\r\n};\r\n\r\nconst XAxis = ({ config, weekDays }) => (\r\n  <g className=\"x-axis\">\r\n    {weekDays.map((day, dayIndex) => {\r\n      const dayX = config.padding.left + dayIndex * config.dayWidth;\r\n      const dayCenterX = dayX + config.dayWidth / 2;\r\n      \r\n      // Tick positions\r\n      const startTickX = dayX;\r\n      const middleTickX = dayX + config.dayWidth / 2;\r\n\r\n      return (\r\n        <g key={dayIndex} className=\"x-axis-label-group\">\r\n          {/* X-axis tick marks */}\r\n          <line \r\n            className=\"x-axis-tick\" \r\n            x1={startTickX} \r\n            y1={config.height - config.padding.bottom} \r\n            x2={startTickX} \r\n            y2={config.height - config.padding.bottom + 5}\r\n            stroke=\"var(--chart-color-neutral)\"\r\n            strokeWidth=\"1\"\r\n          />\r\n          <line \r\n            className=\"x-axis-tick\" \r\n            x1={middleTickX} \r\n            y1={config.height - config.padding.bottom} \r\n            x2={middleTickX} \r\n            y2={config.height - config.padding.bottom + 5}\r\n            stroke=\"var(--chart-color-neutral)\"\r\n            strokeWidth=\"1\"\r\n          />\r\n          \r\n          {/* Time labels positioned at tick marks */}\r\n          <text\r\n            className=\"time-label\"\r\n            x={startTickX}\r\n            y={config.height - config.padding.bottom + 15}\r\n            textAnchor=\"middle\"\r\n            fontSize={config.fontSize.timeLabel}\r\n            style={{fontSize: '8px'}}\r\n          >\r\n            12a\r\n          </text>\r\n          <text\r\n            className=\"time-label\"\r\n            x={middleTickX}\r\n            y={config.height - config.padding.bottom + 15}\r\n            textAnchor=\"middle\"\r\n            fontSize={config.fontSize.timeLabel}\r\n            style={{fontSize: '8px'}}\r\n          >\r\n            12p\r\n          </text>\r\n\r\n          {/* Day and Date Labels */}\r\n          <text\r\n            x={dayCenterX}\r\n            y={config.height - config.padding.bottom + 35}\r\n            textAnchor=\"middle\"\r\n            className=\"x-axis-day-label\"\r\n            fontSize={config.fontSize.dayLabel}\r\n            style={{fontSize: '8px'}}\r\n          >\r\n            {formatDayLabel(day)}\r\n          </text>\r\n          <text\r\n            x={dayCenterX}\r\n            y={config.height - config.padding.bottom + 52}\r\n            textAnchor=\"middle\"\r\n            className=\"x-axis-date-label\"\r\n            fontSize={config.fontSize.dateLabel}\r\n            style={{fontSize: '8px'}}\r\n          >\r\n            {day.getDate()}\r\n          </text>\r\n        </g>\r\n      );\r\n    })}\r\n    {/* Final tick mark at the end of the last day */}\r\n    <line \r\n      className=\"x-axis-tick\" \r\n      x1={config.padding.left + weekDays.length * config.dayWidth} \r\n      y1={config.height - config.padding.bottom} \r\n      x2={config.padding.left + weekDays.length * config.dayWidth} \r\n      y2={config.height - config.padding.bottom + 5}\r\n      stroke=\"var(--chart-color-neutral)\"\r\n      strokeWidth=\"1\"\r\n    />\r\n    <text\r\n      className=\"time-label\"\r\n      x={config.padding.left + weekDays.length * config.dayWidth}\r\n      y={config.height - config.padding.bottom + 15}\r\n      textAnchor=\"middle\"\r\n      fontSize={config.fontSize.timeLabel}\r\n      style={{fontSize: '8px'}}\r\n    >\r\n      12a\r\n    </text>\r\n  </g>\r\n);\r\n\r\nconst GridLines = ({ config, weekDays }) => (\r\n  <g className=\"grid-lines\">\r\n    {/* Vertical day and time lines */}\r\n    {weekDays.map((_, dayIndex) => {\r\n      const dayX = config.padding.left + dayIndex * config.dayWidth;\r\n      return (\r\n        <g key={dayIndex}>\r\n          <line className=\"chart-grid-line-vertical\" x1={dayX} y1={config.padding.top} x2={dayX} y2={config.height - config.padding.bottom} />\r\n          {/* Time lines at 12am and 12pm within each day */}\r\n          {[0, 12].map(hour => {\r\n            const timeRatio = hour / 24;\r\n            const x = config.padding.left + (dayIndex * config.dayWidth) + (timeRatio * config.dayWidth);\r\n            return <line key={`${dayIndex}-${hour}`} className=\"chart-grid-line-vertical-time\" x1={x} y1={config.padding.top} x2={x} y2={config.height - config.padding.bottom} />;\r\n          })}\r\n        </g>\r\n      );\r\n    })}\r\n    {/* Final grid line at the end of the last day */}\r\n    <line \r\n      className=\"chart-grid-line-vertical\" \r\n      x1={config.padding.left + weekDays.length * config.dayWidth} \r\n      y1={config.padding.top} \r\n      x2={config.padding.left + weekDays.length * config.dayWidth} \r\n      y2={config.height - config.padding.bottom} \r\n    />\r\n  </g>\r\n);\r\n\r\nconst DataBars = ({ readings, type, config, onBarHover, onBarLeave }) => {\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n  const valueRange = config.yAxisRange[type];\r\n  const yOffset = config.yAxisOffset[type];\r\n  const getColor = type === 'systolic' ? getSystolicColor : getDiastolicColor;\r\n\r\n  return (\r\n    <g className=\"data-bars\">\r\n      {readings.map((reading, index) => {\r\n        const readingDate = new Date(reading.date);\r\n        const dayIndex = readingDate.getDay();\r\n        const x = getTimePosition(readingDate, dayIndex, config);\r\n        const value = reading[type];\r\n        const barHeight = (value / valueRange) * chartHeight;\r\n        const y = config.height - config.padding.bottom - barHeight;\r\n\r\n        const handleMouseEnter = (event) => {\r\n          const tooltipData = {\r\n            type: type === 'systolic' ? 'Systolic' : 'Diastolic',\r\n            value: value,\r\n            unit: 'mmHg',\r\n            time: readingDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true }),\r\n            date: readingDate.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' }),\r\n            position: { x: event.clientX, y: event.clientY }\r\n          };\r\n          onBarHover(tooltipData);\r\n        };\r\n\r\n        const handleMouseLeave = () => {\r\n          onBarLeave();\r\n        };\r\n\r\n        return (\r\n          <rect\r\n            key={index}\r\n            x={x - config.barWidth / 2}\r\n            y={y}\r\n            width={config.barWidth}\r\n            height={Math.max(0, barHeight)}\r\n            fill={getColor(value)}\r\n            style={{ cursor: 'pointer' }}\r\n            onMouseEnter={handleMouseEnter}\r\n            onMouseLeave={handleMouseLeave}\r\n          />\r\n        );\r\n      })}\r\n    </g>\r\n  );\r\n};\r\n\r\nconst Chart = ({ type, weekData, isExpanded, weekDays, containerWidth, onBarHover, onBarLeave }) => {\r\n  const config = createChartConfig('bloodPressure', isExpanded, containerWidth);\r\n  const readings = weekData.filter(d => d[type] && d[type] > 0);\r\n\r\n  return (\r\n    <div className={`chart-section ${isExpanded ? 'expanded' : ''}`}>\r\n      <h4 className=\"chart-subtitle\">{type === 'systolic' ? 'Systolic' : 'Diastolic'}</h4>\r\n      <div className=\"bp-svg-container\">\r\n        <svg\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          viewBox={`0 0 ${config.width} ${config.height}`}\r\n          className=\"chart-svg\"\r\n        >\r\n          <GridLines config={config} weekDays={weekDays} />\r\n          <YAxis config={config} type={type} />\r\n          <XAxis config={config} weekDays={weekDays} />\r\n          <DataBars readings={readings} type={type} config={config} onBarHover={onBarHover} onBarLeave={onBarLeave} />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getSystolicColor = (value) => {\r\n  if (value < 90) return 'var(--chart-color-danger)';\r\n  if (value < 120) return 'var(--chart-color-blue)';\r\n  if (value < 140) return 'var(--chart-color-yellow)';\r\n  return 'var(--chart-color-orange)';\r\n};\r\n\r\nconst getDiastolicColor = (value) => {\r\n  if (value < 60) return 'var(--chart-color-danger)';\r\n  if (value < 80) return 'var(--chart-color-blue)';\r\n  if (value < 90) return 'var(--chart-color-yellow)';\r\n  return 'var(--chart-color-orange)';\r\n};\r\n\r\nconst bloodPressureLegendItems = [\r\n  { color: 'var(--chart-color-danger)', label: 'Low', description: 'Blood pressure below normal range' },\r\n  { color: 'var(--chart-color-blue)', label: 'Ideal', description: 'Blood pressure within ideal range' },\r\n  { color: 'var(--chart-color-yellow)', label: 'Pre-high', description: 'Blood pressure elevated but not yet high' },\r\n  { color: 'var(--chart-color-orange)', label: 'High', description: 'Blood pressure high - requires attention' },\r\n];\r\n\r\n\r\n// --- Main Component ---\r\nconst BloodPressureChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { bloodPressureData, loading, error } = usePatientData(patientId, 'bloodPressure');\r\n  const [containerWidth, setContainerWidth] = useState(400);\r\n  const [tooltipData, setTooltipData] = useState(null);\r\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\r\n  const containerRef = useRef(null);\r\n\r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('bloodPressure');\r\n  const nav = navigation || internalNavigation;\r\n\r\n\r\n\r\n  // Resize observer to track container width changes\r\n  useLayoutEffect(() => {\r\n    const observeContainer = () => {\r\n      if (containerRef.current) {\r\n        const resizeObserver = new ResizeObserver(entries => {\r\n          for (let entry of entries) {\r\n            const { width } = entry.contentRect;\r\n            setContainerWidth(width);\r\n          }\r\n        });\r\n\r\n        resizeObserver.observe(containerRef.current);\r\n        return () => resizeObserver.disconnect();\r\n      }\r\n    };\r\n\r\n    const cleanup = observeContainer();\r\n    return cleanup;\r\n  }, []);\r\n\r\n  const { start: weekStart, end: weekEnd } = nav.getDateRange();\r\n\r\n  const weekData = bloodPressureData.filter(d => {\r\n    const readingDate = new Date(d.date);\r\n    return readingDate >= weekStart && readingDate <= weekEnd;\r\n  });\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = bloodPressureData.filter(d => {\r\n    const readingDate = new Date(d.date);\r\n    return readingDate >= startOfThreeMonths && readingDate <= endOfThreeMonths;\r\n  });\r\n\r\n  const weekDays = Array.from({ length: 7 }, (_, i) => {\r\n    const d = new Date(weekStart);\r\n    d.setDate(weekStart.getDate() + i);\r\n    return d;\r\n  });\r\n\r\n\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  const handleBarHover = (data) => {\r\n    setTooltipData(data);\r\n    setTooltipPosition(data.position);\r\n  };\r\n\r\n  const handleBarLeave = () => {\r\n    setTooltipData(null);\r\n  };\r\n\r\n  // Calculate summary statistics for physician view\r\n  const weekSummary = useMemo(() => {\r\n    if (!weekData.length) return null;\r\n\r\n    const systolicReadings = weekData.filter(d => d.systolic && d.systolic > 0).map(d => d.systolic);\r\n    const diastolicReadings = weekData.filter(d => d.diastolic && d.diastolic > 0).map(d => d.diastolic);\r\n\r\n    const avgSystolic = systolicReadings.length > 0 ? \r\n      (systolicReadings.reduce((sum, val) => sum + val, 0) / systolicReadings.length).toFixed(0) : 0;\r\n    const avgDiastolic = diastolicReadings.length > 0 ? \r\n      (diastolicReadings.reduce((sum, val) => sum + val, 0) / diastolicReadings.length).toFixed(0) : 0;\r\n\r\n    const maxSystolic = systolicReadings.length > 0 ? Math.max(...systolicReadings) : 0;\r\n    const maxDiastolic = diastolicReadings.length > 0 ? Math.max(...diastolicReadings) : 0;\r\n\r\n    const getRiskCategory = (systolic, diastolic) => {\r\n      if (systolic >= 135 || diastolic >= 85) return 'High Risk';\r\n      if (systolic >= 121 || diastolic >= 80) return 'Medium Risk';\r\n      return 'Low Risk';\r\n    };\r\n\r\n    const avgRisk = getRiskCategory(parseFloat(avgSystolic), parseFloat(avgDiastolic));\r\n    const daysWithReadings = new Set(weekData.map(d => d.date.toDateString())).size;\r\n\r\n    return {\r\n      avgSystolic,\r\n      avgDiastolic,\r\n      maxSystolic,\r\n      maxDiastolic,\r\n      avgRisk,\r\n      daysWithReadings,\r\n      totalReadings: weekData.length\r\n    };\r\n  }, [weekData]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = useMemo(() => {\r\n    if (!threeMonthData.length) return null;\r\n\r\n    const systolicReadings = threeMonthData.filter(d => d.systolic && d.systolic > 0).map(d => d.systolic);\r\n    const diastolicReadings = threeMonthData.filter(d => d.diastolic && d.diastolic > 0).map(d => d.diastolic);\r\n\r\n    const avgSystolic = systolicReadings.length > 0 ? \r\n      (systolicReadings.reduce((sum, val) => sum + val, 0) / systolicReadings.length).toFixed(0) : 0;\r\n    const avgDiastolic = diastolicReadings.length > 0 ? \r\n      (diastolicReadings.reduce((sum, val) => sum + val, 0) / diastolicReadings.length).toFixed(0) : 0;\r\n\r\n    const maxSystolic = systolicReadings.length > 0 ? Math.max(...systolicReadings) : 0;\r\n    const maxDiastolic = diastolicReadings.length > 0 ? Math.max(...diastolicReadings) : 0;\r\n\r\n    const getRiskCategory = (systolic, diastolic) => {\r\n      if (systolic >= 135 || diastolic >= 85) return 'High Risk';\r\n      if (systolic >= 121 || diastolic >= 80) return 'Medium Risk';\r\n      return 'Low Risk';\r\n    };\r\n\r\n    const avgRisk = getRiskCategory(parseFloat(avgSystolic), parseFloat(avgDiastolic));\r\n    const daysWithReadings = new Set(threeMonthData.map(d => d.date.toDateString())).size;\r\n\r\n    return {\r\n      avgSystolic,\r\n      avgDiastolic,\r\n      maxSystolic,\r\n      maxDiastolic,\r\n      avgRisk,\r\n      daysWithReadings,\r\n      totalReadings: threeMonthData.length\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n  return (\r\n    <>\r\n      <div className={`bp-chart-container ${isExpanded ? 'expanded' : ''}`} ref={containerRef}>\r\n        <h3 className=\"bp-main-title\">Blood Pressure</h3>\r\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n        \r\n        <div className=\"bp-charts-wrapper\">\r\n          <Chart \r\n            type=\"systolic\" \r\n            weekData={weekData} \r\n            isExpanded={isExpanded} \r\n            weekDays={weekDays} \r\n            containerWidth={containerWidth}\r\n            onBarHover={handleBarHover}\r\n            onBarLeave={handleBarLeave}\r\n          />\r\n          <Chart \r\n            type=\"diastolic\" \r\n            weekData={weekData} \r\n            isExpanded={isExpanded} \r\n            weekDays={weekDays} \r\n            containerWidth={containerWidth}\r\n            onBarHover={handleBarHover}\r\n            onBarLeave={handleBarLeave}\r\n          />\r\n        </div>\r\n        \r\n        <Legend title=\"Blood Pressure Category:\" items={bloodPressureLegendItems} />\r\n        \r\n        {/* Show InfoBox for patient view, summary for physician view */}\r\n        {viewMode === 'physician' && weekSummary ? (\r\n          <div className=\"summary-container\">\r\n            <div className=\"chart-summary\">\r\n              <h4>Week Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Average BP:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.avgSystolic}/{weekSummary.avgDiastolic} mmHg\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Peak BP:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.maxSystolic}/{weekSummary.maxDiastolic} mmHg\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Reading Days:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.daysWithReadings}/7 days\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Total Readings:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.totalReadings}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {threeMonthSummary && (\r\n              <div className=\"chart-summary\">\r\n                <h4>3-Month Summary</h4>\r\n                <div className=\"summary-stats\">\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Average BP:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.avgSystolic}/{threeMonthSummary.avgDiastolic} mmHg\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Peak BP:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.maxSystolic}/{threeMonthSummary.maxDiastolic} mmHg\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Total Readings:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.totalReadings}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <InfoBox \r\n            title=\"Blood Pressure Information\" \r\n            content=\"Blood pressure readings help monitor cardiovascular health. Systolic pressure (top number) measures pressure when the heart beats, while diastolic pressure (bottom number) measures pressure when the heart rests between beats.\"\r\n          />\r\n        )}\r\n      </div>\r\n      \r\n      {/* Custom Tooltip */}\r\n      <Tooltip\r\n        isVisible={!!tooltipData}\r\n        content={tooltipData && (\r\n          <div>\r\n            <div className=\"tooltip-title\">{tooltipData.type} Blood Pressure</div>\r\n            <div className=\"tooltip-value\">{tooltipData.value} {tooltipData.unit}</div>\r\n            <div className=\"tooltip-time\">{tooltipData.time}</div>\r\n            <div className=\"tooltip-date\">{tooltipData.date}</div>\r\n          </div>\r\n        )}\r\n        position={tooltipPosition}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BloodPressureChart;\r\n","/**\r\n ExerciseChart.js - Exercise Activity Tracking Visualization\r\n \r\n This component provides comprehensive exercise monitoring:\r\n - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\r\n - Duration tracking and weekly summaries\r\n - Color-coded activity categorization\r\n - Interactive tooltips with exercise details\r\n - Navigation controls for time periods\r\n - Integration with patient data and chart navigation\r\n \r\n Architecture:\r\n - Uses custom SVG for stacked bar chart visualization\r\n - Implements activity categorization system with emoji indicators\r\n - Provides color-coded activity types for easy identification\r\n - Supports expandable views\r\n - Implements time-based navigation and data filtering\r\n \r\n Visualization Features:\r\n - Stacked bar chart showing daily activity breakdown\r\n - Color-coded activity types with emoji indicators\r\n - Interactive tooltips with detailed exercise information\r\n - Design adapting to container size\r\n - Dynamic Y-axis scaling based on data range\r\n \r\n Activity Categories:\r\n - Walking: Low-impact cardiovascular exercise\r\n - Swimming: Full-body cardiovascular workout\r\n - Running: High-impact cardiovascular exercise\r\n - Resistance/Weights: Strength training activities\r\n - Biking: Low-impact cardiovascular exercise\r\n - Balance/Stretching: Flexibility and balance training\r\n - Other: Miscellaneous physical activities\r\n \r\n Component Structure:\r\n - Chart Container: Main SVG container with sizing\r\n - Y-Axis: Duration scale with dynamic labeling\r\n - X-Axis: Day-of-week labels with date information\r\n - Data Bars: Stacked activity bars with color coding\r\n - Legend: Activity type explanations with emojis\r\n - Tooltip: Detailed exercise information on hover\r\n \r\n Essential for physical activity monitoring and fitness tracking.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport './ExerciseChart.css';\r\n\r\nconst exerciseTypes = [\r\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\r\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\r\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\r\n  { key: 'resistance/weights', label: 'Resistance/Weights', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\r\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\r\n  { key: 'balance/stretching', label: 'Balance/Stretching', color: 'var(--chart-color-balance)', emoji: '🧘' },\r\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\r\n];\r\n\r\nconst exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\r\n  label: `${emoji} ${label}`,\r\n  color,\r\n}));\r\n\r\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('exercise');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const config = createChartConfig('exercise', isExpanded);\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\r\n  });\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\r\n  });\r\n\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const groupedData = daysOfWeek.reduce((acc, day) => {\r\n    acc[day] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  weekData.forEach(item => {\r\n    if (!item.date) return;\r\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n    if (groupedData[dayName]) {\r\n      groupedData[dayName].walking += Number(item.walking) || 0;\r\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      groupedData[dayName].running += Number(item.running) || 0;\r\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      groupedData[dayName].biking += Number(item.biking) || 0;\r\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      groupedData[dayName].other += Number(item.other) || 0;\r\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\r\n    }\r\n  });\r\n\r\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\r\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\r\n\r\n  const generateYAxisLabels = (max) => {\r\n    if (max === 0) return [0];\r\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\r\n    const labels = [];\r\n    for (let i = 0; i <= max; i += step) {\r\n      labels.push(i);\r\n    }\r\n    return labels;\r\n  };\r\n\r\n  const yAxisLabels = generateYAxisLabels(maxDuration);\r\n\r\n  // Calculate summary statistics for physician view\r\n  const weekSummary = useMemo(() => {\r\n    if (!weekData.length) return null;\r\n\r\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\r\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\r\n    \r\n    // Count days with exercise\r\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\r\n    \r\n    // Find most common exercise type\r\n    const exerciseTypeTotals = {};\r\n    exerciseTypes.forEach(type => {\r\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\r\n    });\r\n    \r\n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n    \r\n    // Calculate exercise consistency (days with 30+ minutes)\r\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\r\n    \r\n    // Calculate average session length\r\n    const totalSessions = weekData.filter(item => {\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\r\n    }).length;\r\n    \r\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\r\n\r\n    return {\r\n      totalMinutes,\r\n      avgMinutesPerDay,\r\n      daysWithExercise,\r\n      mostCommonExercise: mostCommonExercise[0],\r\n      mostCommonExerciseMinutes: mostCommonExercise[1],\r\n      daysWithAdequateExercise,\r\n      totalSessions,\r\n      avgSessionLength\r\n    };\r\n  }, [weekData, groupedData]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = useMemo(() => {\r\n    if (!threeMonthData.length) return null;\r\n\r\n    // Group 3-month data by day\r\n    const threeMonthGroupedData = {};\r\n    threeMonthData.forEach(item => {\r\n      if (!item.date) return;\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      if (!threeMonthGroupedData[dayName]) {\r\n        threeMonthGroupedData[dayName] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n      }\r\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\r\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\r\n      threeMonthGroupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\r\n      threeMonthGroupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\r\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName]['resistance/weights'] + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['balance/stretching'] + threeMonthGroupedData[dayName].other;\r\n    });\r\n\r\n    const totalMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\r\n    \r\n    // Calculate actual days in the 3-month period\r\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\r\n    const avgMinutesPerDay = (totalMinutes / daysInThreeMonths).toFixed(0);\r\n    \r\n    // Count days with exercise\r\n    const daysWithExercise = Object.values(threeMonthGroupedData).filter(day => day.totalMinutes > 0).length;\r\n    \r\n    // Find most common exercise type\r\n    const exerciseTypeTotals = {};\r\n    exerciseTypes.forEach(type => {\r\n      exerciseTypeTotals[type.key] = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day[type.key], 0);\r\n    });\r\n    \r\n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n    \r\n    // Calculate average session length\r\n    const totalSessions = threeMonthData.filter(item => {\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      return threeMonthGroupedData[dayName] && threeMonthGroupedData[dayName].totalMinutes > 0;\r\n    }).length;\r\n    \r\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\r\n\r\n    return {\r\n      totalMinutes,\r\n      avgMinutesPerDay,\r\n      daysWithExercise,\r\n      mostCommonExercise: mostCommonExercise[0],\r\n      mostCommonExerciseMinutes: mostCommonExercise[1],\r\n      totalSessions,\r\n      avgSessionLength\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  return (\r\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\r\n        <h3 className=\"chart-title\">Activity Breakdown by Type</h3>\r\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n        \r\n        <svg \r\n          width=\"100%\" \r\n          viewBox={`0 0 ${config.width} ${config.height}`}\r\n          className=\"exercise-svg\"\r\n        >\r\n          <g className=\"y-axis\">\r\n            {yAxisLabels.map(value => {\r\n              const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\r\n              return (\r\n                <g key={value} className=\"y-axis-grid-group\">\r\n                  <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\r\n                  <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\r\n                </g>\r\n              );\r\n            })}\r\n            <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\r\n          </g>\r\n\r\n          <g className=\"x-axis\">\r\n            {daysOfWeek.map((day, dayIndex) => {\r\n              const date = new Date(startOfWeek);\r\n              date.setDate(date.getDate() + dayIndex);\r\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n\r\n              const dayData = groupedData[day];\r\n              const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\r\n              const emojis = performedExercises.map(type => type.emoji).join(' ');\r\n\r\n              return (\r\n                <g key={dayIndex} className=\"x-axis-label-group\">\r\n                  <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\r\n                  <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\r\n                  <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\r\n                  <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n\r\n          <g className=\"data-bars\">\r\n            {daysOfWeek.map((day, dayIndex) => {\r\n              const dayData = groupedData[day];\r\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n              let currentY = config.height - config.padding.bottom;\r\n\r\n              return (\r\n                <g key={day}>\r\n                  {exerciseTypes.map(type => {\r\n                    const minutes = Number(dayData[type.key]) || 0;\r\n                    if (minutes <= 0) return null;\r\n\r\n                    const segmentHeight = (minutes / maxDuration) * chartHeight;\r\n                    const segmentY = currentY - segmentHeight;\r\n\r\n                    const segment = (\r\n                      <g key={type.key}>\r\n                        <rect\r\n                          x={x - config.barWidth / 2}\r\n                          y={segmentY}\r\n                          width={config.barWidth}\r\n                          height={segmentHeight}\r\n                          fill={type.color}\r\n                          className=\"data-bar\"\r\n                        >\r\n                          <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\r\n                        </rect>\r\n                        {/* Duration label inside the segment */}\r\n                        {segmentHeight >= 12 && (\r\n                          <text\r\n                            x={x}\r\n                            y={segmentY + segmentHeight / 2}\r\n                            textAnchor=\"middle\"\r\n                            fontSize={isExpanded ? 8 : 6}\r\n                            fill=\"black\"\r\n                            className=\"duration-label\"\r\n                            style={{ \r\n                              fontWeight: 'bold'\r\n                            }}\r\n                          >\r\n                            {Math.round(minutes)}\r\n                          </text>\r\n                        )}\r\n                      </g>\r\n                    );\r\n\r\n                    currentY = segmentY;\r\n                    return segment;\r\n                  })}\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n        </svg>\r\n        \r\n        <Legend \r\n          title=\"Exercise Type\" \r\n          items={exerciseLegendItems} \r\n          orientation=\"horizontal\" \r\n          size=\"medium\" \r\n        />\r\n\r\n        {/* Show summary for physician view only */}\r\n        {viewMode === 'physician' && weekSummary && (\r\n          <div className=\"summary-container\">\r\n            <div className=\"chart-summary\">\r\n              <h4>Week Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Total Exercise:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.totalMinutes} minutes\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Daily Average:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.avgMinutesPerDay} minutes/day\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Exercise Days:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.daysWithExercise}/7 days\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Most Common:</span>\r\n                  <span className=\"stat-value\">\r\n                    {exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)?.emoji} {weekSummary.mostCommonExercise} ({weekSummary.mostCommonExerciseMinutes} min)\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Avg Session:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.avgSessionLength} minutes\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {threeMonthSummary && (\r\n              <div className=\"chart-summary\">\r\n                <h4>3-Month Summary</h4>\r\n                <div className=\"summary-stats\">\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Total Exercise:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.totalMinutes} minutes\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Daily Average:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.avgMinutesPerDay} minutes/day\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Exercise Days:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.daysWithExercise} days\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Most Common:</span>\r\n                    <span className=\"stat-value\">\r\n                      {exerciseTypes.find(t => t.key === threeMonthSummary.mostCommonExercise)?.emoji} {threeMonthSummary.mostCommonExercise} ({threeMonthSummary.mostCommonExerciseMinutes} min)\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Avg Session:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.avgSessionLength} minutes\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ExerciseChart;\r\n","/**\r\n MoodCalendar.js - Mood Tracking Calendar Visualization\r\n \r\n This component provides comprehensive mood monitoring:\r\n - Daily mood tracking in calendar format\r\n - Color-coded mood states (happy, sad, angry)\r\n - Monthly navigation and trend analysis\r\n - Interactive mood selection and editing\r\n - Calendar layout\r\n - Integration with patient data and navigation\r\n \r\n Essential for mental health monitoring and emotional well-being tracking.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\n\r\nimport './MoodCalendar.css';\r\n\r\n// --- Constants & Config ---\r\nconst MOODS = { happy: '😊', sad: '😢', angry: '😠' };\r\nconst MOOD_COLORS = { \r\n  happy: 'var(--chart-color-mood-happy)', \r\n  sad: 'var(--chart-color-mood-sad)', \r\n  angry: 'var(--chart-color-mood-angry)' \r\n};\r\nconst MOOD_BACKGROUNDS = { \r\n  happy: 'var(--chart-color-mood-happy-bg)', \r\n  sad: 'var(--chart-color-mood-sad-bg)', \r\n  angry: 'var(--chart-color-mood-angry-bg)' \r\n};\r\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\nconst getCalendarConfig = (isExpanded) => ({\r\n  svgWidth: isExpanded ? 700 : 350,\r\n  svgHeight: isExpanded ? 600 : 300,\r\n  cellWidth: isExpanded ? 100 : 50,\r\n  cellHeight: isExpanded ? 85 : 44,\r\n  dayLabelY: isExpanded ? 55 : 30,\r\n  dayLabelFontSize: isExpanded ? 16 : 9,\r\n  dateLabelX: isExpanded ? 12 : 5,\r\n  dateLabelY: isExpanded ? 22 : 12,\r\n  dateLabelFontSize: isExpanded ? 14 : 8,\r\n  moodIconFontSize: isExpanded ? 36 : 20,\r\n  startX: isExpanded ? 50 : 25,\r\n  startY: isExpanded ? 100 : 55,\r\n});\r\n\r\n// --- Helper Functions ---\r\nconst normalizeMood = (mood) => (mood && MOODS[mood.toLowerCase()]) ? mood.toLowerCase() : null;\r\nconst getMoodEmoji = (mood) => MOODS[normalizeMood(mood)];\r\nconst getMoodColor = (mood) => MOOD_COLORS[normalizeMood(mood)];\r\nconst getMoodBackgroundColor = (mood) => MOOD_BACKGROUNDS[normalizeMood(mood)] || '#ffffff';\r\n\r\nconst moodLegendItems = Object.entries(MOODS).map(([mood, emoji]) => ({\r\n  icon: emoji,\r\n  label: mood.charAt(0).toUpperCase() + mood.slice(1),\r\n  style: {\r\n    backgroundColor: MOOD_BACKGROUNDS[mood],\r\n    borderColor: MOOD_COLORS[mood],\r\n  },\r\n}));\r\n\r\n// --- Sub-components ---\r\n\r\nconst CalendarHeader = ({ config }) => (\r\n  <g className=\"calendar-header\">\r\n    {DAYS_OF_WEEK.map((day, i) => (\r\n      <text \r\n        key={day} \r\n        x={config.startX + i * config.cellWidth} \r\n        y={config.dayLabelY} \r\n        className=\"day-name-label\"\r\n        style={{ fontSize: config.dayLabelFontSize }}\r\n      >\r\n        {day}\r\n      </text>\r\n    ))}\r\n  </g>\r\n);\r\n\r\nconst DayCell = ({ config, date, moods }) => {\r\n  const dayOfMonth = date.getDate();\r\n  const dayOfWeek = date.getDay();\r\n  const weekOfMonth = Math.floor((dayOfMonth - 1 + new Date(date.getFullYear(), date.getMonth(), 1).getDay()) / 7);\r\n  const x = config.startX + dayOfWeek * config.cellWidth;\r\n  const y = config.startY + weekOfMonth * (config.cellHeight + 2);\r\n  const primaryMood = moods.length > 0 ? moods[0] : null;\r\n\r\n  return (\r\n    <g className=\"day-cell-group\" transform={`translate(${x - config.cellWidth / 2}, ${y - config.cellHeight / 2})`}>\r\n      <rect width={config.cellWidth} height={config.cellHeight} fill={getMoodBackgroundColor(primaryMood)} className=\"day-cell-bg\" />\r\n      <text \r\n        x={config.dateLabelX} \r\n        y={config.dateLabelY} \r\n        className=\"date-label\" \r\n        style={{ fontSize: config.dateLabelFontSize }}\r\n      >\r\n        {dayOfMonth}\r\n      </text>\r\n      {primaryMood && (\r\n        <text \r\n          x={config.cellWidth / 2} \r\n          y={config.cellHeight * 0.65} \r\n          className=\"mood-icon\" \r\n          fill={getMoodColor(primaryMood)}\r\n          style={{ fontSize: config.moodIconFontSize }}\r\n        >\r\n          {getMoodEmoji(primaryMood)}\r\n        </text>\r\n      )}\r\n    </g>\r\n  );\r\n};\r\n\r\nconst Calendar = ({ isExpanded, moodByDate, currentMonth, monthDisplay }) => {\r\n  const config = getCalendarConfig(isExpanded);\r\n  const year = currentMonth.getFullYear();\r\n  const month = currentMonth.getMonth();\r\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n\r\n  return (\r\n    <div className=\"mood-calendar-svg-container\">\r\n      <h3 className=\"chart-title\">Mood Calendar</h3>\r\n      <h4 className=\"chart-subtitle\">{monthDisplay}</h4>\r\n      <svg viewBox={`0 0 ${config.svgWidth} ${config.svgHeight}`} className=\"mood-calendar-svg\">\r\n        <rect width={config.svgWidth} height={config.svgHeight} fill=\"white\" />\r\n        <CalendarHeader config={config} />\r\n        <g className=\"calendar-body\">\r\n          {[...Array(daysInMonth)].map((_, i) => {\r\n            const dayOfMonth = i + 1;\r\n            const date = new Date(year, month, dayOfMonth);\r\n            return <DayCell key={i} config={config} date={date} moods={moodByDate[dayOfMonth] || []} />;\r\n          })}\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\n// --- Main Component ---\r\nconst MoodCalendar = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { moodData, isLoading: loading, error } = usePatientData(patientId, 'mood');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('mood');\r\n  const nav = navigation || internalNavigation;\r\n  \r\n  const currentMonth = nav.currentDate;\r\n\r\n  const moodByDate = moodData\r\n    .filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth())\r\n    .reduce((acc, item) => {\r\n      const dateKey = item.date.getDate();\r\n      if (!acc[dateKey]) acc[dateKey] = [];\r\n      acc[dateKey].push(item.mood);\r\n      return acc;\r\n    }, {});\r\n\r\n  const monthDisplay = nav.getCurrentMonthYear();\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = moodData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\r\n\r\n  // Calculate summary statistics for physician view\r\n  const monthSummary = useMemo(() => {\r\n    const currentMonthData = moodData.filter(d => \r\n      d.date.getFullYear() === currentMonth.getFullYear() && \r\n      d.date.getMonth() === currentMonth.getMonth()\r\n    );\r\n\r\n    if (currentMonthData.length === 0) return null;\r\n\r\n    // Count mood occurrences\r\n    const moodCounts = {};\r\n    Object.keys(MOODS).forEach(mood => {\r\n      moodCounts[mood] = 0;\r\n    });\r\n\r\n    currentMonthData.forEach(entry => {\r\n      const normalizedMood = normalizeMood(entry.mood);\r\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\r\n        moodCounts[normalizedMood]++;\r\n      }\r\n    });\r\n\r\n    // Find most common mood\r\n    const mostCommonMood = Object.entries(moodCounts)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    // Calculate mood distribution percentages\r\n    const totalEntries = currentMonthData.length;\r\n    const moodPercentages = {};\r\n    Object.entries(moodCounts).forEach(([mood, count]) => {\r\n      moodPercentages[mood] = totalEntries > 0 ? ((count / totalEntries) * 100).toFixed(0) : 0;\r\n    });\r\n\r\n    // Days in current month\r\n    const daysInMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();\r\n    const daysWithMood = new Set(currentMonthData.map(d => d.date.getDate())).size;\r\n\r\n    // Calculate mood score (happy=3, sad=1, angry=1)\r\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\r\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\r\n\r\n    return {\r\n      totalEntries,\r\n      daysWithMood,\r\n      daysInMonth,\r\n      mostCommonMood: mostCommonMood[0],\r\n      mostCommonMoodCount: mostCommonMood[1],\r\n      moodCounts,\r\n      moodPercentages,\r\n      moodTrend\r\n    };\r\n  }, [moodData, currentMonth]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = useMemo(() => {\r\n    if (threeMonthData.length === 0) return null;\r\n\r\n    // Count mood occurrences\r\n    const moodCounts = {};\r\n    Object.keys(MOODS).forEach(mood => {\r\n      moodCounts[mood] = 0;\r\n    });\r\n\r\n    threeMonthData.forEach(entry => {\r\n      const normalizedMood = normalizeMood(entry.mood);\r\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\r\n        moodCounts[normalizedMood]++;\r\n      }\r\n    });\r\n\r\n    // Find most common mood\r\n    const mostCommonMood = Object.entries(moodCounts)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    // Calculate mood distribution percentages\r\n    const totalEntries = threeMonthData.length;\r\n    const moodPercentages = {};\r\n    Object.entries(moodCounts).forEach(([mood, count]) => {\r\n      moodPercentages[mood] = totalEntries > 0 ? ((count / totalEntries) * 100).toFixed(0) : 0;\r\n    });\r\n\r\n    // Calculate actual days in the 3-month period\r\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\r\n    const daysWithMood = new Set(threeMonthData.map(d => d.date.toDateString())).size;\r\n\r\n    // Calculate mood score (happy=3, sad=1, angry=1)\r\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\r\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\r\n\r\n    return {\r\n      totalEntries,\r\n      daysWithMood,\r\n      daysInThreeMonths,\r\n      mostCommonMood: mostCommonMood[0],\r\n      mostCommonMoodCount: mostCommonMood[1],\r\n      moodCounts,\r\n      moodPercentages,\r\n      moodTrend\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n  return (\r\n    <div className=\"mood-calendar-container\">\r\n      <div className={`mood-calendar-wrapper ${isExpanded ? 'expanded' : ''}`}>\r\n        <Calendar isExpanded={isExpanded} moodByDate={moodByDate} currentMonth={currentMonth} monthDisplay={monthDisplay} />\r\n      </div>\r\n      <div className=\"mood-calendar-legend-wrapper\">\r\n          <Legend title=\"Mood\" items={moodLegendItems} />\r\n      </div>\r\n\r\n      {/* Show summary for physician view only */}\r\n      {viewMode === 'physician' && monthSummary && (\r\n        <div className=\"summary-container\">\r\n          <div className=\"chart-summary\">\r\n            <h4>Month Summary</h4>\r\n            <div className=\"summary-stats\">\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Mood Entries:</span>\r\n                <span className=\"stat-value\">\r\n                  {monthSummary.totalEntries} entries\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Most Common Mood:</span>\r\n                <span className=\"stat-value\">\r\n                  {MOODS[monthSummary.mostCommonMood]} {monthSummary.mostCommonMood.charAt(0).toUpperCase() + monthSummary.mostCommonMood.slice(1)} ({monthSummary.mostCommonMoodCount}x)\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Mood Distribution:</span>\r\n                <span className=\"stat-value\">\r\n                  😊{monthSummary.moodPercentages.happy}% 😢{monthSummary.moodPercentages.sad}% 😠{monthSummary.moodPercentages.angry}%\r\n                </span>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          \r\n          {threeMonthSummary && (\r\n            <div className=\"chart-summary\">\r\n              <h4>3-Month Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Mood Entries:</span>\r\n                  <span className=\"stat-value\">\r\n                    {threeMonthSummary.totalEntries} entries\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Most Common Mood:</span>\r\n                  <span className=\"stat-value\">\r\n                    {MOODS[threeMonthSummary.mostCommonMood]} {threeMonthSummary.mostCommonMood.charAt(0).toUpperCase() + threeMonthSummary.mostCommonMood.slice(1)} ({threeMonthSummary.mostCommonMoodCount}x)\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Mood Distribution:</span>\r\n                  <span className=\"stat-value\">\r\n                    😊{threeMonthSummary.moodPercentages.happy}% 😢{threeMonthSummary.moodPercentages.sad}% 😠{threeMonthSummary.moodPercentages.angry}%\r\n                  </span>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoodCalendar;","/**\r\n BodySvg.js - Human Body Anatomical Visualization Component\r\n \r\n This component provides an interactive human body diagram:\r\n - SVG-based anatomical body representation\r\n - Interactive body regions for pain location selection\r\n - Design that scales with container\r\n - Color-coded regions for different body parts\r\n - Integration with pain assessment functionality\r\n \r\n Essential for pain location mapping and anatomical reference in health assessments.\r\n */\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst BodySvg = ({ painLocation, painColor, className, view = 'front' }) => {\r\n  const defaultFill = '#F5F5F5';\r\n  const strokeColor = '#CCCCCC';\r\n  const strokeWidth = 1;\r\n\r\n  // More detailed body part mapping\r\n  const bodyPartFills = {\r\n    // Head and neck\r\n    head: defaultFill,\r\n    neck: defaultFill,\r\n    \r\n    // Torso - front\r\n    chest: defaultFill,\r\n    stomach: defaultFill,\r\n    leftShoulder: defaultFill,\r\n    rightShoulder: defaultFill,\r\n    \r\n    // Torso - back\r\n    upperBack: defaultFill,\r\n    lowerBack: defaultFill,\r\n    leftShoulderBlade: defaultFill,\r\n    rightShoulderBlade: defaultFill,\r\n    \r\n    // Hips\r\n    leftHip: defaultFill,\r\n    rightHip: defaultFill,\r\n    \r\n    // Arms\r\n    leftArm: defaultFill,\r\n    rightArm: defaultFill,\r\n    leftElbow: defaultFill,\r\n    rightElbow: defaultFill,\r\n    leftForearm: defaultFill,\r\n    rightForearm: defaultFill,\r\n    leftHand: defaultFill,\r\n    rightHand: defaultFill,\r\n    \r\n    // Legs\r\n    leftThigh: defaultFill,\r\n    rightThigh: defaultFill,\r\n    leftKnee: defaultFill,\r\n    rightKnee: defaultFill,\r\n    leftCalf: defaultFill,\r\n    rightCalf: defaultFill,\r\n    leftFoot: defaultFill,\r\n    rightFoot: defaultFill,\r\n  };\r\n\r\n  // Enhanced location mapping\r\n  const locationMapping = {\r\n    // Head and neck (visible from both sides)\r\n    head: 'head',\r\n    neck: 'neck',\r\n    \r\n    // Torso - front view only\r\n    chest: view === 'front' ? 'chest' : null,\r\n    stomach: view === 'front' ? 'stomach' : null,\r\n    abdomen: view === 'front' ? 'stomach' : null,\r\n    belly: view === 'front' ? 'stomach' : null,\r\n    leftShoulder: view === 'front' ? 'leftShoulder' : null,\r\n    rightShoulder: view === 'front' ? 'rightShoulder' : null,\r\n    shoulder: view === 'front' ? 'leftShoulder' : null,\r\n    shoulders: view === 'front' ? 'leftShoulder' : null,\r\n    \r\n    // Torso - back view only\r\n    back: view === 'back' ? 'upperBack' : null,\r\n    upperBack: view === 'back' ? 'upperBack' : null,\r\n    lowerBack: view === 'back' ? 'lowerBack' : null,\r\n    spine: view === 'back' ? 'upperBack' : null,\r\n    leftShoulderBlade: view === 'back' ? 'leftShoulderBlade' : null,\r\n    rightShoulderBlade: view === 'back' ? 'rightShoulderBlade' : null,\r\n    shoulderBlade: view === 'back' ? 'leftShoulderBlade' : null,\r\n    shoulderBlades: view === 'back' ? 'leftShoulderBlade' : null,\r\n    \r\n    // Hips (visible from both sides)\r\n    hip: 'leftHip',\r\n    hips: 'leftHip',\r\n    leftHip: 'leftHip',\r\n    rightHip: 'rightHip',\r\n    \r\n    // Arms (visible from both sides)\r\n    arm: 'leftArm',\r\n    arms: 'leftArm',\r\n    leftArm: 'leftArm',\r\n    rightArm: 'rightArm',\r\n    elbow: 'leftElbow',\r\n    elbows: 'leftElbow',\r\n    leftElbow: 'leftElbow',\r\n    rightElbow: 'rightElbow',\r\n    forearm: 'leftForearm',\r\n    forearms: 'leftForearm',\r\n    leftForearm: 'leftForearm',\r\n    rightForearm: 'rightForearm',\r\n    hand: 'leftHand',\r\n    hands: 'leftHand',\r\n    leftHand: 'leftHand',\r\n    rightHand: 'rightHand',\r\n    \r\n    // Legs (visible from both sides)\r\n    leg: 'leftThigh',\r\n    legs: 'leftThigh',\r\n    leftThigh: 'leftThigh',\r\n    rightThigh: 'rightThigh',\r\n    thigh: 'leftThigh',\r\n    thighs: 'leftThigh',\r\n    knee: 'leftKnee',\r\n    knees: 'leftKnee',\r\n    leftKnee: 'leftKnee',\r\n    rightKnee: 'rightKnee',\r\n    calf: 'leftCalf',\r\n    calves: 'leftCalf',\r\n    leftCalf: 'leftCalf',\r\n    rightCalf: 'rightCalf',\r\n    foot: 'leftFoot',\r\n    feet: 'leftFoot',\r\n    leftFoot: 'leftFoot',\r\n    rightFoot: 'rightFoot',\r\n    ankle: 'leftFoot',\r\n    ankles: 'leftFoot',\r\n  };\r\n\r\n  const targetPart = locationMapping[painLocation];\r\n  if (targetPart && targetPart !== null) {\r\n    bodyPartFills[targetPart] = painColor;\r\n    \r\n    // Handle symmetrical body parts - shade both sides for general terms\r\n    if (painLocation === 'elbow' || painLocation === 'elbows') {\r\n      bodyPartFills.leftElbow = painColor;\r\n      bodyPartFills.rightElbow = painColor;\r\n    } else if (painLocation === 'shoulder' || painLocation === 'shoulders') {\r\n      if (view === 'front') {\r\n        bodyPartFills.leftShoulder = painColor;\r\n        bodyPartFills.rightShoulder = painColor;\r\n      } else {\r\n        bodyPartFills.leftShoulderBlade = painColor;\r\n        bodyPartFills.rightShoulderBlade = painColor;\r\n      }\r\n    } else if (painLocation === 'arm' || painLocation === 'arms') {\r\n      bodyPartFills.leftArm = painColor;\r\n      bodyPartFills.rightArm = painColor;\r\n    } else if (painLocation === 'forearm' || painLocation === 'forearms') {\r\n      bodyPartFills.leftForearm = painColor;\r\n      bodyPartFills.rightForearm = painColor;\r\n    } else if (painLocation === 'hand' || painLocation === 'hands') {\r\n      bodyPartFills.leftHand = painColor;\r\n      bodyPartFills.rightHand = painColor;\r\n    } else if (painLocation === 'leg' || painLocation === 'legs') {\r\n      bodyPartFills.leftThigh = painColor;\r\n      bodyPartFills.rightThigh = painColor;\r\n    } else if (painLocation === 'thigh' || painLocation === 'thighs') {\r\n      bodyPartFills.leftThigh = painColor;\r\n      bodyPartFills.rightThigh = painColor;\r\n    } else if (painLocation === 'knee' || painLocation === 'knees') {\r\n      bodyPartFills.leftKnee = painColor;\r\n      bodyPartFills.rightKnee = painColor;\r\n    } else if (painLocation === 'calf' || painLocation === 'calves') {\r\n      bodyPartFills.leftCalf = painColor;\r\n      bodyPartFills.rightCalf = painColor;\r\n    } else if (painLocation === 'foot' || painLocation === 'feet') {\r\n      bodyPartFills.leftFoot = painColor;\r\n      bodyPartFills.rightFoot = painColor;\r\n    } else if (painLocation === 'ankle' || painLocation === 'ankles') {\r\n      bodyPartFills.leftFoot = painColor;\r\n      bodyPartFills.rightFoot = painColor;\r\n    } else if (painLocation === 'hip' || painLocation === 'hips') {\r\n      bodyPartFills.leftHip = painColor;\r\n      bodyPartFills.rightHip = painColor;\r\n    }\r\n  }\r\n\r\n  const renderFrontView = () => (\r\n    <g id=\"body-front\">\r\n      {/* Head */}\r\n      <ellipse \r\n        cx=\"75\" cy=\"15\" rx=\"12\" ry=\"15\" \r\n        fill={bodyPartFills.head} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Neck */}\r\n      <rect \r\n        x=\"68\" y=\"30\" width=\"14\" height=\"8\" \r\n        fill={bodyPartFills.neck} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Torso */}\r\n      <path \r\n        d=\"M60,38 Q75,35 90,38 L85,85 Q75,90 65,85 Z\" \r\n        fill={bodyPartFills.chest} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Stomach */}\r\n      <path \r\n        d=\"M65,85 Q75,88 85,85 L80,110 Q75,115 70,110 Z\" \r\n        fill={bodyPartFills.stomach} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Shoulder */}\r\n      <ellipse \r\n        cx=\"55\" cy=\"40\" rx=\"8\" ry=\"6\" \r\n        fill={bodyPartFills.leftShoulder} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Shoulder */}\r\n      <ellipse \r\n        cx=\"95\" cy=\"40\" rx=\"8\" ry=\"6\" \r\n        fill={bodyPartFills.rightShoulder} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Arm */}\r\n      <path \r\n        d=\"M47,40 Q45,50 43,65 L50,67 Q52,52 55,42 Z\" \r\n        fill={bodyPartFills.leftArm} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Arm */}\r\n      <path \r\n        d=\"M103,40 Q105,50 107,65 L100,67 Q98,52 95,42 Z\" \r\n        fill={bodyPartFills.rightArm} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Elbow */}\r\n      <ellipse \r\n        cx=\"46\" cy=\"70\" rx=\"4\" ry=\"6\" \r\n        fill={bodyPartFills.leftElbow} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Elbow */}\r\n      <ellipse \r\n        cx=\"104\" cy=\"70\" rx=\"4\" ry=\"6\" \r\n        fill={bodyPartFills.rightElbow} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Forearm */}\r\n      <path \r\n        d=\"M42,70 Q44,80 46,90 L50,88 Q48,78 50,72 Z\" \r\n        fill={bodyPartFills.leftForearm} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Forearm */}\r\n      <path \r\n        d=\"M108,70 Q106,80 104,90 L100,88 Q102,78 100,72 Z\" \r\n        fill={bodyPartFills.rightForearm} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Hand */}\r\n      <ellipse \r\n        cx=\"48\" cy=\"95\" rx=\"5\" ry=\"8\" \r\n        fill={bodyPartFills.leftHand} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Hand */}\r\n      <ellipse \r\n        cx=\"102\" cy=\"95\" rx=\"5\" ry=\"8\" \r\n        fill={bodyPartFills.rightHand} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Hip */}\r\n      <ellipse \r\n        cx=\"65\" cy=\"105\" rx=\"8\" ry=\"6\" \r\n        fill={bodyPartFills.leftHip} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Hip */}\r\n      <ellipse \r\n        cx=\"85\" cy=\"105\" rx=\"8\" ry=\"6\" \r\n        fill={bodyPartFills.rightHip} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Thigh */}\r\n      <path \r\n        d=\"M65,110 Q70,115 75,120 L73,140 Q70,135 67,130 Z\" \r\n        fill={bodyPartFills.leftThigh} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Thigh */}\r\n      <path \r\n        d=\"M85,110 Q80,115 75,120 L77,140 Q80,135 83,130 Z\" \r\n        fill={bodyPartFills.rightThigh} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Knee */}\r\n      <ellipse \r\n        cx=\"70\" cy=\"145\" rx=\"6\" ry=\"4\" \r\n        fill={bodyPartFills.leftKnee} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Knee */}\r\n      <ellipse \r\n        cx=\"80\" cy=\"145\" rx=\"6\" ry=\"4\" \r\n        fill={bodyPartFills.rightKnee} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Calf */}\r\n      <path \r\n        d=\"M67,149 Q70,155 73,165 L70,167 Q67,161 70,155 Z\" \r\n        fill={bodyPartFills.leftCalf} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Calf */}\r\n      <path \r\n        d=\"M83,149 Q80,155 77,165 L80,167 Q83,161 80,155 Z\" \r\n        fill={bodyPartFills.rightCalf} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Foot */}\r\n      <ellipse \r\n        cx=\"70\" cy=\"170\" rx=\"8\" ry=\"4\" \r\n        fill={bodyPartFills.leftFoot} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Foot */}\r\n      <ellipse \r\n        cx=\"80\" cy=\"170\" rx=\"8\" ry=\"4\" \r\n        fill={bodyPartFills.rightFoot} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n    </g>\r\n  );\r\n\r\n  const renderBackView = () => (\r\n    <g id=\"body-back\">\r\n      {/* Head */}\r\n      <ellipse \r\n        cx=\"75\" cy=\"15\" rx=\"12\" ry=\"15\" \r\n        fill={bodyPartFills.head} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Neck */}\r\n      <rect \r\n        x=\"68\" y=\"30\" width=\"14\" height=\"8\" \r\n        fill={bodyPartFills.neck} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Upper Back */}\r\n      <path \r\n        d=\"M60,38 Q75,35 90,38 L85,70 Q75,75 65,70 Z\" \r\n        fill={bodyPartFills.upperBack} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Lower Back */}\r\n      <path \r\n        d=\"M65,70 Q75,75 85,70 L80,110 Q75,115 70,110 Z\" \r\n        fill={bodyPartFills.lowerBack} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Shoulder Blade */}\r\n      <ellipse \r\n        cx=\"55\" cy=\"45\" rx=\"6\" ry=\"8\" \r\n        fill={bodyPartFills.leftShoulderBlade} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Shoulder Blade */}\r\n      <ellipse \r\n        cx=\"95\" cy=\"45\" rx=\"6\" ry=\"8\" \r\n        fill={bodyPartFills.rightShoulderBlade} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Arm */}\r\n      <path \r\n        d=\"M47,40 Q45,50 43,65 L50,67 Q52,52 55,42 Z\" \r\n        fill={bodyPartFills.leftArm} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Arm */}\r\n      <path \r\n        d=\"M103,40 Q105,50 107,65 L100,67 Q98,52 95,42 Z\" \r\n        fill={bodyPartFills.rightArm} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Elbow */}\r\n      <ellipse \r\n        cx=\"46\" cy=\"70\" rx=\"4\" ry=\"6\" \r\n        fill={bodyPartFills.leftElbow} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Elbow */}\r\n      <ellipse \r\n        cx=\"104\" cy=\"70\" rx=\"4\" ry=\"6\" \r\n        fill={bodyPartFills.rightElbow} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Forearm */}\r\n      <path \r\n        d=\"M42,70 Q44,80 46,90 L50,88 Q48,78 50,72 Z\" \r\n        fill={bodyPartFills.leftForearm} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Forearm */}\r\n      <path \r\n        d=\"M108,70 Q106,80 104,90 L100,88 Q102,78 100,72 Z\" \r\n        fill={bodyPartFills.rightForearm} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Hand */}\r\n      <ellipse \r\n        cx=\"48\" cy=\"95\" rx=\"5\" ry=\"8\" \r\n        fill={bodyPartFills.leftHand} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Hand */}\r\n      <ellipse \r\n        cx=\"102\" cy=\"95\" rx=\"5\" ry=\"8\" \r\n        fill={bodyPartFills.rightHand} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Hip */}\r\n      <ellipse \r\n        cx=\"65\" cy=\"105\" rx=\"8\" ry=\"6\" \r\n        fill={bodyPartFills.leftHip} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Hip */}\r\n      <ellipse \r\n        cx=\"85\" cy=\"105\" rx=\"8\" ry=\"6\" \r\n        fill={bodyPartFills.rightHip} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Thigh */}\r\n      <path \r\n        d=\"M65,110 Q70,115 75,120 L73,140 Q70,135 67,130 Z\" \r\n        fill={bodyPartFills.leftThigh} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Thigh */}\r\n      <path \r\n        d=\"M85,110 Q80,115 75,120 L77,140 Q80,135 83,130 Z\" \r\n        fill={bodyPartFills.rightThigh} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Knee */}\r\n      <ellipse \r\n        cx=\"70\" cy=\"145\" rx=\"6\" ry=\"4\" \r\n        fill={bodyPartFills.leftKnee} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Knee */}\r\n      <ellipse \r\n        cx=\"80\" cy=\"145\" rx=\"6\" ry=\"4\" \r\n        fill={bodyPartFills.rightKnee} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Calf */}\r\n      <path \r\n        d=\"M67,149 Q70,155 73,165 L70,167 Q67,161 70,155 Z\" \r\n        fill={bodyPartFills.leftCalf} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Calf */}\r\n      <path \r\n        d=\"M83,149 Q80,155 77,165 L80,167 Q83,161 80,155 Z\" \r\n        fill={bodyPartFills.rightCalf} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Left Foot */}\r\n      <ellipse \r\n        cx=\"70\" cy=\"170\" rx=\"8\" ry=\"4\" \r\n        fill={bodyPartFills.leftFoot} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n      \r\n      {/* Right Foot */}\r\n      <ellipse \r\n        cx=\"80\" cy=\"170\" rx=\"8\" ry=\"4\" \r\n        fill={bodyPartFills.rightFoot} \r\n        stroke={strokeColor} \r\n        strokeWidth={strokeWidth} \r\n      />\r\n    </g>\r\n  );\r\n\r\n  return (\r\n    <svg \r\n      xmlns=\"http://www.w3.org/2000/svg\" \r\n      viewBox=\"0 0 150 180\" \r\n      className={className}\r\n      preserveAspectRatio=\"xMidYMid meet\"\r\n      style={{\r\n        filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))', // Add subtle shadow for better visual depth\r\n        transition: 'all 0.2s ease' // Smooth transitions for scaling\r\n      }}\r\n    >\r\n      {view === 'front' ? renderFrontView() : renderBackView()}\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default BodySvg;\r\n","/**\r\n PainChart.js - Pain Assessment and Visualization Component\r\n \r\n This component provides comprehensive pain monitoring:\r\n - Anatomical body mapping for pain location\r\n - Pain intensity scale (0-10) with color coding\r\n - Daily pain tracking and trend analysis\r\n - Interactive body diagram for pain location selection\r\n - Pain level input and editing capabilities\r\n - Navigation controls for time periods\r\n \r\n Critical for pain management and treatment monitoring.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\n\r\nimport Legend from '../Legend';\r\n\r\nimport BodySVG from './BodySvg';\r\n\r\nconst PainChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { painData, isLoading: loading, error } = usePatientData(patientId, 'pain');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('pain');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const getPainColor = (level) => {\r\n    // 11-class color scheme from light to dark\r\n    const painColors = [\r\n      '#ffffe5', // 0 - No pain (lightest cream)\r\n      '#fff7bc', // 1 - Very mild pain\r\n      '#f7f7b3', // 2 - Mild pain\r\n      '#fee391', // 3 - Mild-moderate pain\r\n      '#fec44f', // 4 - Moderate pain\r\n      '#fe9929', // 5 - Moderate-severe pain\r\n      '#ec7014', // 6 - Severe pain\r\n      '#cc4c02', // 7 - Very severe pain\r\n      '#b34703', // 8 - Extremely severe pain\r\n      '#993404', // 9 - Most severe pain\r\n      '#662506'  // 10 - Maximum pain (darkest brown)\r\n    ];\r\n    \r\n    return painColors[Math.min(level, 10)];\r\n  };\r\n\r\n  const painLegendItems = Array.from({ length: 11 }, (_, i) => i).map(level => ({\r\n    color: getPainColor(level),\r\n    label: `${level}`,\r\n  }));\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthPainData = painData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\r\n\r\n  // Process data for chart\r\n  const { chartData, mostCommonLocation, averagePainLevel } = useMemo(() => {\r\n    if (!weekPainData.length) return { chartData: [], mostCommonLocation: null, averagePainLevel: 0 };\r\n\r\n    // Create a map of dates to pain levels\r\n    const dateMap = new Map();\r\n    const locationCounts = new Map();\r\n\r\n    weekPainData.forEach(item => {\r\n      const dateKey = item.date.toDateString();\r\n      dateMap.set(dateKey, item.level);\r\n      \r\n      // Count locations\r\n      const location = item.location.toLowerCase();\r\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\r\n    });\r\n\r\n    // Find most common location\r\n    let mostCommon = null;\r\n    let maxCount = 0;\r\n    for (const [location, count] of locationCounts) {\r\n      if (count > maxCount) {\r\n        maxCount = count;\r\n        mostCommon = location;\r\n      }\r\n    }\r\n\r\n    // Generate chart data for all 7 days of the week\r\n    const data = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(startOfWeek);\r\n      date.setDate(date.getDate() + i);\r\n      const dateKey = date.toDateString();\r\n      const painLevel = dateMap.get(dateKey) || 0;\r\n      \r\n      data.push({\r\n        date,\r\n        day: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][date.getDay()],\r\n        level: painLevel,\r\n        color: getPainColor(painLevel)\r\n      });\r\n    }\r\n\r\n    const totalPain = weekPainData.reduce((sum, item) => sum + item.level, 0);\r\n    const avgPain = weekPainData.length > 0 ? (totalPain / weekPainData.length) : 0;\r\n\r\n    return {\r\n      chartData: data,\r\n      mostCommonLocation: mostCommon,\r\n      averagePainLevel: avgPain\r\n    };\r\n  }, [weekPainData, startOfWeek]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = useMemo(() => {\r\n    if (!threeMonthPainData.length) return null;\r\n\r\n    // Create a map of dates to pain levels for 3-month period\r\n    const dateMap = new Map();\r\n    const locationCounts = new Map();\r\n\r\n    threeMonthPainData.forEach(item => {\r\n      const dateKey = item.date.toDateString();\r\n      dateMap.set(dateKey, item.level);\r\n      \r\n      // Count locations\r\n      const location = item.location.toLowerCase();\r\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\r\n    });\r\n\r\n    // Find most common location\r\n    let mostCommon = null;\r\n    let maxCount = 0;\r\n    for (const [location, count] of locationCounts) {\r\n      if (count > maxCount) {\r\n        maxCount = count;\r\n        mostCommon = location;\r\n      }\r\n    }\r\n\r\n    const totalPain = threeMonthPainData.reduce((sum, item) => sum + item.level, 0);\r\n    const avgPain = threeMonthPainData.length > 0 ? (totalPain / threeMonthPainData.length) : 0;\r\n\r\n    // Calculate actual days in the 3-month period\r\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\r\n    const daysWithPain = new Set(threeMonthPainData.map(d => d.date.toDateString())).size;\r\n\r\n    // Calculate pain severity distribution\r\n    const painLevelCounts = {};\r\n    for (let i = 0; i <= 10; i++) {\r\n      painLevelCounts[i] = 0;\r\n    }\r\n    threeMonthPainData.forEach(item => {\r\n      painLevelCounts[item.level]++;\r\n    });\r\n\r\n    // Find most common pain level\r\n    const mostCommonPainLevel = Object.entries(painLevelCounts)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    return {\r\n      totalEntries: threeMonthPainData.length,\r\n      daysWithPain,\r\n      daysInThreeMonths,\r\n      mostCommonLocation: mostCommon,\r\n      mostCommonLocationCount: maxCount,\r\n      averagePainLevel: avgPain,\r\n      mostCommonPainLevel: parseInt(mostCommonPainLevel[0]),\r\n      mostCommonPainLevelCount: mostCommonPainLevel[1]\r\n    };\r\n  }, [threeMonthPainData]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  // Line Chart Component for Pain Ratings\r\n  const PainLineChart = ({ data, isExpanded }) => {\r\n    const config = {\r\n      width: isExpanded ? 600 : 400, // Match legend width (600px) when expanded\r\n      height: isExpanded ? 200 : 150,\r\n      padding: { top: 20, right: 30, bottom: 40, left: 50 },\r\n      yAxisRange: 10,\r\n      fontSize: {\r\n        yAxis: isExpanded ? 10 : 8,\r\n        xAxis: isExpanded ? 10 : 8,\r\n      }\r\n    };\r\n\r\n    const chartWidth = config.width - config.padding.left - config.padding.right;\r\n    const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n    const dayWidth = chartWidth / 6; // 7 days, 6 intervals\r\n\r\n    // Create line path\r\n    const linePath = data.map((point, index) => {\r\n      const x = config.padding.left + (index * dayWidth);\r\n      const y = config.padding.top + chartHeight - (point.level / config.yAxisRange) * chartHeight;\r\n      return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\r\n    }).join(' ');\r\n\r\n    return (\r\n      <div className=\"pain-line-chart\">\r\n        <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${config.width} ${config.height}`}>\r\n          {/* Grid lines */}\r\n          {[0, 2, 4, 6, 8, 10].map(level => {\r\n            const y = config.padding.top + chartHeight - (level / config.yAxisRange) * chartHeight;\r\n            return (\r\n              <g key={level}>\r\n                <line \r\n                  x1={config.padding.left} \r\n                  y1={y} \r\n                  x2={config.width - config.padding.right} \r\n                  y2={y} \r\n                  stroke=\"#e0e0e0\" \r\n                  strokeWidth=\"1\" \r\n                  strokeDasharray=\"2,2\"\r\n                />\r\n                <text \r\n                  x={config.padding.left - 10} \r\n                  y={y + 3} \r\n                  fontSize={config.fontSize.yAxis} \r\n                  textAnchor=\"end\" \r\n                  fill=\"var(--chart-color-text-secondary)\"\r\n                >\r\n                  {level}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n\r\n          {/* X-axis labels */}\r\n          {data.map((point, index) => {\r\n            const x = config.padding.left + (index * dayWidth);\r\n            return (\r\n              <text \r\n                key={index}\r\n                x={x} \r\n                y={config.height - config.padding.bottom + 15} \r\n                fontSize={config.fontSize.xAxis} \r\n                textAnchor=\"middle\" \r\n                className=\"x-axis-day-label\"\r\n              >\r\n                {point.day}\r\n              </text>\r\n            );\r\n          })}\r\n\r\n          {/* Line */}\r\n          <path \r\n            d={linePath} \r\n            stroke=\"var(--chart-color-primary)\" \r\n            strokeWidth=\"3\" \r\n            fill=\"none\"\r\n          />\r\n\r\n          {/* Data points */}\r\n          {data.map((point, index) => {\r\n            const x = config.padding.left + (index * dayWidth);\r\n            const y = config.padding.top + chartHeight - (point.level / config.yAxisRange) * chartHeight;\r\n            return (\r\n              <circle \r\n                key={index}\r\n                cx={x} \r\n                cy={y} \r\n                r=\"4\" \r\n                fill={point.color} \r\n                stroke=\"var(--chart-color-primary)\" \r\n                strokeWidth=\"2\"\r\n              />\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const Body = ({ location, level }) => {\r\n    const color = getPainColor(level);\r\n    const locationLower = location.toLowerCase();\r\n\r\n    return (\r\n      <div className=\"body-container\">\r\n        <div className=\"body-views\">\r\n          <div className=\"body-view\">\r\n            <div className=\"body-view-label\">Front</div>\r\n            <BodySVG \r\n              className=\"body-svg\" \r\n              painLocation={locationLower} \r\n              painColor={color} \r\n              view=\"front\" \r\n            />\r\n          </div>\r\n          <div className=\"body-view\">\r\n            <div className=\"body-view-label\">Back</div>\r\n            <BodySVG \r\n              className=\"body-svg\" \r\n              painLocation={locationLower} \r\n              painColor={color} \r\n              view=\"back\" \r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (viewMode === 'patient') {\r\n    return (\r\n      <div className=\"pain-chart-container\">\r\n        <div className=\"pain-chart-header\">\r\n          <h3 className=\"chart-title\">Pain</h3>\r\n          <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n        </div>\r\n        \r\n        <div className=\"pain-content-wrapper\">\r\n          <div className=\"pain-list\">\r\n            {weekPainData.length > 0 ? (\r\n              weekPainData.map((item, index) => (\r\n                <div key={index} className=\"pain-list-item\">\r\n                  <div className=\"pain-item-info\">\r\n                    <div className=\"pain-item-date\">\r\n                      {new Date(item.date).toLocaleDateString('en-US', { \r\n                        weekday: 'short', \r\n                        month: 'short', \r\n                        day: 'numeric' \r\n                      })}\r\n                    </div>\r\n                    <div className=\"pain-item-details\">\r\n                      <div className=\"pain-level\">\r\n                        <strong>Pain Level:</strong> {item.level}/10\r\n                      </div>\r\n                      <div className=\"pain-location\">\r\n                        <strong>Location:</strong> {item.location}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"pain-item-body\">\r\n                    <Body location={item.location} level={item.level} />\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div className=\"no-pain-data\">No pain data available for this week</div>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"pain-legend-wrapper\">\r\n            <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Physician view\r\n  return (\r\n      <div className=\"physician-pain-chart-container\">\r\n        <div className=\"pain-line-chart-container\">\r\n          <h3 className=\"chart-title\">Pain</h3>\r\n          <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n          <PainLineChart data={chartData} isExpanded={isExpanded} />\r\n        </div>\r\n\r\n        <div className=\"pain-location-info\">\r\n          <h4>Pain Location: {mostCommonLocation || 'N/A'}</h4>\r\n        </div>\r\n        \r\n        <div className=\"pain-legend-wrapper\">\r\n          <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\r\n        </div>\r\n\r\n        <div className=\"summary-container\">\r\n          <div className=\"chart-summary\">\r\n            <h4>Week Summary</h4>\r\n            <div className=\"summary-stats\">\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Average Pain Intensity:</span>\r\n                <span className=\"stat-value\">{averagePainLevel.toFixed(1)}/10</span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Most Common Location:</span>\r\n                <span className=\"stat-value\">{mostCommonLocation || 'N/A'}</span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Days with Pain:</span>\r\n                <span className=\"stat-value\">{weekPainData.length}/7</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {threeMonthSummary && (\r\n            <div className=\"chart-summary\">\r\n              <h4>3-Month Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Average Pain Intensity:</span>\r\n                  <span className=\"stat-value\">{threeMonthSummary.averagePainLevel.toFixed(1)}/10</span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Most Common Location:</span>\r\n                  <span className=\"stat-value\">\r\n                    {threeMonthSummary.mostCommonLocation || 'N/A'} ({threeMonthSummary.mostCommonLocationCount}x)\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Days with Pain:</span>\r\n                  <span className=\"stat-value\">\r\n                    {threeMonthSummary.daysWithPain}/{threeMonthSummary.daysInThreeMonths}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default PainChart;\r\n","/*\r\n MealContentsChart.js - Nutritional Tracking Visualization\r\n \r\n This component provides comprehensive meal and nutrition monitoring:\r\n - Meal timing and content breakdown\r\n - Nutritional component tracking\r\n - Daily and weekly dietary pattern analysis\r\n - Interactive tooltips with meal details\r\n - Navigation controls for time periods\r\n - Integration with patient data and chart navigation\r\n \r\n Essential for dietary monitoring and nutritional assessment.\r\n */\r\n\r\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport Legend from '../Legend';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\n\r\nimport './MealContentsChart.css';\r\n\r\n\r\n// --- Constants ---\r\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\nconst MEAL_TYPES = ['Breakfast', 'Lunch', 'Dinner', 'Late Night Snack'];\r\nconst FOOD_CATEGORIES = ['Protein', 'Carbohydrates', 'Vegetables', 'Fruit', 'Alcohol'];\r\nconst SUGAR_CATEGORIES = ['', '1-20g', '20-40g', '40-60g', '60g+'];\r\nconst DEFAULT_WEEK = new Date(2025, 4, 1);\r\n\r\n// Emoji mappings for food categories\r\nconst CATEGORY_EMOJIS = {\r\n  'Protein': '🥩',\r\n  'Carbohydrates': '🍞',\r\n  'Vegetables': '🥦',\r\n  'Fruit': '🍎',\r\n  'Alcohol': '🍷'\r\n};\r\n\r\nconst SUGAR_EMOJIS = {\r\n  '': '',              // No sugar\r\n  '1-20g': '🍭',       // Lollipop\r\n  '20-40g': '🍫',      // Chocolate bar\r\n  '40-60g': '🍩',      // Donut\r\n  '60g+': '🎂'         // Cake\r\n};\r\n\r\n\r\n\r\n// --- Helper Functions ---\r\nconst getWeekStart = (date) => {\r\n  const d = new Date(date);\r\n  const day = d.getDay();\r\n  const diff = d.getDate() - day;\r\n  return new Date(d.setDate(diff));\r\n};\r\n\r\nconst formatDayLabel = (date) => {\r\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  return dayNames[date.getDay()];\r\n};\r\nconst formatDateLabel = (date) => date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n\r\nconst getMealTime = (data, mealType) => {\r\n  // Convert meal type to the correct column name format (with underscores)\r\n  const columnPrefix = mealType.replace(/\\s+/g, '_');\r\n  const timeKey = `${columnPrefix}_Time`;\r\n  return data[timeKey] || '';\r\n};\r\n\r\nconst getMealData = (data, mealType) => {\r\n  const mealData = {};\r\n  \r\n  // Convert meal type to the correct column name format (with underscores)\r\n  const columnPrefix = mealType.replace(/\\s+/g, '_');\r\n  \r\n  FOOD_CATEGORIES.forEach(category => {\r\n    const key = `${columnPrefix}_${category}`;\r\n    // Handle both numeric (1, 0) and string ('1', '0') values\r\n    mealData[category] = data[key] === 1 || data[key] === '1';\r\n  });\r\n  \r\n  const sugarKey = `${columnPrefix}_Added_Sugar`;\r\n  mealData['Added Sugar'] = data[sugarKey] || '';\r\n  \r\n  return mealData;\r\n};\r\n\r\n// --- Chart Sub-components ---\r\n\r\nconst XAxis = ({ config, weekDays }) => (\r\n  <g className=\"x-axis\">\r\n    {weekDays.map((day, dayIndex) => {\r\n      const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n      return (\r\n        <g key={dayIndex}>\r\n          <text\r\n            x={x}\r\n            y={config.height - config.padding.bottom + 30}\r\n            fontSize={config.fontSize.dayLabel}\r\n            textAnchor=\"middle\"\r\n            className=\"x-axis-day-label\"\r\n          >\r\n            {formatDayLabel(day)}\r\n          </text>\r\n          <text\r\n            x={x}\r\n            y={config.height - config.padding.bottom + 45}\r\n            fontSize={config.fontSize.dateLabel}\r\n            textAnchor=\"middle\"\r\n            className=\"x-axis-date-label\"\r\n          >\r\n            {day.getDate()}\r\n          </text>\r\n          <line\r\n            className=\"chart-grid-line-vertical\"\r\n            x1={config.padding.left + dayIndex * config.dayWidth}\r\n            y1={config.padding.top}\r\n            x2={config.padding.left + dayIndex * config.dayWidth}\r\n            y2={config.height - config.padding.bottom}\r\n          />\r\n        </g>\r\n      );\r\n    })}\r\n    <line\r\n      className=\"chart-grid-line-vertical\"\r\n      x1={config.padding.left + 7 * config.dayWidth}\r\n      y1={config.padding.top}\r\n      x2={config.padding.left + 7 * config.dayWidth}\r\n      y2={config.height - config.padding.bottom}\r\n    />\r\n  </g>\r\n);\r\n\r\nconst YAxis = ({ config }) => {\r\n  // Calculate dynamic text positioning based on available space\r\n  const getTextX = (textLength) => {\r\n    // Base offset from the chart area\r\n    const baseOffset = 10;\r\n    // Calculate position to ensure text doesn't get cut off\r\n    // For longer text like \"Late Night Snack\", position it closer to the chart\r\n    const dynamicOffset = textLength > 10 ? 5 : 25;\r\n    return Math.max(baseOffset, config.padding.left - dynamicOffset);\r\n  };\r\n\r\n  return (\r\n    <g className=\"y-axis\">\r\n      {MEAL_TYPES.map((meal, mealIndex) => {\r\n        const y = config.padding.top + mealIndex * config.mealHeight + config.mealHeight / 2;\r\n        const textX = getTextX(meal.length);\r\n        \r\n        return (\r\n          <g key={meal}>\r\n            <text\r\n              x={textX}\r\n              y={y}\r\n              fontSize={config.fontSize.mealLabel}\r\n              textAnchor=\"end\"\r\n              className=\"y-axis-title\"\r\n            >\r\n              {meal}\r\n            </text>\r\n            <line\r\n              className=\"chart-grid-line-horizontal\"\r\n              x1={config.padding.left}\r\n              y1={config.padding.top + mealIndex * config.mealHeight}\r\n              x2={config.padding.left + 7 * config.dayWidth}\r\n              y2={config.padding.top + mealIndex * config.mealHeight}\r\n            />\r\n          </g>\r\n        );\r\n      })}\r\n      <line\r\n        className=\"chart-grid-line-horizontal\"\r\n        x1={config.padding.left}\r\n        y1={config.padding.top + 4 * config.mealHeight}\r\n        x2={config.padding.left + 7 * config.dayWidth}\r\n        y2={config.padding.top + 4 * config.mealHeight}\r\n      />\r\n    </g>\r\n  );\r\n};\r\n\r\nconst MealCell = ({ config, dayIndex, mealIndex, mealData, mealTime, isExpanded }) => {\r\n  const x = config.padding.left + dayIndex * config.dayWidth + 5;\r\n  const y = config.padding.top + mealIndex * config.mealHeight + 5;\r\n  const cellWidth = config.dayWidth - 10;\r\n  const cellHeight = config.mealHeight - 10;\r\n  \r\n  // Calculate grid layout for 6 circles (2x3 grid)\r\n  const circlesPerRow = 3;\r\n  const circleWidth = cellWidth / circlesPerRow;\r\n  const circleHeight = (cellHeight - 20) / 2; // Reserve space for time\r\n  \r\n  // Calculate circle radius and emoji size based on cell dimensions\r\n  const minDimension = Math.min(circleWidth, circleHeight);\r\n  const circleRadius = Math.max(8, Math.min(16, minDimension * 0.35)); // Min 8px, max 16px, 35% of min dimension\r\n  const emojiFontSize = Math.max(8, Math.min(16, minDimension * 0.4)); // Min 8px, max 16px, 40% of min dimension for better visibility\r\n  \r\n  // Apply expanded view scaling\r\n  const expandedCircleRadius = isExpanded ? circleRadius * 1.3 : circleRadius;\r\n  const expandedEmojiFontSize = isExpanded ? emojiFontSize * 1.4 : emojiFontSize;\r\n  \r\n  // Define the 6 food categories in order (5 main + 1 sugar)\r\n  const allCategories = [...FOOD_CATEGORIES, 'Added Sugar'];\r\n  \r\n  return (\r\n    <g className=\"meal-cell\">\r\n      {/* Background */}\r\n      <rect\r\n        x={x}\r\n        y={y}\r\n        width={cellWidth}\r\n        height={cellHeight}\r\n        fill=\"#f9f9f9\"\r\n        stroke=\"#ddd\"\r\n        strokeWidth=\"1\"\r\n      />\r\n      \r\n      {/* Meal time at the top */}\r\n      <text\r\n        x={x + cellWidth / 2}\r\n        y={y + 12}\r\n        fontSize={config.fontSize.timeLabel}\r\n        textAnchor=\"middle\"\r\n        className=\"time-label\"\r\n      >\r\n        {mealTime}\r\n      </text>\r\n      \r\n      {/* 6 placeholder circles with food category emojis */}\r\n      {allCategories.map((category, index) => {\r\n        const row = Math.floor(index / circlesPerRow);\r\n        const col = index % circlesPerRow;\r\n        const circleX = x + col * circleWidth + circleWidth / 2;\r\n        const circleY = y + 20 + row * circleHeight + circleHeight / 2;\r\n        \r\n        // Check if category is present\r\n        let hasCategory = false;\r\n        let emoji = '';\r\n        \r\n        if (category === 'Added Sugar') {\r\n          hasCategory = mealData[category] && SUGAR_EMOJIS[mealData[category]];\r\n          emoji = SUGAR_EMOJIS[mealData[category]] || '';\r\n        } else {\r\n          hasCategory = mealData[category];\r\n          emoji = CATEGORY_EMOJIS[category] || '';\r\n        }\r\n        \r\n        return (\r\n          <g key={category}>\r\n            {/* Placeholder circle - always grey */}\r\n            <circle\r\n              cx={circleX}\r\n              cy={circleY}\r\n              r={expandedCircleRadius}\r\n              fill=\"#f5f5f5\"\r\n              stroke=\"#ddd\"\r\n              strokeWidth=\"1\"\r\n              opacity={0.3}\r\n            />\r\n            {/* Emoji if category is present */}\r\n            {hasCategory && emoji && (\r\n              <text\r\n                x={circleX}\r\n                y={circleY}\r\n                fontSize={expandedEmojiFontSize}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"central\"\r\n                style={{ fontFamily: 'Apple Color Emoji, Segoe UI Emoji, Noto Color Emoji, sans-serif' }}\r\n              >\r\n                {emoji}\r\n              </text>\r\n            )}\r\n          </g>\r\n        );\r\n      })}\r\n    </g>\r\n  );\r\n};\r\n\r\nconst MealGrid = ({ config, weekDays, patientData, isExpanded }) => {\r\n  if (!patientData || patientData.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <g className=\"meal-grid\">\r\n      {weekDays.map((day, dayIndex) => {\r\n        const dayData = patientData.find(d => {\r\n          const dataDate = new Date(d.Date);\r\n          return dataDate.toDateString() === day.toDateString();\r\n        });\r\n\r\n        if (!dayData) {\r\n          return null;\r\n        }\r\n\r\n        return MEAL_TYPES.map((meal, mealIndex) => {\r\n          const mealData = getMealData(dayData, meal);\r\n          const mealTime = getMealTime(dayData, meal);\r\n          \r\n          // Debug logging removed for production\r\n          \r\n          return (\r\n            <MealCell\r\n              key={`${dayIndex}-${mealIndex}`}\r\n              config={config}\r\n              dayIndex={dayIndex}\r\n              mealIndex={mealIndex}\r\n              mealData={mealData}\r\n              mealTime={mealTime}\r\n              isExpanded={isExpanded}\r\n            />\r\n          );\r\n        });\r\n      })}\r\n    </g>\r\n  );\r\n};\r\n\r\n\r\n// --- Main Component ---\r\nconst MealContentsChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { mealData: patientData, loading, error } = usePatientData(patientId);\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('mealContents');\r\n  const nav = navigation || internalNavigation;\r\n  const containerRef = useRef(null);\r\n  const [containerWidth, setContainerWidth] = useState(500);\r\n\r\n  const config = createChartConfig('mealContents', isExpanded, containerWidth);\r\n  \r\n  // Measure container width for sizing\r\n  useEffect(() => {\r\n    const updateContainerWidth = () => {\r\n      if (containerRef.current) {\r\n        const width = containerRef.current.offsetWidth;\r\n        setContainerWidth(width);\r\n      }\r\n    };\r\n\r\n    updateContainerWidth();\r\n    window.addEventListener('resize', updateContainerWidth);\r\n    return () => window.removeEventListener('resize', updateContainerWidth);\r\n  }, [isExpanded]);\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n  const weekDays = Array.from({ length: 7 }, (_, i) => {\r\n    const day = new Date(startOfWeek);\r\n    day.setDate(startOfWeek.getDate() + i);\r\n    return day;\r\n  });\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = patientData.filter(d => {\r\n    const dataDate = new Date(d.Date);\r\n    return dataDate >= startOfThreeMonths && dataDate <= endOfThreeMonths;\r\n  });\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  // Calculate summary statistics for physician view\r\n  const weekSummary = React.useMemo(() => {\r\n    if (!patientData || patientData.length === 0) return null;\r\n\r\n    const weekData = patientData.filter(d => {\r\n      const dataDate = new Date(d.Date);\r\n      return dataDate >= startOfWeek && dataDate <= endOfWeek;\r\n    });\r\n\r\n    if (weekData.length === 0) return null;\r\n\r\n    // Count food categories across all meals\r\n    const categoryStats = {};\r\n    FOOD_CATEGORIES.forEach(category => {\r\n      categoryStats[category] = 0;\r\n    });\r\n\r\n    // Count sugar levels\r\n    const sugarStats = {};\r\n    SUGAR_CATEGORIES.filter(s => s !== '').forEach(sugar => {\r\n      sugarStats[sugar] = 0;\r\n    });\r\n\r\n    let totalMealsLogged = 0;\r\n    let daysWithMeals = new Set();\r\n\r\n    weekData.forEach(dayData => {\r\n      daysWithMeals.add(dayData.Date);\r\n      \r\n      MEAL_TYPES.forEach(meal => {\r\n        const mealData = getMealData(dayData, meal);\r\n        const hasAnyFood = FOOD_CATEGORIES.some(category => mealData[category]);\r\n        \r\n        if (hasAnyFood) {\r\n          totalMealsLogged++;\r\n          \r\n          // Count each food category\r\n          FOOD_CATEGORIES.forEach(category => {\r\n            if (mealData[category]) {\r\n              categoryStats[category]++;\r\n            }\r\n          });\r\n\r\n          // Count sugar levels\r\n          if (mealData['Added Sugar'] && mealData['Added Sugar'] !== '') {\r\n            sugarStats[mealData['Added Sugar']]++;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Find most common food category\r\n    const mostCommonFood = Object.entries(categoryStats)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    // Calculate sugar frequency\r\n    const totalSugarMeals = Object.values(sugarStats).reduce((sum, count) => sum + count, 0);\r\n    const sugarPercentage = totalMealsLogged > 0 ? \r\n      ((totalSugarMeals / totalMealsLogged) * 100).toFixed(0) : 0;\r\n\r\n    return {\r\n      totalMealsLogged,\r\n      daysWithMeals: daysWithMeals.size,\r\n      mostCommonFood: mostCommonFood[0],\r\n      mostCommonFoodCount: mostCommonFood[1],\r\n      categoryStats,\r\n      sugarPercentage,\r\n      totalSugarMeals\r\n    };\r\n  }, [patientData, startOfWeek, endOfWeek]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = React.useMemo(() => {\r\n    if (!threeMonthData || threeMonthData.length === 0) return null;\r\n\r\n    // Count food categories across all meals\r\n    const categoryStats = {};\r\n    FOOD_CATEGORIES.forEach(category => {\r\n      categoryStats[category] = 0;\r\n    });\r\n\r\n    // Count sugar levels\r\n    const sugarStats = {};\r\n    SUGAR_CATEGORIES.filter(s => s !== '').forEach(sugar => {\r\n      sugarStats[sugar] = 0;\r\n    });\r\n\r\n    let totalMealsLogged = 0;\r\n    let daysWithMeals = new Set();\r\n\r\n    threeMonthData.forEach(dayData => {\r\n      daysWithMeals.add(dayData.Date);\r\n      \r\n      MEAL_TYPES.forEach(meal => {\r\n        const mealData = getMealData(dayData, meal);\r\n        const hasAnyFood = FOOD_CATEGORIES.some(category => mealData[category]);\r\n        \r\n        if (hasAnyFood) {\r\n          totalMealsLogged++;\r\n          \r\n          // Count each food category\r\n          FOOD_CATEGORIES.forEach(category => {\r\n            if (mealData[category]) {\r\n              categoryStats[category]++;\r\n            }\r\n          });\r\n\r\n          // Count sugar levels\r\n          if (mealData['Added Sugar'] && mealData['Added Sugar'] !== '') {\r\n            sugarStats[mealData['Added Sugar']]++;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Find most common food category\r\n    const mostCommonFood = Object.entries(categoryStats)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    // Calculate sugar frequency\r\n    const totalSugarMeals = Object.values(sugarStats).reduce((sum, count) => sum + count, 0);\r\n    const sugarPercentage = totalMealsLogged > 0 ? \r\n      ((totalSugarMeals / totalMealsLogged) * 100).toFixed(0) : 0;\r\n\r\n    return {\r\n      totalMealsLogged,\r\n      daysWithMeals: daysWithMeals.size,\r\n      mostCommonFood: mostCommonFood[0],\r\n      mostCommonFoodCount: mostCommonFood[1],\r\n      categoryStats,\r\n      sugarPercentage,\r\n      totalSugarMeals\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n\r\n  \r\n  return (\r\n      <div className=\"meal-contents-chart-container\">\r\n        <h3 className=\"chart-title\">Meal Contents</h3>\r\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n        <div className={`meal-chart-wrapper ${isExpanded ? 'expanded' : ''}`} ref={containerRef}>\r\n          <svg \r\n            width={config.width} \r\n            height={config.height} \r\n            viewBox={`0 0 ${config.width} ${config.height}`} \r\n            className=\"meal-chart\"\r\n            style={{ maxWidth: '100%', height: 'auto' }}\r\n          >\r\n            <XAxis config={config} weekDays={weekDays} />\r\n            <YAxis config={config} />\r\n            <MealGrid \r\n              config={config} \r\n              weekDays={weekDays} \r\n              patientData={patientData} \r\n              isExpanded={isExpanded}\r\n            />\r\n          </svg>\r\n        </div>\r\n        \r\n        <div className=\"meal-contents-legends-wrapper\">\r\n            <Legend \r\n              title=\"Food Categories\" \r\n              items={FOOD_CATEGORIES.map(category => ({\r\n                label: `${CATEGORY_EMOJIS[category]} ${category}`,\r\n                color: null\r\n              }))}\r\n            />\r\n            <Legend \r\n              title=\"Sugar Levels\" \r\n              items={SUGAR_CATEGORIES.filter(sugar => sugar !== '').map(sugar => ({\r\n                label: `${SUGAR_EMOJIS[sugar]} ${sugar}`,\r\n                color: null\r\n              }))}\r\n            />\r\n        </div>\r\n\r\n        {/* Show summary for physician view only */}\r\n        {viewMode === 'physician' && weekSummary && (\r\n          <div className=\"summary-container\">\r\n            <div className=\"chart-summary\">\r\n              <h4>Week Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Meals Logged:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.totalMealsLogged}/28 possible\r\n                  </span>\r\n                </div>\r\n\r\n\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Added Sugar:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.sugarPercentage}% of meals ({weekSummary.totalSugarMeals}/{weekSummary.totalMealsLogged})\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Food Balance:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.categoryStats && Object.entries(weekSummary.categoryStats)\r\n                      .sort(([,a], [,b]) => b - a)\r\n                      .slice(0, 3)\r\n                      .map(([cat, count]) => `${CATEGORY_EMOJIS[cat]}${count}`)\r\n                      .join(' ')}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {threeMonthSummary && (\r\n              <div className=\"chart-summary\">\r\n                <h4>3-Month Summary</h4>\r\n                <div className=\"summary-stats\">\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Meals Logged:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.totalMealsLogged} meals\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Added Sugar:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.sugarPercentage}% of meals ({threeMonthSummary.totalSugarMeals}/{threeMonthSummary.totalMealsLogged})\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Food Balance:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.categoryStats && Object.entries(threeMonthSummary.categoryStats)\r\n                        .sort(([,a], [,b]) => b - a)\r\n                        .slice(0, 3)\r\n                        .map(([cat, count]) => `${CATEGORY_EMOJIS[cat]}${count}`)\r\n                        .join(' ')}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default MealContentsChart;\r\n","/*\r\n SleepChart.js - Sleep Pattern Monitoring Visualization\r\n \r\n This component provides comprehensive sleep tracking:\r\n - Sleep duration and quality rating visualization\r\n - Weekly sleep pattern analysis\r\n - Color-coded sleep quality indicators\r\n - Interactive tooltips with sleep details\r\n - Navigation controls for time periods\r\n - Integration with patient data and chart navigation\r\n \r\n Architecture:\r\n - Uses custom SVG for bar chart visualization\r\n - Implements sleep quality categorization system\r\n - Provides color-coded quality indicators for easy interpretation\r\n - Supports expandable views\r\n - Implements time-based navigation and data filtering\r\n \r\n Visualizatoin Features:\r\n - Bar chart showing daily sleep duration\r\n - Color-coded quality indicators (Very good, Fairly good, Fairly bad, Very bad)\r\n - Interactive tooltips with detailed sleep information\r\n - Design adapting to container size\r\n - Dynamic Y-axis scaling based on sleep duration range\r\n \r\n Sleep Quality Categories:\r\n - Very good: Optimal sleep quality (green)\r\n - Fairly good: Good sleep quality (blue)\r\n - Fairly bad: Poor sleep quality (light green)\r\n - Very bad: Very poor sleep quality (dark green)\r\n \r\n Clinical Features:\r\n - Sleep duration tracking with recommended ranges\r\n - Quality assessment based on subjective ratings\r\n - Sleep consistency analysis\r\n - Summary statistics for physician view\r\n - Trend analysis over time periods\r\n \r\n Component Structure:\r\n - Chart Container: Main SVG container with sizing\r\n - Y-Axis: Duration scale with hour-based labeling\r\n - X-Axis: Day-of-week labels with date information\r\n - Data Bars: Sleep duration bars with quality color coding\r\n - Legend: Sleep quality explanations\r\n - Tooltip: Detailed sleep information on hover\r\n \r\n Essential for sleep hygiene monitoring and sleep disorder assessment.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\n\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport './SleepChart.css';\r\n\r\n\r\nconst SleepChart = ({ patientId, isExpanded, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { sleepData, loading, error } = usePatientData(patientId, 'sleep');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('sleep');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n  const weekData = sleepData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = sleepData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\r\n\r\n  const formatDateRange = (data) => {\r\n    if (!data || data.length === 0) return '';\r\n    const startDate = new Date(data[0].date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endDate = new Date(data[data.length - 1].date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startDate} to ${endDate}`;\r\n  };\r\n\r\n  const qualityLevels = {\r\n    'Very good': 'var(--chart-color-sleep-very-good)',\r\n    'Fairly good': 'var(--chart-color-sleep-fairly-good)',\r\n    'Fairly bad': 'var(--chart-color-sleep-fairly-bad)',\r\n    'Very bad': 'var(--chart-color-sleep-very-bad)',\r\n  };\r\n\r\n  const getQualityColor = (quality) => qualityLevels[quality] || '#D3D3D3';\r\n\r\n  const legendItems = Object.entries(qualityLevels).map(([label, color]) => ({\r\n    label,\r\n    color,\r\n  }));\r\n\r\n  // Calculate summary statistics for physician view\r\n  const weekSummary = useMemo(() => {\r\n    if (!weekData || weekData.length === 0) return null;\r\n\r\n    const totalHours = weekData.reduce((sum, day) => sum + day.hours, 0);\r\n    const avgHours = (totalHours / weekData.length).toFixed(1);\r\n\r\n    // Count quality levels\r\n    const qualityCounts = {};\r\n    Object.keys(qualityLevels).forEach(quality => {\r\n      qualityCounts[quality] = 0;\r\n    });\r\n\r\n    weekData.forEach(day => {\r\n      if (qualityCounts[day.quality] !== undefined) {\r\n        qualityCounts[day.quality]++;\r\n      }\r\n    });\r\n\r\n    // Find most common quality\r\n    const mostCommonQuality = Object.entries(qualityCounts)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    // Calculate sleep consistency (how much variation in sleep hours)\r\n    const hourVariations = weekData.map(day => Math.abs(day.hours - parseFloat(avgHours)));\r\n    const avgVariation = (hourVariations.reduce((sum, v) => sum + v, 0) / hourVariations.length).toFixed(1);\r\n\r\n    // Sleep quality score (Very good=4, Fairly good=3, Fairly bad=2, Very bad=1)\r\n    const qualityScores = {\r\n      'Very good': 4,\r\n      'Fairly good': 3,\r\n      'Fairly bad': 2,\r\n      'Very bad': 1\r\n    };\r\n    const avgQualityScore = weekData.reduce((sum, day) => sum + (qualityScores[day.quality] || 0), 0) / weekData.length;\r\n    const qualityAssessment = avgQualityScore >= 3.5 ? 'Good' : avgQualityScore >= 2.5 ? 'Fair' : 'Poor';\r\n\r\n    // Count nights with adequate sleep (7+ hours)\r\n    const adequateSleepNights = weekData.filter(day => day.hours >= 7).length;\r\n\r\n    return {\r\n      totalHours: totalHours.toFixed(1),\r\n      avgHours,\r\n      mostCommonQuality: mostCommonQuality[0],\r\n      mostCommonQualityCount: mostCommonQuality[1],\r\n      avgVariation,\r\n      qualityAssessment,\r\n      adequateSleepNights,\r\n      daysTracked: weekData.length\r\n    };\r\n  }, [weekData]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = useMemo(() => {\r\n    if (!threeMonthData || threeMonthData.length === 0) return null;\r\n\r\n    const totalHours = threeMonthData.reduce((sum, day) => sum + day.hours, 0);\r\n    const avgHours = (totalHours / threeMonthData.length).toFixed(1);\r\n\r\n    // Count quality levels\r\n    const qualityCounts = {};\r\n    Object.keys(qualityLevels).forEach(quality => {\r\n      qualityCounts[quality] = 0;\r\n    });\r\n\r\n    threeMonthData.forEach(day => {\r\n      if (qualityCounts[day.quality] !== undefined) {\r\n        qualityCounts[day.quality]++;\r\n      }\r\n    });\r\n\r\n    // Find most common quality\r\n    const mostCommonQuality = Object.entries(qualityCounts)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    // Calculate sleep consistency (how much variation in sleep hours)\r\n    const hourVariations = threeMonthData.map(day => Math.abs(day.hours - parseFloat(avgHours)));\r\n    const avgVariation = (hourVariations.reduce((sum, v) => sum + v, 0) / hourVariations.length).toFixed(1);\r\n\r\n    return {\r\n      totalHours: totalHours.toFixed(1),\r\n      avgHours,\r\n      mostCommonQuality: mostCommonQuality[0],\r\n      mostCommonQualityCount: mostCommonQuality[1],\r\n      avgVariation,\r\n      daysTracked: threeMonthData.length\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n  return (\r\n      <div className=\"sleep-chart-content\">\r\n        <h3 className=\"chart-title\">Sleep Quality & Duration</h3>\r\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n        <div className=\"sleep-chart\">\r\n          {/* Sleep Quality Indicators Row */}\r\n          <div className=\"sleep-quality-row\">\r\n            {weekData.map((day, index) => (\r\n              <div key={`quality-${index}`} className=\"sleep-quality-item\">\r\n                <div \r\n                  className=\"sleep-quality-indicator\"\r\n                  style={{ backgroundColor: getQualityColor(day.quality) }}\r\n                ></div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          {/* Bed Icons Row */}\r\n          <div className=\"bed-icons-row\">\r\n            {weekData.map((day, index) => (\r\n              <div key={`bed-${index}`} className=\"bed-item\">\r\n                <div className=\"bed-icon-wrapper\">\r\n                  <svg viewBox=\"0 0 486.5 225.1\" className=\"bed-icon\">\r\n                    <path d=\"M471.9,68.9c-8,0-14.5,6.5-14.5,14.5v68.6H26.1l-.6-139.3c0-7-5.8-12.7-12.8-12.7h0C5.7,0,0,5.7,0,12.8v199.6c0,7,5.7,12.8,12.7,12.8s12.8-5.7,12.8-12.8v-37h431.9v35.2c0,8,6.5,14.5,14.5,14.5s14.5-6.5,14.5-14.5v-127.1c0-8-6.5-14.5-14.5-14.5ZM483.7,210.6c0,6.5-5.3,11.8-11.8,11.8s-11.8-5.3-11.8-11.8v-38H22.7v39.7c0,5.5-4.5,10-10,10s-10-4.5-10-10V12.8C2.8,7.3,7.3,2.8,12.7,2.8h0c5.5,0,9.9,4.5,10,9.9l.6,142.1h436.8v-71.4c0-6.5,5.3-11.7,11.8-11.7s11.8,5.3,11.8,11.7v127.1Z\" fill=\"#D2B48C\"/>\r\n                    <path d=\"M29.9,94.2v54.5h425.4v-54.5H29.9ZM452.5,145.9H32.7v-48.9h419.8v48.9Z\" fill=\"#e0e0e0\"/>\r\n                    <rect x=\"32.7\" y=\"97\" width={`${(day.hours / 10) * 419.8}`} height=\"48.9\" fill=\"#FF4500\" className=\"sleep-fill-rect\" />\r\n                    <path d=\"M112.8,46.3h-55.4c-12.1,0-22,9.9-22,22s9.9,22,22,22h55.4c12.1,0,22-9.9,22-22s-9.9-22-22-22ZM112.8,87.5h-55.4c-10.6,0-19.2-8.6-19.2-19.2s8.6-19.2,19.2-19.2h55.4c10.6,0,19.2,8.6,19.2,19.2s-8.6,19.2-19.2,19.2Z\" fill=\"#FFFFFF\" stroke=\"#AAAAAA\" strokeWidth=\"1\"/>\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          {/* Sleep Information Row */}\r\n          <div className=\"sleep-info-row\">\r\n            {weekData.map((day, index) => (\r\n              <div key={`info-${index}`} className=\"sleep-info-item\">\r\n                <div className=\"sleep-hours\">{day.hours.toFixed(1)}h</div>\r\n                <div className=\"day-label\">{['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][new Date(day.date).getDay()]}</div>\r\n                <div className=\"date-label\">{new Date(day.date).getDate()}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        \r\n        <Legend title=\"Sleep Quality\" items={legendItems} />\r\n\r\n        {/* Show summary for physician view only */}\r\n        {viewMode === 'physician' && weekSummary && (\r\n          <div className=\"summary-container\">\r\n            <div className=\"chart-summary\">\r\n              <h4>Week Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Average Sleep:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.avgHours} hours/night\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Total Sleep:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.totalHours} hours\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Sleep Consistency:</span>\r\n                  <span className=\"stat-value\">\r\n                    ±{weekSummary.avgVariation} hours variation\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Common Quality:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.mostCommonQuality} ({weekSummary.mostCommonQualityCount}x)\r\n                  </span>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n            \r\n            {threeMonthSummary && (\r\n              <div className=\"chart-summary\">\r\n                <h4>3-Month Summary</h4>\r\n                <div className=\"summary-stats\">\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Average Sleep:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.avgHours} hours/night\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Total Sleep:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.totalHours} hours\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Sleep Consistency:</span>\r\n                    <span className=\"stat-value\">\r\n                      ±{threeMonthSummary.avgVariation} hours variation\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Common Quality:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.mostCommonQuality} ({threeMonthSummary.mostCommonQualityCount}x)\r\n                    </span>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default SleepChart;\r\n","/*\r\n useVisualizations.js - Visualization Management Hook\r\n \r\n This hook manages the visualization system across dashboard types by creating and\r\n maintaining visualization component registry, determining available visualizations\r\n based on data availability, managing visualization selection and ordering, and\r\n supporting both patient and physician dashboard configurations.\r\n \r\n Architecture:\r\n - Uses React hooks for state management and memoization\r\n - Implements component registry pattern for dynamic rendering\r\n - Provides data-driven visualization availability\r\n - Supports multiple dashboard configurations\r\n \r\n Visualization Types:\r\n - glucose: Blood glucose monitoring charts\r\n - bloodPressure: Blood pressure tracking charts\r\n - exercise: Physical activity visualization\r\n - mood: Mood calendar and tracking\r\n - pain: Pain reporting with body mapping\r\n - mealContents: Nutritional intake tracking\r\n - sleep: Sleep pattern analysis\r\n \r\n Component Registry:\r\n - Maps visualization types to React components\r\n - Provides configuration for each visualization type\r\n - Handles component imports and lazy loading\r\n - Maintains consistent component interfaces\r\n \r\n Data Availability:\r\n - Checks data availability for each visualization type\r\n - Filters visualizations based on actual data presence\r\n - Provides fallback for missing data scenarios\r\n - Ensures only relevant visualizations are shown\r\n */\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport { VISUALIZATION_CONFIG, DASHBOARD_CONFIG } from '../constants';\r\n\r\n// Import all chart components\r\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\r\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\r\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\r\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\r\nimport PainChart from '../components/patient_charts/PainChart';\r\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\r\nimport SleepChart from '../components/patient_charts/SleepChart';\r\n\r\n/*\r\n Shared hook for managing visualizations across different dashboard types\r\n \r\n @param {string} viewMode - 'patient' or 'physician'\r\n @param {Object} data - Patient data object\r\n @returns {Object} Visualization state and utilities\r\n */\r\nconst useVisualizations = (viewMode, data) => {\r\n  const config = DASHBOARD_CONFIG[viewMode];\r\n  \r\n  // Create visualization registry with components\r\n  const allVisualizations = useMemo(() => ({\r\n    pain: { ...VISUALIZATION_CONFIG.pain, component: PainChart },\r\n    bloodPressure: { ...VISUALIZATION_CONFIG.bloodPressure, component: BloodPressureChart },\r\n    glucose: { ...VISUALIZATION_CONFIG.glucose, component: GlucoseChart },\r\n    exercise: { ...VISUALIZATION_CONFIG.exercise, component: ExerciseChart },\r\n    mealContents: { ...VISUALIZATION_CONFIG.mealContents, component: MealContentsChart },\r\n    mood: { ...VISUALIZATION_CONFIG.mood, component: MoodCalendar },\r\n    sleep: { ...VISUALIZATION_CONFIG.sleep, component: SleepChart },\r\n  }), []);\r\n\r\n  // Determine available visualizations based on data\r\n  const availableVisualizations = useMemo(() => {\r\n    if (!data) return {};\r\n\r\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\r\n      const dataKey = `${key}Data`;\r\n      // Special case for meal contents\r\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\r\n        acc[key] = viz;\r\n      } else if (data[dataKey] && data[dataKey].length > 0) {\r\n        acc[key] = viz;\r\n      }\r\n      return acc;\r\n    }, {});\r\n  }, [data, allVisualizations]);\r\n\r\n  // Create dynamic selected visualizations based on available ones\r\n  const selectedVisualizations = useMemo(() => {\r\n    const availableKeys = Object.keys(availableVisualizations);\r\n    \r\n    // Create chart IDs for all available visualizations in the same order as they appear\r\n    const chartIds = availableKeys.map((_, index) => `${viewMode}-chart-${index}`);\r\n    \r\n    return chartIds.reduce((acc, chartId, index) => {\r\n      acc[chartId] = availableKeys[index];\r\n      return acc;\r\n    }, {});\r\n  }, [availableVisualizations, viewMode]);\r\n\r\n  const handleVisualizationChange = (chartId, visualizationType) => {\r\n    // This function is kept for compatibility but may not be needed\r\n    // since we're now showing all available visualizations\r\n  };\r\n\r\n  return {\r\n    allVisualizations,\r\n    availableVisualizations,\r\n    selectedVisualizations,\r\n    handleVisualizationChange,\r\n    config\r\n  };\r\n};\r\n\r\nexport default useVisualizations;\r\n","/*\r\n Placeholder.js - Shared Placeholder Component\r\n \r\n This component provides consistent placeholder styling for:\r\n - No data scenarios\r\n - Loading states\r\n - Error states\r\n - Empty chart containers\r\n \r\n Replaces redundant chart-placeholder divs throughout the application\r\n with a unified, maintainable component.\r\n */\r\n\r\nimport React from 'react';\r\nimport './Placeholder.css';\r\n\r\n/*\r\n Universal placeholder component for consistent styling\r\n \r\n @param {string} message - The placeholder message to display\r\n @param {string} type - The type of placeholder ('no-data', 'loading', 'error', 'select-patient')\r\n @param {string} className - Additional CSS classes\r\n @returns {JSX.Element} The placeholder component\r\n */\r\nconst Placeholder = ({ message, type = 'no-data', className = '' }) => {\r\n  const getIcon = () => {\r\n    switch (type) {\r\n      case 'loading':\r\n        return <div className=\"placeholder-spinner\"></div>;\r\n      case 'error':\r\n        return <div className=\"placeholder-icon error\">!</div>;\r\n      case 'select-patient':\r\n        return <div className=\"placeholder-icon info\">👤</div>;\r\n      default:\r\n        return <div className=\"placeholder-icon no-data\">—</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`placeholder ${type} ${className}`}>\r\n      {getIcon()}\r\n      <p className=\"placeholder-message\">{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Placeholder;\r\n","/*\r\n useVisualizationHelpers.js - Visualization Helper Functions Hook\r\n \r\n This hook provides common visualization management functions including managing\r\n chart expansion and collapse states, handling visualization rendering logic,\r\n providing shared functionality between dashboard types, and managing expanded\r\n item state across components.\r\n \r\n Reduces code duplication between PatientDashboard and PhysicianDashboard components.\r\n */\r\n\r\nimport React from 'react';\r\nimport Placeholder from '../components/ui/Placeholder';\r\n\r\n/*\r\n Shared hook for common visualization helper functions\r\n Extracts duplicate logic from PatientDashboard and PhysicianDashboard\r\n \r\n - @param {string} patientId - The patient identifier\r\n - @param {Object} allVisualizations - All available visualizations\r\n - @param {Object} selectedVisualizations - Currently selected visualizations\r\n - @returns {Object} Helper functions and state\r\n */\r\nconst useVisualizationHelpers = (patientId, allVisualizations, selectedVisualizations) => {\r\n  const [expandedItem, setExpandedItem] = React.useState(null);\r\n\r\n  const handleExpand = React.useCallback((itemId) => {\r\n    setExpandedItem(prev => (prev === itemId ? null : itemId));\r\n  }, []);\r\n\r\n  const renderVisualization = React.useCallback((visualizationType, itemId) => {\r\n    if (!patientId) {\r\n      return <Placeholder message=\"Please select a patient to view data.\" type=\"select-patient\" />;\r\n    }\r\n    \r\n    const viz = allVisualizations[visualizationType];\r\n    if (!viz) return <Placeholder message=\"Invalid visualization\" type=\"error\" />;\r\n\r\n    const Component = viz.component;\r\n    const isExpanded = expandedItem === itemId;\r\n    return <Component \r\n      patientId={patientId} \r\n      isExpanded={isExpanded} \r\n      onExpand={() => handleExpand(itemId)}\r\n      viewMode=\"patient\" // This will be overridden by the calling component\r\n    />;\r\n  }, [patientId, allVisualizations, expandedItem, handleExpand]);\r\n\r\n  return {\r\n    expandedItem,\r\n    handleExpand,\r\n    renderVisualization\r\n  };\r\n};\r\n\r\nexport default useVisualizationHelpers;\r\n","/**\r\n * PatientInfoCard.js - Patient Information Display Component\r\n * \r\n * This component displays comprehensive patient information:\r\n * - Basic demographics (name, age, gender, patient number)\r\n * - Medical conditions and diagnoses\r\n * - Current medications with dosage and schedule information\r\n * - Adapts display detail based on view mode (patient vs physician)\r\n * - Handles loading, error, and empty data states\r\n * \r\n * Provides essential patient context for both dashboard views.\r\n */\r\n\r\nimport React from 'react';\r\nimport './PatientInfoCard.css';\r\n\r\n/**\r\n * Shared component for displaying patient information\r\n * Used in both Patient and Physician dashboards\r\n */\r\nconst PatientInfoCard = ({ \r\n  patientInfo, \r\n  loading = false, \r\n  error = null, \r\n  variant = 'patient', // 'patient' or 'physician'\r\n  className = '' \r\n}) => {\r\n  if (loading) {\r\n    return (\r\n      <div className={`patient-info-card ${variant} ${className}`}>\r\n        <h3>Patient Information</h3>\r\n        <p>Loading patient info...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`patient-info-card ${variant} ${className}`}>\r\n        <h3>Patient Information</h3>\r\n        <p>Error loading data.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!patientInfo) {\r\n    return (\r\n      <div className={`patient-info-card ${variant} ${className}`}>\r\n        <h3>Patient Information</h3>\r\n        <p>No patient data found.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`patient-info-card ${variant} ${className}`}>\r\n      <h3>Patient Information</h3>\r\n      <div className=\"patient-basic-info\">\r\n        <div><span>Name:</span> {patientInfo.name}</div>\r\n        <div><span>Patient #:</span> {patientInfo.patientNumber}</div>\r\n        <div><span>Age:</span> {patientInfo.age} years</div>\r\n        <div><span>Gender:</span> {patientInfo.gender || 'Not specified'}</div>\r\n      </div>\r\n      \r\n      <div className=\"conditions-section\">\r\n        <span>Conditions:</span>\r\n        {patientInfo.conditions?.length ? (\r\n          <div className=\"conditions-list\">\r\n            {patientInfo.conditions.map((condition, i) => (\r\n              <div key={i} className=\"condition-item\">{condition}</div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <span> No conditions recorded.</span>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"medications-section\">\r\n        <span>Medications:</span>\r\n        {patientInfo.detailedMedications?.length ? (\r\n          <div className=\"medications-list\">\r\n            {variant === 'patient' ? (\r\n              // Detailed view for patient dashboard\r\n              patientInfo.detailedMedications.map((med, i) => (\r\n                <div key={i} className=\"medication-item\">\r\n                  <div className=\"medication-name\">{med.name}</div>\r\n                  <div className=\"medication-details\">\r\n                    <span className=\"medication-schedule\">{med.schedule}</span>\r\n                  </div>\r\n                  {med.dosage && <div className=\"medication-dosage\">{med.dosage}</div>}\r\n                </div>\r\n              ))\r\n            ) : (\r\n              // Simplified view for physician dashboard\r\n              patientInfo.detailedMedications.map((med, i) => (\r\n                <div key={i} className=\"medication-item\">{med.name}</div>\r\n              ))\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <span> No medications recorded.</span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientInfoCard;\r\n","/*\r\n - VisualizationWrapper.js - Universal Chart Container Component\r\n \r\n - This component provides a standardized wrapper for all chart visualizations by handling loading,\r\n  error, and no-data states, providing chart navigation controls (previous/next), managing \r\n  expand/collapse functionality, displaying chart titles and controls, and ensuring consistent \r\n  chart presentation across the application.\r\n \r\n - Serves as the foundation for all health metric chart displays.\r\n */\r\n\r\nimport React from 'react';\r\nimport Placeholder from './ui/Placeholder';\r\n\r\n/*\r\n - Shared component for visualization containers used in both Patient and Physician dashboards\r\n - Includes functionality previously in ChartContainer: navigation, loading states, error handling\r\n \r\n - @param {Object} props - Component props\r\n - @param {string} props.id - Unique identifier for the visualization\r\n - @param {string} props.className - CSS class names\r\n - @param {string} props.selectedViz - Selected visualization type\r\n - @param {Object} props.availableVisualizations - Available visualizations\r\n - @param {Object} props.allVisualizations - All visualization configurations\r\n - @param {Function} props.onVisualizationChange - Handler for visualization changes\r\n - @param {Function} props.onExpand - Handler for expand/collapse\r\n - @param {boolean} props.isExpanded - Whether the visualization is expanded\r\n - @param {Function} props.renderVisualization - Function to render the visualization\r\n - @param {boolean} props.disabled - Whether the visualization is disabled\r\n - @param {string} props.placeholderText - Text to show when no data is available\r\n - @param {string} props.title - Chart title\r\n - @param {boolean} props.isLoading - Whether the chart is loading\r\n - @param {string|null} props.error - Error message if any\r\n - @param {boolean} props.noData - Whether there's no data to display\r\n - @param {boolean} props.showNavigation - Whether to show navigation controls\r\n - @param {Function} props.onPrev - Previous navigation handler\r\n - @param {Function} props.onNext - Next navigation handler\r\n - @param {string} props.navigationLabel - Label for navigation controls\r\n - @returns {JSX.Element} The visualization wrapper component\r\n */\r\nconst VisualizationWrapper = ({ \r\n  id, \r\n  className, \r\n  selectedViz, \r\n  availableVisualizations, \r\n  allVisualizations,\r\n  onVisualizationChange, \r\n  onExpand, \r\n  isExpanded, \r\n  renderVisualization,\r\n  disabled = false,\r\n  placeholderText = \"No data available for this patient.\",\r\n  // ChartContainer props\r\n  title,\r\n  isLoading = false,\r\n  error = null,\r\n  noData = false,\r\n  showNavigation = true,\r\n  onPrev,\r\n  onNext,\r\n  navigationLabel = 'Week'\r\n}) => {\r\n  const viz = allVisualizations[selectedViz];\r\n  \r\n  // Handle loading state\r\n  if (isLoading) {\r\n    return (\r\n      <div className={`visualization-wrapper ${isExpanded ? 'expanded' : ''} ${className}`}>\r\n        <Placeholder message=\"Loading data...\" type=\"loading\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Handle error state\r\n  if (error) {\r\n    return (\r\n      <div className={`visualization-wrapper ${isExpanded ? 'expanded' : ''} ${className}`}>\r\n        <Placeholder message={`Error: ${error}`} type=\"error\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Handle no data state\r\n  if (noData) {\r\n    return (\r\n      <div className={`visualization-wrapper ${isExpanded ? 'expanded' : ''} ${className}`}>\r\n        <Placeholder message=\"No data available\" type=\"no-data\" />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className={`visualization-wrapper ${isExpanded ? 'expanded' : ''} ${className}`}>\r\n      <div className=\"visualization-header\">\r\n        <div className=\"visualization-title-group\">\r\n          <h3 className=\"visualization-title\">\r\n            {title || viz?.name || 'Unknown Visualization'}\r\n          </h3>\r\n        </div>\r\n        <div className=\"visualization-controls\">\r\n          {showNavigation && onPrev && onNext && (\r\n            <div className=\"chart-navigation\">\r\n              <button \r\n                className=\"nav-button prev\" \r\n                onClick={onPrev}\r\n                aria-label={`Previous ${navigationLabel}`}\r\n              >\r\n                ‹\r\n              </button>\r\n              <button \r\n                className=\"nav-button next\" \r\n                onClick={onNext}\r\n                aria-label={`Next ${navigationLabel}`}\r\n              >\r\n                ›\r\n              </button>\r\n            </div>\r\n          )}\r\n          <button onClick={() => onExpand(id)} className=\"expand-button\">\r\n            {isExpanded ? 'Collapse' : 'Expand'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"visualization-content\">\r\n        {Object.keys(availableVisualizations).length === 0 ? (\r\n          <Placeholder message={placeholderText} type=\"no-data\" />\r\n        ) : (\r\n          renderVisualization(selectedViz, id)\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VisualizationWrapper;\r\n","/**\r\n DashboardGrid.js - Chart Grid Layout Component\r\n \r\n This component provides a flexible grid layout system for organizing charts by rendering all \r\n available visualizations in a grid, handling expanded/collapsed chart states, integrating chart \r\n navigation controls, and providing placeholder states for empty data scenarios.\r\n \r\n Acts as the main container for organizing multiple health metric visualizations.\r\n */\r\n\r\nimport React from 'react';\r\nimport VisualizationWrapper from './VisualizationWrapper';\r\nimport Placeholder from './ui/Placeholder';\r\nimport './DashboardGrid.css';\r\n\r\n/*\r\n Shared component for rendering dashboard grids with visualization wrappers\r\n Shows all available visualizations instead of using dropdown selectors\r\n \r\n @param {Object} props - Component props\r\n @param {string} props.viewMode - 'patient' or 'physician'\r\n @param {Object} props.selectedVisualizations - Currently selected visualizations\r\n @param {Object} props.availableVisualizations - Available visualizations\r\n @param {Object} props.allVisualizations - All visualization configurations\r\n @param {Function} props.onVisualizationChange - Handler for visualization changes\r\n @param {Function} props.onExpand - Handler for expand/collapse\r\n @param {string|null} props.expandedItem - Currently expanded item ID\r\n @param {Function} props.renderVisualization - Function to render visualizations\r\n @param {boolean} props.disabled - Whether the grid is disabled\r\n @param {string} props.placeholderText - Text to show when no data is available\r\n @param {boolean} props.showSummaries - Whether to show summaries (unused)\r\n @param {Object} props.summaryTexts - Summary texts (unused)\r\n @param {Function} props.onSummaryChange - Summary change handler (unused)\r\n @param {Object} props.chartNavigation - Navigation objects for each chart type\r\n @returns {JSX.Element} The dashboard grid component\r\n */\r\nconst DashboardGrid = ({\r\n  viewMode, // 'patient' or 'physician'\r\n  selectedVisualizations,\r\n  availableVisualizations,\r\n  allVisualizations,\r\n  onVisualizationChange,\r\n  onExpand,\r\n  expandedItem,\r\n  renderVisualization,\r\n  disabled = false,\r\n  placeholderText = \"No data available for this patient.\",\r\n  // New props for physician summary functionality\r\n  showSummaries = false,\r\n  summaryTexts = {},\r\n  onSummaryChange = null,\r\n  // Navigation props\r\n  chartNavigation = {}\r\n}) => {\r\n  // Configuration for different view modes\r\n  const gridConfig = {\r\n    patient: {\r\n      className: 'dashboard-grid',\r\n      chartClassNames: ['visualization-box']\r\n    },\r\n    physician: {\r\n      className: 'physician-charts-grid',\r\n      chartClassNames: ['physician-chart-container']\r\n    }\r\n  };\r\n\r\n  const config = gridConfig[viewMode];\r\n\r\n  // Get all available visualization types\r\n  const availableVizTypes = Object.keys(availableVisualizations);\r\n\r\n  // If there's an expanded item, show only that\r\n  if (expandedItem) {\r\n    const selectedViz = selectedVisualizations[expandedItem];\r\n    const navigation = chartNavigation[selectedViz];\r\n    \r\n    const wrapperProps = {\r\n      id: expandedItem,\r\n      className: `${config.chartClassNames[0]} expanded-view`,\r\n      selectedViz: selectedViz,\r\n      availableVisualizations: availableVisualizations,\r\n      allVisualizations: allVisualizations,\r\n      onVisualizationChange: onVisualizationChange,\r\n      onExpand: onExpand,\r\n      isExpanded: true,\r\n      renderVisualization: renderVisualization,\r\n      disabled: disabled,\r\n      placeholderText: placeholderText,\r\n      onPrev: navigation?.goToPrevious,\r\n      onNext: navigation?.goToNext,\r\n      navigationLabel: navigation?.navigationLabel || 'Week'\r\n    };\r\n\r\n    return <VisualizationWrapper {...wrapperProps} />;\r\n  }\r\n\r\n  // If no visualizations available, show placeholder\r\n  if (availableVizTypes.length === 0) {\r\n    return (\r\n      <div className={config.className}>\r\n        <Placeholder message={placeholderText} type=\"no-data\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render all available visualizations\r\n  return (\r\n    <div className={config.className}>\r\n      {availableVizTypes.map((vizType, index) => {\r\n        const chartId = `${viewMode}-chart-${index}`;\r\n        \r\n        const navigation = chartNavigation[vizType];\r\n        const wrapperProps = {\r\n          key: chartId,\r\n          id: chartId,\r\n          className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\r\n          selectedViz: vizType,\r\n          availableVisualizations: availableVisualizations,\r\n          allVisualizations: allVisualizations,\r\n          onVisualizationChange: onVisualizationChange,\r\n          onExpand: onExpand,\r\n          isExpanded: expandedItem === chartId,\r\n          renderVisualization: renderVisualization,\r\n          disabled: disabled,\r\n          placeholderText: placeholderText,\r\n          onPrev: navigation?.goToPrevious,\r\n          onNext: navigation?.goToNext,\r\n          navigationLabel: navigation?.navigationLabel || 'Week'\r\n        };\r\n\r\n        return <VisualizationWrapper {...wrapperProps} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardGrid;\r\n","/*\r\n PatientDashboard.js - Patient View Dashboard Component\r\n \r\n This component renders the patient-focused dashboard view with patient information,\r\n chart navigation controls, expandable chart views, and integration with all health\r\n metric visualizations.\r\n \r\n Architecture:\r\n - Uses custom hooks for data management, visualization handling, and navigation\r\n - Implements expandable chart views\r\n - Provides educational information for patients\r\n - Handles loading and error states gracefully\r\n \r\n Custom Hooks Used:\r\n - usePatientData: Manages patient data fetching and caching\r\n - useVisualizations: Handles visualization configuration and availability\r\n - useVisualizationHelpers: Provides chart expansion and rendering utilities\r\n - useChartNavigation: Manages time-based navigation for each chart type\r\n \r\n Component Structure:\r\n - PatientInfoCard: Displays patient demographics and medication information\r\n - DashboardGrid: Renders the chart grid with navigation and expansion controls\r\n - Individual chart components for each health metric\r\n \r\n State Management:\r\n - Uses custom hooks for centralized state management\r\n - Handles chart expansion state through useVisualizationHelpers\r\n - Manages navigation state for each chart type independently\r\n */\r\n\r\nimport React from 'react';\r\nimport usePatientData from './hooks/usePatientData';\r\nimport useVisualizations from './hooks/useVisualizations';\r\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\r\nimport useChartNavigation from './hooks/useChartNavigation';\r\nimport PatientInfoCard from './components/PatientInfoCard';\r\nimport DashboardGrid from './components/DashboardGrid';\r\nimport './PatientDashboard.css';\r\n\r\nconst PatientDashboard = ({ patientId }) => {\r\n  const { data, loading, error } = usePatientData(patientId);\r\n  const { \r\n    allVisualizations, \r\n    availableVisualizations, \r\n    selectedVisualizations, \r\n    handleVisualizationChange \r\n  } = useVisualizations('patient', data);\r\n  \r\n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\r\n    patientId, \r\n    allVisualizations, \r\n    selectedVisualizations\r\n  );\r\n\r\n  // Create universal navigation for each chart type\r\n  const glucoseNavigation = useChartNavigation('glucose');\r\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\r\n  const exerciseNavigation = useChartNavigation('exercise');\r\n  const sleepNavigation = useChartNavigation('sleep');\r\n  const painNavigation = useChartNavigation('pain');\r\n  const moodNavigation = useChartNavigation('mood');\r\n  const mealContentsNavigation = useChartNavigation('mealContents');\r\n\r\n  const chartNavigation = {\r\n    glucose: glucoseNavigation,\r\n    bloodPressure: bloodPressureNavigation,\r\n    exercise: exerciseNavigation,\r\n    sleep: sleepNavigation,\r\n    pain: painNavigation,\r\n    mood: moodNavigation,\r\n    mealContents: mealContentsNavigation\r\n  };\r\n\r\n  // Override renderVisualization to set correct viewMode\r\n  const renderVisualizationWithMode = (visualizationType, boxId) => {\r\n    const viz = allVisualizations[visualizationType];\r\n    if (!viz) return <div>Invalid visualization</div>;\r\n\r\n    const Component = viz.component;\r\n    const isExpanded = expandedItem === boxId;\r\n    const navigation = chartNavigation[visualizationType];\r\n    \r\n    return <Component \r\n      patientId={patientId} \r\n      isExpanded={isExpanded} \r\n      onExpand={() => handleExpand(boxId)}\r\n      viewMode=\"patient\"\r\n      navigation={navigation}\r\n    />;\r\n  };\r\n\r\n  const patientInfo = data?.patientInfo;\r\n\r\n  if (loading) return <div className=\"loading-screen\">Loading patient data...</div>;\r\n  if (error) return <div className=\"error-screen\">Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"patient-dashboard\">\r\n      <PatientInfoCard \r\n        patientInfo={patientInfo}\r\n        loading={loading}\r\n        error={error}\r\n        variant=\"patient\"\r\n      />\r\n\r\n      <DashboardGrid\r\n        viewMode=\"patient\"\r\n        selectedVisualizations={selectedVisualizations}\r\n        availableVisualizations={availableVisualizations}\r\n        allVisualizations={allVisualizations}\r\n        onVisualizationChange={handleVisualizationChange}\r\n        onExpand={handleExpand}\r\n        expandedItem={expandedItem}\r\n        renderVisualization={renderVisualizationWithMode}\r\n        chartNavigation={chartNavigation}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientDashboard;\r\n","/*\r\n PhysicianDashboard.js - Physician View Dashboard Component\r\n \r\n This component renders the physician-focused dashboard view with clinical overview\r\n optimized for healthcare providers, patient information with medical context,\r\n chart expansion capabilities, and support for clinical notes and observations.\r\n \r\n Architecture:\r\n - Designed for physicians to monitor multiple health metrics simultaneously\r\n - Provides clinical summaries and statistical analysis\r\n - Implements professional medical interface design\r\n - Handles patient selection and data validation\r\n \r\n Custom Hooks Used:\r\n - usePatientData: Manages patient data fetching and caching\r\n - useVisualizations: Handles visualization configuration and availability\r\n - useVisualizationHelpers: Provides chart expansion and rendering utilities\r\n - useChartNavigation: Manages time-based navigation for each chart type\r\n \r\n Component Structure:\r\n - Physician header with clinical context\r\n - PatientInfoCard: Displays patient demographics and medical information\r\n - DashboardGrid: Renders the chart grid with clinical summaries\r\n - Individual chart components with physician-specific features\r\n \r\n State Management:\r\n - Manages selected patient state independently from parent\r\n - Uses custom hooks for centralized state management\r\n - Handles chart expansion state through useVisualizationHelpers\r\n - Manages navigation state for each chart type independently\r\n \r\n Clinical Features:\r\n - Summary statistics for each health metric\r\n - Trend analysis and pattern recognition\r\n - Professional medical interface design\r\n - Comprehensive data visualization for clinical decision making\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport usePatientData from './hooks/usePatientData';\r\nimport useVisualizations from './hooks/useVisualizations';\r\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\r\nimport useChartNavigation from './hooks/useChartNavigation';\r\nimport PatientInfoCard from './components/PatientInfoCard';\r\nimport DashboardGrid from './components/DashboardGrid';\r\nimport Placeholder from './components/ui/Placeholder';\r\nimport './PhysicianDashboard.css';\r\n\r\nconst PhysicianDashboard = ({ patientId: initialPatientId }) => {\r\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\r\n  const { data, loading, error } = usePatientData(selectedPatientId);\r\n  \r\n  // Update selected patient if prop changes\r\n  React.useEffect(() => {\r\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\r\n      setSelectedPatientId(initialPatientId);\r\n    }\r\n  }, [initialPatientId, selectedPatientId]);\r\n\r\n  const { \r\n    allVisualizations, \r\n    availableVisualizations, \r\n    selectedVisualizations, \r\n    handleVisualizationChange \r\n  } = useVisualizations('physician', data);\r\n\r\n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\r\n    selectedPatientId, \r\n    allVisualizations, \r\n    selectedVisualizations\r\n  );\r\n\r\n  // Create universal navigation for each chart type\r\n  const glucoseNavigation = useChartNavigation('glucose');\r\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\r\n  const exerciseNavigation = useChartNavigation('exercise');\r\n  const sleepNavigation = useChartNavigation('sleep');\r\n  const painNavigation = useChartNavigation('pain');\r\n  const moodNavigation = useChartNavigation('mood');\r\n  const mealContentsNavigation = useChartNavigation('mealContents');\r\n\r\n  const chartNavigation = {\r\n    glucose: glucoseNavigation,\r\n    bloodPressure: bloodPressureNavigation,\r\n    exercise: exerciseNavigation,\r\n    sleep: sleepNavigation,\r\n    pain: painNavigation,\r\n    mood: moodNavigation,\r\n    mealContents: mealContentsNavigation\r\n  };\r\n\r\n  // Override renderVisualization to set correct viewMode and handle no patient case\r\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\r\n    if (!selectedPatientId) {\r\n      return <Placeholder message=\"Please select a patient to view data.\" type=\"select-patient\" />;\r\n    }\r\n    \r\n    const viz = allVisualizations[visualizationType];\r\n    if (!viz) return <Placeholder message=\"Invalid visualization\" type=\"error\" />;\r\n\r\n    const Component = viz.component;\r\n    const isExpanded = expandedItem === windowId;\r\n    const navigation = chartNavigation[visualizationType];\r\n    \r\n    return <Component \r\n      patientId={selectedPatientId} \r\n      viewMode=\"physician\"\r\n      isExpanded={isExpanded}\r\n      onExpand={() => handleExpand(windowId)}\r\n      navigation={navigation}\r\n    />;\r\n  };\r\n\r\n  const patientInfo = data?.patientInfo;\r\n\r\n  return (\r\n    <div className=\"physician-dashboard\">\r\n      <div className=\"physician-header\">\r\n        <h1>Physician Dashboard</h1>\r\n      </div>\r\n\r\n      {selectedPatientId && (\r\n        <div className=\"dashboard-content\">\r\n          <PatientInfoCard \r\n            patientInfo={patientInfo}\r\n            loading={loading}\r\n            error={error}\r\n            variant=\"physician\"\r\n            className=\"patient-info-card-physician\"\r\n          />\r\n\r\n          <DashboardGrid\r\n            viewMode=\"physician\"\r\n            selectedVisualizations={selectedVisualizations}\r\n            availableVisualizations={availableVisualizations}\r\n            allVisualizations={allVisualizations}\r\n            onVisualizationChange={handleVisualizationChange}\r\n            onExpand={handleExpand}\r\n            expandedItem={expandedItem}\r\n            renderVisualization={renderVisualizationWithMode}\r\n            chartNavigation={chartNavigation}\r\n            disabled={Object.keys(availableVisualizations).length === 0}\r\n            placeholderText=\"No data available for this patient.\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhysicianDashboard;\r\n","/*\r\n Dashboard.js - Unified Dashboard Router Component\r\n \r\n This component acts as a simple router that renders either the PatientDashboard or PhysicianDashboard based on the viewMode prop. It provides a clean separation between the two dashboard types while maintaining a unified interface.\r\n \r\n Purpose:\r\n - Central routing logic for dashboard views\r\n - Clean separation of concerns between patient and physician interfaces\r\n - Maintains consistent prop passing to child components\r\n \r\n Props:\r\n - patientId: The ID of the currently selected patient\r\n - viewMode: The current view mode ('patient' or 'physician')\r\n \r\n Component Flow:\r\n - Receives viewMode prop from parent App component\r\n - Conditionally renders appropriate dashboard based on viewMode\r\n - Passes patientId to the selected dashboard component\r\n */\r\n\r\nimport React from 'react';\r\nimport PatientDashboard from '../PatientDashboard';\r\nimport PhysicianDashboard from '../PhysicianDashboard';\r\n\r\n/*\r\nUnified Dashboard component that renders either Patient or Physician viewbased on the viewMode prop\r\n \r\n @param {string} patientId - The patient identifier\r\n @param {string} viewMode - The view mode ('patient' or 'physician')\r\n @returns {JSX.Element} The appropriate dashboard component\r\n */\r\nconst Dashboard = ({ patientId, viewMode }) => {\r\n  if (viewMode === 'physician') {\r\n    return <PhysicianDashboard patientId={patientId} />;\r\n  }\r\n  \r\n  return <PatientDashboard patientId={patientId} />;\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["CSV_CONFIG","header","skipEmptyLines","transformHeader","trim","transform","value","getPatientData","patientId","Error","patientRows","async","response","fetch","concat","Date","now","ok","status","statusText","csvText","text","length","parsed","Papa","errors","console","error","data","fetchPatientCsvData","Array","isArray","this","processPatientData","rows","firstRowData","patientInfo","patientNumber","name","age","gender","dataAvailable","detailedMedications","medicationNamesStr","medicationTypesStr","medicationCategoriesStr","medicationDosagesStr","medicationNames","split","filter","Boolean","medicationTypes","medicationCategories","medicationDosages","i","Math","max","dosage","includes","push","schedule","category","conditionsSet","Set","map","row","forEach","conditionString","c","add","glucoseData","processGlucoseData","bloodPressureData","processBloodPressureData","exerciseData","processExerciseData","moodData","processMoodData","painData","processPainData","sleepData","processSleepData","mealData","processMealData","_objectSpread","conditions","from","rawData","flatMap","baseDate","readings","undefined","parseFloat","timeStr","hours","minutes","Number","date","setHours","range","measurementType","randomHour","floor","random","randomMinute","systolic","parseInt","diastolic","systolicType","diastolicType","exerciseByDate","dateKey","toDateString","walking","swimming","running","biking","other","totalMinutes","_row","type","toLowerCase","categorizeExercise","_row$Exercise_Type","Object","values","d","dayData","mood","location","level","quality","qualityCode","some","mealType","time","protein","carbs","vegetables","fruit","alcohol","sugar","setData","useState","loading","setLoading","setError","lastFetchedId","setLastFetchedId","loadData","useCallback","id","patientData","DataService","err","errorMessage","message","useEffect","refetch","clearData","hasData","isEmpty","isError","hasGlucoseData","hasBloodPressureData","hasExerciseData","hasMoodData","hasPainData","hasSleepData","hasMealData","chartType","initialDate","arguments","currentDate","setCurrentDate","navigationType","navigationLabel","goToPrevious","prev","newDate","setMonth","getMonth","setDate","getDate","goToNext","getDateRange","start","getFullYear","end","startOfWeek","getDay","endOfWeek","getCurrentMonthYear","toLocaleDateString","month","year","getCurrentWeekDisplay","startStr","day","endStr","getThreeMonthRange","endOfThreeMonths","startOfThreeMonths","dataStartDate","setTime","getTime","dataEndDate","getThreeMonthDisplay","_ref","title","items","orientation","size","containerWidth","legendRef","useRef","parentWidth","setParentWidth","updateWidth","current","specificContainers","parentContainer","selector","container","closest","computedStyle","window","getComputedStyle","paddingLeft","paddingRight","offsetWidth","_legendRef$current$cl","painChartWrapper","querySelector","chartContainers","innerChart","vizContent","adjustedWidth","resizeObserver","ResizeObserver","observe","addEventListener","disconnect","removeEventListener","finalWidth","containerStyle","width","maxWidth","_jsxs","ref","className","style","children","_jsx","item","index","description","label","color","backgroundColor","icon","shape","shapeStyle","content","isVisible","position","x","y","containerRef","tooltipPosition","setTooltipPosition","tooltipWidth","tooltipHeight","innerWidth","left","top","createChartConfig","isExpanded","universalConfig","dashboard","height","padding","right","bottom","dayWidth","fontSize","yAxis","yAxisTitle","timeLabel","dayLabel","dateLabel","barWidth","expanded","config","yAxisLabels","yAxisRange","yAxisOffset","dayPadding","emoji","mealAvailableWidth","min","mealDayWidth","mealTotalWidth","mealPadding","adjustedPadding","adjustedAvailableWidth","mealHeight","mealLabel","_config$yAxisOffset","_config$yAxisOffset2","unit","chartHeight","single","renderYAxisLabels","labels","offset","x1","y1","x2","y2","textAnchor","fill","_Fragment","DAYS_OF_WEEK","RANGE_COLORS","XAxisAndGrid","currentDay","startTickX","middleTickX","stroke","strokeWidth","DataPoints","_ref2","weekData","onBarHover","onBarLeave","reading","dayIndex","getTimePosition","timeRatio","getHours","getMinutes","isPre","cursor","onMouseEnter","event","tooltipData","toLocaleTimeString","hour","minute","hour12","weekday","clientX","clientY","onMouseLeave","handleMouseLeave","Chart","_ref3","monthLabel","viewBox","SharedYAxis","_ref4","onExpand","viewMode","navigation","healthRangeLegendItems","entries","_ref5","charAt","toUpperCase","slice","usePatientData","setTooltipData","internalNavigation","useChartNavigation","nav","threeMonthData","weekSummary","useMemo","preMealReadings","postMealReadings","avgGlucose","reduce","sum","val","toFixed","avgPreMeal","avgPostMeal","highReadings","lowReadings","inRangeReadings","rangePercentage","daysWithReadings","totalReadings","threeMonthSummary","handleBarLeave","Legend","borderColor","InfoBox","Tooltip","replace","YAxis","valueRange","yOffset","XAxis","weekDays","dayX","dayCenterX","GridLines","_","DataBars","getColor","getSystolicColor","getDiastolicColor","readingDate","dayContentWidth","barHeight","bloodPressureLegendItems","_ref6","setContainerWidth","useLayoutEffect","observeContainer","entry","contentRect","weekStart","weekEnd","handleBarHover","systolicReadings","diastolicReadings","avgSystolic","avgDiastolic","getRiskCategory","maxSystolic","maxDiastolic","avgRisk","exerciseTypes","key","exerciseLegendItems","_exerciseTypes$find","_exerciseTypes$find2","itemDate","daysOfWeek","groupedData","acc","dayName","maxVal","maxDuration","ceil","step","generateYAxisLabels","avgMinutesPerDay","daysWithExercise","exerciseTypeTotals","mostCommonExercise","sort","a","b","daysWithAdequateExercise","totalSessions","avgSessionLength","mostCommonExerciseMinutes","threeMonthGroupedData","emojis","join","currentY","segmentHeight","segmentY","segment","round","fontWeight","find","t","MOODS","happy","sad","angry","MOOD_COLORS","MOOD_BACKGROUNDS","normalizeMood","getMoodEmoji","getMoodColor","moodLegendItems","CalendarHeader","startX","cellWidth","dayLabelY","dayLabelFontSize","DayCell","moods","dayOfMonth","dayOfWeek","weekOfMonth","startY","cellHeight","primaryMood","dateLabelX","dateLabelY","dateLabelFontSize","moodIconFontSize","Calendar","moodByDate","currentMonth","monthDisplay","svgWidth","svgHeight","getCalendarConfig","daysInMonth","isLoading","monthSummary","currentMonthData","moodCounts","keys","normalizedMood","mostCommonMood","_ref7","totalEntries","moodPercentages","_ref8","count","daysWithMood","moodScore","moodTrend","mostCommonMoodCount","_ref9","_ref0","_ref1","daysInThreeMonths","painLocation","painColor","view","defaultFill","strokeColor","bodyPartFills","head","neck","chest","stomach","leftShoulder","rightShoulder","upperBack","lowerBack","leftShoulderBlade","rightShoulderBlade","leftHip","rightHip","leftArm","rightArm","leftElbow","rightElbow","leftForearm","rightForearm","leftHand","rightHand","leftThigh","rightThigh","leftKnee","rightKnee","leftCalf","rightCalf","leftFoot","rightFoot","targetPart","abdomen","belly","shoulder","shoulders","back","spine","shoulderBlade","shoulderBlades","hip","hips","arm","arms","elbow","elbows","forearm","forearms","hand","hands","leg","legs","thigh","thighs","knee","knees","calf","calves","foot","feet","ankle","ankles","xmlns","preserveAspectRatio","transition","cx","cy","rx","ry","getPainColor","painLegendItems","weekPainData","threeMonthPainData","chartData","mostCommonLocation","averagePainLevel","dateMap","Map","locationCounts","set","get","mostCommon","maxCount","painLevel","totalPain","avgPain","daysWithPain","painLevelCounts","mostCommonPainLevel","mostCommonLocationCount","mostCommonPainLevelCount","PainLineChart","xAxis","chartWidth","linePath","point","strokeDasharray","r","Body","locationLower","BodySVG","MEAL_TYPES","FOOD_CATEGORIES","SUGAR_CATEGORIES","CATEGORY_EMOJIS","SUGAR_EMOJIS","getMealData","columnPrefix","sugarKey","meal","mealIndex","textX","textLength","dynamicOffset","getTextX","MealCell","mealTime","circleWidth","circleHeight","minDimension","circleRadius","emojiFontSize","expandedCircleRadius","expandedEmojiFontSize","allCategories","circleX","circleY","hasCategory","opacity","dominantBaseline","fontFamily","MealGrid","getMealTime","updateContainerWidth","dataDate","React","categoryStats","sugarStats","s","totalMealsLogged","daysWithMeals","mostCommonFood","totalSugarMeals","sugarPercentage","mostCommonFoodCount","_ref10","cat","_ref11","_ref12","_ref13","qualityLevels","legendItems","totalHours","avgHours","qualityCounts","mostCommonQuality","hourVariations","abs","avgVariation","v","qualityScores","avgQualityScore","qualityAssessment","adequateSleepNights","mostCommonQualityCount","daysTracked","useVisualizations","DASHBOARD_CONFIG","allVisualizations","pain","VISUALIZATION_CONFIG","component","PainChart","bloodPressure","BloodPressureChart","glucose","GlucoseChart","exercise","ExerciseChart","mealContents","MealContentsChart","MoodCalendar","sleep","SleepChart","availableVisualizations","viz","dataKey","selectedVisualizations","availableKeys","chartId","handleVisualizationChange","visualizationType","getIcon","useVisualizationHelpers","expandedItem","setExpandedItem","handleExpand","itemId","renderVisualization","Placeholder","Component","_patientInfo$conditio","_patientInfo$detailed","variant","condition","med","selectedViz","onVisualizationChange","disabled","placeholderText","noData","showNavigation","onPrev","onNext","onClick","showSummaries","summaryTexts","onSummaryChange","chartNavigation","patient","chartClassNames","physician","availableVizTypes","wrapperProps","VisualizationWrapper","vizType","PatientInfoCard","DashboardGrid","renderVisualizationWithMode","boxId","initialPatientId","selectedPatientId","setSelectedPatientId","windowId","PhysicianDashboard","PatientDashboard"],"sourceRoot":""}