{"ast":null,"code":"/**\n * PatientDashboard.js - Patient View Dashboard Component\n * \n * This component renders the patient-focused dashboard view with:\n * - Patient information card displaying demographics and medications\n * - Chart navigation controls for time period switching\n * - Expandable chart views for detailed analysis\n * - Integration with all health metric visualizations\n * \n * ARCHITECTURE:\n * - Uses custom hooks for data management, visualization handling, and navigation\n * - Implements responsive design with expandable chart views\n * - Provides educational information for patients\n * - Handles loading and error states gracefully\n * \n * CUSTOM HOOKS USED:\n * - usePatientData: Manages patient data fetching and caching\n * - useVisualizations: Handles visualization configuration and availability\n * - useVisualizationHelpers: Provides chart expansion and rendering utilities\n * - useChartNavigation: Manages time-based navigation for each chart type\n * \n * COMPONENT STRUCTURE:\n * - PatientInfoCard: Displays patient demographics and medication information\n * - DashboardGrid: Renders the chart grid with navigation and expansion controls\n * - Individual chart components for each health metric\n * \n * STATE MANAGEMENT:\n * - Uses custom hooks for centralized state management\n * - Handles chart expansion state through useVisualizationHelpers\n * - Manages navigation state for each chart type independently\n * \n * This component provides a comprehensive health monitoring interface\n * designed specifically for patient use with educational content and\n * simplified navigation.\n */import React from'react';import usePatientData from'./hooks/usePatientData';import useVisualizations from'./hooks/useVisualizations';import useVisualizationHelpers from'./hooks/useVisualizationHelpers';import useChartNavigation from'./hooks/useChartNavigation';import PatientInfoCard from'./components/PatientInfoCard';import DashboardGrid from'./components/DashboardGrid';import'./PatientDashboard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PatientDashboard=_ref=>{let{patientId}=_ref;const{data,loading,error}=usePatientData(patientId);const{allVisualizations,availableVisualizations,selectedVisualizations,handleVisualizationChange}=useVisualizations('patient',data);const{expandedItem,handleExpand,renderVisualization}=useVisualizationHelpers(patientId,allVisualizations,selectedVisualizations);// Create universal navigation for each chart type\nconst glucoseNavigation=useChartNavigation('glucose');const bloodPressureNavigation=useChartNavigation('bloodPressure');const exerciseNavigation=useChartNavigation('exercise');const sleepNavigation=useChartNavigation('sleep');const painNavigation=useChartNavigation('pain');const moodNavigation=useChartNavigation('mood');const mealContentsNavigation=useChartNavigation('mealContents');const chartNavigation={glucose:glucoseNavigation,bloodPressure:bloodPressureNavigation,exercise:exerciseNavigation,sleep:sleepNavigation,pain:painNavigation,mood:moodNavigation,mealContents:mealContentsNavigation};// Override renderVisualization to set correct viewMode\nconst renderVisualizationWithMode=(visualizationType,boxId)=>{const viz=allVisualizations[visualizationType];if(!viz)return/*#__PURE__*/_jsx(\"div\",{children:\"Invalid visualization\"});const Component=viz.component;const isExpanded=expandedItem===boxId;const navigation=chartNavigation[visualizationType];return/*#__PURE__*/_jsx(Component,{patientId:patientId,isExpanded:isExpanded,onExpand:()=>handleExpand(boxId),viewMode:\"patient\",navigation:navigation});};const patientInfo=data===null||data===void 0?void 0:data.patientInfo;if(loading)return/*#__PURE__*/_jsx(\"div\",{className:\"loading-screen\",children:\"Loading patient data...\"});if(error)return/*#__PURE__*/_jsxs(\"div\",{className:\"error-screen\",children:[\"Error: \",error]});return/*#__PURE__*/_jsxs(\"div\",{className:\"patient-dashboard\",children:[/*#__PURE__*/_jsx(PatientInfoCard,{patientInfo:patientInfo,loading:loading,error:error,variant:\"patient\"}),/*#__PURE__*/_jsx(DashboardGrid,{viewMode:\"patient\",selectedVisualizations:selectedVisualizations,availableVisualizations:availableVisualizations,allVisualizations:allVisualizations,onVisualizationChange:handleVisualizationChange,onExpand:handleExpand,expandedItem:expandedItem,renderVisualization:renderVisualizationWithMode,chartNavigation:chartNavigation})]});};export default PatientDashboard;","map":{"version":3,"names":["React","usePatientData","useVisualizations","useVisualizationHelpers","useChartNavigation","PatientInfoCard","DashboardGrid","jsx","_jsx","jsxs","_jsxs","PatientDashboard","_ref","patientId","data","loading","error","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedItem","handleExpand","renderVisualization","glucoseNavigation","bloodPressureNavigation","exerciseNavigation","sleepNavigation","painNavigation","moodNavigation","mealContentsNavigation","chartNavigation","glucose","bloodPressure","exercise","sleep","pain","mood","mealContents","renderVisualizationWithMode","visualizationType","boxId","viz","children","Component","component","isExpanded","navigation","onExpand","viewMode","patientInfo","className","variant","onVisualizationChange"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PatientDashboard.js"],"sourcesContent":["/**\n * PatientDashboard.js - Patient View Dashboard Component\n * \n * This component renders the patient-focused dashboard view with:\n * - Patient information card displaying demographics and medications\n * - Chart navigation controls for time period switching\n * - Expandable chart views for detailed analysis\n * - Integration with all health metric visualizations\n * \n * ARCHITECTURE:\n * - Uses custom hooks for data management, visualization handling, and navigation\n * - Implements responsive design with expandable chart views\n * - Provides educational information for patients\n * - Handles loading and error states gracefully\n * \n * CUSTOM HOOKS USED:\n * - usePatientData: Manages patient data fetching and caching\n * - useVisualizations: Handles visualization configuration and availability\n * - useVisualizationHelpers: Provides chart expansion and rendering utilities\n * - useChartNavigation: Manages time-based navigation for each chart type\n * \n * COMPONENT STRUCTURE:\n * - PatientInfoCard: Displays patient demographics and medication information\n * - DashboardGrid: Renders the chart grid with navigation and expansion controls\n * - Individual chart components for each health metric\n * \n * STATE MANAGEMENT:\n * - Uses custom hooks for centralized state management\n * - Handles chart expansion state through useVisualizationHelpers\n * - Manages navigation state for each chart type independently\n * \n * This component provides a comprehensive health monitoring interface\n * designed specifically for patient use with educational content and\n * simplified navigation.\n */\n\nimport React from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PatientDashboard.css';\n\nconst PatientDashboard = ({ patientId }) => {\n  const { data, loading, error } = usePatientData(patientId);\n  const { \n    allVisualizations, \n    availableVisualizations, \n    selectedVisualizations, \n    handleVisualizationChange \n  } = useVisualizations('patient', data);\n  \n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\n    patientId, \n    allVisualizations, \n    selectedVisualizations\n  );\n\n  // Create universal navigation for each chart type\n  const glucoseNavigation = useChartNavigation('glucose');\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\n  const exerciseNavigation = useChartNavigation('exercise');\n  const sleepNavigation = useChartNavigation('sleep');\n  const painNavigation = useChartNavigation('pain');\n  const moodNavigation = useChartNavigation('mood');\n  const mealContentsNavigation = useChartNavigation('mealContents');\n\n  const chartNavigation = {\n    glucose: glucoseNavigation,\n    bloodPressure: bloodPressureNavigation,\n    exercise: exerciseNavigation,\n    sleep: sleepNavigation,\n    pain: painNavigation,\n    mood: moodNavigation,\n    mealContents: mealContentsNavigation\n  };\n\n  // Override renderVisualization to set correct viewMode\n  const renderVisualizationWithMode = (visualizationType, boxId) => {\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <div>Invalid visualization</div>;\n\n    const Component = viz.component;\n    const isExpanded = expandedItem === boxId;\n    const navigation = chartNavigation[visualizationType];\n    \n    return <Component \n      patientId={patientId} \n      isExpanded={isExpanded} \n      onExpand={() => handleExpand(boxId)}\n      viewMode=\"patient\"\n      navigation={navigation}\n    />;\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  if (loading) return <div className=\"loading-screen\">Loading patient data...</div>;\n  if (error) return <div className=\"error-screen\">Error: {error}</div>;\n\n  return (\n    <div className=\"patient-dashboard\">\n      <PatientInfoCard \n        patientInfo={patientInfo}\n        loading={loading}\n        error={error}\n        variant=\"patient\"\n      />\n\n      <DashboardGrid\n        viewMode=\"patient\"\n        selectedVisualizations={selectedVisualizations}\n        availableVisualizations={availableVisualizations}\n        allVisualizations={allVisualizations}\n        onVisualizationChange={handleVisualizationChange}\n        onExpand={handleExpand}\n        expandedItem={expandedItem}\n        renderVisualization={renderVisualizationWithMode}\n        chartNavigation={chartNavigation}\n      />\n    </div>\n  );\n};\n\nexport default PatientDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}