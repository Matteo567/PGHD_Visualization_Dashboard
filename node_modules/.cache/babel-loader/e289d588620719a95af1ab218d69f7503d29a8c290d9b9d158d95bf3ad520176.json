{"ast":null,"code":"// Hook for managing visualization components and availability\nimport React from 'react';\nimport { VISUALIZATION_CONFIG } from '../constants';\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\nimport PainChart from '../components/patient_charts/PainChart';\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\nimport SleepChart from '../components/patient_charts/SleepChart';\nconst useVisualizations = (viewMode, data) => {\n  // All available visualization types with their components\n  const allVisualizations = {\n    pain: {\n      ...VISUALIZATION_CONFIG.pain,\n      component: PainChart\n    },\n    bloodPressure: {\n      ...VISUALIZATION_CONFIG.bloodPressure,\n      component: BloodPressureChart\n    },\n    glucose: {\n      ...VISUALIZATION_CONFIG.glucose,\n      component: GlucoseChart\n    },\n    exercise: {\n      ...VISUALIZATION_CONFIG.exercise,\n      component: ExerciseChart\n    },\n    mealContents: {\n      ...VISUALIZATION_CONFIG.mealContents,\n      component: MealContentsChart\n    },\n    mood: {\n      ...VISUALIZATION_CONFIG.mood,\n      component: MoodCalendar\n    },\n    sleep: {\n      ...VISUALIZATION_CONFIG.sleep,\n      component: SleepChart\n    }\n  };\n\n  // Find which visualizations have data available\n  const availableVisualizations = {};\n  if (data) {\n    const vizKeys = Object.keys(allVisualizations);\n    for (let i = 0; i < vizKeys.length; i++) {\n      const key = vizKeys[i];\n      const viz = allVisualizations[key];\n\n      // Special case for meal contents\n      if (key === 'mealContents') {\n        if (data['mealData'] && data['mealData'].length > 0) {\n          availableVisualizations[key] = viz;\n        }\n      } else {\n        // For other charts, check for matching data key (e.g., glucoseData for glucose chart)\n        const dataKey = `${key}Data`;\n        if (data[dataKey] && data[dataKey].length > 0) {\n          availableVisualizations[key] = viz;\n        }\n      }\n    }\n  }\n\n  // Create mapping of chart IDs to visualization types\n  const availableKeys = Object.keys(availableVisualizations);\n  const selectedVisualizations = {};\n  for (let i = 0; i < availableKeys.length; i++) {\n    const chartId = `${viewMode}-chart-${i}`;\n    selectedVisualizations[chartId] = availableKeys[i];\n  }\n  return {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations\n  };\n};\nexport default useVisualizations;","map":{"version":3,"names":["React","VISUALIZATION_CONFIG","GlucoseChart","BloodPressureChart","ExerciseChart","MoodCalendar","PainChart","MealContentsChart","SleepChart","useVisualizations","viewMode","data","allVisualizations","pain","component","bloodPressure","glucose","exercise","mealContents","mood","sleep","availableVisualizations","vizKeys","Object","keys","i","length","key","viz","dataKey","availableKeys","selectedVisualizations","chartId"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/hooks/useVisualizations.js"],"sourcesContent":["// Hook for managing visualization components and availability\nimport React from 'react';\nimport { VISUALIZATION_CONFIG } from '../constants';\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\nimport PainChart from '../components/patient_charts/PainChart';\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\nimport SleepChart from '../components/patient_charts/SleepChart';\nconst useVisualizations = (viewMode, data) => {\n  // All available visualization types with their components\n  const allVisualizations = {\n    pain: { ...VISUALIZATION_CONFIG.pain, component: PainChart },\n    bloodPressure: { ...VISUALIZATION_CONFIG.bloodPressure, component: BloodPressureChart },\n    glucose: { ...VISUALIZATION_CONFIG.glucose, component: GlucoseChart },\n    exercise: { ...VISUALIZATION_CONFIG.exercise, component: ExerciseChart },\n    mealContents: { ...VISUALIZATION_CONFIG.mealContents, component: MealContentsChart },\n    mood: { ...VISUALIZATION_CONFIG.mood, component: MoodCalendar },\n    sleep: { ...VISUALIZATION_CONFIG.sleep, component: SleepChart },\n  };\n\n  // Find which visualizations have data available\n  const availableVisualizations = {};\n  if (data) {\n    const vizKeys = Object.keys(allVisualizations);\n    for (let i = 0; i < vizKeys.length; i++) {\n      const key = vizKeys[i];\n      const viz = allVisualizations[key];\n      \n      // Special case for meal contents\n      if (key === 'mealContents') {\n        if (data['mealData'] && data['mealData'].length > 0) {\n          availableVisualizations[key] = viz;\n        }\n      } else {\n        // For other charts, check for matching data key (e.g., glucoseData for glucose chart)\n        const dataKey = `${key}Data`;\n        if (data[dataKey] && data[dataKey].length > 0) {\n          availableVisualizations[key] = viz;\n        }\n      }\n    }\n  }\n\n  // Create mapping of chart IDs to visualization types\n  const availableKeys = Object.keys(availableVisualizations);\n  const selectedVisualizations = {};\n  for (let i = 0; i < availableKeys.length; i++) {\n    const chartId = `${viewMode}-chart-${i}`;\n    selectedVisualizations[chartId] = availableKeys[i];\n  }\n\n  return {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations\n  };\n};\n\nexport default useVisualizations;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,oBAAoB,QAAQ,cAAc;AACnD,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,kBAAkB,MAAM,iDAAiD;AAChF,OAAOC,aAAa,MAAM,4CAA4C;AACtE,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,SAAS,MAAM,wCAAwC;AAC9D,OAAOC,iBAAiB,MAAM,gDAAgD;AAC9E,OAAOC,UAAU,MAAM,yCAAyC;AAChE,MAAMC,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,IAAI,KAAK;EAC5C;EACA,MAAMC,iBAAiB,GAAG;IACxBC,IAAI,EAAE;MAAE,GAAGZ,oBAAoB,CAACY,IAAI;MAAEC,SAAS,EAAER;IAAU,CAAC;IAC5DS,aAAa,EAAE;MAAE,GAAGd,oBAAoB,CAACc,aAAa;MAAED,SAAS,EAAEX;IAAmB,CAAC;IACvFa,OAAO,EAAE;MAAE,GAAGf,oBAAoB,CAACe,OAAO;MAAEF,SAAS,EAAEZ;IAAa,CAAC;IACrEe,QAAQ,EAAE;MAAE,GAAGhB,oBAAoB,CAACgB,QAAQ;MAAEH,SAAS,EAAEV;IAAc,CAAC;IACxEc,YAAY,EAAE;MAAE,GAAGjB,oBAAoB,CAACiB,YAAY;MAAEJ,SAAS,EAAEP;IAAkB,CAAC;IACpFY,IAAI,EAAE;MAAE,GAAGlB,oBAAoB,CAACkB,IAAI;MAAEL,SAAS,EAAET;IAAa,CAAC;IAC/De,KAAK,EAAE;MAAE,GAAGnB,oBAAoB,CAACmB,KAAK;MAAEN,SAAS,EAAEN;IAAW;EAChE,CAAC;;EAED;EACA,MAAMa,uBAAuB,GAAG,CAAC,CAAC;EAClC,IAAIV,IAAI,EAAE;IACR,MAAMW,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACZ,iBAAiB,CAAC;IAC9C,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,MAAME,GAAG,GAAGL,OAAO,CAACG,CAAC,CAAC;MACtB,MAAMG,GAAG,GAAGhB,iBAAiB,CAACe,GAAG,CAAC;;MAElC;MACA,IAAIA,GAAG,KAAK,cAAc,EAAE;QAC1B,IAAIhB,IAAI,CAAC,UAAU,CAAC,IAAIA,IAAI,CAAC,UAAU,CAAC,CAACe,MAAM,GAAG,CAAC,EAAE;UACnDL,uBAAuB,CAACM,GAAG,CAAC,GAAGC,GAAG;QACpC;MACF,CAAC,MAAM;QACL;QACA,MAAMC,OAAO,GAAG,GAAGF,GAAG,MAAM;QAC5B,IAAIhB,IAAI,CAACkB,OAAO,CAAC,IAAIlB,IAAI,CAACkB,OAAO,CAAC,CAACH,MAAM,GAAG,CAAC,EAAE;UAC7CL,uBAAuB,CAACM,GAAG,CAAC,GAAGC,GAAG;QACpC;MACF;IACF;EACF;;EAEA;EACA,MAAME,aAAa,GAAGP,MAAM,CAACC,IAAI,CAACH,uBAAuB,CAAC;EAC1D,MAAMU,sBAAsB,GAAG,CAAC,CAAC;EACjC,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,aAAa,CAACJ,MAAM,EAAED,CAAC,EAAE,EAAE;IAC7C,MAAMO,OAAO,GAAG,GAAGtB,QAAQ,UAAUe,CAAC,EAAE;IACxCM,sBAAsB,CAACC,OAAO,CAAC,GAAGF,aAAa,CAACL,CAAC,CAAC;EACpD;EAEA,OAAO;IACLb,iBAAiB;IACjBS,uBAAuB;IACvBU;EACF,CAAC;AACH,CAAC;AAED,eAAetB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}