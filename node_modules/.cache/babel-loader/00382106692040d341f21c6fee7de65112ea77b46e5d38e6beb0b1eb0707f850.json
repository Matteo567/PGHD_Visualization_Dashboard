{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\PainChart.js\",\n  _s = $RefreshSig$();\n/**\r\n * PainChart.js - Pain Assessment and Visualization Component\r\n * \r\n * This component provides comprehensive pain monitoring:\r\n * - Anatomical body mapping for pain location\r\n * - Pain intensity scale (0-10) with color coding\r\n * - Daily pain tracking and trend analysis\r\n * - Interactive body diagram for pain location selection\r\n * - Pain level input and editing capabilities\r\n * - Responsive design with navigation controls\r\n * \r\n * Critical for pain management and treatment monitoring.\r\n */\n\nimport React, { useState, useMemo, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport '../ChartStyles.css';\nimport BodySVG from './BodySvg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PainChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient',\n  navigation\n}) => {\n  _s();\n  const {\n    painData,\n    isLoading: loading,\n    error\n  } = usePatientData(patientId, 'pain');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('pain');\n  const nav = navigation || internalNavigation;\n  const getPainColor = level => {\n    // 10-class RdYlBu color scheme\n    const painColors = ['#313695',\n    // 0 - No pain (dark blue)\n    '#4575b4',\n    // 1 - Very mild pain\n    '#74add1',\n    // 2 - Mild pain\n    '#abd9e9',\n    // 3 - Mild-moderate pain\n    '#e0f3f8',\n    // 4 - Moderate pain\n    '#fee090',\n    // 5 - Moderate-severe pain\n    '#fdae61',\n    // 6 - Severe pain\n    '#f46d43',\n    // 7 - Very severe pain\n    '#d73027',\n    // 8 - Extremely severe pain\n    '#a50026',\n    // 9 - Most severe pain\n    '#a50026' // 10 - Maximum pain (same as 9)\n    ];\n    return painColors[Math.min(level, 10)];\n  };\n  const painLegendItems = Array.from({\n    length: 11\n  }, (_, i) => i).map(level => ({\n    color: getPainColor(level),\n    label: `${level}`\n  }));\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\n\n  // Get 3-month data\n  const {\n    start: startOfThreeMonths,\n    end: endOfThreeMonths\n  } = nav.getThreeMonthRange();\n  const threeMonthPainData = painData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\n\n  // Process data for chart\n  const {\n    chartData,\n    mostCommonLocation,\n    averagePainLevel\n  } = useMemo(() => {\n    if (!weekPainData.length) return {\n      chartData: [],\n      mostCommonLocation: null,\n      averagePainLevel: 0\n    };\n\n    // Create a map of dates to pain levels\n    const dateMap = new Map();\n    const locationCounts = new Map();\n    weekPainData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap.set(dateKey, item.level);\n\n      // Count locations\n      const location = item.location.toLowerCase();\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\n    });\n\n    // Find most common location\n    let mostCommon = null;\n    let maxCount = 0;\n    for (const [location, count] of locationCounts) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommon = location;\n      }\n    }\n\n    // Generate chart data for all 7 days of the week\n    const data = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(date.getDate() + i);\n      const dateKey = date.toDateString();\n      const painLevel = dateMap.get(dateKey) || 0;\n      data.push({\n        date,\n        day: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][date.getDay()],\n        level: painLevel,\n        color: getPainColor(painLevel)\n      });\n    }\n    const totalPain = weekPainData.reduce((sum, item) => sum + item.level, 0);\n    const avgPain = weekPainData.length > 0 ? totalPain / weekPainData.length : 0;\n    return {\n      chartData: data,\n      mostCommonLocation: mostCommon,\n      averagePainLevel: avgPain\n    };\n  }, [weekPainData, startOfWeek]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n\n  // Line Chart Component for Pain Ratings\n  const PainLineChart = ({\n    data,\n    isExpanded\n  }) => {\n    const config = {\n      width: isExpanded ? 480 : 400,\n      height: isExpanded ? 200 : 150,\n      padding: {\n        top: 20,\n        right: 30,\n        bottom: 40,\n        left: 50\n      },\n      yAxisRange: 10,\n      fontSize: {\n        yAxis: isExpanded ? 10 : 8,\n        xAxis: isExpanded ? 10 : 8\n      }\n    };\n    const chartWidth = config.width - config.padding.left - config.padding.right;\n    const chartHeight = config.height - config.padding.top - config.padding.bottom;\n    const dayWidth = chartWidth / 6; // 7 days, 6 intervals\n\n    // Create line path\n    const linePath = data.map((point, index) => {\n      const x = config.padding.left + index * dayWidth;\n      const y = config.padding.top + chartHeight - point.level / config.yAxisRange * chartHeight;\n      return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n    }).join(' ');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-line-chart\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"100%\",\n        height: \"100%\",\n        viewBox: `0 0 ${config.width} ${config.height}`,\n        children: [[0, 2, 4, 6, 8, 10].map(level => {\n          const y = config.padding.top + chartHeight - level / config.yAxisRange * chartHeight;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              x1: config.padding.left,\n              y1: y,\n              x2: config.width - config.padding.right,\n              y2: y,\n              stroke: \"#e0e0e0\",\n              strokeWidth: \"1\",\n              strokeDasharray: \"2,2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: config.padding.left - 10,\n              y: y + 3,\n              fontSize: config.fontSize.yAxis,\n              textAnchor: \"end\",\n              fill: \"var(--chart-color-text-secondary)\",\n              children: level\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this)]\n          }, level, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this);\n        }), data.map((point, index) => {\n          const x = config.padding.left + index * dayWidth;\n          return /*#__PURE__*/_jsxDEV(\"text\", {\n            x: x,\n            y: config.height - config.padding.bottom + 15,\n            fontSize: config.fontSize.xAxis,\n            textAnchor: \"middle\",\n            className: \"x-axis-day-label\",\n            children: point.day\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: linePath,\n          stroke: \"var(--chart-color-primary)\",\n          strokeWidth: \"3\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), data.map((point, index) => {\n          const x = config.padding.left + index * dayWidth;\n          const y = config.padding.top + chartHeight - point.level / config.yAxisRange * chartHeight;\n          return /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: x,\n            cy: y,\n            r: \"4\",\n            fill: point.color,\n            stroke: \"var(--chart-color-primary)\",\n            strokeWidth: \"2\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this);\n  };\n  const Body = ({\n    location,\n    level\n  }) => {\n    const color = getPainColor(level);\n    const locationLower = location.toLowerCase();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body-views\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"body-view-label\",\n            children: \"Front\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BodySVG, {\n            className: \"body-svg\",\n            painLocation: locationLower,\n            painColor: color,\n            view: \"front\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"body-view-label\",\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BodySVG, {\n            className: \"body-svg\",\n            painLocation: locationLower,\n            painColor: color,\n            view: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this);\n  };\n  if (viewMode === 'patient') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pain-chart-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"chart-title\",\n          children: \"Pain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pain-list\",\n          children: weekPainData.length > 0 ? weekPainData.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pain-list-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pain-item-date\",\n              children: new Date(item.date).toLocaleDateString('en-US', {\n                weekday: 'short',\n                month: 'short',\n                day: 'numeric'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pain-item-body\",\n              children: /*#__PURE__*/_jsxDEV(Body, {\n                location: item.location,\n                level: item.level\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pain-item-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pain-level\",\n                children: [\"Pain intensity: \", item.level, \"/10\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pain-location\",\n                children: [\"Location: \", item.location]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-pain-data\",\n            children: \"No pain data available for this week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pain-legend-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Legend, {\n          title: \"Pain Intensity Scale (0-10)\",\n          items: painLegendItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this);\n  }\n\n  // Physician view\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"physician-pain-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-line-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chart-title\",\n        children: \"Pain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"chart-subtitle\",\n        children: nav.getCurrentMonthYear()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PainLineChart, {\n        data: chartData,\n        isExpanded: isExpanded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-location-info\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Pain Location: \", mostCommonLocation || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-legend-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Legend, {\n        title: \"Pain Intensity Scale (0-10)\",\n        items: painLegendItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Week Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Average Pain Intensity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [averagePainLevel.toFixed(1), \"/10\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Most Common Location:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: mostCommonLocation || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Days with Pain:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [weekPainData.length, \"/7\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 7\n  }, this);\n};\n_s(PainChart, \"4puKMbaDWVzQRVWBLDzYSJ70RfY=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = PainChart;\nexport default PainChart;\nvar _c;\n$RefreshReg$(_c, \"PainChart\");","map":{"version":3,"names":["React","useState","useMemo","useRef","usePatientData","useChartNavigation","Legend","BodySVG","jsxDEV","_jsxDEV","PainChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","painData","isLoading","loading","error","useInternalNavigation","internalNavigation","nav","getPainColor","level","painColors","Math","min","painLegendItems","Array","from","length","_","i","map","color","label","start","startOfWeek","end","endOfWeek","getDateRange","weekPainData","filter","d","date","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthPainData","chartData","mostCommonLocation","averagePainLevel","dateMap","Map","locationCounts","forEach","item","dateKey","toDateString","set","location","toLowerCase","get","mostCommon","maxCount","count","data","Date","setDate","getDate","painLevel","push","day","getDay","totalPain","reduce","sum","avgPain","formatDateRange","startStr","toLocaleDateString","month","endStr","PainLineChart","config","width","height","padding","top","right","bottom","left","yAxisRange","fontSize","yAxis","xAxis","chartWidth","chartHeight","dayWidth","linePath","point","index","x","y","join","className","children","viewBox","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","textAnchor","fill","cx","cy","r","Body","locationLower","painLocation","painColor","view","weekday","title","items","getCurrentMonthYear","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/PainChart.js"],"sourcesContent":["/**\r\n * PainChart.js - Pain Assessment and Visualization Component\r\n * \r\n * This component provides comprehensive pain monitoring:\r\n * - Anatomical body mapping for pain location\r\n * - Pain intensity scale (0-10) with color coding\r\n * - Daily pain tracking and trend analysis\r\n * - Interactive body diagram for pain location selection\r\n * - Pain level input and editing capabilities\r\n * - Responsive design with navigation controls\r\n * \r\n * Critical for pain management and treatment monitoring.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\n\r\nimport Legend from '../Legend';\r\nimport '../ChartStyles.css';\r\nimport BodySVG from './BodySvg';\r\n\r\nconst PainChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { painData, isLoading: loading, error } = usePatientData(patientId, 'pain');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('pain');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const getPainColor = (level) => {\r\n    // 10-class RdYlBu color scheme\r\n    const painColors = [\r\n      '#313695', // 0 - No pain (dark blue)\r\n      '#4575b4', // 1 - Very mild pain\r\n      '#74add1', // 2 - Mild pain\r\n      '#abd9e9', // 3 - Mild-moderate pain\r\n      '#e0f3f8', // 4 - Moderate pain\r\n      '#fee090', // 5 - Moderate-severe pain\r\n      '#fdae61', // 6 - Severe pain\r\n      '#f46d43', // 7 - Very severe pain\r\n      '#d73027', // 8 - Extremely severe pain\r\n      '#a50026', // 9 - Most severe pain\r\n      '#a50026'  // 10 - Maximum pain (same as 9)\r\n    ];\r\n    \r\n    return painColors[Math.min(level, 10)];\r\n  };\r\n\r\n\r\n\r\n  const painLegendItems = Array.from({ length: 11 }, (_, i) => i).map(level => ({\r\n    color: getPainColor(level),\r\n    label: `${level}`,\r\n  }));\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthPainData = painData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\r\n\r\n  // Process data for chart\r\n  const { chartData, mostCommonLocation, averagePainLevel } = useMemo(() => {\r\n    if (!weekPainData.length) return { chartData: [], mostCommonLocation: null, averagePainLevel: 0 };\r\n\r\n    // Create a map of dates to pain levels\r\n    const dateMap = new Map();\r\n    const locationCounts = new Map();\r\n\r\n    weekPainData.forEach(item => {\r\n      const dateKey = item.date.toDateString();\r\n      dateMap.set(dateKey, item.level);\r\n      \r\n      // Count locations\r\n      const location = item.location.toLowerCase();\r\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\r\n    });\r\n\r\n    // Find most common location\r\n    let mostCommon = null;\r\n    let maxCount = 0;\r\n    for (const [location, count] of locationCounts) {\r\n      if (count > maxCount) {\r\n        maxCount = count;\r\n        mostCommon = location;\r\n      }\r\n    }\r\n\r\n    // Generate chart data for all 7 days of the week\r\n    const data = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(startOfWeek);\r\n      date.setDate(date.getDate() + i);\r\n      const dateKey = date.toDateString();\r\n      const painLevel = dateMap.get(dateKey) || 0;\r\n      \r\n      data.push({\r\n        date,\r\n        day: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][date.getDay()],\r\n        level: painLevel,\r\n        color: getPainColor(painLevel)\r\n      });\r\n    }\r\n\r\n    const totalPain = weekPainData.reduce((sum, item) => sum + item.level, 0);\r\n    const avgPain = weekPainData.length > 0 ? (totalPain / weekPainData.length) : 0;\r\n\r\n    return {\r\n      chartData: data,\r\n      mostCommonLocation: mostCommon,\r\n      averagePainLevel: avgPain\r\n    };\r\n  }, [weekPainData, startOfWeek]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  // Line Chart Component for Pain Ratings\r\n  const PainLineChart = ({ data, isExpanded }) => {\r\n    const config = {\r\n      width: isExpanded ? 480 : 400,\r\n      height: isExpanded ? 200 : 150,\r\n      padding: { top: 20, right: 30, bottom: 40, left: 50 },\r\n      yAxisRange: 10,\r\n      fontSize: {\r\n        yAxis: isExpanded ? 10 : 8,\r\n        xAxis: isExpanded ? 10 : 8,\r\n      }\r\n    };\r\n\r\n    const chartWidth = config.width - config.padding.left - config.padding.right;\r\n    const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n    const dayWidth = chartWidth / 6; // 7 days, 6 intervals\r\n\r\n    // Create line path\r\n    const linePath = data.map((point, index) => {\r\n      const x = config.padding.left + (index * dayWidth);\r\n      const y = config.padding.top + chartHeight - (point.level / config.yAxisRange) * chartHeight;\r\n      return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\r\n    }).join(' ');\r\n\r\n    return (\r\n      <div className=\"pain-line-chart\">\r\n        <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${config.width} ${config.height}`}>\r\n          {/* Grid lines */}\r\n          {[0, 2, 4, 6, 8, 10].map(level => {\r\n            const y = config.padding.top + chartHeight - (level / config.yAxisRange) * chartHeight;\r\n            return (\r\n              <g key={level}>\r\n                <line \r\n                  x1={config.padding.left} \r\n                  y1={y} \r\n                  x2={config.width - config.padding.right} \r\n                  y2={y} \r\n                  stroke=\"#e0e0e0\" \r\n                  strokeWidth=\"1\" \r\n                  strokeDasharray=\"2,2\"\r\n                />\r\n                <text \r\n                  x={config.padding.left - 10} \r\n                  y={y + 3} \r\n                  fontSize={config.fontSize.yAxis} \r\n                  textAnchor=\"end\" \r\n                  fill=\"var(--chart-color-text-secondary)\"\r\n                >\r\n                  {level}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n\r\n          {/* X-axis labels */}\r\n          {data.map((point, index) => {\r\n            const x = config.padding.left + (index * dayWidth);\r\n            return (\r\n              <text \r\n                key={index}\r\n                x={x} \r\n                y={config.height - config.padding.bottom + 15} \r\n                fontSize={config.fontSize.xAxis} \r\n                textAnchor=\"middle\" \r\n                className=\"x-axis-day-label\"\r\n              >\r\n                {point.day}\r\n              </text>\r\n            );\r\n          })}\r\n\r\n          {/* Line */}\r\n          <path \r\n            d={linePath} \r\n            stroke=\"var(--chart-color-primary)\" \r\n            strokeWidth=\"3\" \r\n            fill=\"none\"\r\n          />\r\n\r\n          {/* Data points */}\r\n          {data.map((point, index) => {\r\n            const x = config.padding.left + (index * dayWidth);\r\n            const y = config.padding.top + chartHeight - (point.level / config.yAxisRange) * chartHeight;\r\n            return (\r\n              <circle \r\n                key={index}\r\n                cx={x} \r\n                cy={y} \r\n                r=\"4\" \r\n                fill={point.color} \r\n                stroke=\"var(--chart-color-primary)\" \r\n                strokeWidth=\"2\"\r\n              />\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const Body = ({ location, level }) => {\r\n    const color = getPainColor(level);\r\n    const locationLower = location.toLowerCase();\r\n\r\n    return (\r\n      <div className=\"body-container\">\r\n        <div className=\"body-views\">\r\n          <div className=\"body-view\">\r\n            <div className=\"body-view-label\">Front</div>\r\n            <BodySVG \r\n              className=\"body-svg\" \r\n              painLocation={locationLower} \r\n              painColor={color} \r\n              view=\"front\" \r\n            />\r\n          </div>\r\n          <div className=\"body-view\">\r\n            <div className=\"body-view-label\">Back</div>\r\n            <BodySVG \r\n              className=\"body-svg\" \r\n              painLocation={locationLower} \r\n              painColor={color} \r\n              view=\"back\" \r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (viewMode === 'patient') {\r\n    return (\r\n        <div className=\"pain-chart-container\">\r\n          <div className=\"pain-chart-wrapper\">\r\n            <h3 className=\"chart-title\">Pain</h3>\r\n            <div className=\"pain-list\">\r\n              {weekPainData.length > 0 ? (\r\n                weekPainData.map((item, index) => (\r\n                  <div key={index} className=\"pain-list-item\">\r\n                    <div className=\"pain-item-date\">\r\n                      {new Date(item.date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}\r\n                    </div>\r\n                    <div className=\"pain-item-body\">\r\n                      <Body location={item.location} level={item.level} />\r\n                    </div>\r\n                    <div className=\"pain-item-details\">\r\n                      <div className=\"pain-level\">Pain intensity: {item.level}/10</div>\r\n                      <div className=\"pain-location\">Location: {item.location}</div>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className=\"no-pain-data\">No pain data available for this week</div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"pain-legend-wrapper\">\r\n            <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  // Physician view\r\n  return (\r\n      <div className=\"physician-pain-chart-container\">\r\n        <div className=\"pain-line-chart-container\">\r\n          <h3 className=\"chart-title\">Pain</h3>\r\n          <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n          <PainLineChart data={chartData} isExpanded={isExpanded} />\r\n        </div>\r\n\r\n        <div className=\"pain-location-info\">\r\n          <h4>Pain Location: {mostCommonLocation || 'N/A'}</h4>\r\n        </div>\r\n        \r\n        <div className=\"pain-legend-wrapper\">\r\n          <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\r\n        </div>\r\n\r\n        <div className=\"chart-summary\">\r\n          <h4>Week Summary</h4>\r\n          <div className=\"summary-stats\">\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">Average Pain Intensity:</span>\r\n              <span className=\"stat-value\">{averagePainLevel.toFixed(1)}/10</span>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">Most Common Location:</span>\r\n              <span className=\"stat-value\">{mostCommonLocation || 'N/A'}</span>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">Days with Pain:</span>\r\n              <span className=\"stat-value\">{weekPainData.length}/7</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default PainChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}