{"ast":null,"code":"/*\n Legend.js - Dynamic Chart Legend Component\n \n This component provides interactive legends for chart visualizations:\n - Auto-sizes to fit chart container dimensions\n - Supports horizontal and vertical orientations\n - Dynamically positions based on chart type and container\n - Handles sizing for different chart contexts\n - Provides consistent legend formatting across all chart types\n \n Essential for interpreting chart data and color coding in health visualizations.\n */import React,{useRef,useEffect,useState}from'react';import'./ChartStyles.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Legend=_ref=>{let{title,items,orientation='horizontal',// horizontal | vertical\nsize='medium',// small | medium | large\ncontainerWidth=null,// Keep for backward compatibility, but will be overridden by auto-sizing\nhide=false// Hide legend in screenshot mode\n}=_ref;const legendRef=useRef(null);const[parentWidth,setParentWidth]=useState(null);useEffect(()=>{const updateWidth=()=>{if(legendRef.current){// Find the most specific chart content container (not the wrapper)\nconst specificContainers=['.glucose-chart-wrapper',// Glucose chart wrapper (contains the actual chart)\n'.chart-section',// Blood pressure chart sections\n'.bp-svg-container',// Blood pressure SVG container\n'.exercise-chart-content',// Exercise chart content\n'.sleep-chart',// Sleep chart container\n'.pain-chart-wrapper',// Pain chart wrapper\n'.meal-chart-wrapper',// Meal chart wrapper\n'.mood-calendar-wrapper',// Mood calendar wrapper\n'.pain-line-chart-container'// Pain line chart container\n];let parentContainer=null;let containerWidth=0;// Try to find the most specific container first\nfor(const selector of specificContainers){const container=legendRef.current.closest(selector);if(container){parentContainer=container;// Get the content width excluding padding\nconst computedStyle=window.getComputedStyle(container);const paddingLeft=parseFloat(computedStyle.paddingLeft)||0;const paddingRight=parseFloat(computedStyle.paddingRight)||0;containerWidth=container.offsetWidth-paddingLeft-paddingRight;break;}}// Special handling for pain legends - prioritize pain-chart-wrapper\nif(!parentContainer&&legendRef.current.closest('.pain-legend-wrapper')){var _legendRef$current$cl;const painChartWrapper=(_legendRef$current$cl=legendRef.current.closest('.pain-chart-container'))===null||_legendRef$current$cl===void 0?void 0:_legendRef$current$cl.querySelector('.pain-chart-wrapper');if(painChartWrapper){parentContainer=painChartWrapper;const computedStyle=window.getComputedStyle(painChartWrapper);const paddingLeft=parseFloat(computedStyle.paddingLeft)||0;const paddingRight=parseFloat(computedStyle.paddingRight)||0;containerWidth=painChartWrapper.offsetWidth-paddingLeft-paddingRight;}}// Fallback to chart-specific containers if no specific one found\nif(!parentContainer){const chartContainers=['.glucose-chart-container','.bp-chart-container',// Changed from .bp-chart-content to .bp-chart-container\n'.exercise-chart-container','.sleep-chart-content','.pain-chart-container','.meal-contents-chart-container','.mood-calendar-container'];for(const selector of chartContainers){const container=legendRef.current.closest(selector);if(container){parentContainer=container;// For chart containers, find the inner chart content\nconst innerChart=container.querySelector('.glucose-chart-wrapper, .chart-section, .bp-svg-container, .exercise-chart-content, .sleep-chart, .pain-chart-wrapper, .meal-chart-wrapper, .mood-calendar-wrapper');if(innerChart){// Use the inner chart width\nconst computedStyle=window.getComputedStyle(innerChart);const paddingLeft=parseFloat(computedStyle.paddingLeft)||0;const paddingRight=parseFloat(computedStyle.paddingRight)||0;containerWidth=innerChart.offsetWidth-paddingLeft-paddingRight;}else{// Fallback to container width with padding subtraction\nconst computedStyle=window.getComputedStyle(container);const paddingLeft=parseFloat(computedStyle.paddingLeft)||0;const paddingRight=parseFloat(computedStyle.paddingRight)||0;containerWidth=container.offsetWidth-paddingLeft-paddingRight;}break;}}}// Final fallback to visualization content\nif(!parentContainer){const vizContent=legendRef.current.closest('.visualization-content');if(vizContent){parentContainer=vizContent;const computedStyle=window.getComputedStyle(vizContent);const paddingLeft=parseFloat(computedStyle.paddingLeft)||0;const paddingRight=parseFloat(computedStyle.paddingRight)||0;containerWidth=vizContent.offsetWidth-paddingLeft-paddingRight;}}if(parentContainer&&containerWidth>0){// Add additional margin to prevent touching borders\nconst adjustedWidth=Math.max(containerWidth-32,200);// Ensure minimum width of 200px\nsetParentWidth(adjustedWidth);}}};updateWidth();// Update on resize\nconst resizeObserver=new ResizeObserver(updateWidth);if(legendRef.current){resizeObserver.observe(legendRef.current);}// Also listen for window resize as fallback\nwindow.addEventListener('resize',updateWidth);return()=>{resizeObserver.disconnect();window.removeEventListener('resize',updateWidth);};},[]);if(!items||items.length===0||hide){return null;}// Use parent width if available, otherwise fall back to containerWidth prop or default\nconst finalWidth=parentWidth||containerWidth;const containerStyle=finalWidth?{width:finalWidth,maxWidth:finalWidth}:{};return/*#__PURE__*/_jsxs(\"div\",{ref:legendRef,className:\"legend-container legend-\".concat(orientation,\" legend-\").concat(size),style:containerStyle,children:[title&&/*#__PURE__*/_jsx(\"h4\",{className:\"legend-title\",children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"legend-items\",children:items.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"legend-item\",style:item.style,title:item.description||item.label,children:[item.color&&/*#__PURE__*/_jsx(\"span\",{className:\"legend-color-indicator\",style:{backgroundColor:item.color},\"aria-label\":\"Color indicator for \".concat(item.label)}),item.icon&&/*#__PURE__*/_jsx(\"span\",{className:\"legend-icon\",\"aria-label\":\"Icon for \".concat(item.label),children:item.icon}),item.shape&&/*#__PURE__*/_jsx(\"span\",{className:\"legend-shape legend-shape-\".concat(item.shape),style:item.shapeStyle,\"aria-label\":\"\".concat(item.shape,\" indicator for \").concat(item.label)}),/*#__PURE__*/_jsx(\"span\",{className:\"legend-label\",children:item.label})]},index))})]});};export default Legend;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}