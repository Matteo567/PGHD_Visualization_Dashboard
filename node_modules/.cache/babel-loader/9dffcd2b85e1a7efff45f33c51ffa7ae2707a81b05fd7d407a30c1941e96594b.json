{"ast":null,"code":"import{useState,useCallback}from'react';/**\r\n * Universal navigation hook for chart components\r\n * Provides navigation state and functions that can be used by any chart\r\n */const useChartNavigation=function(chartType){let initialDate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Date(2025,4,1);const[currentDate,setCurrentDate]=useState(initialDate);// Determine navigation type based on chart type\nconst navigationType=chartType==='mood'?'month':'week';const navigationLabel=chartType==='mood'?'Month':'Week';// Navigation functions\nconst goToPrevious=useCallback(()=>{setCurrentDate(prev=>{const newDate=new Date(prev);if(navigationType==='month'){newDate.setMonth(newDate.getMonth()-1);}else{newDate.setDate(newDate.getDate()-7);}return newDate;});},[navigationType]);const goToNext=useCallback(()=>{setCurrentDate(prev=>{const newDate=new Date(prev);if(navigationType==='month'){newDate.setMonth(newDate.getMonth()+1);}else{newDate.setDate(newDate.getDate()+7);}return newDate;});},[navigationType]);// Calculate date range based on navigation type\nconst getDateRange=useCallback(()=>{if(navigationType==='month'){const startOfMonth=new Date(currentDate.getFullYear(),currentDate.getMonth(),1);const endOfMonth=new Date(currentDate.getFullYear(),currentDate.getMonth()+1,0);return{start:startOfMonth,end:endOfMonth};}else{const startOfWeek=new Date(currentDate);startOfWeek.setDate(startOfWeek.getDate()-startOfWeek.getDay());startOfWeek.setHours(0,0,0,0);const endOfWeek=new Date(startOfWeek);endOfWeek.setDate(endOfWeek.getDate()+6);endOfWeek.setHours(23,59,59,999);return{start:startOfWeek,end:endOfWeek};}},[currentDate,navigationType]);return{currentDate,navigationType,navigationLabel,goToPrevious,goToNext,getDateRange};};export default useChartNavigation;","map":{"version":3,"names":["useState","useCallback","useChartNavigation","chartType","initialDate","arguments","length","undefined","Date","currentDate","setCurrentDate","navigationType","navigationLabel","goToPrevious","prev","newDate","setMonth","getMonth","setDate","getDate","goToNext","getDateRange","startOfMonth","getFullYear","endOfMonth","start","end","startOfWeek","getDay","setHours","endOfWeek"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/useChartNavigation.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\n/**\r\n * Universal navigation hook for chart components\r\n * Provides navigation state and functions that can be used by any chart\r\n */\r\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\r\n  const [currentDate, setCurrentDate] = useState(initialDate);\r\n\r\n  // Determine navigation type based on chart type\r\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\r\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\r\n\r\n  // Navigation functions\r\n  const goToPrevious = useCallback(() => {\r\n    setCurrentDate(prev => {\r\n      const newDate = new Date(prev);\r\n      if (navigationType === 'month') {\r\n        newDate.setMonth(newDate.getMonth() - 1);\r\n      } else {\r\n        newDate.setDate(newDate.getDate() - 7);\r\n      }\r\n      return newDate;\r\n    });\r\n  }, [navigationType]);\r\n\r\n  const goToNext = useCallback(() => {\r\n    setCurrentDate(prev => {\r\n      const newDate = new Date(prev);\r\n      if (navigationType === 'month') {\r\n        newDate.setMonth(newDate.getMonth() + 1);\r\n      } else {\r\n        newDate.setDate(newDate.getDate() + 7);\r\n      }\r\n      return newDate;\r\n    });\r\n  }, [navigationType]);\r\n\r\n  // Calculate date range based on navigation type\r\n  const getDateRange = useCallback(() => {\r\n    if (navigationType === 'month') {\r\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n      return { start: startOfMonth, end: endOfMonth };\r\n    } else {\r\n      const startOfWeek = new Date(currentDate);\r\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\r\n      startOfWeek.setHours(0, 0, 0, 0);\r\n      \r\n      const endOfWeek = new Date(startOfWeek);\r\n      endOfWeek.setDate(endOfWeek.getDate() + 6);\r\n      endOfWeek.setHours(23, 59, 59, 999);\r\n      \r\n      return { start: startOfWeek, end: endOfWeek };\r\n    }\r\n  }, [currentDate, navigationType]);\r\n\r\n  return {\r\n    currentDate,\r\n    navigationType,\r\n    navigationLabel,\r\n    goToPrevious,\r\n    goToNext,\r\n    getDateRange\r\n  };\r\n};\r\n\r\nexport default useChartNavigation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}