{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { VISUALIZATION_CONFIG, DASHBOARD_CONFIG } from '../constants';\n\n// Import all chart components\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\nimport PainChart from '../components/patient_charts/PainChart';\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\nimport SleepChart from '../components/patient_charts/SleepChart';\n\n/**\r\n * Shared hook for managing visualizations across different dashboard types\r\n * @param {string} viewMode - 'patient' or 'physician'\r\n * @param {Object} data - Patient data object\r\n * @returns {Object} Visualization state and utilities\r\n */\nconst useVisualizations = (viewMode, data) => {\n  _s();\n  const config = DASHBOARD_CONFIG[viewMode];\n\n  // Create visualization registry with components\n  const allVisualizations = useMemo(() => ({\n    glucose: {\n      ...VISUALIZATION_CONFIG.glucose,\n      component: GlucoseChart\n    },\n    bloodPressure: {\n      ...VISUALIZATION_CONFIG.bloodPressure,\n      component: BloodPressureChart\n    },\n    exercise: {\n      ...VISUALIZATION_CONFIG.exercise,\n      component: ExerciseChart\n    },\n    mood: {\n      ...VISUALIZATION_CONFIG.mood,\n      component: MoodCalendar\n    },\n    pain: {\n      ...VISUALIZATION_CONFIG.pain,\n      component: PainChart\n    },\n    mealContents: {\n      ...VISUALIZATION_CONFIG.mealContents,\n      component: MealContentsChart\n    },\n    sleep: {\n      ...VISUALIZATION_CONFIG.sleep,\n      component: SleepChart\n    }\n  }), []);\n\n  // Determine available visualizations based on data\n  const availableVisualizations = useMemo(() => {\n    if (!data) return {};\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\n      const dataKey = `${key}Data`;\n      // Special case for meal contents\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\n        acc[key] = viz;\n      } else if (data[dataKey] && data[dataKey].length > 0) {\n        acc[key] = viz;\n      }\n      return acc;\n    }, {});\n  }, [data, allVisualizations]);\n\n  // Initialize selected visualizations based on view mode\n  const [selectedVisualizations, setSelectedVisualizations] = useState(config.defaultVisualizations);\n\n  // Update selections when available visualizations change\n  React.useEffect(() => {\n    if (Object.keys(availableVisualizations).length > 0) {\n      const availableKeys = Object.keys(availableVisualizations);\n      const defaultOrder = ['glucose', 'bloodPressure', 'exercise', 'sleep', 'mood', 'pain', 'mealContents'];\n\n      // Filter default order to only include available visualizations\n      const orderedAvailable = defaultOrder.filter(key => availableKeys.includes(key));\n\n      // Fill in any remaining slots with available visualizations not in default order\n      const remaining = availableKeys.filter(key => !orderedAvailable.includes(key));\n      const finalOrder = [...orderedAvailable, ...remaining];\n      setSelectedVisualizations(prev => {\n        const updated = {\n          ...prev\n        };\n        const chartIds = Object.keys(config.defaultVisualizations);\n        chartIds.forEach((chartId, index) => {\n          if (finalOrder[index]) {\n            updated[chartId] = finalOrder[index];\n          } else if (!availableKeys.includes(updated[chartId])) {\n            // If current selection is not available, use the first available\n            updated[chartId] = finalOrder[0] || 'glucose';\n          }\n        });\n        return updated;\n      });\n    }\n  }, [availableVisualizations, config.defaultVisualizations]);\n  const handleVisualizationChange = (chartId, visualizationType) => {\n    setSelectedVisualizations(prev => ({\n      ...prev,\n      [chartId]: visualizationType\n    }));\n  };\n  return {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange,\n    config\n  };\n};\n_s(useVisualizations, \"1V3zC5GeLs2m5f92SH5AclGJXwQ=\");\nexport default useVisualizations;","map":{"version":3,"names":["React","useState","useMemo","VISUALIZATION_CONFIG","DASHBOARD_CONFIG","GlucoseChart","BloodPressureChart","ExerciseChart","MoodCalendar","PainChart","MealContentsChart","SleepChart","useVisualizations","viewMode","data","_s","config","allVisualizations","glucose","component","bloodPressure","exercise","mood","pain","mealContents","sleep","availableVisualizations","Object","entries","reduce","acc","key","viz","dataKey","length","selectedVisualizations","setSelectedVisualizations","defaultVisualizations","useEffect","keys","availableKeys","defaultOrder","orderedAvailable","filter","includes","remaining","finalOrder","prev","updated","chartIds","forEach","chartId","index","handleVisualizationChange","visualizationType"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/useVisualizations.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport { VISUALIZATION_CONFIG, DASHBOARD_CONFIG } from '../constants';\r\n\r\n// Import all chart components\r\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\r\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\r\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\r\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\r\nimport PainChart from '../components/patient_charts/PainChart';\r\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\r\nimport SleepChart from '../components/patient_charts/SleepChart';\r\n\r\n/**\r\n * Shared hook for managing visualizations across different dashboard types\r\n * @param {string} viewMode - 'patient' or 'physician'\r\n * @param {Object} data - Patient data object\r\n * @returns {Object} Visualization state and utilities\r\n */\r\nconst useVisualizations = (viewMode, data) => {\r\n  const config = DASHBOARD_CONFIG[viewMode];\r\n  \r\n  // Create visualization registry with components\r\n  const allVisualizations = useMemo(() => ({\r\n    glucose: { ...VISUALIZATION_CONFIG.glucose, component: GlucoseChart },\r\n    bloodPressure: { ...VISUALIZATION_CONFIG.bloodPressure, component: BloodPressureChart },\r\n    exercise: { ...VISUALIZATION_CONFIG.exercise, component: ExerciseChart },\r\n    mood: { ...VISUALIZATION_CONFIG.mood, component: MoodCalendar },\r\n    pain: { ...VISUALIZATION_CONFIG.pain, component: PainChart },\r\n    mealContents: { ...VISUALIZATION_CONFIG.mealContents, component: MealContentsChart },\r\n    sleep: { ...VISUALIZATION_CONFIG.sleep, component: SleepChart },\r\n  }), []);\r\n\r\n  // Determine available visualizations based on data\r\n  const availableVisualizations = useMemo(() => {\r\n    if (!data) return {};\r\n\r\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\r\n      const dataKey = `${key}Data`;\r\n      // Special case for meal contents\r\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\r\n        acc[key] = viz;\r\n      } else if (data[dataKey] && data[dataKey].length > 0) {\r\n        acc[key] = viz;\r\n      }\r\n      return acc;\r\n    }, {});\r\n  }, [data, allVisualizations]);\r\n\r\n  // Initialize selected visualizations based on view mode\r\n  const [selectedVisualizations, setSelectedVisualizations] = useState(\r\n    config.defaultVisualizations\r\n  );\r\n\r\n  // Update selections when available visualizations change\r\n  React.useEffect(() => {\r\n    if (Object.keys(availableVisualizations).length > 0) {\r\n      const availableKeys = Object.keys(availableVisualizations);\r\n      const defaultOrder = ['glucose', 'bloodPressure', 'exercise', 'sleep', 'mood', 'pain', 'mealContents'];\r\n      \r\n      // Filter default order to only include available visualizations\r\n      const orderedAvailable = defaultOrder.filter(key => availableKeys.includes(key));\r\n      \r\n      // Fill in any remaining slots with available visualizations not in default order\r\n      const remaining = availableKeys.filter(key => !orderedAvailable.includes(key));\r\n      const finalOrder = [...orderedAvailable, ...remaining];\r\n      \r\n      setSelectedVisualizations(prev => {\r\n        const updated = { ...prev };\r\n        const chartIds = Object.keys(config.defaultVisualizations);\r\n        \r\n        chartIds.forEach((chartId, index) => {\r\n          if (finalOrder[index]) {\r\n            updated[chartId] = finalOrder[index];\r\n          } else if (!availableKeys.includes(updated[chartId])) {\r\n            // If current selection is not available, use the first available\r\n            updated[chartId] = finalOrder[0] || 'glucose';\r\n          }\r\n        });\r\n        \r\n        return updated;\r\n      });\r\n    }\r\n  }, [availableVisualizations, config.defaultVisualizations]);\r\n\r\n  const handleVisualizationChange = (chartId, visualizationType) => {\r\n    setSelectedVisualizations(prev => ({ ...prev, [chartId]: visualizationType }));\r\n  };\r\n\r\n  return {\r\n    allVisualizations,\r\n    availableVisualizations,\r\n    selectedVisualizations,\r\n    handleVisualizationChange,\r\n    config\r\n  };\r\n};\r\n\r\nexport default useVisualizations;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAChD,SAASC,oBAAoB,EAAEC,gBAAgB,QAAQ,cAAc;;AAErE;AACA,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,kBAAkB,MAAM,iDAAiD;AAChF,OAAOC,aAAa,MAAM,4CAA4C;AACtE,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,SAAS,MAAM,wCAAwC;AAC9D,OAAOC,iBAAiB,MAAM,gDAAgD;AAC9E,OAAOC,UAAU,MAAM,yCAAyC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,IAAI,KAAK;EAAAC,EAAA;EAC5C,MAAMC,MAAM,GAAGZ,gBAAgB,CAACS,QAAQ,CAAC;;EAEzC;EACA,MAAMI,iBAAiB,GAAGf,OAAO,CAAC,OAAO;IACvCgB,OAAO,EAAE;MAAE,GAAGf,oBAAoB,CAACe,OAAO;MAAEC,SAAS,EAAEd;IAAa,CAAC;IACrEe,aAAa,EAAE;MAAE,GAAGjB,oBAAoB,CAACiB,aAAa;MAAED,SAAS,EAAEb;IAAmB,CAAC;IACvFe,QAAQ,EAAE;MAAE,GAAGlB,oBAAoB,CAACkB,QAAQ;MAAEF,SAAS,EAAEZ;IAAc,CAAC;IACxEe,IAAI,EAAE;MAAE,GAAGnB,oBAAoB,CAACmB,IAAI;MAAEH,SAAS,EAAEX;IAAa,CAAC;IAC/De,IAAI,EAAE;MAAE,GAAGpB,oBAAoB,CAACoB,IAAI;MAAEJ,SAAS,EAAEV;IAAU,CAAC;IAC5De,YAAY,EAAE;MAAE,GAAGrB,oBAAoB,CAACqB,YAAY;MAAEL,SAAS,EAAET;IAAkB,CAAC;IACpFe,KAAK,EAAE;MAAE,GAAGtB,oBAAoB,CAACsB,KAAK;MAAEN,SAAS,EAAER;IAAW;EAChE,CAAC,CAAC,EAAE,EAAE,CAAC;;EAEP;EACA,MAAMe,uBAAuB,GAAGxB,OAAO,CAAC,MAAM;IAC5C,IAAI,CAACY,IAAI,EAAE,OAAO,CAAC,CAAC;IAEpB,OAAOa,MAAM,CAACC,OAAO,CAACX,iBAAiB,CAAC,CAACY,MAAM,CAAC,CAACC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,CAAC,KAAK;MACnE,MAAMC,OAAO,GAAG,GAAGF,GAAG,MAAM;MAC5B;MACA,IAAIA,GAAG,KAAK,cAAc,IAAIjB,IAAI,CAAC,UAAU,CAAC,IAAIA,IAAI,CAAC,UAAU,CAAC,CAACoB,MAAM,GAAG,CAAC,EAAE;QAC7EJ,GAAG,CAACC,GAAG,CAAC,GAAGC,GAAG;MAChB,CAAC,MAAM,IAAIlB,IAAI,CAACmB,OAAO,CAAC,IAAInB,IAAI,CAACmB,OAAO,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;QACpDJ,GAAG,CAACC,GAAG,CAAC,GAAGC,GAAG;MAChB;MACA,OAAOF,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC,EAAE,CAAChB,IAAI,EAAEG,iBAAiB,CAAC,CAAC;;EAE7B;EACA,MAAM,CAACkB,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGnC,QAAQ,CAClEe,MAAM,CAACqB,qBACT,CAAC;;EAED;EACArC,KAAK,CAACsC,SAAS,CAAC,MAAM;IACpB,IAAIX,MAAM,CAACY,IAAI,CAACb,uBAAuB,CAAC,CAACQ,MAAM,GAAG,CAAC,EAAE;MACnD,MAAMM,aAAa,GAAGb,MAAM,CAACY,IAAI,CAACb,uBAAuB,CAAC;MAC1D,MAAMe,YAAY,GAAG,CAAC,SAAS,EAAE,eAAe,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC;;MAEtG;MACA,MAAMC,gBAAgB,GAAGD,YAAY,CAACE,MAAM,CAACZ,GAAG,IAAIS,aAAa,CAACI,QAAQ,CAACb,GAAG,CAAC,CAAC;;MAEhF;MACA,MAAMc,SAAS,GAAGL,aAAa,CAACG,MAAM,CAACZ,GAAG,IAAI,CAACW,gBAAgB,CAACE,QAAQ,CAACb,GAAG,CAAC,CAAC;MAC9E,MAAMe,UAAU,GAAG,CAAC,GAAGJ,gBAAgB,EAAE,GAAGG,SAAS,CAAC;MAEtDT,yBAAyB,CAACW,IAAI,IAAI;QAChC,MAAMC,OAAO,GAAG;UAAE,GAAGD;QAAK,CAAC;QAC3B,MAAME,QAAQ,GAAGtB,MAAM,CAACY,IAAI,CAACvB,MAAM,CAACqB,qBAAqB,CAAC;QAE1DY,QAAQ,CAACC,OAAO,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;UACnC,IAAIN,UAAU,CAACM,KAAK,CAAC,EAAE;YACrBJ,OAAO,CAACG,OAAO,CAAC,GAAGL,UAAU,CAACM,KAAK,CAAC;UACtC,CAAC,MAAM,IAAI,CAACZ,aAAa,CAACI,QAAQ,CAACI,OAAO,CAACG,OAAO,CAAC,CAAC,EAAE;YACpD;YACAH,OAAO,CAACG,OAAO,CAAC,GAAGL,UAAU,CAAC,CAAC,CAAC,IAAI,SAAS;UAC/C;QACF,CAAC,CAAC;QAEF,OAAOE,OAAO;MAChB,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACtB,uBAAuB,EAAEV,MAAM,CAACqB,qBAAqB,CAAC,CAAC;EAE3D,MAAMgB,yBAAyB,GAAGA,CAACF,OAAO,EAAEG,iBAAiB,KAAK;IAChElB,yBAAyB,CAACW,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACI,OAAO,GAAGG;IAAkB,CAAC,CAAC,CAAC;EAChF,CAAC;EAED,OAAO;IACLrC,iBAAiB;IACjBS,uBAAuB;IACvBS,sBAAsB;IACtBkB,yBAAyB;IACzBrC;EACF,CAAC;AACH,CAAC;AAACD,EAAA,CA7EIH,iBAAiB;AA+EvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}