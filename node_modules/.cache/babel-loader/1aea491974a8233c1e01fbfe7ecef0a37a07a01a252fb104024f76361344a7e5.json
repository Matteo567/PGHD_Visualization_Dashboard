{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\MoodCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport Legend from '../Legend';\nimport '../ChartStyles.css';\nimport './MoodCalendar.css';\n\n// --- Constants & Config ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOODS = {\n  happy: 'ðŸ˜Š',\n  sad: 'ðŸ˜¢',\n  angry: 'ðŸ˜ '\n};\nconst MOOD_COLORS = {\n  happy: 'var(--chart-color-mood-happy)',\n  sad: 'var(--chart-color-mood-sad)',\n  angry: 'var(--chart-color-mood-angry)'\n};\nconst MOOD_BACKGROUNDS = {\n  happy: 'var(--chart-color-mood-happy-bg)',\n  sad: 'var(--chart-color-mood-sad-bg)',\n  angry: 'var(--chart-color-mood-angry-bg)'\n};\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst getCalendarConfig = isExpanded => ({\n  svgWidth: isExpanded ? 700 : 350,\n  svgHeight: isExpanded ? 600 : 300,\n  cellWidth: isExpanded ? 100 : 50,\n  cellHeight: isExpanded ? 85 : 44,\n  dayLabelY: isExpanded ? 55 : 30,\n  dayLabelFontSize: isExpanded ? 16 : 9,\n  dateLabelX: isExpanded ? 12 : 5,\n  dateLabelY: isExpanded ? 22 : 12,\n  dateLabelFontSize: isExpanded ? 14 : 8,\n  moodIconFontSize: isExpanded ? 36 : 20,\n  startX: isExpanded ? 50 : 25,\n  startY: isExpanded ? 100 : 55\n});\n\n// --- Helper Functions ---\nconst normalizeMood = mood => mood && MOODS[mood.toLowerCase()] ? mood.toLowerCase() : null;\nconst getMoodEmoji = mood => MOODS[normalizeMood(mood)];\nconst getMoodColor = mood => MOOD_COLORS[normalizeMood(mood)];\nconst getMoodBackgroundColor = mood => MOOD_BACKGROUNDS[normalizeMood(mood)] || '#ffffff';\nconst moodLegendItems = Object.entries(MOODS).map(([mood, emoji]) => ({\n  icon: emoji,\n  label: mood.charAt(0).toUpperCase() + mood.slice(1),\n  style: {\n    backgroundColor: MOOD_BACKGROUNDS[mood],\n    borderColor: MOOD_COLORS[mood]\n  }\n}));\n\n// --- Sub-components ---\n\nconst CalendarHeader = ({\n  config\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  className: \"calendar-header\",\n  children: DAYS_OF_WEEK.map((day, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n    x: config.startX + i * config.cellWidth,\n    y: config.dayLabelY,\n    className: \"day-name-label\",\n    style: {\n      fontSize: config.dayLabelFontSize\n    },\n    children: day\n  }, day, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 54,\n  columnNumber: 3\n}, this);\n_c = CalendarHeader;\nconst DayCell = ({\n  config,\n  date,\n  moods\n}) => {\n  const dayOfMonth = date.getDate();\n  const dayOfWeek = date.getDay();\n  const weekOfMonth = Math.floor((dayOfMonth - 1 + new Date(date.getFullYear(), date.getMonth(), 1).getDay()) / 7);\n  const x = config.startX + dayOfWeek * config.cellWidth;\n  const y = config.startY + weekOfMonth * (config.cellHeight + 2);\n  const primaryMood = moods.length > 0 ? moods[0] : null;\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"day-cell-group\",\n    transform: `translate(${x - config.cellWidth / 2}, ${y - config.cellHeight / 2})`,\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      width: config.cellWidth,\n      height: config.cellHeight,\n      fill: getMoodBackgroundColor(primaryMood),\n      className: \"day-cell-bg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: config.dateLabelX,\n      y: config.dateLabelY,\n      className: \"date-label\",\n      style: {\n        fontSize: config.dateLabelFontSize\n      },\n      children: dayOfMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), primaryMood && /*#__PURE__*/_jsxDEV(\"text\", {\n      x: config.cellWidth / 2,\n      y: config.cellHeight * 0.65,\n      className: \"mood-icon\",\n      fill: getMoodColor(primaryMood),\n      style: {\n        fontSize: config.moodIconFontSize\n      },\n      children: getMoodEmoji(primaryMood)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_c2 = DayCell;\nconst Calendar = ({\n  isExpanded,\n  moodByDate,\n  currentMonth\n}) => {\n  const config = getCalendarConfig(isExpanded);\n  const year = currentMonth.getFullYear();\n  const month = currentMonth.getMonth();\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-calendar-svg-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Mood Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: `0 0 ${config.svgWidth} ${config.svgHeight}`,\n      className: \"mood-calendar-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        width: config.svgWidth,\n        height: config.svgHeight,\n        fill: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalendarHeader, {\n        config: config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"calendar-body\",\n        children: [...Array(daysInMonth)].map((_, i) => {\n          const dayOfMonth = i + 1;\n          const date = new Date(year, month, dayOfMonth);\n          return /*#__PURE__*/_jsxDEV(DayCell, {\n            config: config,\n            date: date,\n            moods: moodByDate[dayOfMonth] || []\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n// --- Main Component ---\n_c3 = Calendar;\nconst MoodCalendar = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient'\n}) => {\n  _s();\n  const {\n    moodData,\n    isLoading: loading,\n    error\n  } = usePatientData(patientId, 'mood');\n  const [currentMonth, setCurrentMonth] = useState(new Date(2025, 4, 1));\n  const handlePrevMonth = () => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() - 1, 1));\n  const handleNextMonth = () => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() + 1, 1));\n  const moodByDate = moodData.filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth()).reduce((acc, item) => {\n    const dateKey = item.date.getDate();\n    if (!acc[dateKey]) acc[dateKey] = [];\n    acc[dateKey].push(item.mood);\n    return acc;\n  }, {});\n  const monthName = currentMonth.toLocaleString('default', {\n    month: 'long'\n  });\n\n  // Calculate summary statistics for physician view\n  const monthSummary = useMemo(() => {\n    const currentMonthData = moodData.filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth());\n    if (currentMonthData.length === 0) return null;\n\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n    currentMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = currentMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? (count / totalEntries * 100).toFixed(0) : 0;\n    });\n\n    // Days in current month\n    const daysInMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();\n    const daysWithMood = new Set(currentMonthData.map(d => d.date.getDate())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n    return {\n      totalEntries,\n      daysWithMood,\n      daysInMonth,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }, [moodData, currentMonth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mood-calendar-wrapper ${isExpanded ? 'expanded' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(Calendar, {\n        isExpanded: isExpanded,\n        moodByDate: moodByDate,\n        currentMonth: currentMonth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-calendar-legend-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Legend, {\n        title: \"Mood Legend\",\n        items: moodLegendItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), viewMode === 'physician' && monthSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Month Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Mood Entries:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [monthSummary.totalEntries, \" entries\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Days Tracked:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [monthSummary.daysWithMood, \"/\", monthSummary.daysInMonth, \" days\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Most Common Mood:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [MOODS[monthSummary.mostCommonMood], \" \", monthSummary.mostCommonMood.charAt(0).toUpperCase() + monthSummary.mostCommonMood.slice(1), \" (\", monthSummary.mostCommonMoodCount, \"x)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Mood Distribution:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [\"\\uD83D\\uDE0A\", monthSummary.moodPercentages.happy, \"% \\uD83D\\uDE22\", monthSummary.moodPercentages.sad, \"% \\uD83D\\uDE20\", monthSummary.moodPercentages.angry, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Overall Trend:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `stat-value ${monthSummary.moodTrend.toLowerCase().replace(' ', '-')}`,\n            children: monthSummary.moodTrend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodCalendar, \"AIfMxl5QZ683zHXb9PYs2kARgf4=\", false, function () {\n  return [usePatientData];\n});\n_c4 = MoodCalendar;\nexport default MoodCalendar;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CalendarHeader\");\n$RefreshReg$(_c2, \"DayCell\");\n$RefreshReg$(_c3, \"Calendar\");\n$RefreshReg$(_c4, \"MoodCalendar\");","map":{"version":3,"names":["React","useState","useMemo","usePatientData","Legend","jsxDEV","_jsxDEV","MOODS","happy","sad","angry","MOOD_COLORS","MOOD_BACKGROUNDS","DAYS_OF_WEEK","getCalendarConfig","isExpanded","svgWidth","svgHeight","cellWidth","cellHeight","dayLabelY","dayLabelFontSize","dateLabelX","dateLabelY","dateLabelFontSize","moodIconFontSize","startX","startY","normalizeMood","mood","toLowerCase","getMoodEmoji","getMoodColor","getMoodBackgroundColor","moodLegendItems","Object","entries","map","emoji","icon","label","charAt","toUpperCase","slice","style","backgroundColor","borderColor","CalendarHeader","config","className","children","day","i","x","y","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","DayCell","date","moods","dayOfMonth","getDate","dayOfWeek","getDay","weekOfMonth","Math","floor","Date","getFullYear","getMonth","primaryMood","length","transform","width","height","fill","_c2","Calendar","moodByDate","currentMonth","year","month","daysInMonth","viewBox","Array","_","_c3","MoodCalendar","patientId","onExpand","viewMode","_s","moodData","isLoading","loading","error","setCurrentMonth","handlePrevMonth","prev","handleNextMonth","filter","d","reduce","acc","item","dateKey","push","monthName","toLocaleString","monthSummary","currentMonthData","moodCounts","keys","forEach","entry","normalizedMood","undefined","mostCommonMood","sort","a","b","totalEntries","moodPercentages","count","toFixed","daysWithMood","Set","size","moodScore","moodTrend","mostCommonMoodCount","title","items","replace","_c4","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/MoodCalendar.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport Legend from '../Legend';\r\nimport '../ChartStyles.css';\r\nimport './MoodCalendar.css';\r\n\r\n// --- Constants & Config ---\r\nconst MOODS = { happy: 'ðŸ˜Š', sad: 'ðŸ˜¢', angry: 'ðŸ˜ ' };\r\nconst MOOD_COLORS = { \r\n  happy: 'var(--chart-color-mood-happy)', \r\n  sad: 'var(--chart-color-mood-sad)', \r\n  angry: 'var(--chart-color-mood-angry)' \r\n};\r\nconst MOOD_BACKGROUNDS = { \r\n  happy: 'var(--chart-color-mood-happy-bg)', \r\n  sad: 'var(--chart-color-mood-sad-bg)', \r\n  angry: 'var(--chart-color-mood-angry-bg)' \r\n};\r\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\nconst getCalendarConfig = (isExpanded) => ({\r\n  svgWidth: isExpanded ? 700 : 350,\r\n  svgHeight: isExpanded ? 600 : 300,\r\n  cellWidth: isExpanded ? 100 : 50,\r\n  cellHeight: isExpanded ? 85 : 44,\r\n  dayLabelY: isExpanded ? 55 : 30,\r\n  dayLabelFontSize: isExpanded ? 16 : 9,\r\n  dateLabelX: isExpanded ? 12 : 5,\r\n  dateLabelY: isExpanded ? 22 : 12,\r\n  dateLabelFontSize: isExpanded ? 14 : 8,\r\n  moodIconFontSize: isExpanded ? 36 : 20,\r\n  startX: isExpanded ? 50 : 25,\r\n  startY: isExpanded ? 100 : 55,\r\n});\r\n\r\n// --- Helper Functions ---\r\nconst normalizeMood = (mood) => (mood && MOODS[mood.toLowerCase()]) ? mood.toLowerCase() : null;\r\nconst getMoodEmoji = (mood) => MOODS[normalizeMood(mood)];\r\nconst getMoodColor = (mood) => MOOD_COLORS[normalizeMood(mood)];\r\nconst getMoodBackgroundColor = (mood) => MOOD_BACKGROUNDS[normalizeMood(mood)] || '#ffffff';\r\n\r\nconst moodLegendItems = Object.entries(MOODS).map(([mood, emoji]) => ({\r\n  icon: emoji,\r\n  label: mood.charAt(0).toUpperCase() + mood.slice(1),\r\n  style: {\r\n    backgroundColor: MOOD_BACKGROUNDS[mood],\r\n    borderColor: MOOD_COLORS[mood],\r\n  },\r\n}));\r\n\r\n// --- Sub-components ---\r\n\r\nconst CalendarHeader = ({ config }) => (\r\n  <g className=\"calendar-header\">\r\n    {DAYS_OF_WEEK.map((day, i) => (\r\n      <text \r\n        key={day} \r\n        x={config.startX + i * config.cellWidth} \r\n        y={config.dayLabelY} \r\n        className=\"day-name-label\"\r\n        style={{ fontSize: config.dayLabelFontSize }}\r\n      >\r\n        {day}\r\n      </text>\r\n    ))}\r\n  </g>\r\n);\r\n\r\nconst DayCell = ({ config, date, moods }) => {\r\n  const dayOfMonth = date.getDate();\r\n  const dayOfWeek = date.getDay();\r\n  const weekOfMonth = Math.floor((dayOfMonth - 1 + new Date(date.getFullYear(), date.getMonth(), 1).getDay()) / 7);\r\n  const x = config.startX + dayOfWeek * config.cellWidth;\r\n  const y = config.startY + weekOfMonth * (config.cellHeight + 2);\r\n  const primaryMood = moods.length > 0 ? moods[0] : null;\r\n\r\n  return (\r\n    <g className=\"day-cell-group\" transform={`translate(${x - config.cellWidth / 2}, ${y - config.cellHeight / 2})`}>\r\n      <rect width={config.cellWidth} height={config.cellHeight} fill={getMoodBackgroundColor(primaryMood)} className=\"day-cell-bg\" />\r\n      <text \r\n        x={config.dateLabelX} \r\n        y={config.dateLabelY} \r\n        className=\"date-label\" \r\n        style={{ fontSize: config.dateLabelFontSize }}\r\n      >\r\n        {dayOfMonth}\r\n      </text>\r\n      {primaryMood && (\r\n        <text \r\n          x={config.cellWidth / 2} \r\n          y={config.cellHeight * 0.65} \r\n          className=\"mood-icon\" \r\n          fill={getMoodColor(primaryMood)}\r\n          style={{ fontSize: config.moodIconFontSize }}\r\n        >\r\n          {getMoodEmoji(primaryMood)}\r\n        </text>\r\n      )}\r\n    </g>\r\n  );\r\n};\r\n\r\nconst Calendar = ({ isExpanded, moodByDate, currentMonth }) => {\r\n  const config = getCalendarConfig(isExpanded);\r\n  const year = currentMonth.getFullYear();\r\n  const month = currentMonth.getMonth();\r\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n\r\n  return (\r\n    <div className=\"mood-calendar-svg-container\">\r\n      <h3 className=\"chart-title\">Mood Calendar</h3>\r\n      <svg viewBox={`0 0 ${config.svgWidth} ${config.svgHeight}`} className=\"mood-calendar-svg\">\r\n        <rect width={config.svgWidth} height={config.svgHeight} fill=\"white\" />\r\n        <CalendarHeader config={config} />\r\n        <g className=\"calendar-body\">\r\n          {[...Array(daysInMonth)].map((_, i) => {\r\n            const dayOfMonth = i + 1;\r\n            const date = new Date(year, month, dayOfMonth);\r\n            return <DayCell key={i} config={config} date={date} moods={moodByDate[dayOfMonth] || []} />;\r\n          })}\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\n// --- Main Component ---\r\nconst MoodCalendar = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient' }) => {\r\n  const { moodData, isLoading: loading, error } = usePatientData(patientId, 'mood');\r\n  const [currentMonth, setCurrentMonth] = useState(new Date(2025, 4, 1));\r\n\r\n  const handlePrevMonth = () => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() - 1, 1));\r\n  const handleNextMonth = () => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() + 1, 1));\r\n\r\n  const moodByDate = moodData\r\n    .filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth())\r\n    .reduce((acc, item) => {\r\n      const dateKey = item.date.getDate();\r\n      if (!acc[dateKey]) acc[dateKey] = [];\r\n      acc[dateKey].push(item.mood);\r\n      return acc;\r\n    }, {});\r\n\r\n  const monthName = currentMonth.toLocaleString('default', { month: 'long' });\r\n\r\n  // Calculate summary statistics for physician view\r\n  const monthSummary = useMemo(() => {\r\n    const currentMonthData = moodData.filter(d => \r\n      d.date.getFullYear() === currentMonth.getFullYear() && \r\n      d.date.getMonth() === currentMonth.getMonth()\r\n    );\r\n\r\n    if (currentMonthData.length === 0) return null;\r\n\r\n    // Count mood occurrences\r\n    const moodCounts = {};\r\n    Object.keys(MOODS).forEach(mood => {\r\n      moodCounts[mood] = 0;\r\n    });\r\n\r\n    currentMonthData.forEach(entry => {\r\n      const normalizedMood = normalizeMood(entry.mood);\r\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\r\n        moodCounts[normalizedMood]++;\r\n      }\r\n    });\r\n\r\n    // Find most common mood\r\n    const mostCommonMood = Object.entries(moodCounts)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    // Calculate mood distribution percentages\r\n    const totalEntries = currentMonthData.length;\r\n    const moodPercentages = {};\r\n    Object.entries(moodCounts).forEach(([mood, count]) => {\r\n      moodPercentages[mood] = totalEntries > 0 ? ((count / totalEntries) * 100).toFixed(0) : 0;\r\n    });\r\n\r\n    // Days in current month\r\n    const daysInMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();\r\n    const daysWithMood = new Set(currentMonthData.map(d => d.date.getDate())).size;\r\n\r\n    // Calculate mood score (happy=3, sad=1, angry=1)\r\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\r\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\r\n\r\n    return {\r\n      totalEntries,\r\n      daysWithMood,\r\n      daysInMonth,\r\n      mostCommonMood: mostCommonMood[0],\r\n      mostCommonMoodCount: mostCommonMood[1],\r\n      moodCounts,\r\n      moodPercentages,\r\n      moodTrend\r\n    };\r\n  }, [moodData, currentMonth]);\r\n\r\n  return (\r\n    <div className=\"mood-calendar-container\">\r\n      <div className={`mood-calendar-wrapper ${isExpanded ? 'expanded' : ''}`}>\r\n        <Calendar isExpanded={isExpanded} moodByDate={moodByDate} currentMonth={currentMonth} />\r\n      </div>\r\n      <div className=\"mood-calendar-legend-wrapper\">\r\n          <Legend title=\"Mood Legend\" items={moodLegendItems} />\r\n      </div>\r\n\r\n      {/* Show summary for physician view only */}\r\n      {viewMode === 'physician' && monthSummary && (\r\n        <div className=\"chart-summary\">\r\n          <h4>Month Summary</h4>\r\n          <div className=\"summary-stats\">\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">Mood Entries:</span>\r\n              <span className=\"stat-value\">\r\n                {monthSummary.totalEntries} entries\r\n              </span>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">Days Tracked:</span>\r\n              <span className=\"stat-value\">\r\n                {monthSummary.daysWithMood}/{monthSummary.daysInMonth} days\r\n              </span>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">Most Common Mood:</span>\r\n              <span className=\"stat-value\">\r\n                {MOODS[monthSummary.mostCommonMood]} {monthSummary.mostCommonMood.charAt(0).toUpperCase() + monthSummary.mostCommonMood.slice(1)} ({monthSummary.mostCommonMoodCount}x)\r\n              </span>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">Mood Distribution:</span>\r\n              <span className=\"stat-value\">\r\n                ðŸ˜Š{monthSummary.moodPercentages.happy}% ðŸ˜¢{monthSummary.moodPercentages.sad}% ðŸ˜ {monthSummary.moodPercentages.angry}%\r\n              </span>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">Overall Trend:</span>\r\n              <span className={`stat-value ${monthSummary.moodTrend.toLowerCase().replace(' ', '-')}`}>\r\n                {monthSummary.moodTrend}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoodCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}