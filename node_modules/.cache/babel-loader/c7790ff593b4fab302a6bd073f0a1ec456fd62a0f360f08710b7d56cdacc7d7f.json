{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\DashboardGrid.js\";\n/**\n * DashboardGrid.js - Chart Grid Layout Component\n * \n * This component provides a flexible grid layout system for organizing charts by\n * rendering all available visualizations in a grid, handling expanded/collapsed\n * chart states, integrating chart navigation controls, and providing placeholder\n * states for empty data scenarios.\n * \n * Acts as the main container for organizing multiple health metric visualizations.\n */\n\nimport React from 'react';\nimport VisualizationWrapper from './VisualizationWrapper';\nimport Placeholder from './ui/Placeholder';\nimport './DashboardGrid.css';\n\n/**\n * Shared component for rendering dashboard grids with visualization wrappers\n * Shows all available visualizations instead of using dropdown selectors\n * \n * @param {Object} props - Component props\n * @param {string} props.viewMode - 'patient' or 'physician'\n * @param {Object} props.selectedVisualizations - Currently selected visualizations\n * @param {Object} props.availableVisualizations - Available visualizations\n * @param {Object} props.allVisualizations - All visualization configurations\n * @param {Function} props.onVisualizationChange - Handler for visualization changes\n * @param {Function} props.onExpand - Handler for expand/collapse\n * @param {string|null} props.expandedItem - Currently expanded item ID\n * @param {Function} props.renderVisualization - Function to render visualizations\n * @param {boolean} props.disabled - Whether the grid is disabled\n * @param {string} props.placeholderText - Text to show when no data is available\n * @param {boolean} props.showSummaries - Whether to show summaries (unused)\n * @param {Object} props.summaryTexts - Summary texts (unused)\n * @param {Function} props.onSummaryChange - Summary change handler (unused)\n * @param {Object} props.chartNavigation - Navigation objects for each chart type\n * @returns {JSX.Element} The dashboard grid component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardGrid = ({\n  viewMode,\n  // 'patient' or 'physician'\n  selectedVisualizations,\n  availableVisualizations,\n  allVisualizations,\n  onVisualizationChange,\n  onExpand,\n  expandedItem,\n  renderVisualization,\n  disabled = false,\n  placeholderText = \"No data available for this patient.\",\n  // New props for physician summary functionality\n  showSummaries = false,\n  summaryTexts = {},\n  onSummaryChange = null,\n  // Navigation props\n  chartNavigation = {}\n}) => {\n  // Configuration for different view modes\n  const gridConfig = {\n    patient: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    },\n    physician: {\n      className: 'physician-charts-grid',\n      chartClassNames: ['physician-chart-container']\n    }\n  };\n  const config = gridConfig[viewMode];\n\n  // Get all available visualization types\n  const availableVizTypes = Object.keys(availableVisualizations);\n\n  // If there's an expanded item, show only that\n  if (expandedItem) {\n    const selectedViz = selectedVisualizations[expandedItem];\n    const navigation = chartNavigation[selectedViz];\n    const wrapperProps = {\n      id: expandedItem,\n      className: `${config.chartClassNames[0]} expanded-view`,\n      selectedViz: selectedViz,\n      availableVisualizations: availableVisualizations,\n      allVisualizations: allVisualizations,\n      onVisualizationChange: onVisualizationChange,\n      onExpand: onExpand,\n      isExpanded: true,\n      renderVisualization: renderVisualization,\n      disabled: disabled,\n      placeholderText: placeholderText,\n      onPrev: navigation === null || navigation === void 0 ? void 0 : navigation.goToPrevious,\n      onNext: navigation === null || navigation === void 0 ? void 0 : navigation.goToNext,\n      navigationLabel: (navigation === null || navigation === void 0 ? void 0 : navigation.navigationLabel) || 'Week'\n    };\n    return /*#__PURE__*/_jsxDEV(VisualizationWrapper, {\n      ...wrapperProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If no visualizations available, show placeholder\n  if (availableVizTypes.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: config.className,\n      children: /*#__PURE__*/_jsxDEV(Placeholder, {\n        message: placeholderText,\n        type: \"no-data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render all available visualizations\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: config.className,\n    children: availableVizTypes.map((vizType, index) => {\n      const chartId = `${viewMode}-chart-${index}`;\n      const navigation = chartNavigation[vizType];\n      const wrapperProps = {\n        key: chartId,\n        id: chartId,\n        className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\n        selectedViz: vizType,\n        availableVisualizations: availableVisualizations,\n        allVisualizations: allVisualizations,\n        onVisualizationChange: onVisualizationChange,\n        onExpand: onExpand,\n        isExpanded: expandedItem === chartId,\n        renderVisualization: renderVisualization,\n        disabled: disabled,\n        placeholderText: placeholderText,\n        onPrev: navigation === null || navigation === void 0 ? void 0 : navigation.goToPrevious,\n        onNext: navigation === null || navigation === void 0 ? void 0 : navigation.goToNext,\n        navigationLabel: (navigation === null || navigation === void 0 ? void 0 : navigation.navigationLabel) || 'Week'\n      };\n      return /*#__PURE__*/_jsxDEV(VisualizationWrapper, {\n        ...wrapperProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_c = DashboardGrid;\nexport default DashboardGrid;\nvar _c;\n$RefreshReg$(_c, \"DashboardGrid\");","map":{"version":3,"names":["React","VisualizationWrapper","Placeholder","jsxDEV","_jsxDEV","DashboardGrid","viewMode","selectedVisualizations","availableVisualizations","allVisualizations","onVisualizationChange","onExpand","expandedItem","renderVisualization","disabled","placeholderText","showSummaries","summaryTexts","onSummaryChange","chartNavigation","gridConfig","patient","className","chartClassNames","physician","config","availableVizTypes","Object","keys","selectedViz","navigation","wrapperProps","id","isExpanded","onPrev","goToPrevious","onNext","goToNext","navigationLabel","fileName","_jsxFileName","lineNumber","columnNumber","length","children","message","type","map","vizType","index","chartId","key","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/DashboardGrid.js"],"sourcesContent":["/**\n * DashboardGrid.js - Chart Grid Layout Component\n * \n * This component provides a flexible grid layout system for organizing charts by\n * rendering all available visualizations in a grid, handling expanded/collapsed\n * chart states, integrating chart navigation controls, and providing placeholder\n * states for empty data scenarios.\n * \n * Acts as the main container for organizing multiple health metric visualizations.\n */\n\nimport React from 'react';\nimport VisualizationWrapper from './VisualizationWrapper';\nimport Placeholder from './ui/Placeholder';\nimport './DashboardGrid.css';\n\n/**\n * Shared component for rendering dashboard grids with visualization wrappers\n * Shows all available visualizations instead of using dropdown selectors\n * \n * @param {Object} props - Component props\n * @param {string} props.viewMode - 'patient' or 'physician'\n * @param {Object} props.selectedVisualizations - Currently selected visualizations\n * @param {Object} props.availableVisualizations - Available visualizations\n * @param {Object} props.allVisualizations - All visualization configurations\n * @param {Function} props.onVisualizationChange - Handler for visualization changes\n * @param {Function} props.onExpand - Handler for expand/collapse\n * @param {string|null} props.expandedItem - Currently expanded item ID\n * @param {Function} props.renderVisualization - Function to render visualizations\n * @param {boolean} props.disabled - Whether the grid is disabled\n * @param {string} props.placeholderText - Text to show when no data is available\n * @param {boolean} props.showSummaries - Whether to show summaries (unused)\n * @param {Object} props.summaryTexts - Summary texts (unused)\n * @param {Function} props.onSummaryChange - Summary change handler (unused)\n * @param {Object} props.chartNavigation - Navigation objects for each chart type\n * @returns {JSX.Element} The dashboard grid component\n */\nconst DashboardGrid = ({\n  viewMode, // 'patient' or 'physician'\n  selectedVisualizations,\n  availableVisualizations,\n  allVisualizations,\n  onVisualizationChange,\n  onExpand,\n  expandedItem,\n  renderVisualization,\n  disabled = false,\n  placeholderText = \"No data available for this patient.\",\n  // New props for physician summary functionality\n  showSummaries = false,\n  summaryTexts = {},\n  onSummaryChange = null,\n  // Navigation props\n  chartNavigation = {}\n}) => {\n  // Configuration for different view modes\n  const gridConfig = {\n    patient: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    },\n    physician: {\n      className: 'physician-charts-grid',\n      chartClassNames: ['physician-chart-container']\n    }\n  };\n\n  const config = gridConfig[viewMode];\n\n  // Get all available visualization types\n  const availableVizTypes = Object.keys(availableVisualizations);\n\n  // If there's an expanded item, show only that\n  if (expandedItem) {\n    const selectedViz = selectedVisualizations[expandedItem];\n    const navigation = chartNavigation[selectedViz];\n    \n    const wrapperProps = {\n      id: expandedItem,\n      className: `${config.chartClassNames[0]} expanded-view`,\n      selectedViz: selectedViz,\n      availableVisualizations: availableVisualizations,\n      allVisualizations: allVisualizations,\n      onVisualizationChange: onVisualizationChange,\n      onExpand: onExpand,\n      isExpanded: true,\n      renderVisualization: renderVisualization,\n      disabled: disabled,\n      placeholderText: placeholderText,\n      onPrev: navigation?.goToPrevious,\n      onNext: navigation?.goToNext,\n      navigationLabel: navigation?.navigationLabel || 'Week'\n    };\n\n    return <VisualizationWrapper {...wrapperProps} />;\n  }\n\n  // If no visualizations available, show placeholder\n  if (availableVizTypes.length === 0) {\n    return (\n      <div className={config.className}>\n        <Placeholder message={placeholderText} type=\"no-data\" />\n      </div>\n    );\n  }\n\n  // Render all available visualizations\n  return (\n    <div className={config.className}>\n      {availableVizTypes.map((vizType, index) => {\n        const chartId = `${viewMode}-chart-${index}`;\n        \n        const navigation = chartNavigation[vizType];\n        const wrapperProps = {\n          key: chartId,\n          id: chartId,\n          className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\n          selectedViz: vizType,\n          availableVisualizations: availableVisualizations,\n          allVisualizations: allVisualizations,\n          onVisualizationChange: onVisualizationChange,\n          onExpand: onExpand,\n          isExpanded: expandedItem === chartId,\n          renderVisualization: renderVisualization,\n          disabled: disabled,\n          placeholderText: placeholderText,\n          onPrev: navigation?.goToPrevious,\n          onNext: navigation?.goToNext,\n          navigationLabel: navigation?.navigationLabel || 'Week'\n        };\n\n        return <VisualizationWrapper {...wrapperProps} />;\n      })}\n    </div>\n  );\n};\n\nexport default DashboardGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}