{"ast":null,"code":"import React,{useState,useMemo}from'react';import ChartContainer from'../ChartContainer';import usePatientData from'../../hooks/usePatientData';import Legend from'../Legend';import'../ChartStyles.css';import'./MoodCalendar.css';// --- Constants & Config ---\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MOODS={happy:'ðŸ˜Š',sad:'ðŸ˜¢',angry:'ðŸ˜ '};const MOOD_COLORS={happy:'var(--chart-color-mood-happy)',sad:'var(--chart-color-mood-sad)',angry:'var(--chart-color-mood-angry)'};const MOOD_BACKGROUNDS={happy:'var(--chart-color-mood-happy-bg)',sad:'var(--chart-color-mood-sad-bg)',angry:'var(--chart-color-mood-angry-bg)'};const DAYS_OF_WEEK=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];const getCalendarConfig=isExpanded=>({svgWidth:isExpanded?700:350,svgHeight:isExpanded?600:300,cellWidth:isExpanded?100:50,cellHeight:isExpanded?85:44,dayLabelY:isExpanded?55:30,dayLabelFontSize:isExpanded?16:9,dateLabelX:isExpanded?12:5,dateLabelY:isExpanded?22:12,dateLabelFontSize:isExpanded?14:8,moodIconFontSize:isExpanded?36:20,startX:isExpanded?50:25,startY:isExpanded?100:55});// --- Helper Functions ---\nconst normalizeMood=mood=>mood&&MOODS[mood.toLowerCase()]?mood.toLowerCase():null;const getMoodEmoji=mood=>MOODS[normalizeMood(mood)];const getMoodColor=mood=>MOOD_COLORS[normalizeMood(mood)];const getMoodBackgroundColor=mood=>MOOD_BACKGROUNDS[normalizeMood(mood)]||'#ffffff';const moodLegendItems=Object.entries(MOODS).map(_ref=>{let[mood,emoji]=_ref;return{icon:emoji,label:mood.charAt(0).toUpperCase()+mood.slice(1),style:{backgroundColor:MOOD_BACKGROUNDS[mood],borderColor:MOOD_COLORS[mood]}};});// --- Sub-components ---\nconst CalendarHeader=_ref2=>{let{config}=_ref2;return/*#__PURE__*/_jsx(\"g\",{className:\"calendar-header\",children:DAYS_OF_WEEK.map((day,i)=>/*#__PURE__*/_jsx(\"text\",{x:config.startX+i*config.cellWidth,y:config.dayLabelY,className:\"day-name-label\",style:{fontSize:config.dayLabelFontSize},children:day},day))});};const DayCell=_ref3=>{let{config,date,moods}=_ref3;const dayOfMonth=date.getDate();const dayOfWeek=date.getDay();const weekOfMonth=Math.floor((dayOfMonth-1+new Date(date.getFullYear(),date.getMonth(),1).getDay())/7);const x=config.startX+dayOfWeek*config.cellWidth;const y=config.startY+weekOfMonth*(config.cellHeight+2);const primaryMood=moods.length>0?moods[0]:null;return/*#__PURE__*/_jsxs(\"g\",{className:\"day-cell-group\",transform:\"translate(\".concat(x-config.cellWidth/2,\", \").concat(y-config.cellHeight/2,\")\"),children:[/*#__PURE__*/_jsx(\"rect\",{width:config.cellWidth,height:config.cellHeight,fill:getMoodBackgroundColor(primaryMood),className:\"day-cell-bg\"}),/*#__PURE__*/_jsx(\"text\",{x:config.dateLabelX,y:config.dateLabelY,className:\"date-label\",style:{fontSize:config.dateLabelFontSize},children:dayOfMonth}),primaryMood&&/*#__PURE__*/_jsx(\"text\",{x:config.cellWidth/2,y:config.cellHeight*0.65,className:\"mood-icon\",fill:getMoodColor(primaryMood),style:{fontSize:config.moodIconFontSize},children:getMoodEmoji(primaryMood)})]});};const Calendar=_ref4=>{let{isExpanded,moodByDate,currentMonth}=_ref4;const config=getCalendarConfig(isExpanded);const year=currentMonth.getFullYear();const month=currentMonth.getMonth();const daysInMonth=new Date(year,month+1,0).getDate();return/*#__PURE__*/_jsx(\"div\",{className:\"mood-calendar-svg-container\",children:/*#__PURE__*/_jsxs(\"svg\",{viewBox:\"0 0 \".concat(config.svgWidth,\" \").concat(config.svgHeight),className:\"mood-calendar-svg\",children:[/*#__PURE__*/_jsx(\"rect\",{width:config.svgWidth,height:config.svgHeight,fill:\"white\"}),/*#__PURE__*/_jsx(CalendarHeader,{config:config}),/*#__PURE__*/_jsx(\"g\",{className:\"calendar-body\",children:[...Array(daysInMonth)].map((_,i)=>{const dayOfMonth=i+1;const date=new Date(year,month,dayOfMonth);return/*#__PURE__*/_jsx(DayCell,{config:config,date:date,moods:moodByDate[dayOfMonth]||[]},i);})})]})});};// --- Main Component ---\nconst MoodCalendar=_ref5=>{let{patientId,isExpanded=false,onExpand,isPhysicianView=false}=_ref5;const{moodData,isLoading:loading,error}=usePatientData(patientId,'mood');const[currentMonth,setCurrentMonth]=useState(new Date(2025,4,1));const handlePrevMonth=()=>setCurrentMonth(prev=>new Date(prev.getFullYear(),prev.getMonth()-1,1));const handleNextMonth=()=>setCurrentMonth(prev=>new Date(prev.getFullYear(),prev.getMonth()+1,1));const moodByDate=moodData.filter(d=>d.date.getFullYear()===currentMonth.getFullYear()&&d.date.getMonth()===currentMonth.getMonth()).reduce((acc,item)=>{const dateKey=item.date.getDate();if(!acc[dateKey])acc[dateKey]=[];acc[dateKey].push(item.mood);return acc;},{});const monthName=currentMonth.toLocaleString('default',{month:'long'});// Calculate summary statistics for physician view\nconst monthSummary=useMemo(()=>{const currentMonthData=moodData.filter(d=>d.date.getFullYear()===currentMonth.getFullYear()&&d.date.getMonth()===currentMonth.getMonth());if(currentMonthData.length===0)return null;// Count mood occurrences\nconst moodCounts={};Object.keys(MOODS).forEach(mood=>{moodCounts[mood]=0;});currentMonthData.forEach(entry=>{const normalizedMood=normalizeMood(entry.mood);if(normalizedMood&&moodCounts[normalizedMood]!==undefined){moodCounts[normalizedMood]++;}});// Find most common mood\nconst mostCommonMood=Object.entries(moodCounts).sort((_ref6,_ref7)=>{let[,a]=_ref6;let[,b]=_ref7;return b-a;})[0];// Calculate mood distribution percentages\nconst totalEntries=currentMonthData.length;const moodPercentages={};Object.entries(moodCounts).forEach(_ref8=>{let[mood,count]=_ref8;moodPercentages[mood]=totalEntries>0?(count/totalEntries*100).toFixed(0):0;});// Days in current month\nconst daysInMonth=new Date(currentMonth.getFullYear(),currentMonth.getMonth()+1,0).getDate();const daysWithMood=new Set(currentMonthData.map(d=>d.date.getDate())).size;// Calculate mood score (happy=3, sad=1, angry=1)\nconst moodScore=(moodCounts.happy*3+moodCounts.sad*1+moodCounts.angry*1)/totalEntries;const moodTrend=moodScore>=2.5?'Positive':moodScore>=1.5?'Mixed':'Needs Attention';return{totalEntries,daysWithMood,daysInMonth,mostCommonMood:mostCommonMood[0],mostCommonMoodCount:mostCommonMood[1],moodCounts,moodPercentages,moodTrend};},[moodData,currentMonth]);return/*#__PURE__*/_jsx(ChartContainer,{title:\"Mood\",icon:\"\\uD83D\\uDE0A\",isLoading:loading,error:error,noData:!loading&&!error&&(!moodData||moodData.length===0),isExpanded:isExpanded,onExpand:onExpand,onPrev:handlePrevMonth,onNext:handleNextMonth,navigationLabel:monthName,children:/*#__PURE__*/_jsxs(\"div\",{className:\"mood-calendar-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"mood-calendar-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Mood Legend\",items:moodLegendItems})}),/*#__PURE__*/_jsx(\"div\",{className:\"mood-calendar-wrapper \".concat(isExpanded?'expanded':''),children:/*#__PURE__*/_jsx(Calendar,{isExpanded:isExpanded,moodByDate:moodByDate,currentMonth:currentMonth})}),isPhysicianView&&monthSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Month Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Mood Entries:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[monthSummary.totalEntries,\" entries\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Days Tracked:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[monthSummary.daysWithMood,\"/\",monthSummary.daysInMonth,\" days\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common Mood:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[MOODS[monthSummary.mostCommonMood],\" \",monthSummary.mostCommonMood.charAt(0).toUpperCase()+monthSummary.mostCommonMood.slice(1),\" (\",monthSummary.mostCommonMoodCount,\"x)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Mood Distribution:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[\"\\uD83D\\uDE0A\",monthSummary.moodPercentages.happy,\"% \\uD83D\\uDE22\",monthSummary.moodPercentages.sad,\"% \\uD83D\\uDE20\",monthSummary.moodPercentages.angry,\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Overall Trend:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value \".concat(monthSummary.moodTrend.toLowerCase().replace(' ','-')),children:monthSummary.moodTrend})]})]})]})]})});};export default MoodCalendar;","map":{"version":3,"names":["React","useState","useMemo","ChartContainer","usePatientData","Legend","jsx","_jsx","jsxs","_jsxs","MOODS","happy","sad","angry","MOOD_COLORS","MOOD_BACKGROUNDS","DAYS_OF_WEEK","getCalendarConfig","isExpanded","svgWidth","svgHeight","cellWidth","cellHeight","dayLabelY","dayLabelFontSize","dateLabelX","dateLabelY","dateLabelFontSize","moodIconFontSize","startX","startY","normalizeMood","mood","toLowerCase","getMoodEmoji","getMoodColor","getMoodBackgroundColor","moodLegendItems","Object","entries","map","_ref","emoji","icon","label","charAt","toUpperCase","slice","style","backgroundColor","borderColor","CalendarHeader","_ref2","config","className","children","day","i","x","y","fontSize","DayCell","_ref3","date","moods","dayOfMonth","getDate","dayOfWeek","getDay","weekOfMonth","Math","floor","Date","getFullYear","getMonth","primaryMood","length","transform","concat","width","height","fill","Calendar","_ref4","moodByDate","currentMonth","year","month","daysInMonth","viewBox","Array","_","MoodCalendar","_ref5","patientId","onExpand","isPhysicianView","moodData","isLoading","loading","error","setCurrentMonth","handlePrevMonth","prev","handleNextMonth","filter","d","reduce","acc","item","dateKey","push","monthName","toLocaleString","monthSummary","currentMonthData","moodCounts","keys","forEach","entry","normalizedMood","undefined","mostCommonMood","sort","_ref6","_ref7","a","b","totalEntries","moodPercentages","_ref8","count","toFixed","daysWithMood","Set","size","moodScore","moodTrend","mostCommonMoodCount","title","noData","onPrev","onNext","navigationLabel","items","replace"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/MoodCalendar.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport ChartContainer from '../ChartContainer';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport Legend from '../Legend';\r\nimport '../ChartStyles.css';\r\nimport './MoodCalendar.css';\r\n\r\n// --- Constants & Config ---\r\nconst MOODS = { happy: 'ðŸ˜Š', sad: 'ðŸ˜¢', angry: 'ðŸ˜ ' };\r\nconst MOOD_COLORS = { \r\n  happy: 'var(--chart-color-mood-happy)', \r\n  sad: 'var(--chart-color-mood-sad)', \r\n  angry: 'var(--chart-color-mood-angry)' \r\n};\r\nconst MOOD_BACKGROUNDS = { \r\n  happy: 'var(--chart-color-mood-happy-bg)', \r\n  sad: 'var(--chart-color-mood-sad-bg)', \r\n  angry: 'var(--chart-color-mood-angry-bg)' \r\n};\r\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\nconst getCalendarConfig = (isExpanded) => ({\r\n  svgWidth: isExpanded ? 700 : 350,\r\n  svgHeight: isExpanded ? 600 : 300,\r\n  cellWidth: isExpanded ? 100 : 50,\r\n  cellHeight: isExpanded ? 85 : 44,\r\n  dayLabelY: isExpanded ? 55 : 30,\r\n  dayLabelFontSize: isExpanded ? 16 : 9,\r\n  dateLabelX: isExpanded ? 12 : 5,\r\n  dateLabelY: isExpanded ? 22 : 12,\r\n  dateLabelFontSize: isExpanded ? 14 : 8,\r\n  moodIconFontSize: isExpanded ? 36 : 20,\r\n  startX: isExpanded ? 50 : 25,\r\n  startY: isExpanded ? 100 : 55,\r\n});\r\n\r\n// --- Helper Functions ---\r\nconst normalizeMood = (mood) => (mood && MOODS[mood.toLowerCase()]) ? mood.toLowerCase() : null;\r\nconst getMoodEmoji = (mood) => MOODS[normalizeMood(mood)];\r\nconst getMoodColor = (mood) => MOOD_COLORS[normalizeMood(mood)];\r\nconst getMoodBackgroundColor = (mood) => MOOD_BACKGROUNDS[normalizeMood(mood)] || '#ffffff';\r\n\r\nconst moodLegendItems = Object.entries(MOODS).map(([mood, emoji]) => ({\r\n  icon: emoji,\r\n  label: mood.charAt(0).toUpperCase() + mood.slice(1),\r\n  style: {\r\n    backgroundColor: MOOD_BACKGROUNDS[mood],\r\n    borderColor: MOOD_COLORS[mood],\r\n  },\r\n}));\r\n\r\n// --- Sub-components ---\r\n\r\nconst CalendarHeader = ({ config }) => (\r\n  <g className=\"calendar-header\">\r\n    {DAYS_OF_WEEK.map((day, i) => (\r\n      <text \r\n        key={day} \r\n        x={config.startX + i * config.cellWidth} \r\n        y={config.dayLabelY} \r\n        className=\"day-name-label\"\r\n        style={{ fontSize: config.dayLabelFontSize }}\r\n      >\r\n        {day}\r\n      </text>\r\n    ))}\r\n  </g>\r\n);\r\n\r\nconst DayCell = ({ config, date, moods }) => {\r\n  const dayOfMonth = date.getDate();\r\n  const dayOfWeek = date.getDay();\r\n  const weekOfMonth = Math.floor((dayOfMonth - 1 + new Date(date.getFullYear(), date.getMonth(), 1).getDay()) / 7);\r\n  const x = config.startX + dayOfWeek * config.cellWidth;\r\n  const y = config.startY + weekOfMonth * (config.cellHeight + 2);\r\n  const primaryMood = moods.length > 0 ? moods[0] : null;\r\n\r\n  return (\r\n    <g className=\"day-cell-group\" transform={`translate(${x - config.cellWidth / 2}, ${y - config.cellHeight / 2})`}>\r\n      <rect width={config.cellWidth} height={config.cellHeight} fill={getMoodBackgroundColor(primaryMood)} className=\"day-cell-bg\" />\r\n      <text \r\n        x={config.dateLabelX} \r\n        y={config.dateLabelY} \r\n        className=\"date-label\" \r\n        style={{ fontSize: config.dateLabelFontSize }}\r\n      >\r\n        {dayOfMonth}\r\n      </text>\r\n      {primaryMood && (\r\n        <text \r\n          x={config.cellWidth / 2} \r\n          y={config.cellHeight * 0.65} \r\n          className=\"mood-icon\" \r\n          fill={getMoodColor(primaryMood)}\r\n          style={{ fontSize: config.moodIconFontSize }}\r\n        >\r\n          {getMoodEmoji(primaryMood)}\r\n        </text>\r\n      )}\r\n    </g>\r\n  );\r\n};\r\n\r\nconst Calendar = ({ isExpanded, moodByDate, currentMonth }) => {\r\n  const config = getCalendarConfig(isExpanded);\r\n  const year = currentMonth.getFullYear();\r\n  const month = currentMonth.getMonth();\r\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n\r\n  return (\r\n    <div className=\"mood-calendar-svg-container\">\r\n      <svg viewBox={`0 0 ${config.svgWidth} ${config.svgHeight}`} className=\"mood-calendar-svg\">\r\n        <rect width={config.svgWidth} height={config.svgHeight} fill=\"white\" />\r\n        <CalendarHeader config={config} />\r\n        <g className=\"calendar-body\">\r\n          {[...Array(daysInMonth)].map((_, i) => {\r\n            const dayOfMonth = i + 1;\r\n            const date = new Date(year, month, dayOfMonth);\r\n            return <DayCell key={i} config={config} date={date} moods={moodByDate[dayOfMonth] || []} />;\r\n          })}\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\n// --- Main Component ---\r\nconst MoodCalendar = ({ patientId, isExpanded = false, onExpand, isPhysicianView = false }) => {\r\n  const { moodData, isLoading: loading, error } = usePatientData(patientId, 'mood');\r\n  const [currentMonth, setCurrentMonth] = useState(new Date(2025, 4, 1));\r\n\r\n  const handlePrevMonth = () => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() - 1, 1));\r\n  const handleNextMonth = () => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() + 1, 1));\r\n\r\n  const moodByDate = moodData\r\n    .filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth())\r\n    .reduce((acc, item) => {\r\n      const dateKey = item.date.getDate();\r\n      if (!acc[dateKey]) acc[dateKey] = [];\r\n      acc[dateKey].push(item.mood);\r\n      return acc;\r\n    }, {});\r\n\r\n  const monthName = currentMonth.toLocaleString('default', { month: 'long' });\r\n\r\n  // Calculate summary statistics for physician view\r\n  const monthSummary = useMemo(() => {\r\n    const currentMonthData = moodData.filter(d => \r\n      d.date.getFullYear() === currentMonth.getFullYear() && \r\n      d.date.getMonth() === currentMonth.getMonth()\r\n    );\r\n\r\n    if (currentMonthData.length === 0) return null;\r\n\r\n    // Count mood occurrences\r\n    const moodCounts = {};\r\n    Object.keys(MOODS).forEach(mood => {\r\n      moodCounts[mood] = 0;\r\n    });\r\n\r\n    currentMonthData.forEach(entry => {\r\n      const normalizedMood = normalizeMood(entry.mood);\r\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\r\n        moodCounts[normalizedMood]++;\r\n      }\r\n    });\r\n\r\n    // Find most common mood\r\n    const mostCommonMood = Object.entries(moodCounts)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    // Calculate mood distribution percentages\r\n    const totalEntries = currentMonthData.length;\r\n    const moodPercentages = {};\r\n    Object.entries(moodCounts).forEach(([mood, count]) => {\r\n      moodPercentages[mood] = totalEntries > 0 ? ((count / totalEntries) * 100).toFixed(0) : 0;\r\n    });\r\n\r\n    // Days in current month\r\n    const daysInMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();\r\n    const daysWithMood = new Set(currentMonthData.map(d => d.date.getDate())).size;\r\n\r\n    // Calculate mood score (happy=3, sad=1, angry=1)\r\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\r\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\r\n\r\n    return {\r\n      totalEntries,\r\n      daysWithMood,\r\n      daysInMonth,\r\n      mostCommonMood: mostCommonMood[0],\r\n      mostCommonMoodCount: mostCommonMood[1],\r\n      moodCounts,\r\n      moodPercentages,\r\n      moodTrend\r\n    };\r\n  }, [moodData, currentMonth]);\r\n\r\n  return (\r\n    <ChartContainer\r\n      title=\"Mood\"\r\n      icon=\"ðŸ˜Š\"\r\n      isLoading={loading}\r\n      error={error}\r\n      noData={!loading && !error && (!moodData || moodData.length === 0)}\r\n      isExpanded={isExpanded}\r\n      onExpand={onExpand}\r\n      onPrev={handlePrevMonth}\r\n      onNext={handleNextMonth}\r\n      navigationLabel={monthName}\r\n    >\r\n      <div className=\"mood-calendar-container\">\r\n        <div className=\"mood-calendar-legend-wrapper\">\r\n            <Legend title=\"Mood Legend\" items={moodLegendItems} />\r\n        </div>\r\n        <div className={`mood-calendar-wrapper ${isExpanded ? 'expanded' : ''}`}>\r\n          <Calendar isExpanded={isExpanded} moodByDate={moodByDate} currentMonth={currentMonth} />\r\n        </div>\r\n\r\n        {/* Show summary for physician view only */}\r\n        {isPhysicianView && monthSummary && (\r\n          <div className=\"chart-summary\">\r\n            <h4>Month Summary</h4>\r\n            <div className=\"summary-stats\">\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Mood Entries:</span>\r\n                <span className=\"stat-value\">\r\n                  {monthSummary.totalEntries} entries\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Days Tracked:</span>\r\n                <span className=\"stat-value\">\r\n                  {monthSummary.daysWithMood}/{monthSummary.daysInMonth} days\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Most Common Mood:</span>\r\n                <span className=\"stat-value\">\r\n                  {MOODS[monthSummary.mostCommonMood]} {monthSummary.mostCommonMood.charAt(0).toUpperCase() + monthSummary.mostCommonMood.slice(1)} ({monthSummary.mostCommonMoodCount}x)\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Mood Distribution:</span>\r\n                <span className=\"stat-value\">\r\n                  ðŸ˜Š{monthSummary.moodPercentages.happy}% ðŸ˜¢{monthSummary.moodPercentages.sad}% ðŸ˜ {monthSummary.moodPercentages.angry}%\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Overall Trend:</span>\r\n                <span className={`stat-value ${monthSummary.moodTrend.toLowerCase().replace(' ', '-')}`}>\r\n                  {monthSummary.moodTrend}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </ChartContainer>\r\n  );\r\n};\r\n\r\nexport default MoodCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}