{"ast":null,"code":"import _objectSpread from\"C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import PatientSelector from'./PatientSelector';import usePatientData from'./hooks/usePatientData';import GlucoseChart from'./components/patient_charts/GlucoseChart';import BloodPressureChart from'./components/patient_charts/BloodPressureChart';import ExerciseChart from'./components/patient_charts/ExerciseChart';import MoodCalendar from'./components/patient_charts/MoodCalendar';import PhysicianPainChart from'./components/patient_charts/PhysicianPainChart';import MealContentsChart from'./components/patient_charts/MealContentsChart';import SleepChart from'./components/patient_charts/SleepChart';import'./PhysicianDashboard.css';import{PATIENTS,VISUALIZATION_CONFIG}from'./constants';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const PhysicianDashboard=_ref=>{var _patientInfo$conditio,_patientInfo$detailed;let{patientId:initialPatientId}=_ref;const[selectedPatientId,setSelectedPatientId]=useState(initialPatientId||'');const{data,loading,error}=usePatientData(selectedPatientId);// Update selected patient if prop changes\nReact.useEffect(()=>{if(initialPatientId&&initialPatientId!==selectedPatientId){setSelectedPatientId(initialPatientId);}},[initialPatientId,selectedPatientId]);const allVisualizations={glucose:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.glucose),{},{component:GlucoseChart}),bloodPressure:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.bloodPressure),{},{component:BloodPressureChart}),exercise:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.exercise),{},{component:ExerciseChart}),mood:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.mood),{},{component:MoodCalendar}),pain:{name:'Pain Report 2',component:PhysicianPainChart,color:VISUALIZATION_CONFIG.pain.color},mealContents:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.mealContents),{},{component:MealContentsChart}),sleep:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.sleep),{},{component:SleepChart})};// Check for available visualizations based on data\nconst availableVisualizations=React.useMemo(()=>{if(!data)return{};return Object.entries(allVisualizations).reduce((acc,_ref2)=>{let[key,viz]=_ref2;const dataKey=\"\".concat(key,\"Data\");// Special case for meal contents\nif(key==='mealContents'&&data['mealData']&&data['mealData'].length>0){acc[key]=viz;}else if(data[dataKey]&&data[dataKey].length>0){acc[key]=viz;}return acc;},{});},[data]);// Default selections for 6 windows\nconst[selectedVisualizations,setSelectedVisualizations]=useState({window1:'glucose',window2:'bloodPressure',window3:'exercise',window4:'sleep',window5:'mood',window6:'pain'});const[expandedWindow,setExpandedWindow]=useState(null);// Update selections when available visualizations change\nReact.useEffect(()=>{if(Object.keys(availableVisualizations).length>0){const availableKeys=Object.keys(availableVisualizations);const defaultOrder=['glucose','bloodPressure','exercise','sleep','mood','pain','mealContents'];// Filter default order to only include available visualizations\nconst orderedAvailable=defaultOrder.filter(key=>availableKeys.includes(key));// Fill in any remaining slots with available visualizations not in default order\nconst remaining=availableKeys.filter(key=>!orderedAvailable.includes(key));const finalOrder=[...orderedAvailable,...remaining];setSelectedVisualizations(prev=>{const updated=_objectSpread({},prev);const windowIds=['window1','window2','window3','window4','window5','window6'];windowIds.forEach((windowId,index)=>{if(finalOrder[index]){updated[windowId]=finalOrder[index];}else if(!availableKeys.includes(updated[windowId])){// If current selection is not available, use the first available\nupdated[windowId]=finalOrder[0]||'glucose';}});return updated;});}},[availableVisualizations]);const handleVisualizationChange=(windowId,visualizationType)=>{setSelectedVisualizations(prev=>_objectSpread(_objectSpread({},prev),{},{[windowId]:visualizationType}));};const handleExpand=windowId=>{setExpandedWindow(prev=>prev===windowId?null:windowId);};const renderVisualization=(visualizationType,windowId)=>{if(!selectedPatientId){return/*#__PURE__*/_jsx(\"div\",{className:\"chart-placeholder\",children:\"Please select a patient to view data.\"});}const viz=allVisualizations[visualizationType];if(!viz)return/*#__PURE__*/_jsx(\"div\",{className:\"chart-placeholder\",children:\"Invalid visualization\"});const Component=viz.component;const isExpanded=expandedWindow===windowId;return/*#__PURE__*/_jsx(Component,{patientId:selectedPatientId,isPhysicianView:true,isExpanded:isExpanded,onExpand:()=>handleExpand(windowId)});};// Component for individual visualization windows\nconst VisualizationWindow=_ref3=>{let{windowId,className,isExpanded=false}=_ref3;const selectedViz=selectedVisualizations[windowId];const viz=allVisualizations[selectedViz];return/*#__PURE__*/_jsxs(\"div\",{className:\"physician-chart-container \".concat(className),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"visualization-header\",children:[/*#__PURE__*/_jsx(\"select\",{value:selectedViz,onChange:e=>handleVisualizationChange(windowId,e.target.value),style:{color:(viz===null||viz===void 0?void 0:viz.color)||'#2c3e50'},disabled:Object.keys(availableVisualizations).length===0,children:Object.entries(availableVisualizations).map(_ref4=>{let[key,viz]=_ref4;return/*#__PURE__*/_jsx(\"option\",{value:key,children:viz.name},key);})}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleExpand(windowId),className:\"expand-button\",children:expandedWindow===windowId?'Collapse':'Expand'})]}),/*#__PURE__*/_jsx(\"div\",{className:\"visualization-content\",children:Object.keys(availableVisualizations).length===0?/*#__PURE__*/_jsx(\"div\",{className:\"chart-placeholder\",children:\"No data available for this patient.\"}):renderVisualization(selectedViz,windowId)})]});};const patientInfo=data===null||data===void 0?void 0:data.patientInfo;return/*#__PURE__*/_jsxs(\"div\",{className:\"physician-dashboard\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"physician-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Physician Dashboard\"}),/*#__PURE__*/_jsx(PatientSelector,{patients:PATIENTS,value:selectedPatientId,onChange:setSelectedPatientId})]}),selectedPatientId&&/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"patient-info-card-physician\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Patient Information\"}),loading&&/*#__PURE__*/_jsx(\"p\",{children:\"Loading patient info...\"}),error&&/*#__PURE__*/_jsx(\"p\",{children:\"Error loading data.\"}),patientInfo&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Patient #:\"}),\" \",patientInfo.patientNumber]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Age:\"}),\" \",patientInfo.age,\" years\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Gender:\"}),\" \",patientInfo.gender||'Not specified']}),/*#__PURE__*/_jsxs(\"div\",{className:\"conditions-section\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Conditions:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"conditions-list\",children:(_patientInfo$conditio=patientInfo.conditions)===null||_patientInfo$conditio===void 0?void 0:_patientInfo$conditio.map((condition,i)=>/*#__PURE__*/_jsx(\"div\",{className:\"condition-item\",children:condition},i))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"medications-section\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Medications:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"medications-list\",children:(_patientInfo$detailed=patientInfo.detailedMedications)===null||_patientInfo$detailed===void 0?void 0:_patientInfo$detailed.map((med,i)=>/*#__PURE__*/_jsx(\"div\",{className:\"medication-item\",children:med.name},i))})]})]})]}),expandedWindow?/*#__PURE__*/_jsx(VisualizationWindow,{windowId:expandedWindow,className:\"expanded-view\",isExpanded:true}):/*#__PURE__*/_jsxs(\"div\",{className:\"physician-charts-grid\",children:[/*#__PURE__*/_jsx(VisualizationWindow,{windowId:\"window1\",className:\"window-1\"}),/*#__PURE__*/_jsx(VisualizationWindow,{windowId:\"window2\",className:\"window-2\"}),/*#__PURE__*/_jsx(VisualizationWindow,{windowId:\"window3\",className:\"window-3\"}),/*#__PURE__*/_jsx(VisualizationWindow,{windowId:\"window4\",className:\"window-4\"}),/*#__PURE__*/_jsx(VisualizationWindow,{windowId:\"window5\",className:\"window-5\"}),/*#__PURE__*/_jsx(VisualizationWindow,{windowId:\"window6\",className:\"window-6\"})]})]})]});};export default PhysicianDashboard;","map":{"version":3,"names":["React","useState","PatientSelector","usePatientData","GlucoseChart","BloodPressureChart","ExerciseChart","MoodCalendar","PhysicianPainChart","MealContentsChart","SleepChart","PATIENTS","VISUALIZATION_CONFIG","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PhysicianDashboard","_ref","_patientInfo$conditio","_patientInfo$detailed","patientId","initialPatientId","selectedPatientId","setSelectedPatientId","data","loading","error","useEffect","allVisualizations","glucose","_objectSpread","component","bloodPressure","exercise","mood","pain","name","color","mealContents","sleep","availableVisualizations","useMemo","Object","entries","reduce","acc","_ref2","key","viz","dataKey","concat","length","selectedVisualizations","setSelectedVisualizations","window1","window2","window3","window4","window5","window6","expandedWindow","setExpandedWindow","keys","availableKeys","defaultOrder","orderedAvailable","filter","includes","remaining","finalOrder","prev","updated","windowIds","forEach","windowId","index","handleVisualizationChange","visualizationType","handleExpand","renderVisualization","className","children","Component","isExpanded","isPhysicianView","onExpand","VisualizationWindow","_ref3","selectedViz","value","onChange","e","target","style","disabled","map","_ref4","onClick","patientInfo","patients","patientNumber","age","gender","conditions","condition","i","detailedMedications","med"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PhysicianDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PatientSelector from './PatientSelector';\nimport usePatientData from './hooks/usePatientData';\n\nimport GlucoseChart from './components/patient_charts/GlucoseChart';\nimport BloodPressureChart from './components/patient_charts/BloodPressureChart';\nimport ExerciseChart from './components/patient_charts/ExerciseChart';\nimport MoodCalendar from './components/patient_charts/MoodCalendar';\nimport PhysicianPainChart from './components/patient_charts/PhysicianPainChart';\nimport MealContentsChart from './components/patient_charts/MealContentsChart';\nimport SleepChart from './components/patient_charts/SleepChart';\n\nimport './PhysicianDashboard.css';\nimport { PATIENTS, VISUALIZATION_CONFIG } from './constants';\n\nconst PhysicianDashboard = ({ patientId: initialPatientId }) => {\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\n  const { data, loading, error } = usePatientData(selectedPatientId);\n  \n  // Update selected patient if prop changes\n  React.useEffect(() => {\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\n      setSelectedPatientId(initialPatientId);\n    }\n  }, [initialPatientId, selectedPatientId]);\n\n  const allVisualizations = {\n    glucose: { ...VISUALIZATION_CONFIG.glucose, component: GlucoseChart },\n    bloodPressure: { ...VISUALIZATION_CONFIG.bloodPressure, component: BloodPressureChart },\n    exercise: { ...VISUALIZATION_CONFIG.exercise, component: ExerciseChart },\n    mood: { ...VISUALIZATION_CONFIG.mood, component: MoodCalendar },\n    pain: { name: 'Pain Report 2', component: PhysicianPainChart, color: VISUALIZATION_CONFIG.pain.color },\n    mealContents: { ...VISUALIZATION_CONFIG.mealContents, component: MealContentsChart },\n    sleep: { ...VISUALIZATION_CONFIG.sleep, component: SleepChart },\n  };\n\n  // Check for available visualizations based on data\n  const availableVisualizations = React.useMemo(() => {\n    if (!data) return {};\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\n      const dataKey = `${key}Data`;\n      // Special case for meal contents\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\n        acc[key] = viz;\n      } else if (data[dataKey] && data[dataKey].length > 0) {\n        acc[key] = viz;\n      }\n      return acc;\n    }, {});\n  }, [data]);\n\n  // Default selections for 6 windows\n  const [selectedVisualizations, setSelectedVisualizations] = useState({\n    window1: 'glucose',\n    window2: 'bloodPressure',\n    window3: 'exercise',\n    window4: 'sleep',\n    window5: 'mood',\n    window6: 'pain'\n  });\n\n  const [expandedWindow, setExpandedWindow] = useState(null);\n\n  // Update selections when available visualizations change\n  React.useEffect(() => {\n    if (Object.keys(availableVisualizations).length > 0) {\n      const availableKeys = Object.keys(availableVisualizations);\n      const defaultOrder = ['glucose', 'bloodPressure', 'exercise', 'sleep', 'mood', 'pain', 'mealContents'];\n      \n      // Filter default order to only include available visualizations\n      const orderedAvailable = defaultOrder.filter(key => availableKeys.includes(key));\n      \n      // Fill in any remaining slots with available visualizations not in default order\n      const remaining = availableKeys.filter(key => !orderedAvailable.includes(key));\n      const finalOrder = [...orderedAvailable, ...remaining];\n      \n      setSelectedVisualizations(prev => {\n        const updated = { ...prev };\n        const windowIds = ['window1', 'window2', 'window3', 'window4', 'window5', 'window6'];\n        \n        windowIds.forEach((windowId, index) => {\n          if (finalOrder[index]) {\n            updated[windowId] = finalOrder[index];\n          } else if (!availableKeys.includes(updated[windowId])) {\n            // If current selection is not available, use the first available\n            updated[windowId] = finalOrder[0] || 'glucose';\n          }\n        });\n        \n        return updated;\n      });\n    }\n  }, [availableVisualizations]);\n\n  const handleVisualizationChange = (windowId, visualizationType) => {\n    setSelectedVisualizations(prev => ({ ...prev, [windowId]: visualizationType }));\n  };\n\n  const handleExpand = (windowId) => {\n    setExpandedWindow(prev => (prev === windowId ? null : windowId));\n  };\n\n  const renderVisualization = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return <div className=\"chart-placeholder\">Please select a patient to view data.</div>;\n    }\n    \n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <div className=\"chart-placeholder\">Invalid visualization</div>;\n\n    const Component = viz.component;\n    const isExpanded = expandedWindow === windowId;\n    return <Component \n      patientId={selectedPatientId} \n      isPhysicianView={true} \n      isExpanded={isExpanded}\n      onExpand={() => handleExpand(windowId)}\n    />;\n  };\n\n  // Component for individual visualization windows\n  const VisualizationWindow = ({ windowId, className, isExpanded = false }) => {\n    const selectedViz = selectedVisualizations[windowId];\n    const viz = allVisualizations[selectedViz];\n    \n    return (\n      <div className={`physician-chart-container ${className}`}>\n        <div className=\"visualization-header\">\n          <select \n            value={selectedViz}\n            onChange={(e) => handleVisualizationChange(windowId, e.target.value)}\n            style={{ color: viz?.color || '#2c3e50' }}\n            disabled={Object.keys(availableVisualizations).length === 0}\n          >\n            {Object.entries(availableVisualizations).map(([key, viz]) => (\n              <option key={key} value={key}>{viz.name}</option>\n            ))}\n          </select>\n          <button onClick={() => handleExpand(windowId)} className=\"expand-button\">\n            {expandedWindow === windowId ? 'Collapse' : 'Expand'}\n          </button>\n        </div>\n        <div className=\"visualization-content\">\n          {Object.keys(availableVisualizations).length === 0 ? (\n            <div className=\"chart-placeholder\">No data available for this patient.</div>\n          ) : (\n            renderVisualization(selectedViz, windowId)\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  return (\n    <div className=\"physician-dashboard\">\n      <div className=\"physician-header\">\n        <h1>Physician Dashboard</h1>\n        <PatientSelector\n          patients={PATIENTS}\n          value={selectedPatientId}\n          onChange={setSelectedPatientId}\n        />\n      </div>\n\n      {selectedPatientId && (\n        <div className=\"dashboard-content\">\n          <div className=\"patient-info-card-physician\">\n            <h3>Patient Information</h3>\n            {loading && <p>Loading patient info...</p>}\n            {error && <p>Error loading data.</p>}\n            {patientInfo && (\n              <>\n                <div><span>Patient #:</span> {patientInfo.patientNumber}</div>\n                <div><span>Age:</span> {patientInfo.age} years</div>\n                <div><span>Gender:</span> {patientInfo.gender || 'Not specified'}</div>\n                <div className=\"conditions-section\">\n                  <span>Conditions:</span>\n                  <div className=\"conditions-list\">\n                    {patientInfo.conditions?.map((condition, i) => (\n                      <div key={i} className=\"condition-item\">{condition}</div>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"medications-section\">\n                  <span>Medications:</span>\n                  <div className=\"medications-list\">\n                    {patientInfo.detailedMedications?.map((med, i) => (\n                      <div key={i} className=\"medication-item\">{med.name}</div>\n                    ))}\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n\n          {expandedWindow ? (\n            <VisualizationWindow \n              windowId={expandedWindow}\n              className=\"expanded-view\"\n              isExpanded={true}\n            />\n          ) : (\n            <div className=\"physician-charts-grid\">\n              <VisualizationWindow windowId=\"window1\" className=\"window-1\" />\n              <VisualizationWindow windowId=\"window2\" className=\"window-2\" />\n              <VisualizationWindow windowId=\"window3\" className=\"window-3\" />\n              <VisualizationWindow windowId=\"window4\" className=\"window-4\" />\n              <VisualizationWindow windowId=\"window5\" className=\"window-5\" />\n              <VisualizationWindow windowId=\"window6\" className=\"window-6\" />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PhysicianDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}