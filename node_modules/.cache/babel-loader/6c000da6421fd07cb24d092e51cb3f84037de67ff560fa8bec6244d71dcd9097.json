{"ast":null,"code":"/*\n MealContentsChart.js - Nutritional Tracking Visualization\n \n This component provides comprehensive meal and nutrition monitoring:\n - Meal timing and content breakdown\n - Nutritional component tracking\n - Daily and weekly dietary pattern analysis\n - Interactive tooltips with meal details\n - Navigation controls for time periods\n - Integration with patient data and chart navigation\n \n Essential for dietary monitoring and nutritional assessment.\n */import React,{useState,useEffect,useRef}from'react';import Legend from'../Legend';import usePatientData from'../../hooks/usePatientData';import useChartNavigation from'../../hooks/useChartNavigation';import'./MealContentsChart.css';// --- Constants ---\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DAYS_OF_WEEK=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];const MEAL_TYPES=['Breakfast','Lunch','Dinner','Late Night Snack'];const FOOD_CATEGORIES=['Protein','Carbohydrates','Vegetables','Fruit','Alcohol'];const SUGAR_CATEGORIES=['','1-20g','20-40g','40-60g','60g+'];const DEFAULT_WEEK=new Date(2025,4,1);// Emoji mappings for food categories\nconst CATEGORY_EMOJIS={'Protein':'🥩','Carbohydrates':'🍞','Vegetables':'🥦','Fruit':'🍎','Alcohol':'🍷'};const SUGAR_EMOJIS={'':'',// No sugar\n'1-20g':'🍭',// Lollipop\n'20-40g':'🍫',// Chocolate bar\n'40-60g':'🍩',// Donut\n'60g+':'🎂'// Cake\n};// --- Helper Functions ---\nconst getWeekStart=date=>{const d=new Date(date);const day=d.getDay();const diff=d.getDate()-day;return new Date(d.setDate(diff));};const formatDayLabel=date=>{const dayNames=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];return dayNames[date.getDay()];};const formatDateLabel=date=>date.toLocaleDateString('en-US',{month:'short',day:'numeric'});const getMealTime=(data,mealType)=>{// Convert meal type to the correct column name format (with underscores)\nconst columnPrefix=mealType.replace(/\\s+/g,'_');const timeKey=\"\".concat(columnPrefix,\"_Time\");return data[timeKey]||'';};const getMealData=(data,mealType)=>{const mealData={};// Convert meal type to the correct column name format (with underscores)\nconst columnPrefix=mealType.replace(/\\s+/g,'_');FOOD_CATEGORIES.forEach(category=>{const key=\"\".concat(columnPrefix,\"_\").concat(category);// Handle both numeric (1, 0) and string ('1', '0') values\nmealData[category]=data[key]===1||data[key]==='1';});const sugarKey=\"\".concat(columnPrefix,\"_Added_Sugar\");mealData['Added Sugar']=data[sugarKey]||'';return mealData;};// --- Chart Sub-components ---\nconst XAxis=_ref=>{let{config,weekDays}=_ref;return/*#__PURE__*/_jsxs(\"g\",{className:\"x-axis\",children:[weekDays.map((day,dayIndex)=>{const x=config.padding.left+dayIndex*config.dayWidth+config.dayWidth/2;return/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+30,fontSize:config.fontSize.dayLabel,textAnchor:\"middle\",className:\"x-axis-day-label\",children:formatDayLabel(day)}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+45,fontSize:config.fontSize.dateLabel,textAnchor:\"middle\",className:\"x-axis-date-label\",children:day.getDate()}),/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-vertical\",x1:config.padding.left+dayIndex*config.dayWidth,y1:config.padding.top,x2:config.padding.left+dayIndex*config.dayWidth,y2:config.height-config.padding.bottom})]},dayIndex);}),/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-vertical\",x1:config.padding.left+7*config.dayWidth,y1:config.padding.top,x2:config.padding.left+7*config.dayWidth,y2:config.height-config.padding.bottom})]});};const YAxis=_ref2=>{let{config}=_ref2;// Calculate dynamic text positioning based on available space\nconst getTextX=textLength=>{// Base offset from the chart area\nconst baseOffset=10;// Calculate position to ensure text doesn't get cut off\n// For longer text like \"Late Night Snack\", position it closer to the chart\nconst dynamicOffset=textLength>10?5:25;return Math.max(baseOffset,config.padding.left-dynamicOffset);};return/*#__PURE__*/_jsxs(\"g\",{className:\"y-axis\",children:[MEAL_TYPES.map((meal,mealIndex)=>{const y=config.padding.top+mealIndex*config.mealHeight+config.mealHeight/2;const textX=getTextX(meal.length);return/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"text\",{x:textX,y:y,fontSize:config.fontSize.mealLabel,textAnchor:\"end\",className:\"y-axis-title\",children:meal}),/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-horizontal\",x1:config.padding.left,y1:config.padding.top+mealIndex*config.mealHeight,x2:config.padding.left+7*config.dayWidth,y2:config.padding.top+mealIndex*config.mealHeight})]},meal);}),/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-horizontal\",x1:config.padding.left,y1:config.padding.top+4*config.mealHeight,x2:config.padding.left+7*config.dayWidth,y2:config.padding.top+4*config.mealHeight})]});};const MealCell=_ref3=>{let{config,dayIndex,mealIndex,mealData,mealTime,isExpanded}=_ref3;const x=config.padding.left+dayIndex*config.dayWidth+5;const y=config.padding.top+mealIndex*config.mealHeight+5;const cellWidth=config.dayWidth-10;const cellHeight=config.mealHeight-10;// Calculate grid layout for 6 circles (2x3 grid)\nconst circlesPerRow=3;const circleWidth=cellWidth/circlesPerRow;const circleHeight=(cellHeight-20)/2;// Reserve space for time\n// Calculate circle radius and emoji size based on cell dimensions\nconst minDimension=Math.min(circleWidth,circleHeight);const circleRadius=Math.max(8,Math.min(16,minDimension*0.35));// Min 8px, max 16px, 35% of min dimension\nconst emojiFontSize=Math.max(8,Math.min(16,minDimension*0.4));// Min 8px, max 16px, 40% of min dimension for better visibility\n// Apply expanded view scaling\nconst expandedCircleRadius=isExpanded?circleRadius*1.3:circleRadius;const expandedEmojiFontSize=isExpanded?emojiFontSize*1.4:emojiFontSize;// Define the 6 food categories in order (5 main + 1 sugar)\nconst allCategories=[...FOOD_CATEGORIES,'Added Sugar'];return/*#__PURE__*/_jsxs(\"g\",{className:\"meal-cell\",children:[/*#__PURE__*/_jsx(\"rect\",{x:x,y:y,width:cellWidth,height:cellHeight,fill:\"#f9f9f9\",stroke:\"#ddd\",strokeWidth:\"1\"}),/*#__PURE__*/_jsx(\"text\",{x:x+cellWidth/2,y:y+12,fontSize:config.fontSize.timeLabel,textAnchor:\"middle\",className:\"time-label\",children:mealTime}),allCategories.map((category,index)=>{const row=Math.floor(index/circlesPerRow);const col=index%circlesPerRow;const circleX=x+col*circleWidth+circleWidth/2;const circleY=y+20+row*circleHeight+circleHeight/2;// Check if category is present\nlet hasCategory=false;let emoji='';if(category==='Added Sugar'){hasCategory=mealData[category]&&SUGAR_EMOJIS[mealData[category]];emoji=SUGAR_EMOJIS[mealData[category]]||'';}else{hasCategory=mealData[category];emoji=CATEGORY_EMOJIS[category]||'';}return/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"circle\",{cx:circleX,cy:circleY,r:expandedCircleRadius,fill:\"#f5f5f5\",stroke:\"#ddd\",strokeWidth:\"1\",opacity:0.3}),hasCategory&&emoji&&/*#__PURE__*/_jsx(\"text\",{x:circleX,y:circleY,fontSize:expandedEmojiFontSize,textAnchor:\"middle\",dominantBaseline:\"central\",style:{fontFamily:'Apple Color Emoji, Segoe UI Emoji, Noto Color Emoji, sans-serif'},children:emoji})]},category);})]});};const MealGrid=_ref4=>{let{config,weekDays,patientData,isExpanded}=_ref4;if(!patientData||patientData.length===0){return null;}return/*#__PURE__*/_jsx(\"g\",{className:\"meal-grid\",children:weekDays.map((day,dayIndex)=>{const dayData=patientData.find(d=>{const dataDate=new Date(d.Date);return dataDate.toDateString()===day.toDateString();});if(!dayData){return null;}return MEAL_TYPES.map((meal,mealIndex)=>{const mealData=getMealData(dayData,meal);const mealTime=getMealTime(dayData,meal);return/*#__PURE__*/_jsx(MealCell,{config:config,dayIndex:dayIndex,mealIndex:mealIndex,mealData:mealData,mealTime:mealTime,isExpanded:isExpanded},\"\".concat(dayIndex,\"-\").concat(mealIndex));});})});};// --- Main Component ---\nconst MealContentsChart=_ref5=>{let{patientId,isExpanded=false,onExpand,viewMode='patient',navigation,screenshotMode=false,showThreeMonthSummaries=false}=_ref5;const{mealData:patientData,loading,error}=usePatientData(patientId);// Use navigation from parent or fallback to internal navigation\nconst useInternalNavigation=!navigation;const internalNavigation=useChartNavigation('mealContents');const nav=navigation||internalNavigation;const containerRef=useRef(null);const[containerWidth,setContainerWidth]=useState(500);// Simple inline config - no factory pattern needed\nconst mealHeight=isExpanded?90:70;const dayWidth=isExpanded?100:70;const leftPadding=140;const config={width:leftPadding+dayWidth*7,height:4*mealHeight+50+100,// 4 meals + top + bottom padding\npadding:{top:50,right:40,bottom:100,left:leftPadding},dayWidth:dayWidth,mealHeight:mealHeight,fontSize:{dayLabel:isExpanded?12:10,dateLabel:isExpanded?10:8,mealLabel:isExpanded?10:8,timeLabel:isExpanded?8:6}};// Measure container width for sizing\nuseEffect(()=>{const updateContainerWidth=()=>{if(containerRef.current){const width=containerRef.current.offsetWidth;setContainerWidth(width);}};updateContainerWidth();window.addEventListener('resize',updateContainerWidth);return()=>window.removeEventListener('resize',updateContainerWidth);},[isExpanded]);const{start:startOfWeek,end:endOfWeek}=nav.getDateRange();const weekDays=Array.from({length:7},(_,i)=>{const day=new Date(startOfWeek);day.setDate(startOfWeek.getDate()+i);return day;});// Get 3-month data\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const threeMonthData=patientData.filter(d=>{const dataDate=new Date(d.Date);return dataDate>=startOfThreeMonths&&dataDate<=endOfThreeMonths;});const formatDateRange=(start,end)=>{const startStr=start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" to \").concat(endStr);};// Calculate summary statistics for physician view\nlet weekSummary=null;if(patientData&&patientData.length>0){const weekData=patientData.filter(d=>{const dataDate=new Date(d.Date);return dataDate>=startOfWeek&&dataDate<=endOfWeek;});if(weekData.length===0)return null;// Count food categories across all meals\nconst categoryStats={};FOOD_CATEGORIES.forEach(category=>{categoryStats[category]=0;});// Count sugar levels\nconst sugarStats={};SUGAR_CATEGORIES.filter(s=>s!=='').forEach(sugar=>{sugarStats[sugar]=0;});let totalMealsLogged=0;let daysWithMeals=new Set();weekData.forEach(dayData=>{daysWithMeals.add(dayData.Date);MEAL_TYPES.forEach(meal=>{const mealData=getMealData(dayData,meal);const hasAnyFood=FOOD_CATEGORIES.some(category=>mealData[category]);if(hasAnyFood){totalMealsLogged++;// Count each food category\nFOOD_CATEGORIES.forEach(category=>{if(mealData[category]){categoryStats[category]++;}});// Count sugar levels\nif(mealData['Added Sugar']&&mealData['Added Sugar']!==''){sugarStats[mealData['Added Sugar']]++;}}});});// Find most common food category\nconst mostCommonFood=Object.entries(categoryStats).sort((_ref6,_ref7)=>{let[,a]=_ref6;let[,b]=_ref7;return b-a;})[0];// Calculate sugar frequency\nconst totalSugarMeals=Object.values(sugarStats).reduce((sum,count)=>sum+count,0);const sugarPercentage=totalMealsLogged>0?(totalSugarMeals/totalMealsLogged*100).toFixed(0):0;weekSummary={totalMealsLogged,daysWithMeals:daysWithMeals.size,mostCommonFood:mostCommonFood[0],mostCommonFoodCount:mostCommonFood[1],categoryStats,sugarPercentage,totalSugarMeals};}// Calculate 3-month summary statistics for physician view\nlet threeMonthSummary=null;if(threeMonthData&&threeMonthData.length>0){// Count food categories across all meals\nconst categoryStats={};FOOD_CATEGORIES.forEach(category=>{categoryStats[category]=0;});// Count sugar levels\nconst sugarStats={};SUGAR_CATEGORIES.filter(s=>s!=='').forEach(sugar=>{sugarStats[sugar]=0;});let totalMealsLogged=0;let daysWithMeals=new Set();threeMonthData.forEach(dayData=>{daysWithMeals.add(dayData.Date);MEAL_TYPES.forEach(meal=>{const mealData=getMealData(dayData,meal);const hasAnyFood=FOOD_CATEGORIES.some(category=>mealData[category]);if(hasAnyFood){totalMealsLogged++;// Count each food category\nFOOD_CATEGORIES.forEach(category=>{if(mealData[category]){categoryStats[category]++;}});// Count sugar levels\nif(mealData['Added Sugar']&&mealData['Added Sugar']!==''){sugarStats[mealData['Added Sugar']]++;}}});});// Find most common food category\nconst mostCommonFood=Object.entries(categoryStats).sort((_ref8,_ref9)=>{let[,a]=_ref8;let[,b]=_ref9;return b-a;})[0];// Calculate sugar frequency\nconst totalSugarMeals=Object.values(sugarStats).reduce((sum,count)=>sum+count,0);const sugarPercentage=totalMealsLogged>0?(totalSugarMeals/totalMealsLogged*100).toFixed(0):0;threeMonthSummary={totalMealsLogged,daysWithMeals:daysWithMeals.size,mostCommonFood:mostCommonFood[0],mostCommonFoodCount:mostCommonFood[1],categoryStats,sugarPercentage,totalSugarMeals};}return/*#__PURE__*/_jsxs(\"div\",{className:\"meal-contents-chart-container\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Meal Contents\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getFormattedDateRange()}),/*#__PURE__*/_jsx(\"div\",{className:\"meal-chart-wrapper \".concat(isExpanded?'expanded':''),ref:containerRef,children:/*#__PURE__*/_jsxs(\"svg\",{width:config.width,height:config.height,viewBox:\"0 0 \".concat(config.width,\" \").concat(config.height),className:\"meal-chart\",style:{maxWidth:'100%',height:'auto'},children:[/*#__PURE__*/_jsx(XAxis,{config:config,weekDays:weekDays}),/*#__PURE__*/_jsx(YAxis,{config:config}),/*#__PURE__*/_jsx(MealGrid,{config:config,weekDays:weekDays,patientData:patientData,isExpanded:isExpanded})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"meal-contents-legends-wrapper\",children:[/*#__PURE__*/_jsx(Legend,{title:\"Food Categories\",items:FOOD_CATEGORIES.map(category=>({label:\"\".concat(CATEGORY_EMOJIS[category],\" \").concat(category),color:null})),hide:screenshotMode}),/*#__PURE__*/_jsx(Legend,{title:\"Sugar Levels\",items:SUGAR_CATEGORIES.filter(sugar=>sugar!=='').map(sugar=>({label:\"\".concat(SUGAR_EMOJIS[sugar],\" \").concat(sugar),color:null})),hide:screenshotMode})]}),(viewMode==='physician'||viewMode==='unified')&&weekSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"summary-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Week Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Meals Logged:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.totalMealsLogged,\"/28 possible\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Added Sugar:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.sugarPercentage,\"% of meals (\",weekSummary.totalSugarMeals,\"/\",weekSummary.totalMealsLogged,\")\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Food Balance:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:weekSummary.categoryStats&&Object.entries(weekSummary.categoryStats).sort((_ref0,_ref1)=>{let[,a]=_ref0;let[,b]=_ref1;return b-a;}).slice(0,3).map(_ref10=>{let[cat,count]=_ref10;return\"\".concat(CATEGORY_EMOJIS[cat]).concat(count);}).join(' ')})]})]})]}),showThreeMonthSummaries&&threeMonthSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"3-Month Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Meals Logged:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.totalMealsLogged,\" meals\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Added Sugar:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.sugarPercentage,\"% of meals (\",threeMonthSummary.totalSugarMeals,\"/\",threeMonthSummary.totalMealsLogged,\")\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Food Balance:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:threeMonthSummary.categoryStats&&Object.entries(threeMonthSummary.categoryStats).sort((_ref11,_ref12)=>{let[,a]=_ref11;let[,b]=_ref12;return b-a;}).slice(0,3).map(_ref13=>{let[cat,count]=_ref13;return\"\".concat(CATEGORY_EMOJIS[cat]).concat(count);}).join(' ')})]})]})]})]})]});};export default MealContentsChart;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}