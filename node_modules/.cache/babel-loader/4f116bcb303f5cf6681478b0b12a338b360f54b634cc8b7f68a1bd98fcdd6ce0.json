{"ast":null,"code":"var _s = $RefreshSig$();\n/**\r\n * useVisualizations.js - Visualization Management Hook\r\n * \r\n * This hook manages the visualization system across dashboard types:\r\n * - Creates and maintains visualization component registry\r\n * - Determines available visualizations based on data availability\r\n * - Manages visualization selection and ordering\r\n * - Supports both patient and physician dashboard configurations\r\n * - Handles dynamic visualization rendering\r\n * \r\n * ARCHITECTURE:\r\n * - Uses React hooks for state management and memoization\r\n * - Implements component registry pattern for dynamic rendering\r\n * - Provides data-driven visualization availability\r\n * - Supports multiple dashboard configurations\r\n * \r\n * VISUALIZATION TYPES:\r\n * - glucose: Blood glucose monitoring charts\r\n * - bloodPressure: Blood pressure tracking charts\r\n * - exercise: Physical activity visualization\r\n * - mood: Mood calendar and tracking\r\n * - pain: Pain reporting with body mapping\r\n * - mealContents: Nutritional intake tracking\r\n * - sleep: Sleep pattern analysis\r\n * \r\n * COMPONENT REGISTRY:\r\n * - Maps visualization types to React components\r\n * - Provides configuration for each visualization type\r\n * - Handles component imports and lazy loading\r\n * - Maintains consistent component interfaces\r\n * \r\n * DATA AVAILABILITY:\r\n * - Checks data availability for each visualization type\r\n * - Filters visualizations based on actual data presence\r\n * - Provides fallback for missing data scenarios\r\n * - Ensures only relevant visualizations are shown\r\n * \r\n * Provides centralized visualization management for consistent chart behavior.\r\n */\n\nimport React, { useState, useMemo } from 'react';\nimport { VISUALIZATION_CONFIG, DASHBOARD_CONFIG } from '../constants';\n\n// Import all chart components\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\nimport PainChart from '../components/patient_charts/PainChart';\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\nimport SleepChart from '../components/patient_charts/SleepChart';\n\n/**\r\n * Shared hook for managing visualizations across different dashboard types\r\n * Now supports showing all available visualizations\r\n * \r\n * @param {string} viewMode - 'patient' or 'physician'\r\n * @param {Object} data - Patient data object\r\n * @returns {Object} Visualization state and utilities\r\n * @returns {Object} allVisualizations - Complete visualization registry\r\n * @returns {Object} availableVisualizations - Visualizations with available data\r\n * @returns {Object} selectedVisualizations - Currently selected visualizations\r\n * @returns {Function} handleVisualizationChange - Function to change visualizations\r\n * @returns {Object} config - Dashboard configuration for the view mode\r\n */\nconst useVisualizations = (viewMode, data) => {\n  _s();\n  const config = DASHBOARD_CONFIG[viewMode];\n\n  // Create visualization registry with components\n  const allVisualizations = useMemo(() => ({\n    glucose: {\n      ...VISUALIZATION_CONFIG.glucose,\n      component: GlucoseChart\n    },\n    bloodPressure: {\n      ...VISUALIZATION_CONFIG.bloodPressure,\n      component: BloodPressureChart\n    },\n    pain: {\n      ...VISUALIZATION_CONFIG.pain,\n      component: PainChart\n    },\n    exercise: {\n      ...VISUALIZATION_CONFIG.exercise,\n      component: ExerciseChart\n    },\n    mealContents: {\n      ...VISUALIZATION_CONFIG.mealContents,\n      component: MealContentsChart\n    },\n    mood: {\n      ...VISUALIZATION_CONFIG.mood,\n      component: MoodCalendar\n    },\n    sleep: {\n      ...VISUALIZATION_CONFIG.sleep,\n      component: SleepChart\n    }\n  }), []);\n\n  // Determine available visualizations based on data\n  const availableVisualizations = useMemo(() => {\n    if (!data) return {};\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\n      const dataKey = `${key}Data`;\n      // Special case for meal contents\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\n        acc[key] = viz;\n      } else if (data[dataKey] && data[dataKey].length > 0) {\n        acc[key] = viz;\n      }\n      return acc;\n    }, {});\n  }, [data, allVisualizations]);\n\n  // Create dynamic selected visualizations based on available ones\n  // Remove ordering logic to fix expand button bug\n  const selectedVisualizations = useMemo(() => {\n    const availableKeys = Object.keys(availableVisualizations);\n\n    // Create chart IDs for all available visualizations in the same order as they appear\n    const chartIds = availableKeys.map((_, index) => `${viewMode}-chart-${index}`);\n    return chartIds.reduce((acc, chartId, index) => {\n      acc[chartId] = availableKeys[index];\n      return acc;\n    }, {});\n  }, [availableVisualizations, viewMode]);\n  const handleVisualizationChange = (chartId, visualizationType) => {\n    // This function is kept for compatibility but may not be needed\n    // since we're now showing all available visualizations\n    // Debug logging removed for production\n  };\n  return {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange,\n    config\n  };\n};\n_s(useVisualizations, \"RqGwn3LU1AqjwR3dTYu3lB9gvno=\");\nexport default useVisualizations;","map":{"version":3,"names":["React","useState","useMemo","VISUALIZATION_CONFIG","DASHBOARD_CONFIG","GlucoseChart","BloodPressureChart","ExerciseChart","MoodCalendar","PainChart","MealContentsChart","SleepChart","useVisualizations","viewMode","data","_s","config","allVisualizations","glucose","component","bloodPressure","pain","exercise","mealContents","mood","sleep","availableVisualizations","Object","entries","reduce","acc","key","viz","dataKey","length","selectedVisualizations","availableKeys","keys","chartIds","map","_","index","chartId","handleVisualizationChange","visualizationType"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/useVisualizations.js"],"sourcesContent":["/**\r\n * useVisualizations.js - Visualization Management Hook\r\n * \r\n * This hook manages the visualization system across dashboard types:\r\n * - Creates and maintains visualization component registry\r\n * - Determines available visualizations based on data availability\r\n * - Manages visualization selection and ordering\r\n * - Supports both patient and physician dashboard configurations\r\n * - Handles dynamic visualization rendering\r\n * \r\n * ARCHITECTURE:\r\n * - Uses React hooks for state management and memoization\r\n * - Implements component registry pattern for dynamic rendering\r\n * - Provides data-driven visualization availability\r\n * - Supports multiple dashboard configurations\r\n * \r\n * VISUALIZATION TYPES:\r\n * - glucose: Blood glucose monitoring charts\r\n * - bloodPressure: Blood pressure tracking charts\r\n * - exercise: Physical activity visualization\r\n * - mood: Mood calendar and tracking\r\n * - pain: Pain reporting with body mapping\r\n * - mealContents: Nutritional intake tracking\r\n * - sleep: Sleep pattern analysis\r\n * \r\n * COMPONENT REGISTRY:\r\n * - Maps visualization types to React components\r\n * - Provides configuration for each visualization type\r\n * - Handles component imports and lazy loading\r\n * - Maintains consistent component interfaces\r\n * \r\n * DATA AVAILABILITY:\r\n * - Checks data availability for each visualization type\r\n * - Filters visualizations based on actual data presence\r\n * - Provides fallback for missing data scenarios\r\n * - Ensures only relevant visualizations are shown\r\n * \r\n * Provides centralized visualization management for consistent chart behavior.\r\n */\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport { VISUALIZATION_CONFIG, DASHBOARD_CONFIG } from '../constants';\r\n\r\n// Import all chart components\r\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\r\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\r\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\r\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\r\nimport PainChart from '../components/patient_charts/PainChart';\r\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\r\nimport SleepChart from '../components/patient_charts/SleepChart';\r\n\r\n/**\r\n * Shared hook for managing visualizations across different dashboard types\r\n * Now supports showing all available visualizations\r\n * \r\n * @param {string} viewMode - 'patient' or 'physician'\r\n * @param {Object} data - Patient data object\r\n * @returns {Object} Visualization state and utilities\r\n * @returns {Object} allVisualizations - Complete visualization registry\r\n * @returns {Object} availableVisualizations - Visualizations with available data\r\n * @returns {Object} selectedVisualizations - Currently selected visualizations\r\n * @returns {Function} handleVisualizationChange - Function to change visualizations\r\n * @returns {Object} config - Dashboard configuration for the view mode\r\n */\r\nconst useVisualizations = (viewMode, data) => {\r\n  const config = DASHBOARD_CONFIG[viewMode];\r\n  \r\n  // Create visualization registry with components\r\n  const allVisualizations = useMemo(() => ({\r\n    glucose: { ...VISUALIZATION_CONFIG.glucose, component: GlucoseChart },\r\n    bloodPressure: { ...VISUALIZATION_CONFIG.bloodPressure, component: BloodPressureChart },\r\n    pain: { ...VISUALIZATION_CONFIG.pain, component: PainChart },\r\n    exercise: { ...VISUALIZATION_CONFIG.exercise, component: ExerciseChart },\r\n    mealContents: { ...VISUALIZATION_CONFIG.mealContents, component: MealContentsChart },\r\n    mood: { ...VISUALIZATION_CONFIG.mood, component: MoodCalendar },\r\n    sleep: { ...VISUALIZATION_CONFIG.sleep, component: SleepChart },\r\n  }), []);\r\n\r\n  // Determine available visualizations based on data\r\n  const availableVisualizations = useMemo(() => {\r\n    if (!data) return {};\r\n\r\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\r\n      const dataKey = `${key}Data`;\r\n      // Special case for meal contents\r\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\r\n        acc[key] = viz;\r\n      } else if (data[dataKey] && data[dataKey].length > 0) {\r\n        acc[key] = viz;\r\n      }\r\n      return acc;\r\n    }, {});\r\n  }, [data, allVisualizations]);\r\n\r\n  // Create dynamic selected visualizations based on available ones\r\n  // Remove ordering logic to fix expand button bug\r\n  const selectedVisualizations = useMemo(() => {\r\n    const availableKeys = Object.keys(availableVisualizations);\r\n    \r\n    // Create chart IDs for all available visualizations in the same order as they appear\r\n    const chartIds = availableKeys.map((_, index) => `${viewMode}-chart-${index}`);\r\n    \r\n    return chartIds.reduce((acc, chartId, index) => {\r\n      acc[chartId] = availableKeys[index];\r\n      return acc;\r\n    }, {});\r\n  }, [availableVisualizations, viewMode]);\r\n\r\n  const handleVisualizationChange = (chartId, visualizationType) => {\r\n    // This function is kept for compatibility but may not be needed\r\n    // since we're now showing all available visualizations\r\n    // Debug logging removed for production\r\n  };\r\n\r\n  return {\r\n    allVisualizations,\r\n    availableVisualizations,\r\n    selectedVisualizations,\r\n    handleVisualizationChange,\r\n    config\r\n  };\r\n};\r\n\r\nexport default useVisualizations;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}