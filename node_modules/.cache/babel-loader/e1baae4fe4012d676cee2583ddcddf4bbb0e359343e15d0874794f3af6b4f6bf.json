{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local Experimental\\\\PGHD_Visualization_Dashboard\\\\src\\\\components\\\\patient_charts\\\\MoodCalendar.js\",\n  _s = $RefreshSig$();\n/**\n MoodCalendar.js - Mood Tracking Calendar Visualization\n \n This component provides comprehensive mood monitoring:\n - Daily mood tracking in calendar format\n - Color-coded mood states (happy, sad, angry)\n - Monthly navigation and trend analysis\n - Interactive mood selection and editing\n - Calendar layout\n - Integration with patient data and navigation\n \n Essential for mental health monitoring and emotional well-being tracking.\n */\n\nimport React, { useState, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport './MoodCalendar.css';\n\n// --- Constants & Config ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOODS = {\n  happy: 'ðŸ˜Š',\n  sad: 'ðŸ˜¢',\n  angry: 'ðŸ˜ '\n};\nconst MOOD_COLORS = {\n  happy: 'var(--chart-color-mood-happy)',\n  sad: 'var(--chart-color-mood-sad)',\n  angry: 'var(--chart-color-mood-angry)'\n};\nconst MOOD_BACKGROUNDS = {\n  happy: 'var(--chart-color-mood-happy-bg)',\n  sad: 'var(--chart-color-mood-sad-bg)',\n  angry: 'var(--chart-color-mood-angry-bg)'\n};\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n// Separate configurations for clarity\nconst CHART_CONFIGS = {\n  normal: {\n    svgWidth: 350,\n    svgHeight: 300,\n    cellWidth: 50,\n    cellHeight: 44,\n    dayLabelY: 30,\n    dayLabelFontSize: 9,\n    dateLabelX: 5,\n    dateLabelY: 12,\n    dateLabelFontSize: 8,\n    moodIconFontSize: 20,\n    startX: 25,\n    startY: 55\n  },\n  expanded: {\n    svgWidth: 700,\n    svgHeight: 600,\n    cellWidth: 100,\n    cellHeight: 85,\n    dayLabelY: 55,\n    dayLabelFontSize: 16,\n    dateLabelX: 12,\n    dateLabelY: 22,\n    dateLabelFontSize: 14,\n    moodIconFontSize: 36,\n    startX: 50,\n    startY: 100\n  }\n};\nconst getCalendarConfig = isExpanded => {\n  return isExpanded ? CHART_CONFIGS.expanded : CHART_CONFIGS.normal;\n};\n\n// --- Helper Functions ---\nconst normalizeMood = mood => mood && MOODS[mood.toLowerCase()] ? mood.toLowerCase() : null;\nconst getMoodEmoji = mood => MOODS[normalizeMood(mood)];\nconst getMoodColor = mood => MOOD_COLORS[normalizeMood(mood)];\nconst getMoodBackgroundColor = mood => MOOD_BACKGROUNDS[normalizeMood(mood)] || '#ffffff';\nconst moodLegendItems = Object.entries(MOODS).map(([mood, emoji]) => ({\n  icon: emoji,\n  label: mood.charAt(0).toUpperCase() + mood.slice(1),\n  style: {\n    backgroundColor: MOOD_BACKGROUNDS[mood],\n    borderColor: MOOD_COLORS[mood]\n  }\n}));\n\n// --- Sub-components ---\n\nconst CalendarHeader = ({\n  config\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  className: \"calendar-header\",\n  children: DAYS_OF_WEEK.map((day, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n    x: config.startX + i * config.cellWidth,\n    y: config.dayLabelY,\n    className: \"day-name-label\",\n    style: {\n      fontSize: config.dayLabelFontSize\n    },\n    children: day\n  }, day, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 90,\n  columnNumber: 3\n}, this);\n_c = CalendarHeader;\nconst DayCell = ({\n  config,\n  date,\n  moods\n}) => {\n  const dayOfMonth = date.getDate();\n  const dayOfWeek = date.getDay();\n  const weekOfMonth = Math.floor((dayOfMonth - 1 + (() => {\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n    return !isNaN(firstDay.getTime()) ? firstDay.getDay() : 0;\n  })()) / 7);\n  const x = config.startX + dayOfWeek * config.cellWidth;\n  const y = config.startY + weekOfMonth * (config.cellHeight + 2);\n  const primaryMood = moods.length > 0 ? moods[0] : null;\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"day-cell-group\",\n    transform: `translate(${x - config.cellWidth / 2}, ${y - config.cellHeight / 2})`,\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      width: config.cellWidth,\n      height: config.cellHeight,\n      fill: getMoodBackgroundColor(primaryMood),\n      className: \"day-cell-bg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: config.dateLabelX,\n      y: config.dateLabelY,\n      className: \"date-label\",\n      style: {\n        fontSize: config.dateLabelFontSize\n      },\n      children: dayOfMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), primaryMood && /*#__PURE__*/_jsxDEV(\"text\", {\n      x: config.cellWidth / 2,\n      y: config.cellHeight * 0.65,\n      className: \"mood-icon\",\n      fill: getMoodColor(primaryMood),\n      style: {\n        fontSize: config.moodIconFontSize\n      },\n      children: getMoodEmoji(primaryMood)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_c2 = DayCell;\nconst Calendar = ({\n  isExpanded,\n  moodByDate,\n  currentMonth,\n  monthDisplay\n}) => {\n  const config = getCalendarConfig(isExpanded);\n  const year = currentMonth.getFullYear();\n  const month = currentMonth.getMonth();\n  const daysInMonth = (() => {\n    const lastDay = new Date(year, month + 1, 0);\n    return !isNaN(lastDay.getTime()) ? lastDay.getDate() : 30;\n  })();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-calendar-svg-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Mood Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"chart-subtitle\",\n      children: monthDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: `0 0 ${config.svgWidth} ${config.svgHeight}`,\n      className: \"mood-calendar-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        width: config.svgWidth,\n        height: config.svgHeight,\n        fill: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalendarHeader, {\n        config: config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"calendar-body\",\n        children: [...Array(daysInMonth)].map((_, i) => {\n          const dayOfMonth = i + 1;\n          const date = new Date(year, month, dayOfMonth);\n          return /*#__PURE__*/_jsxDEV(DayCell, {\n            config: config,\n            date: date,\n            moods: moodByDate[dayOfMonth] || []\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n\n// --- Main Component ---\n_c3 = Calendar;\nconst MoodCalendar = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  navigation,\n  screenshotMode = false,\n  showThreeMonthSummaries = false\n}) => {\n  _s();\n  const {\n    moodData,\n    loading,\n    error\n  } = usePatientData(patientId);\n\n  // Use navigation from parent or fallback to internal navigation\n  const internalNavigation = useChartNavigation('mood');\n  const nav = navigation || internalNavigation;\n\n  // For mood chart, determine the month to display based on the navigation\n  // If using weekly navigation, show the month that contains the current week\n  let currentMonth;\n  if (nav.navigationType === 'week') {\n    // Use the week's start date to determine which month to display\n    const weekRange = nav.getDateRange();\n    currentMonth = new Date(weekRange.start.getFullYear(), weekRange.start.getMonth(), 1);\n  } else {\n    // Use monthly navigation directly\n    currentMonth = nav.currentDate;\n  }\n  const moodByDate = moodData.filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth()).reduce((acc, item) => {\n    const dateKey = item.date.getDate();\n    if (!acc[dateKey]) acc[dateKey] = [];\n    acc[dateKey].push(item.mood);\n    return acc;\n  }, {});\n\n  // Get appropriate month display based on navigation type\n  const monthDisplay = nav.navigationType === 'week' ? currentMonth.toLocaleDateString('en-US', {\n    month: 'long',\n    year: 'numeric'\n  }) : nav.getFormattedDateRange();\n\n  // Get 3-month data\n  const {\n    start: startOfThreeMonths,\n    end: endOfThreeMonths\n  } = nav.getThreeMonthRange();\n  const threeMonthData = moodData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\n\n  // Calculate summary statistics for physician view\n  const currentMonthData = moodData.filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth());\n  let monthSummary = null;\n  if (currentMonthData.length > 0) {\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n    currentMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = currentMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? (count / totalEntries * 100).toFixed(0) : 0;\n    });\n\n    // Days in current month\n    /**\n     * Gets the number of days in a given month\n     * @param {number} year - The year\n     * @param {number} month - The month (0-11)\n     * @returns {number} - The number of days in the month\n     */\n    function getDaysInMonth(year, month) {\n      const lastDay = new Date(year, month + 1, 0);\n      return lastDay.getDate();\n    }\n    const daysInMonth = getDaysInMonth(currentMonth.getFullYear(), currentMonth.getMonth());\n    const daysWithMood = new Set(currentMonthData.map(d => d.date.getDate())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n    monthSummary = {\n      totalEntries,\n      daysWithMood,\n      daysInMonth,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthData.length > 0) {\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n    threeMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = threeMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? (count / totalEntries * 100).toFixed(0) : 0;\n    });\n\n    // Calculate actual days in the 3-month period\n    const {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const daysWithMood = new Set(threeMonthData.map(d => d.date.toDateString())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n    threeMonthSummary = {\n      totalEntries,\n      daysWithMood,\n      daysInThreeMonths,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mood-calendar-wrapper ${isExpanded ? 'expanded' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(Calendar, {\n        isExpanded: isExpanded,\n        moodByDate: moodByDate,\n        currentMonth: currentMonth,\n        monthDisplay: monthDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-calendar-legend-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Legend, {\n        title: \"Mood\",\n        items: moodLegendItems,\n        hide: screenshotMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), monthSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Month Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Mood Entries:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [monthSummary.totalEntries, \" entries\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common Mood:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [MOODS[monthSummary.mostCommonMood], \" \", monthSummary.mostCommonMood.charAt(0).toUpperCase() + monthSummary.mostCommonMood.slice(1), \" (\", monthSummary.mostCommonMoodCount, \"x)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Mood Distribution:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [\"\\uD83D\\uDE0A\", monthSummary.moodPercentages.happy, \"% \\uD83D\\uDE22\", monthSummary.moodPercentages.sad, \"% \\uD83D\\uDE20\", monthSummary.moodPercentages.angry, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this), showThreeMonthSummaries && threeMonthSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"3-Month Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Mood Entries:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.totalEntries, \" entries\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common Mood:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [MOODS[threeMonthSummary.mostCommonMood], \" \", threeMonthSummary.mostCommonMood.charAt(0).toUpperCase() + threeMonthSummary.mostCommonMood.slice(1), \" (\", threeMonthSummary.mostCommonMoodCount, \"x)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Mood Distribution:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [\"\\uD83D\\uDE0A\", threeMonthSummary.moodPercentages.happy, \"% \\uD83D\\uDE22\", threeMonthSummary.moodPercentages.sad, \"% \\uD83D\\uDE20\", threeMonthSummary.moodPercentages.angry, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodCalendar, \"eLFd45kLPJ6ATV8yzWGt/MKdbJc=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c4 = MoodCalendar;\nexport default MoodCalendar;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CalendarHeader\");\n$RefreshReg$(_c2, \"DayCell\");\n$RefreshReg$(_c3, \"Calendar\");\n$RefreshReg$(_c4, \"MoodCalendar\");","map":{"version":3,"names":["React","useState","useRef","usePatientData","useChartNavigation","Legend","jsxDEV","_jsxDEV","MOODS","happy","sad","angry","MOOD_COLORS","MOOD_BACKGROUNDS","DAYS_OF_WEEK","CHART_CONFIGS","normal","svgWidth","svgHeight","cellWidth","cellHeight","dayLabelY","dayLabelFontSize","dateLabelX","dateLabelY","dateLabelFontSize","moodIconFontSize","startX","startY","expanded","getCalendarConfig","isExpanded","normalizeMood","mood","toLowerCase","getMoodEmoji","getMoodColor","getMoodBackgroundColor","moodLegendItems","Object","entries","map","emoji","icon","label","charAt","toUpperCase","slice","style","backgroundColor","borderColor","CalendarHeader","config","className","children","day","i","x","y","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","DayCell","date","moods","dayOfMonth","getDate","dayOfWeek","getDay","weekOfMonth","Math","floor","firstDay","Date","getFullYear","getMonth","isNaN","getTime","primaryMood","length","transform","width","height","fill","_c2","Calendar","moodByDate","currentMonth","monthDisplay","year","month","daysInMonth","lastDay","viewBox","Array","_","_c3","MoodCalendar","patientId","onExpand","navigation","screenshotMode","showThreeMonthSummaries","_s","moodData","loading","error","internalNavigation","nav","navigationType","weekRange","getDateRange","start","currentDate","filter","d","reduce","acc","item","dateKey","push","toLocaleDateString","getFormattedDateRange","startOfThreeMonths","end","endOfThreeMonths","getThreeMonthRange","threeMonthData","currentMonthData","monthSummary","moodCounts","keys","forEach","entry","normalizedMood","undefined","mostCommonMood","sort","a","b","totalEntries","moodPercentages","count","toFixed","getDaysInMonth","daysWithMood","Set","size","moodScore","moodTrend","mostCommonMoodCount","threeMonthSummary","daysInThreeMonths","ceil","toDateString","title","items","hide","_c4","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/components/patient_charts/MoodCalendar.js"],"sourcesContent":["/**\n MoodCalendar.js - Mood Tracking Calendar Visualization\n \n This component provides comprehensive mood monitoring:\n - Daily mood tracking in calendar format\n - Color-coded mood states (happy, sad, angry)\n - Monthly navigation and trend analysis\n - Interactive mood selection and editing\n - Calendar layout\n - Integration with patient data and navigation\n \n Essential for mental health monitoring and emotional well-being tracking.\n */\n\nimport React, { useState, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\n\nimport './MoodCalendar.css';\n\n// --- Constants & Config ---\nconst MOODS = { happy: 'ðŸ˜Š', sad: 'ðŸ˜¢', angry: 'ðŸ˜ ' };\nconst MOOD_COLORS = { \n  happy: 'var(--chart-color-mood-happy)', \n  sad: 'var(--chart-color-mood-sad)', \n  angry: 'var(--chart-color-mood-angry)' \n};\nconst MOOD_BACKGROUNDS = { \n  happy: 'var(--chart-color-mood-happy-bg)', \n  sad: 'var(--chart-color-mood-sad-bg)', \n  angry: 'var(--chart-color-mood-angry-bg)' \n};\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n// Separate configurations for clarity\nconst CHART_CONFIGS = {\n  normal: {\n    svgWidth: 350,\n    svgHeight: 300,\n    cellWidth: 50,\n    cellHeight: 44,\n    dayLabelY: 30,\n    dayLabelFontSize: 9,\n    dateLabelX: 5,\n    dateLabelY: 12,\n    dateLabelFontSize: 8,\n    moodIconFontSize: 20,\n    startX: 25,\n    startY: 55,\n  },\n  expanded: {\n    svgWidth: 700,\n    svgHeight: 600,\n    cellWidth: 100,\n    cellHeight: 85,\n    dayLabelY: 55,\n    dayLabelFontSize: 16,\n    dateLabelX: 12,\n    dateLabelY: 22,\n    dateLabelFontSize: 14,\n    moodIconFontSize: 36,\n    startX: 50,\n    startY: 100,\n  }\n};\n\nconst getCalendarConfig = (isExpanded) => {\n  return isExpanded ? CHART_CONFIGS.expanded : CHART_CONFIGS.normal;\n};\n\n// --- Helper Functions ---\nconst normalizeMood = (mood) => (mood && MOODS[mood.toLowerCase()]) ? mood.toLowerCase() : null;\nconst getMoodEmoji = (mood) => MOODS[normalizeMood(mood)];\nconst getMoodColor = (mood) => MOOD_COLORS[normalizeMood(mood)];\nconst getMoodBackgroundColor = (mood) => MOOD_BACKGROUNDS[normalizeMood(mood)] || '#ffffff';\n\nconst moodLegendItems = Object.entries(MOODS).map(([mood, emoji]) => ({\n  icon: emoji,\n  label: mood.charAt(0).toUpperCase() + mood.slice(1),\n  style: {\n    backgroundColor: MOOD_BACKGROUNDS[mood],\n    borderColor: MOOD_COLORS[mood],\n  },\n}));\n\n// --- Sub-components ---\n\nconst CalendarHeader = ({ config }) => (\n  <g className=\"calendar-header\">\n    {DAYS_OF_WEEK.map((day, i) => (\n      <text \n        key={day} \n        x={config.startX + i * config.cellWidth} \n        y={config.dayLabelY} \n        className=\"day-name-label\"\n        style={{ fontSize: config.dayLabelFontSize }}\n      >\n        {day}\n      </text>\n    ))}\n  </g>\n);\n\nconst DayCell = ({ config, date, moods }) => {\n  const dayOfMonth = date.getDate();\n  const dayOfWeek = date.getDay();\n  const weekOfMonth = Math.floor((dayOfMonth - 1 + (() => {\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n    return !isNaN(firstDay.getTime()) ? firstDay.getDay() : 0;\n  })()) / 7);\n  const x = config.startX + dayOfWeek * config.cellWidth;\n  const y = config.startY + weekOfMonth * (config.cellHeight + 2);\n  const primaryMood = moods.length > 0 ? moods[0] : null;\n\n  return (\n    <g className=\"day-cell-group\" transform={`translate(${x - config.cellWidth / 2}, ${y - config.cellHeight / 2})`}>\n      <rect width={config.cellWidth} height={config.cellHeight} fill={getMoodBackgroundColor(primaryMood)} className=\"day-cell-bg\" />\n      <text \n        x={config.dateLabelX} \n        y={config.dateLabelY} \n        className=\"date-label\" \n        style={{ fontSize: config.dateLabelFontSize }}\n      >\n        {dayOfMonth}\n      </text>\n      {primaryMood && (\n        <text \n          x={config.cellWidth / 2} \n          y={config.cellHeight * 0.65} \n          className=\"mood-icon\" \n          fill={getMoodColor(primaryMood)}\n          style={{ fontSize: config.moodIconFontSize }}\n        >\n          {getMoodEmoji(primaryMood)}\n        </text>\n      )}\n    </g>\n  );\n};\n\nconst Calendar = ({ isExpanded, moodByDate, currentMonth, monthDisplay }) => {\n  const config = getCalendarConfig(isExpanded);\n  const year = currentMonth.getFullYear();\n  const month = currentMonth.getMonth();\n    const daysInMonth = (() => {\n      const lastDay = new Date(year, month + 1, 0);\n      return !isNaN(lastDay.getTime()) ? lastDay.getDate() : 30;\n    })();\n\n  return (\n    <div className=\"mood-calendar-svg-container\">\n      <h3 className=\"chart-title\">Mood Calendar</h3>\n      <h4 className=\"chart-subtitle\">{monthDisplay}</h4>\n      <svg viewBox={`0 0 ${config.svgWidth} ${config.svgHeight}`} className=\"mood-calendar-svg\">\n        <rect width={config.svgWidth} height={config.svgHeight} fill=\"white\" />\n        <CalendarHeader config={config} />\n        <g className=\"calendar-body\">\n          {[...Array(daysInMonth)].map((_, i) => {\n            const dayOfMonth = i + 1;\n            const date = new Date(year, month, dayOfMonth);\n            return <DayCell key={i} config={config} date={date} moods={moodByDate[dayOfMonth] || []} />;\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\n// --- Main Component ---\nconst MoodCalendar = ({ patientId, isExpanded = false, onExpand, navigation, screenshotMode = false, showThreeMonthSummaries = false }) => {\n  const { moodData, loading, error } = usePatientData(patientId);\n  \n  // Use navigation from parent or fallback to internal navigation\n  const internalNavigation = useChartNavigation('mood');\n  const nav = navigation || internalNavigation;\n  \n  // For mood chart, determine the month to display based on the navigation\n  // If using weekly navigation, show the month that contains the current week\n  let currentMonth;\n  if (nav.navigationType === 'week') {\n    // Use the week's start date to determine which month to display\n    const weekRange = nav.getDateRange();\n    currentMonth = new Date(weekRange.start.getFullYear(), weekRange.start.getMonth(), 1);\n  } else {\n    // Use monthly navigation directly\n    currentMonth = nav.currentDate;\n  }\n\n  const moodByDate = moodData\n    .filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth())\n    .reduce((acc, item) => {\n      const dateKey = item.date.getDate();\n      if (!acc[dateKey]) acc[dateKey] = [];\n      acc[dateKey].push(item.mood);\n      return acc;\n    }, {});\n\n  // Get appropriate month display based on navigation type\n  const monthDisplay = nav.navigationType === 'week' \n    ? currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })\n    : nav.getFormattedDateRange();\n\n  // Get 3-month data\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n  const threeMonthData = moodData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\n\n  // Calculate summary statistics for physician view\n  const currentMonthData = moodData.filter(d => \n    d.date.getFullYear() === currentMonth.getFullYear() && \n    d.date.getMonth() === currentMonth.getMonth()\n  );\n  \n  let monthSummary = null;\n  if (currentMonthData.length > 0) {\n\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n\n    currentMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = currentMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? ((count / totalEntries) * 100).toFixed(0) : 0;\n    });\n\n    // Days in current month\n    /**\n     * Gets the number of days in a given month\n     * @param {number} year - The year\n     * @param {number} month - The month (0-11)\n     * @returns {number} - The number of days in the month\n     */\n    function getDaysInMonth(year, month) {\n      const lastDay = new Date(year, month + 1, 0);\n      return lastDay.getDate();\n    }\n    \n    const daysInMonth = getDaysInMonth(currentMonth.getFullYear(), currentMonth.getMonth());\n    const daysWithMood = new Set(currentMonthData.map(d => d.date.getDate())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n\n    monthSummary = {\n      totalEntries,\n      daysWithMood,\n      daysInMonth,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthData.length > 0) {\n\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n\n    threeMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = threeMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? ((count / totalEntries) * 100).toFixed(0) : 0;\n    });\n\n    // Calculate actual days in the 3-month period\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const daysWithMood = new Set(threeMonthData.map(d => d.date.toDateString())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n\n    threeMonthSummary = {\n      totalEntries,\n      daysWithMood,\n      daysInThreeMonths,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }\n\n  return (\n    <div className=\"mood-calendar-container\">\n      <div className={`mood-calendar-wrapper ${isExpanded ? 'expanded' : ''}`}>\n        <Calendar isExpanded={isExpanded} moodByDate={moodByDate} currentMonth={currentMonth} monthDisplay={monthDisplay} />\n      </div>\n      <div className=\"mood-calendar-legend-wrapper\">\n          <Legend title=\"Mood\" items={moodLegendItems} hide={screenshotMode} />\n      </div>\n\n      {/* Show summary for physician/unified view */}\n      {monthSummary && (\n        <div className=\"summary-container\">\n          <div className=\"chart-summary\">\n            <h4>Month Summary</h4>\n            <div className=\"summary-stats\">\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Mood Entries:</span>\n                <span className=\"stat-value\">\n                  {monthSummary.totalEntries} entries\n                </span>\n              </div>\n\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Most Common Mood:</span>\n                <span className=\"stat-value\">\n                  {MOODS[monthSummary.mostCommonMood]} {monthSummary.mostCommonMood.charAt(0).toUpperCase() + monthSummary.mostCommonMood.slice(1)} ({monthSummary.mostCommonMoodCount}x)\n                </span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Mood Distribution:</span>\n                <span className=\"stat-value\">\n                  ðŸ˜Š{monthSummary.moodPercentages.happy}% ðŸ˜¢{monthSummary.moodPercentages.sad}% ðŸ˜ {monthSummary.moodPercentages.angry}%\n                </span>\n              </div>\n\n            </div>\n          </div>\n          \n          {showThreeMonthSummaries && threeMonthSummary && (\n            <div className=\"chart-summary\">\n              <h4>3-Month Summary</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Mood Entries:</span>\n                  <span className=\"stat-value\">\n                    {threeMonthSummary.totalEntries} entries\n                  </span>\n                </div>\n\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Most Common Mood:</span>\n                  <span className=\"stat-value\">\n                    {MOODS[threeMonthSummary.mostCommonMood]} {threeMonthSummary.mostCommonMood.charAt(0).toUpperCase() + threeMonthSummary.mostCommonMood.slice(1)} ({threeMonthSummary.mostCommonMoodCount}x)\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Mood Distribution:</span>\n                  <span className=\"stat-value\">\n                    ðŸ˜Š{threeMonthSummary.moodPercentages.happy}% ðŸ˜¢{threeMonthSummary.moodPercentages.sad}% ðŸ˜ {threeMonthSummary.moodPercentages.angry}%\n                  </span>\n                </div>\n\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MoodCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}