{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExercisePhysicianChart.js\",\n  _s = $RefreshSig$();\n/**\r\n ExercisePhysicianChart.js - Physician Exercise Goals Visualization\r\n \r\n This component provides a physician-focused exercise goals tracking visualization:\r\n - Three exercise categories: Aerobic, Strength, and Flexibility/Balance\r\n - Progress bars showing percentage completion of weekly goals\r\n - Color-coded progress indicators (green for goal met, yellow for partial, red for not met)\r\n - Weekly goal tracking with clear visual feedback\r\n - Integration with patient data and chart navigation\r\n \r\n Architecture:\r\n - Uses custom SVG for horizontal bar chart visualization\r\n - Implements goal-based progress tracking system\r\n - Provides color-coded progress indicators for quick assessment\r\n - Supports expandable views and navigation controls\r\n - Implements time-based navigation and data filtering\r\n \r\n Visualization Features:\r\n - Horizontal progress bars for each exercise category\r\n - Percentage completion display with goal targets\r\n - Color-coded progress indicators (green/yellow/red)\r\n - Interactive tooltips with detailed progress information\r\n - Design adapting to container size\r\n - Dynamic scaling based on progress values\r\n \r\n Exercise Categories:\r\n - Aerobic: 150 minutes per week goal\r\n - Strength: 2 sessions per week (minimum 10 minutes each)\r\n - Flexibility/Balance: 1 session per week goal\r\n \r\n Component Structure:\r\n - Chart Container: Main SVG container with sizing\r\n - Progress Bars: Horizontal bars showing completion percentage\r\n - Goal Labels: Category names and target goals\r\n - Progress Indicators: Color-coded completion status\r\n - Tooltip: Detailed progress information on hover\r\n \r\n Essential for physician exercise monitoring and goal assessment.\r\n */\n\nimport React, { useState, useMemo, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport './ExercisePhysicianChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseCategories = [{\n  key: 'aerobic',\n  label: 'Aerobic Activity',\n  color: '#2E8B57',\n  // Sea green\n  goal: 150,\n  // minutes per week\n  unit: 'minutes/week',\n  description: 'Cardiovascular exercise (walking, running, swimming, biking)'\n}, {\n  key: 'strength',\n  label: 'Strength Training',\n  color: '#4169E1',\n  // Royal blue\n  goal: 2,\n  // sessions per week\n  unit: 'sessions/week',\n  description: 'Resistance training and weight lifting'\n}, {\n  key: 'flexibility',\n  label: 'Flexibility/Balance',\n  color: '#9370DB',\n  // Medium purple\n  goal: 1,\n  // session per week\n  unit: 'sessions/week',\n  description: 'Stretching, yoga, balance exercises'\n}];\nconst ExercisePhysicianChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'physician',\n  navigation\n}) => {\n  _s();\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId, 'exercise');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n  const config = createChartConfig('exercise', isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Calculate progress for each category\n  const categoryProgress = useMemo(() => {\n    const progress = {};\n    exerciseCategories.forEach(category => {\n      let actualValue = 0;\n      if (category.key === 'aerobic') {\n        // Sum all aerobic activities (walking, swimming, running, biking)\n        actualValue = weekData.reduce((sum, day) => {\n          return sum + (Number(day.walking) || 0) + (Number(day.swimming) || 0) + (Number(day.running) || 0) + (Number(day.biking) || 0);\n        }, 0);\n      } else if (category.key === 'strength') {\n        // Count strength training sessions (resistance/weights)\n        const strengthDays = weekData.filter(day => (Number(day['resistance/weights']) || 0) > 0);\n        actualValue = strengthDays.length;\n      } else if (category.key === 'flexibility') {\n        // Count flexibility/balance sessions\n        const flexibilityDays = weekData.filter(day => (Number(day['balance/stretching']) || 0) > 0);\n        actualValue = flexibilityDays.length;\n      }\n      const percentage = Math.min(actualValue / category.goal * 100, 100);\n      progress[category.key] = {\n        actual: actualValue,\n        goal: category.goal,\n        percentage: percentage,\n        status: percentage >= 100 ? 'excellent' : percentage >= 50 ? 'good' : 'needs-improvement'\n      };\n    });\n    return progress;\n  }, [weekData]);\n\n  // Calculate overall exercise score\n  const overallScore = useMemo(() => {\n    const scores = Object.values(categoryProgress);\n    const averageScore = scores.reduce((sum, score) => sum + score.percentage, 0) / scores.length;\n    return Math.round(averageScore);\n  }, [categoryProgress]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n  const getStatusColor = status => {\n    switch (status) {\n      case 'excellent':\n        return '#28a745';\n      // Green\n      case 'good':\n        return '#ffc107';\n      // Yellow\n      case 'needs-improvement':\n        return '#dc3545';\n      // Red\n      default:\n        return '#6c757d';\n      // Gray\n    }\n  };\n  const getStatusText = status => {\n    switch (status) {\n      case 'excellent':\n        return 'Goal Met';\n      case 'good':\n        return 'Partial Progress';\n      case 'needs-improvement':\n        return 'Needs Improvement';\n      default:\n        return 'No Data';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `exercise-physician-chart-container ${isExpanded ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Exercise Goals Progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"chart-subtitle\",\n      children: formatDateRange(startOfWeek, endOfWeek)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overall-score\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-circle\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"score-value\",\n          children: [overallScore, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"score-label\",\n          children: \"Overall Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      viewBox: `0 0 ${config.width} ${config.height}`,\n      className: \"exercise-physician-svg\",\n      children: exerciseCategories.map((category, index) => {\n        const progress = categoryProgress[category.key];\n        const barY = config.padding.top + index * 80 + 20;\n        const barWidth = config.width - config.padding.left - config.padding.right;\n        const progressWidth = progress.percentage / 100 * barWidth;\n        const statusColor = getStatusColor(progress.status);\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"progress-bar-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n            x: config.padding.left,\n            y: barY,\n            width: barWidth,\n            height: 30,\n            fill: \"#e9ecef\",\n            rx: 15,\n            className: \"progress-background\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n            x: config.padding.left,\n            y: barY,\n            width: progressWidth,\n            height: 30,\n            fill: statusColor,\n            rx: 15,\n            className: \"progress-fill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: config.padding.left - 10,\n            y: barY + 20,\n            textAnchor: \"end\",\n            fontSize: config.fontSize.categoryLabel,\n            fill: \"var(--chart-color-text-primary)\",\n            className: \"category-label\",\n            children: category.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: config.padding.left + barWidth + 10,\n            y: barY + 20,\n            textAnchor: \"start\",\n            fontSize: config.fontSize.progressText,\n            fill: \"var(--chart-color-text-primary)\",\n            className: \"progress-text\",\n            children: [progress.actual, \"/\", progress.goal, \" \", category.unit, \" (\", Math.round(progress.percentage), \"%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: config.padding.left + barWidth + 5,\n            cy: barY + 35,\n            r: 4,\n            fill: statusColor,\n            className: \"status-indicator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: config.padding.left + barWidth + 15,\n            y: barY + 40,\n            textAnchor: \"start\",\n            fontSize: config.fontSize.statusText,\n            fill: statusColor,\n            className: \"status-text\",\n            children: getStatusText(progress.status)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)]\n        }, category.key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Weekly Exercise Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: exerciseCategories.map(category => {\n            const progress = categoryProgress[category.key];\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: [category.label, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [progress.actual, \"/\", progress.goal, \" \", category.unit, /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `status-badge ${progress.status}`,\n                  children: getStatusText(progress.status)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 19\n              }, this)]\n            }, category.key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recommendations\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Recommendations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [categoryProgress.aerobic.percentage < 100 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Increase aerobic activity to reach 150 minutes per week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this), categoryProgress.strength.percentage < 100 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Add more strength training sessions (aim for 2 per week)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }, this), categoryProgress.flexibility.percentage < 100 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Include flexibility/balance exercises at least once per week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this), overallScore >= 80 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Excellent exercise routine! Keep up the great work.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(ExercisePhysicianChart, \"05QJ8zQTU//qMCeC0yhDxLVyBzI=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = ExercisePhysicianChart;\nexport default ExercisePhysicianChart;\nvar _c;\n$RefreshReg$(_c, \"ExercisePhysicianChart\");","map":{"version":3,"names":["React","useState","useMemo","useRef","usePatientData","useChartNavigation","Legend","createChartConfig","jsxDEV","_jsxDEV","exerciseCategories","key","label","color","goal","unit","description","ExercisePhysicianChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","config","chartHeight","height","padding","top","bottom","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","categoryProgress","progress","forEach","category","actualValue","reduce","sum","day","Number","walking","swimming","running","biking","strengthDays","length","flexibilityDays","percentage","Math","min","actual","status","overallScore","scores","Object","values","averageScore","score","round","formatDateRange","startStr","toLocaleDateString","month","endStr","getStatusColor","getStatusText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","viewBox","map","index","barY","barWidth","left","right","progressWidth","statusColor","x","y","fill","rx","textAnchor","fontSize","categoryLabel","progressText","cx","cy","r","statusText","aerobic","strength","flexibility","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExercisePhysicianChart.js"],"sourcesContent":["/**\r\n ExercisePhysicianChart.js - Physician Exercise Goals Visualization\r\n \r\n This component provides a physician-focused exercise goals tracking visualization:\r\n - Three exercise categories: Aerobic, Strength, and Flexibility/Balance\r\n - Progress bars showing percentage completion of weekly goals\r\n - Color-coded progress indicators (green for goal met, yellow for partial, red for not met)\r\n - Weekly goal tracking with clear visual feedback\r\n - Integration with patient data and chart navigation\r\n \r\n Architecture:\r\n - Uses custom SVG for horizontal bar chart visualization\r\n - Implements goal-based progress tracking system\r\n - Provides color-coded progress indicators for quick assessment\r\n - Supports expandable views and navigation controls\r\n - Implements time-based navigation and data filtering\r\n \r\n Visualization Features:\r\n - Horizontal progress bars for each exercise category\r\n - Percentage completion display with goal targets\r\n - Color-coded progress indicators (green/yellow/red)\r\n - Interactive tooltips with detailed progress information\r\n - Design adapting to container size\r\n - Dynamic scaling based on progress values\r\n \r\n Exercise Categories:\r\n - Aerobic: 150 minutes per week goal\r\n - Strength: 2 sessions per week (minimum 10 minutes each)\r\n - Flexibility/Balance: 1 session per week goal\r\n \r\n Component Structure:\r\n - Chart Container: Main SVG container with sizing\r\n - Progress Bars: Horizontal bars showing completion percentage\r\n - Goal Labels: Category names and target goals\r\n - Progress Indicators: Color-coded completion status\r\n - Tooltip: Detailed progress information on hover\r\n \r\n Essential for physician exercise monitoring and goal assessment.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport './ExercisePhysicianChart.css';\r\n\r\nconst exerciseCategories = [\r\n  { \r\n    key: 'aerobic', \r\n    label: 'Aerobic Activity', \r\n    color: '#2E8B57', // Sea green\r\n    goal: 150, // minutes per week\r\n    unit: 'minutes/week',\r\n    description: 'Cardiovascular exercise (walking, running, swimming, biking)'\r\n  },\r\n  { \r\n    key: 'strength', \r\n    label: 'Strength Training', \r\n    color: '#4169E1', // Royal blue\r\n    goal: 2, // sessions per week\r\n    unit: 'sessions/week',\r\n    description: 'Resistance training and weight lifting'\r\n  },\r\n  { \r\n    key: 'flexibility', \r\n    label: 'Flexibility/Balance', \r\n    color: '#9370DB', // Medium purple\r\n    goal: 1, // session per week\r\n    unit: 'sessions/week',\r\n    description: 'Stretching, yoga, balance exercises'\r\n  }\r\n];\r\n\r\nconst ExercisePhysicianChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'physician', navigation }) => {\r\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('exercise');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const config = createChartConfig('exercise', isExpanded);\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\r\n  });\r\n\r\n  // Calculate progress for each category\r\n  const categoryProgress = useMemo(() => {\r\n    const progress = {};\r\n    \r\n    exerciseCategories.forEach(category => {\r\n      let actualValue = 0;\r\n      \r\n      if (category.key === 'aerobic') {\r\n        // Sum all aerobic activities (walking, swimming, running, biking)\r\n        actualValue = weekData.reduce((sum, day) => {\r\n          return sum + (Number(day.walking) || 0) + \r\n                       (Number(day.swimming) || 0) + \r\n                       (Number(day.running) || 0) + \r\n                       (Number(day.biking) || 0);\r\n        }, 0);\r\n      } else if (category.key === 'strength') {\r\n        // Count strength training sessions (resistance/weights)\r\n        const strengthDays = weekData.filter(day => (Number(day['resistance/weights']) || 0) > 0);\r\n        actualValue = strengthDays.length;\r\n      } else if (category.key === 'flexibility') {\r\n        // Count flexibility/balance sessions\r\n        const flexibilityDays = weekData.filter(day => (Number(day['balance/stretching']) || 0) > 0);\r\n        actualValue = flexibilityDays.length;\r\n      }\r\n      \r\n      const percentage = Math.min((actualValue / category.goal) * 100, 100);\r\n      \r\n      progress[category.key] = {\r\n        actual: actualValue,\r\n        goal: category.goal,\r\n        percentage: percentage,\r\n        status: percentage >= 100 ? 'excellent' : percentage >= 50 ? 'good' : 'needs-improvement'\r\n      };\r\n    });\r\n    \r\n    return progress;\r\n  }, [weekData]);\r\n\r\n  // Calculate overall exercise score\r\n  const overallScore = useMemo(() => {\r\n    const scores = Object.values(categoryProgress);\r\n    const averageScore = scores.reduce((sum, score) => sum + score.percentage, 0) / scores.length;\r\n    return Math.round(averageScore);\r\n  }, [categoryProgress]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'excellent': return '#28a745'; // Green\r\n      case 'good': return '#ffc107'; // Yellow\r\n      case 'needs-improvement': return '#dc3545'; // Red\r\n      default: return '#6c757d'; // Gray\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status) => {\r\n    switch (status) {\r\n      case 'excellent': return 'Goal Met';\r\n      case 'good': return 'Partial Progress';\r\n      case 'needs-improvement': return 'Needs Improvement';\r\n      default: return 'No Data';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`exercise-physician-chart-container ${isExpanded ? 'expanded' : ''}`}>\r\n      <h3 className=\"chart-title\">Exercise Goals Progress</h3>\r\n      <h4 className=\"chart-subtitle\">{formatDateRange(startOfWeek, endOfWeek)}</h4>\r\n      \r\n      <div className=\"overall-score\">\r\n        <div className=\"score-circle\">\r\n          <span className=\"score-value\">{overallScore}%</span>\r\n          <span className=\"score-label\">Overall Progress</span>\r\n        </div>\r\n      </div>\r\n\r\n      <svg \r\n        width=\"100%\" \r\n        viewBox={`0 0 ${config.width} ${config.height}`}\r\n        className=\"exercise-physician-svg\"\r\n      >\r\n        {exerciseCategories.map((category, index) => {\r\n          const progress = categoryProgress[category.key];\r\n          const barY = config.padding.top + (index * 80) + 20;\r\n          const barWidth = config.width - config.padding.left - config.padding.right;\r\n          const progressWidth = (progress.percentage / 100) * barWidth;\r\n          const statusColor = getStatusColor(progress.status);\r\n          \r\n          return (\r\n            <g key={category.key} className=\"progress-bar-group\">\r\n              {/* Background bar */}\r\n              <rect\r\n                x={config.padding.left}\r\n                y={barY}\r\n                width={barWidth}\r\n                height={30}\r\n                fill=\"#e9ecef\"\r\n                rx={15}\r\n                className=\"progress-background\"\r\n              />\r\n              \r\n              {/* Progress bar */}\r\n              <rect\r\n                x={config.padding.left}\r\n                y={barY}\r\n                width={progressWidth}\r\n                height={30}\r\n                fill={statusColor}\r\n                rx={15}\r\n                className=\"progress-fill\"\r\n              />\r\n              \r\n              {/* Category label */}\r\n              <text\r\n                x={config.padding.left - 10}\r\n                y={barY + 20}\r\n                textAnchor=\"end\"\r\n                fontSize={config.fontSize.categoryLabel}\r\n                fill=\"var(--chart-color-text-primary)\"\r\n                className=\"category-label\"\r\n              >\r\n                {category.label}\r\n              </text>\r\n              \r\n              {/* Progress text */}\r\n              <text\r\n                x={config.padding.left + barWidth + 10}\r\n                y={barY + 20}\r\n                textAnchor=\"start\"\r\n                fontSize={config.fontSize.progressText}\r\n                fill=\"var(--chart-color-text-primary)\"\r\n                className=\"progress-text\"\r\n              >\r\n                {progress.actual}/{progress.goal} {category.unit} ({Math.round(progress.percentage)}%)\r\n              </text>\r\n              \r\n              {/* Status indicator */}\r\n              <circle\r\n                cx={config.padding.left + barWidth + 5}\r\n                cy={barY + 35}\r\n                r={4}\r\n                fill={statusColor}\r\n                className=\"status-indicator\"\r\n              />\r\n              <text\r\n                x={config.padding.left + barWidth + 15}\r\n                y={barY + 40}\r\n                textAnchor=\"start\"\r\n                fontSize={config.fontSize.statusText}\r\n                fill={statusColor}\r\n                className=\"status-text\"\r\n              >\r\n                {getStatusText(progress.status)}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </svg>\r\n      \r\n      {/* Summary for physician view */}\r\n      <div className=\"summary-container\">\r\n        <div className=\"chart-summary\">\r\n          <h4>Weekly Exercise Summary</h4>\r\n          <div className=\"summary-stats\">\r\n            {exerciseCategories.map(category => {\r\n              const progress = categoryProgress[category.key];\r\n              return (\r\n                <div key={category.key} className=\"stat-item\">\r\n                  <span className=\"stat-label\">{category.label}:</span>\r\n                  <span className=\"stat-value\">\r\n                    {progress.actual}/{progress.goal} {category.unit} \r\n                    <span className={`status-badge ${progress.status}`}>\r\n                      {getStatusText(progress.status)}\r\n                    </span>\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"recommendations\">\r\n          <h4>Recommendations</h4>\r\n          <ul>\r\n            {categoryProgress.aerobic.percentage < 100 && (\r\n              <li>Increase aerobic activity to reach 150 minutes per week</li>\r\n            )}\r\n            {categoryProgress.strength.percentage < 100 && (\r\n              <li>Add more strength training sessions (aim for 2 per week)</li>\r\n            )}\r\n            {categoryProgress.flexibility.percentage < 100 && (\r\n              <li>Include flexibility/balance exercises at least once per week</li>\r\n            )}\r\n            {overallScore >= 80 && (\r\n              <li>Excellent exercise routine! Keep up the great work.</li>\r\n            )}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExercisePhysicianChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}