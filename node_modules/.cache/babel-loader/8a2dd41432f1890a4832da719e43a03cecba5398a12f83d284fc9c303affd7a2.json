{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\PatientDashboard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PatientDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientDashboard = ({\n  patientId\n}) => {\n  _s();\n  const {\n    data,\n    loading,\n    error\n  } = usePatientData(patientId);\n  const {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange\n  } = useVisualizations('patient', data);\n  const {\n    expandedItem,\n    handleExpand,\n    renderVisualization\n  } = useVisualizationHelpers(patientId, allVisualizations, selectedVisualizations);\n\n  // Override renderVisualization to set correct viewMode\n  const renderVisualizationWithMode = (visualizationType, boxId) => {\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Invalid visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 22\n    }, this);\n    const Component = viz.component;\n    const isExpanded = expandedItem === boxId;\n\n    // Create navigation functions for this specific chart\n    const createNavigationHandlers = chartType => {\n      // These will be passed to VisualizationWrapper and then to the chart component\n      return {\n        onPrev: () => {\n          // This will be handled by the chart component's internal navigation\n          console.log(`Navigate previous for ${chartType}`);\n        },\n        onNext: () => {\n          // This will be handled by the chart component's internal navigation\n          console.log(`Navigate next for ${chartType}`);\n        },\n        navigationLabel: chartType === 'mood' ? 'Month' : 'Week'\n      };\n    };\n    const navigationProps = createNavigationHandlers(visualizationType);\n    return /*#__PURE__*/_jsxDEV(Component, {\n      patientId: patientId,\n      isExpanded: isExpanded,\n      onExpand: () => handleExpand(boxId),\n      viewMode: \"patient\",\n      ...navigationProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  };\n  const patientInfo = data === null || data === void 0 ? void 0 : data.patientInfo;\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-screen\",\n    children: \"Loading patient data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-screen\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(PatientInfoCard, {\n      patientInfo: patientInfo,\n      loading: loading,\n      error: error,\n      variant: \"patient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DashboardGrid, {\n      viewMode: \"patient\",\n      selectedVisualizations: selectedVisualizations,\n      availableVisualizations: availableVisualizations,\n      allVisualizations: allVisualizations,\n      onVisualizationChange: handleVisualizationChange,\n      onExpand: handleExpand,\n      expandedItem: expandedItem,\n      renderVisualization: renderVisualizationWithMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientDashboard, \"xVhnultip+ExBM0Rz4mkJ5nabcs=\", false, function () {\n  return [usePatientData, useVisualizations, useVisualizationHelpers];\n});\n_c = PatientDashboard;\nexport default PatientDashboard;\nvar _c;\n$RefreshReg$(_c, \"PatientDashboard\");","map":{"version":3,"names":["React","usePatientData","useVisualizations","useVisualizationHelpers","PatientInfoCard","DashboardGrid","jsxDEV","_jsxDEV","PatientDashboard","patientId","_s","data","loading","error","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedItem","handleExpand","renderVisualization","renderVisualizationWithMode","visualizationType","boxId","viz","children","fileName","_jsxFileName","lineNumber","columnNumber","Component","component","isExpanded","createNavigationHandlers","chartType","onPrev","console","log","onNext","navigationLabel","navigationProps","onExpand","viewMode","patientInfo","className","variant","onVisualizationChange","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PatientDashboard.js"],"sourcesContent":["import React from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PatientDashboard.css';\n\nconst PatientDashboard = ({ patientId }) => {\n  const { data, loading, error } = usePatientData(patientId);\n  const { \n    allVisualizations, \n    availableVisualizations, \n    selectedVisualizations, \n    handleVisualizationChange \n  } = useVisualizations('patient', data);\n  \n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\n    patientId, \n    allVisualizations, \n    selectedVisualizations\n  );\n\n  // Override renderVisualization to set correct viewMode\n  const renderVisualizationWithMode = (visualizationType, boxId) => {\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <div>Invalid visualization</div>;\n\n    const Component = viz.component;\n    const isExpanded = expandedItem === boxId;\n    \n    // Create navigation functions for this specific chart\n    const createNavigationHandlers = (chartType) => {\n      // These will be passed to VisualizationWrapper and then to the chart component\n      return {\n        onPrev: () => {\n          // This will be handled by the chart component's internal navigation\n          console.log(`Navigate previous for ${chartType}`);\n        },\n        onNext: () => {\n          // This will be handled by the chart component's internal navigation\n          console.log(`Navigate next for ${chartType}`);\n        },\n        navigationLabel: chartType === 'mood' ? 'Month' : 'Week'\n      };\n    };\n\n    const navigationProps = createNavigationHandlers(visualizationType);\n    \n    return <Component \n      patientId={patientId} \n      isExpanded={isExpanded} \n      onExpand={() => handleExpand(boxId)}\n      viewMode=\"patient\"\n      {...navigationProps}\n    />;\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  if (loading) return <div className=\"loading-screen\">Loading patient data...</div>;\n  if (error) return <div className=\"error-screen\">Error: {error}</div>;\n\n  return (\n    <div className=\"patient-dashboard\">\n      <PatientInfoCard \n        patientInfo={patientInfo}\n        loading={loading}\n        error={error}\n        variant=\"patient\"\n      />\n\n      <DashboardGrid\n        viewMode=\"patient\"\n        selectedVisualizations={selectedVisualizations}\n        availableVisualizations={availableVisualizations}\n        allVisualizations={allVisualizations}\n        onVisualizationChange={handleVisualizationChange}\n        onExpand={handleExpand}\n        expandedItem={expandedItem}\n        renderVisualization={renderVisualizationWithMode}\n      />\n    </div>\n  );\n};\n\nexport default PatientDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}