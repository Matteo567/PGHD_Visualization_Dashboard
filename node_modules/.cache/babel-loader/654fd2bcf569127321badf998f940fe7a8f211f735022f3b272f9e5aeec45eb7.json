{"ast":null,"code":"import _objectSpread from\"C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/Health_data_dashboard-MCC_project_checkpoint/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n DashboardGrid.js - Chart Grid Layout Component\r\n \r\n This component provides a flexible grid layout system for organizing charts by rendering all \r\n available visualizations in a grid, handling expanded/collapsed chart states, integrating chart \r\n navigation controls, and providing placeholder states for empty data scenarios.\r\n \r\n Acts as the main container for organizing multiple health metric visualizations.\r\n */import React from'react';import VisualizationWrapper from'./VisualizationWrapper';import Placeholder from'./ui/Placeholder';import'./DashboardGrid.css';/*\r\n Shared component for rendering dashboard grids with visualization wrappers\r\n Shows all available visualizations instead of using dropdown selectors\r\n \r\n @param {Object} props - Component props\r\n @param {string} props.viewMode - 'patient' or 'physician'\r\n @param {Object} props.selectedVisualizations - Currently selected visualizations\r\n @param {Object} props.availableVisualizations - Available visualizations\r\n @param {Object} props.allVisualizations - All visualization configurations\r\n @param {Function} props.onVisualizationChange - Handler for visualization changes\r\n @param {Function} props.onExpand - Handler for expand/collapse\r\n @param {string|null} props.expandedItem - Currently expanded item ID\r\n @param {Function} props.renderVisualization - Function to render visualizations\r\n @param {boolean} props.disabled - Whether the grid is disabled\r\n @param {string} props.placeholderText - Text to show when no data is available\r\n @param {boolean} props.showSummaries - Whether to show summaries (unused)\r\n @param {Object} props.summaryTexts - Summary texts (unused)\r\n @param {Function} props.onSummaryChange - Summary change handler (unused)\r\n @param {Object} props.chartNavigation - Navigation objects for each chart type\r\n @returns {JSX.Element} The dashboard grid component\r\n */import{jsx as _jsx}from\"react/jsx-runtime\";const DashboardGrid=_ref=>{let{viewMode,// 'patient' or 'physician'\nselectedVisualizations,availableVisualizations,allVisualizations,onVisualizationChange,onExpand,expandedItem,renderVisualization,disabled=false,placeholderText=\"No data available for this patient.\",// New props for physician summary functionality\nshowSummaries=false,summaryTexts={},onSummaryChange=null,// Navigation props\nchartNavigation={}}=_ref;// Configuration for different view modes\nconst gridConfig={patient:{className:'dashboard-grid',chartClassNames:['visualization-box']},physician:{className:'physician-charts-grid',chartClassNames:['physician-chart-container']}};const config=gridConfig[viewMode];// Get all available visualization types\nconst availableVizTypes=Object.keys(availableVisualizations);// If there's an expanded item, show only that\nif(expandedItem){const selectedViz=selectedVisualizations[expandedItem];const navigation=chartNavigation[selectedViz];const wrapperProps={id:expandedItem,className:\"\".concat(config.chartClassNames[0],\" expanded-view\"),selectedViz:selectedViz,availableVisualizations:availableVisualizations,allVisualizations:allVisualizations,onVisualizationChange:onVisualizationChange,onExpand:onExpand,isExpanded:true,renderVisualization:renderVisualization,disabled:disabled,placeholderText:placeholderText,onPrev:navigation===null||navigation===void 0?void 0:navigation.goToPrevious,onNext:navigation===null||navigation===void 0?void 0:navigation.goToNext,navigationLabel:(navigation===null||navigation===void 0?void 0:navigation.navigationLabel)||'Week'};return/*#__PURE__*/_jsx(VisualizationWrapper,_objectSpread({},wrapperProps));}// If no visualizations available, show placeholder\nif(availableVizTypes.length===0){return/*#__PURE__*/_jsx(\"div\",{className:config.className,children:/*#__PURE__*/_jsx(Placeholder,{message:placeholderText,type:\"no-data\"})});}// Render all available visualizations\nreturn/*#__PURE__*/_jsx(\"div\",{className:config.className,children:availableVizTypes.map((vizType,index)=>{const chartId=\"\".concat(viewMode,\"-chart-\").concat(index);const navigation=chartNavigation[vizType];const wrapperProps={key:chartId,id:chartId,className:\"\".concat(config.chartClassNames[0],\" \").concat(config.chartClassNames[0],\"-\").concat(index+1),selectedViz:vizType,availableVisualizations:availableVisualizations,allVisualizations:allVisualizations,onVisualizationChange:onVisualizationChange,onExpand:onExpand,isExpanded:expandedItem===chartId,renderVisualization:renderVisualization,disabled:disabled,placeholderText:placeholderText,onPrev:navigation===null||navigation===void 0?void 0:navigation.goToPrevious,onNext:navigation===null||navigation===void 0?void 0:navigation.goToNext,navigationLabel:(navigation===null||navigation===void 0?void 0:navigation.navigationLabel)||'Week'};return/*#__PURE__*/_jsx(VisualizationWrapper,_objectSpread({},wrapperProps));})});};export default DashboardGrid;","map":{"version":3,"names":["React","VisualizationWrapper","Placeholder","jsx","_jsx","DashboardGrid","_ref","viewMode","selectedVisualizations","availableVisualizations","allVisualizations","onVisualizationChange","onExpand","expandedItem","renderVisualization","disabled","placeholderText","showSummaries","summaryTexts","onSummaryChange","chartNavigation","gridConfig","patient","className","chartClassNames","physician","config","availableVizTypes","Object","keys","selectedViz","navigation","wrapperProps","id","concat","isExpanded","onPrev","goToPrevious","onNext","goToNext","navigationLabel","_objectSpread","length","children","message","type","map","vizType","index","chartId","key"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/Health_data_dashboard-MCC_project_checkpoint/src/components/DashboardGrid.js"],"sourcesContent":["/**\r\n DashboardGrid.js - Chart Grid Layout Component\r\n \r\n This component provides a flexible grid layout system for organizing charts by rendering all \r\n available visualizations in a grid, handling expanded/collapsed chart states, integrating chart \r\n navigation controls, and providing placeholder states for empty data scenarios.\r\n \r\n Acts as the main container for organizing multiple health metric visualizations.\r\n */\r\n\r\nimport React from 'react';\r\nimport VisualizationWrapper from './VisualizationWrapper';\r\nimport Placeholder from './ui/Placeholder';\r\nimport './DashboardGrid.css';\r\n\r\n/*\r\n Shared component for rendering dashboard grids with visualization wrappers\r\n Shows all available visualizations instead of using dropdown selectors\r\n \r\n @param {Object} props - Component props\r\n @param {string} props.viewMode - 'patient' or 'physician'\r\n @param {Object} props.selectedVisualizations - Currently selected visualizations\r\n @param {Object} props.availableVisualizations - Available visualizations\r\n @param {Object} props.allVisualizations - All visualization configurations\r\n @param {Function} props.onVisualizationChange - Handler for visualization changes\r\n @param {Function} props.onExpand - Handler for expand/collapse\r\n @param {string|null} props.expandedItem - Currently expanded item ID\r\n @param {Function} props.renderVisualization - Function to render visualizations\r\n @param {boolean} props.disabled - Whether the grid is disabled\r\n @param {string} props.placeholderText - Text to show when no data is available\r\n @param {boolean} props.showSummaries - Whether to show summaries (unused)\r\n @param {Object} props.summaryTexts - Summary texts (unused)\r\n @param {Function} props.onSummaryChange - Summary change handler (unused)\r\n @param {Object} props.chartNavigation - Navigation objects for each chart type\r\n @returns {JSX.Element} The dashboard grid component\r\n */\r\nconst DashboardGrid = ({\r\n  viewMode, // 'patient' or 'physician'\r\n  selectedVisualizations,\r\n  availableVisualizations,\r\n  allVisualizations,\r\n  onVisualizationChange,\r\n  onExpand,\r\n  expandedItem,\r\n  renderVisualization,\r\n  disabled = false,\r\n  placeholderText = \"No data available for this patient.\",\r\n  // New props for physician summary functionality\r\n  showSummaries = false,\r\n  summaryTexts = {},\r\n  onSummaryChange = null,\r\n  // Navigation props\r\n  chartNavigation = {}\r\n}) => {\r\n  // Configuration for different view modes\r\n  const gridConfig = {\r\n    patient: {\r\n      className: 'dashboard-grid',\r\n      chartClassNames: ['visualization-box']\r\n    },\r\n    physician: {\r\n      className: 'physician-charts-grid',\r\n      chartClassNames: ['physician-chart-container']\r\n    }\r\n  };\r\n\r\n  const config = gridConfig[viewMode];\r\n\r\n  // Get all available visualization types\r\n  const availableVizTypes = Object.keys(availableVisualizations);\r\n\r\n  // If there's an expanded item, show only that\r\n  if (expandedItem) {\r\n    const selectedViz = selectedVisualizations[expandedItem];\r\n    const navigation = chartNavigation[selectedViz];\r\n    \r\n    const wrapperProps = {\r\n      id: expandedItem,\r\n      className: `${config.chartClassNames[0]} expanded-view`,\r\n      selectedViz: selectedViz,\r\n      availableVisualizations: availableVisualizations,\r\n      allVisualizations: allVisualizations,\r\n      onVisualizationChange: onVisualizationChange,\r\n      onExpand: onExpand,\r\n      isExpanded: true,\r\n      renderVisualization: renderVisualization,\r\n      disabled: disabled,\r\n      placeholderText: placeholderText,\r\n      onPrev: navigation?.goToPrevious,\r\n      onNext: navigation?.goToNext,\r\n      navigationLabel: navigation?.navigationLabel || 'Week'\r\n    };\r\n\r\n    return <VisualizationWrapper {...wrapperProps} />;\r\n  }\r\n\r\n  // If no visualizations available, show placeholder\r\n  if (availableVizTypes.length === 0) {\r\n    return (\r\n      <div className={config.className}>\r\n        <Placeholder message={placeholderText} type=\"no-data\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render all available visualizations\r\n  return (\r\n    <div className={config.className}>\r\n      {availableVizTypes.map((vizType, index) => {\r\n        const chartId = `${viewMode}-chart-${index}`;\r\n        \r\n        const navigation = chartNavigation[vizType];\r\n        const wrapperProps = {\r\n          key: chartId,\r\n          id: chartId,\r\n          className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\r\n          selectedViz: vizType,\r\n          availableVisualizations: availableVisualizations,\r\n          allVisualizations: allVisualizations,\r\n          onVisualizationChange: onVisualizationChange,\r\n          onExpand: onExpand,\r\n          isExpanded: expandedItem === chartId,\r\n          renderVisualization: renderVisualization,\r\n          disabled: disabled,\r\n          placeholderText: placeholderText,\r\n          onPrev: navigation?.goToPrevious,\r\n          onNext: navigation?.goToNext,\r\n          navigationLabel: navigation?.navigationLabel || 'Week'\r\n        };\r\n\r\n        return <VisualizationWrapper {...wrapperProps} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}