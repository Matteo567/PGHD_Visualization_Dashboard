{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * useChartNavigation.js - Universal Chart Navigation Hook\n * \n * This hook provides consistent navigation functionality for all charts:\n * - Week/month navigation based on chart type\n * - Date range calculations and formatting\n * - Navigation state management\n * - Previous/next navigation functions\n * - Display formatting for current time periods\n * \n * Ensures consistent navigation behavior across all health metric visualizations.\n */\n\nimport { useState, useCallback } from 'react';\n\n/**\n * Universal navigation hook for chart components\n * Provides navigation state and functions that can be used by any chart\n */\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  // Determine navigation type based on chart type\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\n\n  // Navigation functions\n  const goToPrevious = useCallback(() => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (navigationType === 'month') {\n        newDate.setMonth(newDate.getMonth() - 1);\n      } else {\n        newDate.setDate(newDate.getDate() - 7);\n      }\n      return newDate;\n    });\n  }, [navigationType]);\n  const goToNext = useCallback(() => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (navigationType === 'month') {\n        newDate.setMonth(newDate.getMonth() + 1);\n      } else {\n        newDate.setDate(newDate.getDate() + 7);\n      }\n      return newDate;\n    });\n  }, [navigationType]);\n\n  // Calculate date range based on navigation type\n  const getDateRange = useCallback(() => {\n    if (navigationType === 'month') {\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n      return {\n        start: startOfMonth,\n        end: endOfMonth\n      };\n    } else {\n      const startOfWeek = new Date(currentDate);\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      const endOfWeek = new Date(startOfWeek);\n      endOfWeek.setDate(endOfWeek.getDate() + 6);\n      endOfWeek.setHours(23, 59, 59, 999);\n      return {\n        start: startOfWeek,\n        end: endOfWeek\n      };\n    }\n  }, [currentDate, navigationType]);\n\n  // Get current month/year display\n  const getCurrentMonthYear = useCallback(() => {\n    return currentDate.toLocaleDateString('en-US', {\n      month: 'long',\n      year: 'numeric'\n    });\n  }, [currentDate]);\n\n  // Get current week display\n  const getCurrentWeekDisplay = useCallback(() => {\n    const {\n      start,\n      end\n    } = getDateRange();\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} - ${endStr}`;\n  }, [getDateRange]);\n\n  // Calculate 3-month date range dynamically based on current date\n  const getThreeMonthRange = useCallback(() => {\n    // Calculate 3 months back from the current date\n    const endOfThreeMonths = new Date(currentDate);\n    const startOfThreeMonths = new Date(currentDate);\n    startOfThreeMonths.setMonth(startOfThreeMonths.getMonth() - 3);\n\n    // Ensure we don't go before the data start date (July 1, 2024)\n    const dataStartDate = new Date(2024, 6, 1); // July 1, 2024\n    if (startOfThreeMonths < dataStartDate) {\n      startOfThreeMonths.setTime(dataStartDate.getTime());\n    }\n\n    // Ensure we don't go beyond the data end date (July 31, 2025)\n    const dataEndDate = new Date(2025, 6, 31); // July 31, 2025\n    if (endOfThreeMonths > dataEndDate) {\n      endOfThreeMonths.setTime(dataEndDate.getTime());\n    }\n    return {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    };\n  }, [currentDate]);\n\n  // Get 3-month display string dynamically\n  const getThreeMonthDisplay = useCallback(() => {\n    const {\n      start,\n      end\n    } = getThreeMonthRange();\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      year: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      year: 'numeric'\n    });\n    return `${startStr} - ${endStr}`;\n  }, [getThreeMonthRange]);\n  return {\n    currentDate,\n    navigationType,\n    navigationLabel,\n    goToPrevious,\n    goToNext,\n    getDateRange,\n    getThreeMonthRange,\n    getCurrentMonthYear,\n    getCurrentWeekDisplay,\n    getThreeMonthDisplay\n  };\n};\n_s(useChartNavigation, \"GXvrA22ca+c7G8YCT9WI4mSRBqo=\");\nexport default useChartNavigation;","map":{"version":3,"names":["useState","useCallback","useChartNavigation","chartType","initialDate","Date","_s","currentDate","setCurrentDate","navigationType","navigationLabel","goToPrevious","prev","newDate","setMonth","getMonth","setDate","getDate","goToNext","getDateRange","startOfMonth","getFullYear","endOfMonth","start","end","startOfWeek","getDay","setHours","endOfWeek","getCurrentMonthYear","toLocaleDateString","month","year","getCurrentWeekDisplay","startStr","day","endStr","getThreeMonthRange","endOfThreeMonths","startOfThreeMonths","dataStartDate","setTime","getTime","dataEndDate","getThreeMonthDisplay"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/useChartNavigation.js"],"sourcesContent":["/**\n * useChartNavigation.js - Universal Chart Navigation Hook\n * \n * This hook provides consistent navigation functionality for all charts:\n * - Week/month navigation based on chart type\n * - Date range calculations and formatting\n * - Navigation state management\n * - Previous/next navigation functions\n * - Display formatting for current time periods\n * \n * Ensures consistent navigation behavior across all health metric visualizations.\n */\n\nimport { useState, useCallback } from 'react';\n\n/**\n * Universal navigation hook for chart components\n * Provides navigation state and functions that can be used by any chart\n */\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  // Determine navigation type based on chart type\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\n\n  // Navigation functions\n  const goToPrevious = useCallback(() => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (navigationType === 'month') {\n        newDate.setMonth(newDate.getMonth() - 1);\n      } else {\n        newDate.setDate(newDate.getDate() - 7);\n      }\n      return newDate;\n    });\n  }, [navigationType]);\n\n  const goToNext = useCallback(() => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (navigationType === 'month') {\n        newDate.setMonth(newDate.getMonth() + 1);\n      } else {\n        newDate.setDate(newDate.getDate() + 7);\n      }\n      return newDate;\n    });\n  }, [navigationType]);\n\n  // Calculate date range based on navigation type\n  const getDateRange = useCallback(() => {\n    if (navigationType === 'month') {\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n      return { start: startOfMonth, end: endOfMonth };\n    } else {\n      const startOfWeek = new Date(currentDate);\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      \n      const endOfWeek = new Date(startOfWeek);\n      endOfWeek.setDate(endOfWeek.getDate() + 6);\n      endOfWeek.setHours(23, 59, 59, 999);\n      \n      return { start: startOfWeek, end: endOfWeek };\n    }\n  }, [currentDate, navigationType]);\n\n  // Get current month/year display\n  const getCurrentMonthYear = useCallback(() => {\n    return currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n  }, [currentDate]);\n\n  // Get current week display\n  const getCurrentWeekDisplay = useCallback(() => {\n    const { start, end } = getDateRange();\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${startStr} - ${endStr}`;\n  }, [getDateRange]);\n\n  // Calculate 3-month date range dynamically based on current date\n  const getThreeMonthRange = useCallback(() => {\n    // Calculate 3 months back from the current date\n    const endOfThreeMonths = new Date(currentDate);\n    const startOfThreeMonths = new Date(currentDate);\n    startOfThreeMonths.setMonth(startOfThreeMonths.getMonth() - 3);\n    \n    // Ensure we don't go before the data start date (July 1, 2024)\n    const dataStartDate = new Date(2024, 6, 1); // July 1, 2024\n    if (startOfThreeMonths < dataStartDate) {\n      startOfThreeMonths.setTime(dataStartDate.getTime());\n    }\n    \n    // Ensure we don't go beyond the data end date (July 31, 2025)\n    const dataEndDate = new Date(2025, 6, 31); // July 31, 2025\n    if (endOfThreeMonths > dataEndDate) {\n      endOfThreeMonths.setTime(dataEndDate.getTime());\n    }\n    \n    return { start: startOfThreeMonths, end: endOfThreeMonths };\n  }, [currentDate]);\n\n  // Get 3-month display string dynamically\n  const getThreeMonthDisplay = useCallback(() => {\n    const { start, end } = getThreeMonthRange();\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    return `${startStr} - ${endStr}`;\n  }, [getThreeMonthRange]);\n\n  return {\n    currentDate,\n    navigationType,\n    navigationLabel,\n    goToPrevious,\n    goToNext,\n    getDateRange,\n    getThreeMonthRange,\n    getCurrentMonthYear,\n    getCurrentWeekDisplay,\n    getThreeMonthDisplay\n  };\n};\n\nexport default useChartNavigation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}