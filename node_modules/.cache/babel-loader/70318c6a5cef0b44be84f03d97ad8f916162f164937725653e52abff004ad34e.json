{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExerciseChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport ChartContainer from '../ChartContainer';\nimport Legend from '../Legend';\nimport '../ChartStyles.css';\nimport './ExerciseChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseTypes = [{\n  key: 'walking',\n  label: 'Walking',\n  color: '#3498db',\n  emoji: '🚶'\n}, {\n  key: 'swimming',\n  label: 'Swimming',\n  color: '#00bcd4',\n  emoji: '🏊‍♀️'\n}, {\n  key: 'running',\n  label: 'Running',\n  color: '#e74c3c',\n  emoji: '🏃‍♂️'\n}, {\n  key: 'resistance/weights',\n  label: 'Resistance/Weights',\n  color: '#9b59b6',\n  emoji: '🏋️'\n}, {\n  key: 'biking',\n  label: 'Biking',\n  color: '#ff9800',\n  emoji: '🚴'\n}, {\n  key: 'balance/stretching',\n  label: 'Balance/Stretching',\n  color: '#f39c12',\n  emoji: '🧘'\n}, {\n  key: 'other',\n  label: 'Other',\n  color: '#95a5a6',\n  emoji: '➕'\n}];\nconst exerciseLegendItems = exerciseTypes.map(({\n  label,\n  color,\n  emoji\n}) => ({\n  label: `${emoji} ${label}`,\n  color\n}));\nconst getChartConfig = isExpanded => ({\n  width: isExpanded ? 700 : 320,\n  height: isExpanded ? 245 : 140,\n  padding: {\n    top: 30,\n    right: 10,\n    bottom: 60,\n    left: 40\n  },\n  dayWidth: isExpanded ? 90 : 38,\n  barWidth: isExpanded ? 25 : 20,\n  fontSize: {\n    yAxis: isExpanded ? 10 : 8,\n    yAxisTitle: isExpanded ? 11 : 10,\n    dayLabel: isExpanded ? 10 : 8,\n    dateLabel: isExpanded ? 9 : 7,\n    emoji: isExpanded ? 12 : 10\n  }\n});\nconst ExerciseChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand\n}) => {\n  _s();\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId, 'exercise');\n  const [currentWeek, setCurrentWeek] = useState(new Date(2025, 4, 1));\n  const handlePrevWeek = () => {\n    setCurrentWeek(prev => new Date(new Date(prev).setDate(prev.getDate() - 7)));\n  };\n  const handleNextWeek = () => {\n    setCurrentWeek(prev => new Date(new Date(prev).setDate(prev.getDate() + 7)));\n  };\n  const config = getChartConfig(isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n  const startOfWeek = new Date(currentWeek);\n  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n  startOfWeek.setHours(0, 0, 0, 0);\n  const endOfWeek = new Date(startOfWeek);\n  endOfWeek.setDate(endOfWeek.getDate() + 6);\n  endOfWeek.setHours(23, 59, 59, 999);\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = {\n      walking: 0,\n      swimming: 0,\n      running: 0,\n      'resistance/weights': 0,\n      biking: 0,\n      'balance/stretching': 0,\n      other: 0,\n      totalMinutes: 0\n    };\n    return acc;\n  }, {});\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].aerobic += Number(item.aerobic) || 0;\n      groupedData[dayName].strength += Number(item.strength) || 0;\n      groupedData[dayName].balance += Number(item.balance) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].aerobic + groupedData[dayName].strength + groupedData[dayName].balance + groupedData[dayName].other;\n    }\n  });\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n  const generateYAxisLabels = max => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    title: \"Exercise\",\n    icon: \"\\uD83C\\uDFC3\",\n    isLoading: loading,\n    error: error,\n    noData: !loading && !error && (!exerciseData || exerciseData.length === 0),\n    isExpanded: isExpanded,\n    onExpand: onExpand,\n    onPrev: handlePrevWeek,\n    onNext: handleNextWeek,\n    navigationLabel: formatDateRange(startOfWeek, endOfWeek),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(Legend, {\n        title: \"Exercise Type\",\n        items: exerciseLegendItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `exercise-chart-content ${isExpanded ? 'expanded' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          viewBox: `0 0 ${config.width} ${config.height}`,\n          className: \"exercise-svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"y-axis\",\n            children: [yAxisLabels.map(value => {\n              const y = config.padding.top + chartHeight - value / maxDuration * chartHeight;\n              return /*#__PURE__*/_jsxDEV(\"g\", {\n                className: \"y-axis-grid-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  className: \"chart-grid-line-horizontal\",\n                  x1: config.padding.left,\n                  y1: y,\n                  x2: config.width - config.padding.right,\n                  y2: y\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: config.padding.left - 5,\n                  y: y + 3,\n                  fontSize: config.fontSize.yAxis,\n                  textAnchor: \"end\",\n                  fill: \"#666\",\n                  children: value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 21\n                }, this)]\n              }, value, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 19\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: -(config.padding.top + chartHeight / 2),\n              y: config.padding.left / 2 - 5,\n              fontSize: config.fontSize.yAxisTitle,\n              textAnchor: \"middle\",\n              fill: \"#333\",\n              transform: \"rotate(-90)\",\n              children: \"Minutes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"x-axis\",\n            children: daysOfWeek.map((day, dayIndex) => {\n              const date = new Date(startOfWeek);\n              date.setDate(date.getDate() + dayIndex);\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n              const dayData = groupedData[day];\n              const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n              const emojis = performedExercises.map(type => type.emoji).join(' ');\n              return /*#__PURE__*/_jsxDEV(\"g\", {\n                className: \"x-axis-label-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  className: \"chart-grid-line-vertical\",\n                  x1: config.padding.left + dayIndex * config.dayWidth,\n                  y1: config.padding.top,\n                  x2: config.padding.left + dayIndex * config.dayWidth,\n                  y2: config.height - config.padding.bottom\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: x,\n                  y: config.height - config.padding.bottom + 15,\n                  textAnchor: \"middle\",\n                  fontSize: config.fontSize.dayLabel,\n                  fill: \"#666\",\n                  children: day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: x,\n                  y: config.height - config.padding.bottom + 30,\n                  textAnchor: \"middle\",\n                  fontSize: config.fontSize.dateLabel,\n                  fill: \"#888\",\n                  children: date.getDate()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: x,\n                  y: config.height - config.padding.bottom + 48,\n                  textAnchor: \"middle\",\n                  fontSize: config.fontSize.emoji,\n                  children: emojis\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 21\n                }, this)]\n              }, dayIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"data-bars\",\n            children: daysOfWeek.map((day, dayIndex) => {\n              const dayData = groupedData[day];\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n              let currentY = config.height - config.padding.bottom;\n              return /*#__PURE__*/_jsxDEV(\"g\", {\n                children: exerciseTypes.map(type => {\n                  const minutes = Number(dayData[type.key]) || 0;\n                  if (minutes <= 0) return null;\n                  const segmentHeight = minutes / maxDuration * chartHeight;\n                  const segmentY = currentY - segmentHeight;\n                  const segment = /*#__PURE__*/_jsxDEV(\"rect\", {\n                    x: x - config.barWidth / 2,\n                    y: segmentY,\n                    width: config.barWidth,\n                    height: segmentHeight,\n                    fill: type.color,\n                    stroke: \"#fff\",\n                    strokeWidth: \"1\",\n                    children: /*#__PURE__*/_jsxDEV(\"title\", {\n                      children: `${type.label}: ${Math.round(minutes)} min`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 188,\n                      columnNumber: 27\n                    }, this)\n                  }, type.key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 25\n                  }, this);\n                  currentY = segmentY;\n                  return segment;\n                })\n              }, day, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(ExerciseChart, \"8A1Y0ZNDM2z1Va2wcEzIBjTTCvk=\", false, function () {\n  return [usePatientData];\n});\n_c = ExerciseChart;\nexport default ExerciseChart;\nvar _c;\n$RefreshReg$(_c, \"ExerciseChart\");","map":{"version":3,"names":["React","useState","usePatientData","ChartContainer","Legend","jsxDEV","_jsxDEV","exerciseTypes","key","label","color","emoji","exerciseLegendItems","map","getChartConfig","isExpanded","width","height","padding","top","right","bottom","left","dayWidth","barWidth","fontSize","yAxis","yAxisTitle","dayLabel","dateLabel","ExerciseChart","patientId","onExpand","_s","exerciseData","loading","error","currentWeek","setCurrentWeek","Date","handlePrevWeek","prev","setDate","getDate","handleNextWeek","config","chartHeight","startOfWeek","getDay","setHours","endOfWeek","weekData","filter","d","date","itemDate","daysOfWeek","groupedData","reduce","acc","day","walking","swimming","running","biking","other","totalMinutes","forEach","item","dayName","Number","aerobic","strength","balance","maxVal","Math","max","Object","values","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","formatDateRange","start","end","startStr","toLocaleDateString","month","endStr","title","icon","isLoading","noData","length","onPrev","onNext","navigationLabel","children","className","items","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","value","y","x1","y1","x2","y2","x","textAnchor","fill","transform","dayIndex","dayData","performedExercises","type","emojis","join","currentY","minutes","segmentHeight","segmentY","segment","stroke","strokeWidth","round","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["import React, { useState } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport ChartContainer from '../ChartContainer';\nimport Legend from '../Legend';\nimport '../ChartStyles.css';\nimport './ExerciseChart.css';\n\nconst exerciseTypes = [\n  { key: 'walking', label: 'Walking', color: '#3498db', emoji: '🚶' },\n  { key: 'swimming', label: 'Swimming', color: '#00bcd4', emoji: '🏊‍♀️' },\n  { key: 'running', label: 'Running', color: '#e74c3c', emoji: '🏃‍♂️' },\n  { key: 'resistance/weights', label: 'Resistance/Weights', color: '#9b59b6', emoji: '🏋️' },\n  { key: 'biking', label: 'Biking', color: '#ff9800', emoji: '🚴' },\n  { key: 'balance/stretching', label: 'Balance/Stretching', color: '#f39c12', emoji: '🧘' },\n  { key: 'other', label: 'Other', color: '#95a5a6', emoji: '➕' },\n];\n\nconst exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\n  label: `${emoji} ${label}`,\n  color,\n}));\n\nconst getChartConfig = (isExpanded) => ({\n  width: isExpanded ? 700 : 320,\n  height: isExpanded ? 245 : 140,\n  padding: { top: 30, right: 10, bottom: 60, left: 40 },\n  dayWidth: isExpanded ? 90 : 38,\n  barWidth: isExpanded ? 25 : 20,\n  fontSize: {\n    yAxis: isExpanded ? 10 : 8,\n    yAxisTitle: isExpanded ? 11 : 10,\n    dayLabel: isExpanded ? 10 : 8,\n    dateLabel: isExpanded ? 9 : 7,\n    emoji: isExpanded ? 12 : 10,\n  },\n});\n\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand }) => {\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\n  const [currentWeek, setCurrentWeek] = useState(new Date(2025, 4, 1));\n\n  const handlePrevWeek = () => {\n    setCurrentWeek(prev => new Date(new Date(prev).setDate(prev.getDate() - 7)));\n  };\n\n  const handleNextWeek = () => {\n    setCurrentWeek(prev => new Date(new Date(prev).setDate(prev.getDate() + 7)));\n  };\n\n  const config = getChartConfig(isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n\n  const startOfWeek = new Date(currentWeek);\n  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n  startOfWeek.setHours(0, 0, 0, 0);\n\n  const endOfWeek = new Date(startOfWeek);\n  endOfWeek.setDate(endOfWeek.getDate() + 6);\n  endOfWeek.setHours(23, 59, 59, 999);\n\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\n    return acc;\n  }, {});\n\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].aerobic += Number(item.aerobic) || 0;\n      groupedData[dayName].strength += Number(item.strength) || 0;\n      groupedData[dayName].balance += Number(item.balance) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].aerobic + groupedData[dayName].strength + groupedData[dayName].balance + groupedData[dayName].other;\n    }\n  });\n\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n\n  const generateYAxisLabels = (max) => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${startStr} to ${endStr}`;\n  };\n\n  return (\n    <ChartContainer\n      title=\"Exercise\"\n      icon=\"🏃\"\n      isLoading={loading}\n      error={error}\n      noData={!loading && !error && (!exerciseData || exerciseData.length === 0)}\n      isExpanded={isExpanded}\n      onExpand={onExpand}\n      onPrev={handlePrevWeek}\n      onNext={handleNextWeek}\n      navigationLabel={formatDateRange(startOfWeek, endOfWeek)}\n    >\n      <div className=\"exercise-chart-container\">\n        <Legend title=\"Exercise Type\" items={exerciseLegendItems} />\n        <div className={`exercise-chart-content ${isExpanded ? 'expanded' : ''}`}>\n          <svg \n            width=\"100%\" \n            viewBox={`0 0 ${config.width} ${config.height}`}\n            className=\"exercise-svg\"\n          >\n            <g className=\"y-axis\">\n              {yAxisLabels.map(value => {\n                const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\n                return (\n                  <g key={value} className=\"y-axis-grid-group\">\n                    <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\n                    <text x={config.padding.left - 5} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"#666\">{value}</text>\n                  </g>\n                );\n              })}\n              <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"#333\" transform=\"rotate(-90)\">Minutes</text>\n            </g>\n\n            <g className=\"x-axis\">\n              {daysOfWeek.map((day, dayIndex) => {\n                const date = new Date(startOfWeek);\n                date.setDate(date.getDate() + dayIndex);\n                const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n\n                const dayData = groupedData[day];\n                const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n                const emojis = performedExercises.map(type => type.emoji).join(' ');\n\n                return (\n                  <g key={dayIndex} className=\"x-axis-label-group\">\n                    <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\n                    <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"#666\">{day}</text>\n                    <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"#888\">{date.getDate()}</text>\n                    <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\n                  </g>\n                );\n              })}\n            </g>\n\n            <g className=\"data-bars\">\n              {daysOfWeek.map((day, dayIndex) => {\n                const dayData = groupedData[day];\n                const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n                let currentY = config.height - config.padding.bottom;\n\n                return (\n                  <g key={day}>\n                    {exerciseTypes.map(type => {\n                      const minutes = Number(dayData[type.key]) || 0;\n                      if (minutes <= 0) return null;\n\n                      const segmentHeight = (minutes / maxDuration) * chartHeight;\n                      const segmentY = currentY - segmentHeight;\n\n                      const segment = (\n                        <rect\n                          key={type.key}\n                          x={x - config.barWidth / 2}\n                          y={segmentY}\n                          width={config.barWidth}\n                          height={segmentHeight}\n                          fill={type.color}\n                          stroke=\"#fff\"\n                          strokeWidth=\"1\"\n                        >\n                          <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\n                        </rect>\n                      );\n\n                      currentY = segmentY;\n                      return segment;\n                    })}\n                  </g>\n                );\n              })}\n            </g>\n          </svg>\n        </div>\n      </div>\n    </ChartContainer>\n  );\n};\n\nexport default ExerciseChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}