{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\PainChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport '../ChartStyles.css';\nimport BodySVG from './BodySvg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PainChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient',\n  navigation\n}) => {\n  _s();\n  const {\n    painData,\n    isLoading: loading,\n    error\n  } = usePatientData(patientId, 'pain');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('pain');\n  const nav = navigation || internalNavigation;\n  const getPainColor = level => {\n    if (level === 0) return '#F8F8F8'; // Light grey for no pain\n    if (level <= 2) return '#FFE6E6'; // Very light red for mild pain\n    if (level <= 4) return '#FFB3B3'; // Light red for moderate pain\n    if (level <= 6) return '#FF8080'; // Medium red for moderate-severe pain\n    if (level <= 8) return '#FF4D4D'; // Bright red for severe pain\n    return '#FF0000'; // Pure red for extreme pain\n  };\n  const painLegendItems = Array.from({\n    length: 11\n  }, (_, i) => i).map(level => ({\n    color: getPainColor(level),\n    label: `${level}`\n  }));\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\n\n  // Process data for chart\n  const {\n    chartData,\n    mostCommonLocation,\n    averagePainLevel\n  } = useMemo(() => {\n    if (!weekPainData.length) return {\n      chartData: [],\n      mostCommonLocation: null,\n      averagePainLevel: 0\n    };\n\n    // Create a map of dates to pain levels\n    const dateMap = new Map();\n    const locationCounts = new Map();\n    weekPainData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap.set(dateKey, item.level);\n\n      // Count locations\n      const location = item.location.toLowerCase();\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\n    });\n\n    // Find most common location\n    let mostCommon = null;\n    let maxCount = 0;\n    for (const [location, count] of locationCounts) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommon = location;\n      }\n    }\n\n    // Generate chart data for all 7 days of the week\n    const data = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(date.getDate() + i);\n      const dateKey = date.toDateString();\n      const painLevel = dateMap.get(dateKey) || 0;\n      data.push({\n        date,\n        day: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][date.getDay()],\n        level: painLevel,\n        color: getPainColor(painLevel)\n      });\n    }\n    const totalPain = weekPainData.reduce((sum, item) => sum + item.level, 0);\n    const avgPain = weekPainData.length > 0 ? totalPain / weekPainData.length : 0;\n    return {\n      chartData: data,\n      mostCommonLocation: mostCommon,\n      averagePainLevel: avgPain\n    };\n  }, [weekPainData, startOfWeek]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n\n  // Line Chart Component for Pain Ratings\n  const PainLineChart = ({\n    data,\n    isExpanded,\n    chartConfig\n  }) => {\n    const config = chartConfig || {\n      width: isExpanded ? 480 : 400,\n      height: isExpanded ? 200 : 150,\n      padding: {\n        top: 20,\n        right: 20,\n        bottom: 40,\n        left: 40\n      }\n    };\n    const chartWidth = config.width - config.padding.left - config.padding.right;\n    const chartHeight = config.height - config.padding.top - config.padding.bottom;\n    const dayWidth = chartWidth / 6; // 7 days, 6 intervals\n\n    const getY = value => config.padding.top + chartHeight - value / 10 * chartHeight;\n    const getX = index => config.padding.left + index * dayWidth;\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      height: \"100%\",\n      viewBox: `0 0 ${config.width} ${config.height}`,\n      children: [[0, 2, 4, 6, 8, 10].map(value => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: config.padding.left,\n        y1: getY(value),\n        x2: config.width - config.padding.right,\n        y2: getY(value),\n        stroke: \"#e0e0e0\",\n        strokeWidth: \"1\",\n        className: \"chart-grid-line-horizontal\"\n      }, value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)), [0, 2, 4, 6, 8, 10].map(value => /*#__PURE__*/_jsxDEV(\"text\", {\n        x: config.padding.left - 10,\n        y: getY(value) + 4,\n        textAnchor: \"end\",\n        fontSize: isExpanded ? 14 : 12,\n        fill: \"var(--chart-color-text-secondary)\",\n        className: \"chart-tick-label\",\n        children: value\n      }, value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"polyline\", {\n        points: data.map((item, index) => `${getX(index)},${getY(item.level)}`).join(' '),\n        fill: \"none\",\n        stroke: \"var(--chart-color-pain-line)\",\n        strokeWidth: \"3\",\n        className: \"pain-line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), data.map((item, index) => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: getX(index),\n        cy: getY(item.level),\n        r: isExpanded ? 6 : 4,\n        fill: item.color,\n        stroke: \"white\",\n        strokeWidth: \"2\",\n        className: \"pain-data-point\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  };\n  const Body = ({\n    location,\n    level\n  }) => {\n    const color = getPainColor(level);\n    const locationLower = location.toLowerCase();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body-views\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"body-view-label\",\n            children: \"Front\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BodySVG, {\n            className: \"body-svg\",\n            painLocation: locationLower,\n            painColor: color,\n            view: \"front\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"body-view-label\",\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BodySVG, {\n            className: \"body-svg\",\n            painLocation: locationLower,\n            painColor: color,\n            view: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this);\n  };\n  if (viewMode === 'patient') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pain-chart-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"chart-title\",\n          children: \"Pain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pain-list\",\n          children: weekPainData.length > 0 ? weekPainData.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pain-list-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pain-item-date\",\n              children: new Date(item.date).toLocaleDateString('en-US', {\n                weekday: 'short',\n                month: 'short',\n                day: 'numeric'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pain-item-body\",\n              children: /*#__PURE__*/_jsxDEV(Body, {\n                location: item.location,\n                level: item.level\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pain-item-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pain-level\",\n                children: [\"Pain intensity: \", item.level, \"/10\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pain-location\",\n                children: [\"Location: \", item.location]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-pain-data\",\n            children: \"No pain data available for this week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pain-legend-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Legend, {\n          title: \"Pain Intensity Scale (0-10)\",\n          items: painLegendItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this);\n  }\n\n  // Physician view\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"physician-pain-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-line-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chart-title\",\n        children: \"Pain Assessment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Pain Rating Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PainLineChart, {\n        data: chartData,\n        isExpanded: isExpanded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-location-info\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Pain Location: \", mostCommonLocation || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-legend-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Legend, {\n        title: \"Pain Intensity Scale (0-10)\",\n        items: painLegendItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Week Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Average Pain Intensity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [averagePainLevel.toFixed(1), \"/10\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Most Common Location:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: mostCommonLocation || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Days with Pain:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [weekPainData.length, \"/7\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 7\n  }, this);\n};\n_s(PainChart, \"4puKMbaDWVzQRVWBLDzYSJ70RfY=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = PainChart;\nexport default PainChart;\nvar _c;\n$RefreshReg$(_c, \"PainChart\");","map":{"version":3,"names":["React","useState","useMemo","usePatientData","useChartNavigation","Legend","BodySVG","jsxDEV","_jsxDEV","PainChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","painData","isLoading","loading","error","useInternalNavigation","internalNavigation","nav","getPainColor","level","painLegendItems","Array","from","length","_","i","map","color","label","start","startOfWeek","end","endOfWeek","getDateRange","weekPainData","filter","d","date","chartData","mostCommonLocation","averagePainLevel","dateMap","Map","locationCounts","forEach","item","dateKey","toDateString","set","location","toLowerCase","get","mostCommon","maxCount","count","data","Date","setDate","getDate","painLevel","push","day","getDay","totalPain","reduce","sum","avgPain","formatDateRange","startStr","toLocaleDateString","month","endStr","PainLineChart","chartConfig","config","width","height","padding","top","right","bottom","left","chartWidth","chartHeight","dayWidth","getY","value","getX","index","viewBox","children","x1","y1","x2","y2","stroke","strokeWidth","className","fileName","_jsxFileName","lineNumber","columnNumber","x","y","textAnchor","fontSize","fill","points","join","cx","cy","r","Body","locationLower","painLocation","painColor","view","weekday","title","items","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/PainChart.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\n\nimport Legend from '../Legend';\nimport '../ChartStyles.css';\nimport BodySVG from './BodySvg';\n\nconst PainChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\n  const { painData, isLoading: loading, error } = usePatientData(patientId, 'pain');\n  \n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('pain');\n  const nav = navigation || internalNavigation;\n\n  const getPainColor = (level) => {\n    if (level === 0) return '#F8F8F8'; // Light grey for no pain\n    if (level <= 2) return '#FFE6E6'; // Very light red for mild pain\n    if (level <= 4) return '#FFB3B3'; // Light red for moderate pain\n    if (level <= 6) return '#FF8080'; // Medium red for moderate-severe pain\n    if (level <= 8) return '#FF4D4D'; // Bright red for severe pain\n    return '#FF0000'; // Pure red for extreme pain\n  };\n\n\n\n  const painLegendItems = Array.from({ length: 11 }, (_, i) => i).map(level => ({\n    color: getPainColor(level),\n    label: `${level}`,\n  }));\n\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\n\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\n\n  // Process data for chart\n  const { chartData, mostCommonLocation, averagePainLevel } = useMemo(() => {\n    if (!weekPainData.length) return { chartData: [], mostCommonLocation: null, averagePainLevel: 0 };\n\n    // Create a map of dates to pain levels\n    const dateMap = new Map();\n    const locationCounts = new Map();\n\n    weekPainData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap.set(dateKey, item.level);\n      \n      // Count locations\n      const location = item.location.toLowerCase();\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\n    });\n\n    // Find most common location\n    let mostCommon = null;\n    let maxCount = 0;\n    for (const [location, count] of locationCounts) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommon = location;\n      }\n    }\n\n    // Generate chart data for all 7 days of the week\n    const data = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(date.getDate() + i);\n      const dateKey = date.toDateString();\n      const painLevel = dateMap.get(dateKey) || 0;\n      \n      data.push({\n        date,\n        day: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][date.getDay()],\n        level: painLevel,\n        color: getPainColor(painLevel)\n      });\n    }\n\n    const totalPain = weekPainData.reduce((sum, item) => sum + item.level, 0);\n    const avgPain = weekPainData.length > 0 ? (totalPain / weekPainData.length) : 0;\n\n    return {\n      chartData: data,\n      mostCommonLocation: mostCommon,\n      averagePainLevel: avgPain\n    };\n  }, [weekPainData, startOfWeek]);\n\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${startStr} to ${endStr}`;\n  };\n\n  // Line Chart Component for Pain Ratings\n  const PainLineChart = ({ data, isExpanded, chartConfig }) => {\n    const config = chartConfig || {\n      width: isExpanded ? 480 : 400,\n      height: isExpanded ? 200 : 150,\n      padding: { top: 20, right: 20, bottom: 40, left: 40 }\n    };\n    \n    const chartWidth = config.width - config.padding.left - config.padding.right;\n    const chartHeight = config.height - config.padding.top - config.padding.bottom;\n    const dayWidth = chartWidth / 6; // 7 days, 6 intervals\n    \n    const getY = (value) => config.padding.top + chartHeight - (value / 10) * chartHeight;\n    const getX = (index) => config.padding.left + index * dayWidth;\n\n    return (\n      <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${config.width} ${config.height}`}>\n        {/* Grid lines */}\n        {[0, 2, 4, 6, 8, 10].map(value => (\n          <line\n            key={value}\n            x1={config.padding.left}\n            y1={getY(value)}\n            x2={config.width - config.padding.right}\n            y2={getY(value)}\n            stroke=\"#e0e0e0\"\n            strokeWidth=\"1\"\n            className=\"chart-grid-line-horizontal\"\n          />\n        ))}\n        \n        {/* Y-axis labels */}\n        {[0, 2, 4, 6, 8, 10].map(value => (\n          <text\n            key={value}\n            x={config.padding.left - 10}\n            y={getY(value) + 4}\n            textAnchor=\"end\"\n            fontSize={isExpanded ? 14 : 12}\n            fill=\"var(--chart-color-text-secondary)\"\n            className=\"chart-tick-label\"\n          >\n            {value}\n          </text>\n        ))}\n        \n        {/* Line chart */}\n        <polyline\n          points={data.map((item, index) => `${getX(index)},${getY(item.level)}`).join(' ')}\n          fill=\"none\"\n          stroke=\"var(--chart-color-pain-line)\"\n          strokeWidth=\"3\"\n          className=\"pain-line\"\n        />\n        \n        {/* Data points */}\n        {data.map((item, index) => (\n          <circle\n            key={index}\n            cx={getX(index)}\n            cy={getY(item.level)}\n            r={isExpanded ? 6 : 4}\n            fill={item.color}\n            stroke=\"white\"\n            strokeWidth=\"2\"\n            className=\"pain-data-point\"\n          />\n        ))}\n      </svg>\n    );\n  };\n\n  const Body = ({ location, level }) => {\n    const color = getPainColor(level);\n    const locationLower = location.toLowerCase();\n\n    return (\n      <div className=\"body-container\">\n        <div className=\"body-views\">\n          <div className=\"body-view\">\n            <div className=\"body-view-label\">Front</div>\n            <BodySVG \n              className=\"body-svg\" \n              painLocation={locationLower} \n              painColor={color} \n              view=\"front\" \n            />\n          </div>\n          <div className=\"body-view\">\n            <div className=\"body-view-label\">Back</div>\n            <BodySVG \n              className=\"body-svg\" \n              painLocation={locationLower} \n              painColor={color} \n              view=\"back\" \n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  if (viewMode === 'patient') {\n    return (\n        <div className=\"pain-chart-container\">\n          <div className=\"pain-chart-wrapper\">\n            <h3 className=\"chart-title\">Pain</h3>\n            <div className=\"pain-list\">\n              {weekPainData.length > 0 ? (\n                weekPainData.map((item, index) => (\n                  <div key={index} className=\"pain-list-item\">\n                    <div className=\"pain-item-date\">\n                      {new Date(item.date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}\n                    </div>\n                    <div className=\"pain-item-body\">\n                      <Body location={item.location} level={item.level} />\n                    </div>\n                    <div className=\"pain-item-details\">\n                      <div className=\"pain-level\">Pain intensity: {item.level}/10</div>\n                      <div className=\"pain-location\">Location: {item.location}</div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"no-pain-data\">No pain data available for this week</div>\n              )}\n            </div>\n          </div>\n          <div className=\"pain-legend-wrapper\">\n            <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\n          </div>\n        </div>\n    );\n  }\n\n  // Physician view\n  return (\n      <div className=\"physician-pain-chart-container\">\n        <div className=\"pain-line-chart-container\">\n          <h3 className=\"chart-title\">Pain Assessment</h3>\n          <h4>Pain Rating Trend</h4>\n          <PainLineChart data={chartData} isExpanded={isExpanded} />\n        </div>\n\n        <div className=\"pain-location-info\">\n          <h4>Pain Location: {mostCommonLocation || 'N/A'}</h4>\n        </div>\n        \n        <div className=\"pain-legend-wrapper\">\n          <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\n        </div>\n\n        <div className=\"chart-summary\">\n          <h4>Week Summary</h4>\n          <div className=\"summary-stats\">\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Average Pain Intensity:</span>\n              <span className=\"stat-value\">{averagePainLevel.toFixed(1)}/10</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Most Common Location:</span>\n              <span className=\"stat-value\">{mostCommonLocation || 'N/A'}</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Days with Pain:</span>\n              <span className=\"stat-value\">{weekPainData.length}/7</span>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n};\n\nexport default PainChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAChD,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,kBAAkB,MAAM,gCAAgC;AAE/D,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAO,oBAAoB;AAC3B,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,SAAS,GAAGA,CAAC;EAAEC,SAAS;EAAEC,UAAU,GAAG,KAAK;EAAEC,QAAQ;EAAEC,QAAQ,GAAG,SAAS;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACnG,MAAM;IAAEC,QAAQ;IAAEC,SAAS,EAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGhB,cAAc,CAACO,SAAS,EAAE,MAAM,CAAC;;EAEjF;EACA,MAAMU,qBAAqB,GAAG,CAACN,UAAU;EACzC,MAAMO,kBAAkB,GAAGjB,kBAAkB,CAAC,MAAM,CAAC;EACrD,MAAMkB,GAAG,GAAGR,UAAU,IAAIO,kBAAkB;EAE5C,MAAME,YAAY,GAAIC,KAAK,IAAK;IAC9B,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS,CAAC,CAAC;IACnC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,SAAS,CAAC,CAAC;IAClC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,SAAS,CAAC,CAAC;IAClC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,SAAS,CAAC,CAAC;IAClC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,SAAS,CAAC,CAAC;IAClC,OAAO,SAAS,CAAC,CAAC;EACpB,CAAC;EAID,MAAMC,eAAe,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAACC,GAAG,CAACP,KAAK,KAAK;IAC5EQ,KAAK,EAAET,YAAY,CAACC,KAAK,CAAC;IAC1BS,KAAK,EAAE,GAAGT,KAAK;EACjB,CAAC,CAAC,CAAC;EAEH,MAAM;IAAEU,KAAK,EAAEC,WAAW;IAAEC,GAAG,EAAEC;EAAU,CAAC,GAAGf,GAAG,CAACgB,YAAY,CAAC,CAAC;EAEjE,MAAMC,YAAY,GAAGvB,QAAQ,CAACwB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,IAAIP,WAAW,IAAIM,CAAC,CAACC,IAAI,IAAIL,SAAS,CAAC;;EAEvF;EACA,MAAM;IAAEM,SAAS;IAAEC,kBAAkB;IAAEC;EAAiB,CAAC,GAAG3C,OAAO,CAAC,MAAM;IACxE,IAAI,CAACqC,YAAY,CAACX,MAAM,EAAE,OAAO;MAAEe,SAAS,EAAE,EAAE;MAAEC,kBAAkB,EAAE,IAAI;MAAEC,gBAAgB,EAAE;IAAE,CAAC;;IAEjG;IACA,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IACzB,MAAMC,cAAc,GAAG,IAAID,GAAG,CAAC,CAAC;IAEhCR,YAAY,CAACU,OAAO,CAACC,IAAI,IAAI;MAC3B,MAAMC,OAAO,GAAGD,IAAI,CAACR,IAAI,CAACU,YAAY,CAAC,CAAC;MACxCN,OAAO,CAACO,GAAG,CAACF,OAAO,EAAED,IAAI,CAAC1B,KAAK,CAAC;;MAEhC;MACA,MAAM8B,QAAQ,GAAGJ,IAAI,CAACI,QAAQ,CAACC,WAAW,CAAC,CAAC;MAC5CP,cAAc,CAACK,GAAG,CAACC,QAAQ,EAAE,CAACN,cAAc,CAACQ,GAAG,CAACF,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvE,CAAC,CAAC;;IAEF;IACA,IAAIG,UAAU,GAAG,IAAI;IACrB,IAAIC,QAAQ,GAAG,CAAC;IAChB,KAAK,MAAM,CAACJ,QAAQ,EAAEK,KAAK,CAAC,IAAIX,cAAc,EAAE;MAC9C,IAAIW,KAAK,GAAGD,QAAQ,EAAE;QACpBA,QAAQ,GAAGC,KAAK;QAChBF,UAAU,GAAGH,QAAQ;MACvB;IACF;;IAEA;IACA,MAAMM,IAAI,GAAG,EAAE;IACf,KAAK,IAAI9B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMY,IAAI,GAAG,IAAImB,IAAI,CAAC1B,WAAW,CAAC;MAClCO,IAAI,CAACoB,OAAO,CAACpB,IAAI,CAACqB,OAAO,CAAC,CAAC,GAAGjC,CAAC,CAAC;MAChC,MAAMqB,OAAO,GAAGT,IAAI,CAACU,YAAY,CAAC,CAAC;MACnC,MAAMY,SAAS,GAAGlB,OAAO,CAACU,GAAG,CAACL,OAAO,CAAC,IAAI,CAAC;MAE3CS,IAAI,CAACK,IAAI,CAAC;QACRvB,IAAI;QACJwB,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAACxB,IAAI,CAACyB,MAAM,CAAC,CAAC,CAAC;QACrE3C,KAAK,EAAEwC,SAAS;QAChBhC,KAAK,EAAET,YAAY,CAACyC,SAAS;MAC/B,CAAC,CAAC;IACJ;IAEA,MAAMI,SAAS,GAAG7B,YAAY,CAAC8B,MAAM,CAAC,CAACC,GAAG,EAAEpB,IAAI,KAAKoB,GAAG,GAAGpB,IAAI,CAAC1B,KAAK,EAAE,CAAC,CAAC;IACzE,MAAM+C,OAAO,GAAGhC,YAAY,CAACX,MAAM,GAAG,CAAC,GAAIwC,SAAS,GAAG7B,YAAY,CAACX,MAAM,GAAI,CAAC;IAE/E,OAAO;MACLe,SAAS,EAAEiB,IAAI;MACfhB,kBAAkB,EAAEa,UAAU;MAC9BZ,gBAAgB,EAAE0B;IACpB,CAAC;EACH,CAAC,EAAE,CAAChC,YAAY,EAAEJ,WAAW,CAAC,CAAC;EAE/B,MAAMqC,eAAe,GAAGA,CAACtC,KAAK,EAAEE,GAAG,KAAK;IACtC,MAAMqC,QAAQ,GAAGvC,KAAK,CAACwC,kBAAkB,CAAC,OAAO,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAET,GAAG,EAAE;IAAU,CAAC,CAAC;IACtF,MAAMU,MAAM,GAAGxC,GAAG,CAACsC,kBAAkB,CAAC,OAAO,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAET,GAAG,EAAE;IAAU,CAAC,CAAC;IAClF,OAAO,GAAGO,QAAQ,OAAOG,MAAM,EAAE;EACnC,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAAC;IAAEjB,IAAI;IAAEjD,UAAU;IAAEmE;EAAY,CAAC,KAAK;IAC3D,MAAMC,MAAM,GAAGD,WAAW,IAAI;MAC5BE,KAAK,EAAErE,UAAU,GAAG,GAAG,GAAG,GAAG;MAC7BsE,MAAM,EAAEtE,UAAU,GAAG,GAAG,GAAG,GAAG;MAC9BuE,OAAO,EAAE;QAAEC,GAAG,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,MAAM,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAG;IACtD,CAAC;IAED,MAAMC,UAAU,GAAGR,MAAM,CAACC,KAAK,GAAGD,MAAM,CAACG,OAAO,CAACI,IAAI,GAAGP,MAAM,CAACG,OAAO,CAACE,KAAK;IAC5E,MAAMI,WAAW,GAAGT,MAAM,CAACE,MAAM,GAAGF,MAAM,CAACG,OAAO,CAACC,GAAG,GAAGJ,MAAM,CAACG,OAAO,CAACG,MAAM;IAC9E,MAAMI,QAAQ,GAAGF,UAAU,GAAG,CAAC,CAAC,CAAC;;IAEjC,MAAMG,IAAI,GAAIC,KAAK,IAAKZ,MAAM,CAACG,OAAO,CAACC,GAAG,GAAGK,WAAW,GAAIG,KAAK,GAAG,EAAE,GAAIH,WAAW;IACrF,MAAMI,IAAI,GAAIC,KAAK,IAAKd,MAAM,CAACG,OAAO,CAACI,IAAI,GAAGO,KAAK,GAAGJ,QAAQ;IAE9D,oBACEjF,OAAA;MAAKwE,KAAK,EAAC,MAAM;MAACC,MAAM,EAAC,MAAM;MAACa,OAAO,EAAE,OAAOf,MAAM,CAACC,KAAK,IAAID,MAAM,CAACE,MAAM,EAAG;MAAAc,QAAA,GAE7E,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAChE,GAAG,CAAC4D,KAAK,iBAC5BnF,OAAA;QAEEwF,EAAE,EAAEjB,MAAM,CAACG,OAAO,CAACI,IAAK;QACxBW,EAAE,EAAEP,IAAI,CAACC,KAAK,CAAE;QAChBO,EAAE,EAAEnB,MAAM,CAACC,KAAK,GAAGD,MAAM,CAACG,OAAO,CAACE,KAAM;QACxCe,EAAE,EAAET,IAAI,CAACC,KAAK,CAAE;QAChBS,MAAM,EAAC,SAAS;QAChBC,WAAW,EAAC,GAAG;QACfC,SAAS,EAAC;MAA4B,GAPjCX,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQX,CACF,CAAC,EAGD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC3E,GAAG,CAAC4D,KAAK,iBAC5BnF,OAAA;QAEEmG,CAAC,EAAE5B,MAAM,CAACG,OAAO,CAACI,IAAI,GAAG,EAAG;QAC5BsB,CAAC,EAAElB,IAAI,CAACC,KAAK,CAAC,GAAG,CAAE;QACnBkB,UAAU,EAAC,KAAK;QAChBC,QAAQ,EAAEnG,UAAU,GAAG,EAAE,GAAG,EAAG;QAC/BoG,IAAI,EAAC,mCAAmC;QACxCT,SAAS,EAAC,kBAAkB;QAAAP,QAAA,EAE3BJ;MAAK,GARDA,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASN,CACP,CAAC,eAGFlG,OAAA;QACEwG,MAAM,EAAEpD,IAAI,CAAC7B,GAAG,CAAC,CAACmB,IAAI,EAAE2C,KAAK,KAAK,GAAGD,IAAI,CAACC,KAAK,CAAC,IAAIH,IAAI,CAACxC,IAAI,CAAC1B,KAAK,CAAC,EAAE,CAAC,CAACyF,IAAI,CAAC,GAAG,CAAE;QAClFF,IAAI,EAAC,MAAM;QACXX,MAAM,EAAC,8BAA8B;QACrCC,WAAW,EAAC,GAAG;QACfC,SAAS,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC,EAGD9C,IAAI,CAAC7B,GAAG,CAAC,CAACmB,IAAI,EAAE2C,KAAK,kBACpBrF,OAAA;QAEE0G,EAAE,EAAEtB,IAAI,CAACC,KAAK,CAAE;QAChBsB,EAAE,EAAEzB,IAAI,CAACxC,IAAI,CAAC1B,KAAK,CAAE;QACrB4F,CAAC,EAAEzG,UAAU,GAAG,CAAC,GAAG,CAAE;QACtBoG,IAAI,EAAE7D,IAAI,CAAClB,KAAM;QACjBoE,MAAM,EAAC,OAAO;QACdC,WAAW,EAAC,GAAG;QACfC,SAAS,EAAC;MAAiB,GAPtBT,KAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQX,CACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV,CAAC;EAED,MAAMW,IAAI,GAAGA,CAAC;IAAE/D,QAAQ;IAAE9B;EAAM,CAAC,KAAK;IACpC,MAAMQ,KAAK,GAAGT,YAAY,CAACC,KAAK,CAAC;IACjC,MAAM8F,aAAa,GAAGhE,QAAQ,CAACC,WAAW,CAAC,CAAC;IAE5C,oBACE/C,OAAA;MAAK8F,SAAS,EAAC,gBAAgB;MAAAP,QAAA,eAC7BvF,OAAA;QAAK8F,SAAS,EAAC,YAAY;QAAAP,QAAA,gBACzBvF,OAAA;UAAK8F,SAAS,EAAC,WAAW;UAAAP,QAAA,gBACxBvF,OAAA;YAAK8F,SAAS,EAAC,iBAAiB;YAAAP,QAAA,EAAC;UAAK;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC5ClG,OAAA,CAACF,OAAO;YACNgG,SAAS,EAAC,UAAU;YACpBiB,YAAY,EAAED,aAAc;YAC5BE,SAAS,EAAExF,KAAM;YACjByF,IAAI,EAAC;UAAO;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACb,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNlG,OAAA;UAAK8F,SAAS,EAAC,WAAW;UAAAP,QAAA,gBACxBvF,OAAA;YAAK8F,SAAS,EAAC,iBAAiB;YAAAP,QAAA,EAAC;UAAI;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC3ClG,OAAA,CAACF,OAAO;YACNgG,SAAS,EAAC,UAAU;YACpBiB,YAAY,EAAED,aAAc;YAC5BE,SAAS,EAAExF,KAAM;YACjByF,IAAI,EAAC;UAAM;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV,CAAC;EAED,IAAI7F,QAAQ,KAAK,SAAS,EAAE;IAC1B,oBACIL,OAAA;MAAK8F,SAAS,EAAC,sBAAsB;MAAAP,QAAA,gBACnCvF,OAAA;QAAK8F,SAAS,EAAC,oBAAoB;QAAAP,QAAA,gBACjCvF,OAAA;UAAI8F,SAAS,EAAC,aAAa;UAAAP,QAAA,EAAC;QAAI;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrClG,OAAA;UAAK8F,SAAS,EAAC,WAAW;UAAAP,QAAA,EACvBxD,YAAY,CAACX,MAAM,GAAG,CAAC,GACtBW,YAAY,CAACR,GAAG,CAAC,CAACmB,IAAI,EAAE2C,KAAK,kBAC3BrF,OAAA;YAAiB8F,SAAS,EAAC,gBAAgB;YAAAP,QAAA,gBACzCvF,OAAA;cAAK8F,SAAS,EAAC,gBAAgB;cAAAP,QAAA,EAC5B,IAAIlC,IAAI,CAACX,IAAI,CAACR,IAAI,CAAC,CAACgC,kBAAkB,CAAC,OAAO,EAAE;gBAAEgD,OAAO,EAAE,OAAO;gBAAE/C,KAAK,EAAE,OAAO;gBAAET,GAAG,EAAE;cAAU,CAAC;YAAC;cAAAqC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnG,CAAC,eACNlG,OAAA;cAAK8F,SAAS,EAAC,gBAAgB;cAAAP,QAAA,eAC7BvF,OAAA,CAAC6G,IAAI;gBAAC/D,QAAQ,EAAEJ,IAAI,CAACI,QAAS;gBAAC9B,KAAK,EAAE0B,IAAI,CAAC1B;cAAM;gBAAA+E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjD,CAAC,eACNlG,OAAA;cAAK8F,SAAS,EAAC,mBAAmB;cAAAP,QAAA,gBAChCvF,OAAA;gBAAK8F,SAAS,EAAC,YAAY;gBAAAP,QAAA,GAAC,kBAAgB,EAAC7C,IAAI,CAAC1B,KAAK,EAAC,KAAG;cAAA;gBAAA+E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACjElG,OAAA;gBAAK8F,SAAS,EAAC,eAAe;gBAAAP,QAAA,GAAC,YAAU,EAAC7C,IAAI,CAACI,QAAQ;cAAA;gBAAAiD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3D,CAAC;UAAA,GAVEb,KAAK;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAWV,CACN,CAAC,gBAEFlG,OAAA;YAAK8F,SAAS,EAAC,cAAc;YAAAP,QAAA,EAAC;UAAoC;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QACxE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNlG,OAAA;QAAK8F,SAAS,EAAC,qBAAqB;QAAAP,QAAA,eAClCvF,OAAA,CAACH,MAAM;UAACsH,KAAK,EAAC,6BAA6B;UAACC,KAAK,EAAEnG;QAAgB;UAAA8E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEZ;;EAEA;EACA,oBACIlG,OAAA;IAAK8F,SAAS,EAAC,gCAAgC;IAAAP,QAAA,gBAC7CvF,OAAA;MAAK8F,SAAS,EAAC,2BAA2B;MAAAP,QAAA,gBACxCvF,OAAA;QAAI8F,SAAS,EAAC,aAAa;QAAAP,QAAA,EAAC;MAAe;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChDlG,OAAA;QAAAuF,QAAA,EAAI;MAAiB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BlG,OAAA,CAACqE,aAAa;QAACjB,IAAI,EAAEjB,SAAU;QAAChC,UAAU,EAAEA;MAAW;QAAA4F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC,eAENlG,OAAA;MAAK8F,SAAS,EAAC,oBAAoB;MAAAP,QAAA,eACjCvF,OAAA;QAAAuF,QAAA,GAAI,iBAAe,EAACnD,kBAAkB,IAAI,KAAK;MAAA;QAAA2D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eAENlG,OAAA;MAAK8F,SAAS,EAAC,qBAAqB;MAAAP,QAAA,eAClCvF,OAAA,CAACH,MAAM;QAACsH,KAAK,EAAC,6BAA6B;QAACC,KAAK,EAAEnG;MAAgB;QAAA8E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC,eAENlG,OAAA;MAAK8F,SAAS,EAAC,eAAe;MAAAP,QAAA,gBAC5BvF,OAAA;QAAAuF,QAAA,EAAI;MAAY;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBlG,OAAA;QAAK8F,SAAS,EAAC,eAAe;QAAAP,QAAA,gBAC5BvF,OAAA;UAAK8F,SAAS,EAAC,WAAW;UAAAP,QAAA,gBACxBvF,OAAA;YAAM8F,SAAS,EAAC,YAAY;YAAAP,QAAA,EAAC;UAAuB;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC3DlG,OAAA;YAAM8F,SAAS,EAAC,YAAY;YAAAP,QAAA,GAAElD,gBAAgB,CAACgF,OAAO,CAAC,CAAC,CAAC,EAAC,KAAG;UAAA;YAAAtB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC,eACNlG,OAAA;UAAK8F,SAAS,EAAC,WAAW;UAAAP,QAAA,gBACxBvF,OAAA;YAAM8F,SAAS,EAAC,YAAY;YAAAP,QAAA,EAAC;UAAqB;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACzDlG,OAAA;YAAM8F,SAAS,EAAC,YAAY;YAAAP,QAAA,EAAEnD,kBAAkB,IAAI;UAAK;YAAA2D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9D,CAAC,eACNlG,OAAA;UAAK8F,SAAS,EAAC,WAAW;UAAAP,QAAA,gBACxBvF,OAAA;YAAM8F,SAAS,EAAC,YAAY;YAAAP,QAAA,EAAC;UAAe;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACnDlG,OAAA;YAAM8F,SAAS,EAAC,YAAY;YAAAP,QAAA,GAAExD,YAAY,CAACX,MAAM,EAAC,IAAE;UAAA;YAAA2E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ,CAAC;AAAC3F,EAAA,CAlQIN,SAAS;EAAA,QACmCN,cAAc,EAInCC,kBAAkB;AAAA;AAAA0H,EAAA,GALzCrH,SAAS;AAoQf,eAAeA,SAAS;AAAC,IAAAqH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}