{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local Experimental\\\\PGHD_Visualization_Dashboard\\\\src\\\\components\\\\DashboardGrid.js\";\n/**\n DashboardGrid.js - Chart Grid Layout Component\n \n This component provides a flexible grid layout system for organizing charts. It renders all available visualizations in a grid and handles expanded and collapsed chart states. It integrates chart navigation controls and provides placeholder states for empty data scenarios. This component acts as the main container for organizing multiple health metric visualizations.\n */\n\nimport React from 'react';\nimport VisualizationWrapper from './VisualizationWrapper';\nimport Placeholder from './ui/Placeholder';\nimport './DashboardGrid.css';\n\n/*\n Shared component for rendering dashboard grids with visualization wrappers. Shows all available visualizations instead of using dropdown selectors. The component handles view mode which currently only supports 'unified'. It manages available visualizations and all visualization configurations. It provides handlers for expand and collapse operations and tracks the currently expanded item ID. It includes a function to render visualizations and displays placeholder text when no data is available. It integrates navigation objects for each chart type and supports screenshot mode.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardGrid = ({\n  viewMode = 'unified',\n  // View mode (defaults to 'unified')\n  availableVisualizations,\n  allVisualizations,\n  onExpand,\n  expandedItem,\n  renderVisualization,\n  placeholderText = \"No data available for this patient.\",\n  // Navigation props\n  chartNavigation = {},\n  // Screenshot mode\n  screenshotMode = false\n}) => {\n  // Configuration for view mode (only 'unified' is currently used)\n  const gridConfig = {\n    unified: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    }\n  };\n  const config = gridConfig[viewMode] || gridConfig.unified; // Fallback to unified if unknown mode\n\n  // Get all available visualization types\n  const availableVizTypes = Object.keys(availableVisualizations);\n\n  // If there's an expanded item, show only that chart in expanded view\n  if (expandedItem) {\n    // Extract the chart index from the chart ID (format: \"viewMode-chart-index\")\n    const chartIdParts = expandedItem.split('-');\n    const chartIndex = parseInt(chartIdParts[chartIdParts.length - 1]);\n    const selectedViz = availableVizTypes[chartIndex];\n    if (!selectedViz) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: config.className,\n        children: /*#__PURE__*/_jsxDEV(Placeholder, {\n          message: \"Invalid expanded chart\",\n          type: \"error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n    }\n    const navigation = chartNavigation[selectedViz];\n    return /*#__PURE__*/_jsxDEV(VisualizationWrapper, {\n      id: expandedItem,\n      className: `${config.chartClassNames[0]} expanded-view`,\n      selectedViz: selectedViz,\n      availableVisualizations: availableVisualizations,\n      allVisualizations: allVisualizations,\n      onExpand: onExpand,\n      isExpanded: true,\n      renderVisualization: renderVisualization,\n      placeholderText: placeholderText,\n      onPrev: navigation === null || navigation === void 0 ? void 0 : navigation.goToPrevious,\n      onNext: navigation === null || navigation === void 0 ? void 0 : navigation.goToNext,\n      navigationLabel: (navigation === null || navigation === void 0 ? void 0 : navigation.navigationLabel) || 'Week',\n      screenshotMode: screenshotMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If no visualizations available, show placeholder\n  if (availableVizTypes.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: config.className,\n      children: /*#__PURE__*/_jsxDEV(Placeholder, {\n        message: placeholderText,\n        type: \"no-data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render all available visualizations\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: config.className,\n    children: availableVizTypes.map((vizType, index) => {\n      const chartId = `${viewMode}-chart-${index}`;\n      const navigation = chartNavigation[vizType];\n      const wrapperProps = {\n        key: chartId,\n        id: chartId,\n        className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\n        selectedViz: vizType,\n        availableVisualizations: availableVisualizations,\n        allVisualizations: allVisualizations,\n        onExpand: onExpand,\n        isExpanded: expandedItem === chartId,\n        renderVisualization: renderVisualization,\n        placeholderText: placeholderText,\n        onPrev: navigation === null || navigation === void 0 ? void 0 : navigation.goToPrevious,\n        onNext: navigation === null || navigation === void 0 ? void 0 : navigation.goToNext,\n        navigationLabel: (navigation === null || navigation === void 0 ? void 0 : navigation.navigationLabel) || 'Week',\n        screenshotMode: screenshotMode\n      };\n      return /*#__PURE__*/_jsxDEV(VisualizationWrapper, {\n        ...wrapperProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_c = DashboardGrid;\nexport default DashboardGrid;\nvar _c;\n$RefreshReg$(_c, \"DashboardGrid\");","map":{"version":3,"names":["React","VisualizationWrapper","Placeholder","jsxDEV","_jsxDEV","DashboardGrid","viewMode","availableVisualizations","allVisualizations","onExpand","expandedItem","renderVisualization","placeholderText","chartNavigation","screenshotMode","gridConfig","unified","className","chartClassNames","config","availableVizTypes","Object","keys","chartIdParts","split","chartIndex","parseInt","length","selectedViz","children","message","type","fileName","_jsxFileName","lineNumber","columnNumber","navigation","id","isExpanded","onPrev","goToPrevious","onNext","goToNext","navigationLabel","map","vizType","index","chartId","wrapperProps","key","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/components/DashboardGrid.js"],"sourcesContent":["/**\n DashboardGrid.js - Chart Grid Layout Component\n \n This component provides a flexible grid layout system for organizing charts. It renders all available visualizations in a grid and handles expanded and collapsed chart states. It integrates chart navigation controls and provides placeholder states for empty data scenarios. This component acts as the main container for organizing multiple health metric visualizations.\n */\n\nimport React from 'react';\nimport VisualizationWrapper from './VisualizationWrapper';\nimport Placeholder from './ui/Placeholder';\nimport './DashboardGrid.css';\n\n/*\n Shared component for rendering dashboard grids with visualization wrappers. Shows all available visualizations instead of using dropdown selectors. The component handles view mode which currently only supports 'unified'. It manages available visualizations and all visualization configurations. It provides handlers for expand and collapse operations and tracks the currently expanded item ID. It includes a function to render visualizations and displays placeholder text when no data is available. It integrates navigation objects for each chart type and supports screenshot mode.\n */\nconst DashboardGrid = ({\n  viewMode = 'unified', // View mode (defaults to 'unified')\n  availableVisualizations,\n  allVisualizations,\n  onExpand,\n  expandedItem,\n  renderVisualization,\n  placeholderText = \"No data available for this patient.\",\n  // Navigation props\n  chartNavigation = {},\n  // Screenshot mode\n  screenshotMode = false\n}) => {\n  // Configuration for view mode (only 'unified' is currently used)\n  const gridConfig = {\n    unified: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    }\n  };\n\n  const config = gridConfig[viewMode] || gridConfig.unified; // Fallback to unified if unknown mode\n\n  // Get all available visualization types\n  const availableVizTypes = Object.keys(availableVisualizations);\n\n  // If there's an expanded item, show only that chart in expanded view\n  if (expandedItem) {\n    // Extract the chart index from the chart ID (format: \"viewMode-chart-index\")\n    const chartIdParts = expandedItem.split('-');\n    const chartIndex = parseInt(chartIdParts[chartIdParts.length - 1]);\n    const selectedViz = availableVizTypes[chartIndex];\n    \n    if (!selectedViz) {\n      return (\n        <div className={config.className}>\n          <Placeholder message=\"Invalid expanded chart\" type=\"error\" />\n        </div>\n      );\n    }\n    \n    const navigation = chartNavigation[selectedViz];\n    \n    return (\n      <VisualizationWrapper\n        id={expandedItem}\n        className={`${config.chartClassNames[0]} expanded-view`}\n        selectedViz={selectedViz}\n        availableVisualizations={availableVisualizations}\n        allVisualizations={allVisualizations}\n        onExpand={onExpand}\n        isExpanded={true}\n        renderVisualization={renderVisualization}\n        placeholderText={placeholderText}\n        onPrev={navigation?.goToPrevious}\n        onNext={navigation?.goToNext}\n        navigationLabel={navigation?.navigationLabel || 'Week'}\n        screenshotMode={screenshotMode}\n      />\n    );\n  }\n\n  // If no visualizations available, show placeholder\n  if (availableVizTypes.length === 0) {\n    return (\n      <div className={config.className}>\n        <Placeholder message={placeholderText} type=\"no-data\" />\n      </div>\n    );\n  }\n\n  // Render all available visualizations\n  return (\n    <div className={config.className}>\n      {availableVizTypes.map((vizType, index) => {\n        const chartId = `${viewMode}-chart-${index}`;\n        \n        const navigation = chartNavigation[vizType];\n        const wrapperProps = {\n          key: chartId,\n          id: chartId,\n          className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\n          selectedViz: vizType,\n          availableVisualizations: availableVisualizations,\n          allVisualizations: allVisualizations,\n          onExpand: onExpand,\n          isExpanded: expandedItem === chartId,\n          renderVisualization: renderVisualization,\n          placeholderText: placeholderText,\n          onPrev: navigation?.goToPrevious,\n          onNext: navigation?.goToNext,\n          navigationLabel: navigation?.navigationLabel || 'Week',\n          screenshotMode: screenshotMode\n        };\n\n        return <VisualizationWrapper {...wrapperProps} />;\n      })}\n    </div>\n  );\n};\n\nexport default DashboardGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}