{"ast":null,"code":"/**\r\n * SleepChart.js - Sleep Pattern Monitoring Visualization\r\n * \r\n * This component provides comprehensive sleep tracking:\r\n * - Sleep duration and quality rating visualization\r\n * - Weekly sleep pattern analysis\r\n * - Color-coded sleep quality indicators\r\n * - Interactive tooltips with sleep details\r\n * - Responsive design with navigation controls\r\n * - Integration with patient data and chart navigation\r\n * \r\n * ARCHITECTURE:\r\n * - Uses custom SVG for bar chart visualization\r\n * - Implements sleep quality categorization system\r\n * - Provides color-coded quality indicators for easy interpretation\r\n * - Supports responsive design with expandable views\r\n * - Implements time-based navigation and data filtering\r\n * \r\n * VISUALIZATION FEATURES:\r\n * - Bar chart showing daily sleep duration\r\n * - Color-coded quality indicators (Very good, Fairly good, Fairly bad, Very bad)\r\n * - Interactive tooltips with detailed sleep information\r\n * - Responsive design adapting to container size\r\n * - Dynamic Y-axis scaling based on sleep duration range\r\n * \r\n * SLEEP QUALITY CATEGORIES:\r\n * - Very good: Optimal sleep quality (green)\r\n * - Fairly good: Good sleep quality (blue)\r\n * - Fairly bad: Poor sleep quality (light green)\r\n * - Very bad: Very poor sleep quality (dark green)\r\n * \r\n * CLINICAL FEATURES:\r\n * - Sleep duration tracking with recommended ranges\r\n * - Quality assessment based on subjective ratings\r\n * - Sleep consistency analysis\r\n * - Summary statistics for physician view\r\n * - Trend analysis over time periods\r\n * \r\n * COMPONENT STRUCTURE:\r\n * - Chart Container: Main SVG container with responsive sizing\r\n * - Y-Axis: Duration scale with hour-based labeling\r\n * - X-Axis: Day-of-week labels with date information\r\n * - Data Bars: Sleep duration bars with quality color coding\r\n * - Legend: Sleep quality explanations\r\n * - Tooltip: Detailed sleep information on hover\r\n * \r\n * Essential for sleep hygiene monitoring and sleep disorder assessment.\r\n */import React,{useState,useMemo,useRef}from'react';import usePatientData from'../../hooks/usePatientData';import useChartNavigation from'../../hooks/useChartNavigation';import Legend from'../Legend';import'./SleepChart.css';import'../ChartStyles.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SleepChart=_ref=>{let{patientId,isExpanded,onExpand,viewMode='patient',navigation}=_ref;const{sleepData,loading,error}=usePatientData(patientId,'sleep');// Use navigation from parent or fallback to internal navigation\nconst useInternalNavigation=!navigation;const internalNavigation=useChartNavigation('sleep');const nav=navigation||internalNavigation;const{start:startOfWeek,end:endOfWeek}=nav.getDateRange();const weekData=sleepData.filter(d=>d.date>=startOfWeek&&d.date<=endOfWeek);// Get 3-month data\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const threeMonthData=sleepData.filter(d=>d.date>=startOfThreeMonths&&d.date<=endOfThreeMonths);const formatDateRange=data=>{if(!data||data.length===0)return'';const startDate=new Date(data[0].date).toLocaleDateString('en-US',{month:'short',day:'numeric'});const endDate=new Date(data[data.length-1].date).toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startDate,\" to \").concat(endDate);};const qualityLevels={'Very good':'var(--chart-color-sleep-very-good)','Fairly good':'var(--chart-color-sleep-fairly-good)','Fairly bad':'var(--chart-color-sleep-fairly-bad)','Very bad':'var(--chart-color-sleep-very-bad)'};const getQualityColor=quality=>qualityLevels[quality]||'#D3D3D3';const legendItems=Object.entries(qualityLevels).map(_ref2=>{let[label,color]=_ref2;return{label,color};});// Calculate summary statistics for physician view\nconst weekSummary=useMemo(()=>{if(!weekData||weekData.length===0)return null;const totalHours=weekData.reduce((sum,day)=>sum+day.hours,0);const avgHours=(totalHours/weekData.length).toFixed(1);// Count quality levels\nconst qualityCounts={};Object.keys(qualityLevels).forEach(quality=>{qualityCounts[quality]=0;});weekData.forEach(day=>{if(qualityCounts[day.quality]!==undefined){qualityCounts[day.quality]++;}});// Find most common quality\nconst mostCommonQuality=Object.entries(qualityCounts).sort((_ref3,_ref4)=>{let[,a]=_ref3;let[,b]=_ref4;return b-a;})[0];// Calculate sleep consistency (how much variation in sleep hours)\nconst hourVariations=weekData.map(day=>Math.abs(day.hours-parseFloat(avgHours)));const avgVariation=(hourVariations.reduce((sum,v)=>sum+v,0)/hourVariations.length).toFixed(1);// Sleep quality score (Very good=4, Fairly good=3, Fairly bad=2, Very bad=1)\nconst qualityScores={'Very good':4,'Fairly good':3,'Fairly bad':2,'Very bad':1};const avgQualityScore=weekData.reduce((sum,day)=>sum+(qualityScores[day.quality]||0),0)/weekData.length;const qualityAssessment=avgQualityScore>=3.5?'Good':avgQualityScore>=2.5?'Fair':'Poor';// Count nights with adequate sleep (7+ hours)\nconst adequateSleepNights=weekData.filter(day=>day.hours>=7).length;return{totalHours:totalHours.toFixed(1),avgHours,mostCommonQuality:mostCommonQuality[0],mostCommonQualityCount:mostCommonQuality[1],avgVariation,qualityAssessment,adequateSleepNights,daysTracked:weekData.length};},[weekData]);// Calculate 3-month summary statistics for physician view\nconst threeMonthSummary=useMemo(()=>{if(!threeMonthData||threeMonthData.length===0)return null;const totalHours=threeMonthData.reduce((sum,day)=>sum+day.hours,0);const avgHours=(totalHours/threeMonthData.length).toFixed(1);// Count quality levels\nconst qualityCounts={};Object.keys(qualityLevels).forEach(quality=>{qualityCounts[quality]=0;});threeMonthData.forEach(day=>{if(qualityCounts[day.quality]!==undefined){qualityCounts[day.quality]++;}});// Find most common quality\nconst mostCommonQuality=Object.entries(qualityCounts).sort((_ref5,_ref6)=>{let[,a]=_ref5;let[,b]=_ref6;return b-a;})[0];// Calculate sleep consistency (how much variation in sleep hours)\nconst hourVariations=threeMonthData.map(day=>Math.abs(day.hours-parseFloat(avgHours)));const avgVariation=(hourVariations.reduce((sum,v)=>sum+v,0)/hourVariations.length).toFixed(1);return{totalHours:totalHours.toFixed(1),avgHours,mostCommonQuality:mostCommonQuality[0],mostCommonQualityCount:mostCommonQuality[1],avgVariation,daysTracked:threeMonthData.length};},[threeMonthData]);return/*#__PURE__*/_jsxs(\"div\",{className:\"sleep-chart-content\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Sleep Quality & Duration\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getCurrentMonthYear()}),/*#__PURE__*/_jsxs(\"div\",{className:\"sleep-chart\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"sleep-quality-row\",children:weekData.map((day,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"sleep-quality-item\",children:/*#__PURE__*/_jsx(\"div\",{className:\"sleep-quality-indicator\",style:{backgroundColor:getQualityColor(day.quality)}})},\"quality-\".concat(index)))}),/*#__PURE__*/_jsx(\"div\",{className:\"bed-icons-row\",children:weekData.map((day,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"bed-item\",children:/*#__PURE__*/_jsx(\"div\",{className:\"bed-icon-wrapper\",children:/*#__PURE__*/_jsxs(\"svg\",{viewBox:\"0 0 486.5 225.1\",className:\"bed-icon\",children:[/*#__PURE__*/_jsx(\"path\",{d:\"M471.9,68.9c-8,0-14.5,6.5-14.5,14.5v68.6H26.1l-.6-139.3c0-7-5.8-12.7-12.8-12.7h0C5.7,0,0,5.7,0,12.8v199.6c0,7,5.7,12.8,12.7,12.8s12.8-5.7,12.8-12.8v-37h431.9v35.2c0,8,6.5,14.5,14.5,14.5s14.5-6.5,14.5-14.5v-127.1c0-8-6.5-14.5-14.5-14.5ZM483.7,210.6c0,6.5-5.3,11.8-11.8,11.8s-11.8-5.3-11.8-11.8v-38H22.7v39.7c0,5.5-4.5,10-10,10s-10-4.5-10-10V12.8C2.8,7.3,7.3,2.8,12.7,2.8h0c5.5,0,9.9,4.5,10,9.9l.6,142.1h436.8v-71.4c0-6.5,5.3-11.7,11.8-11.7s11.8,5.3,11.8,11.7v127.1Z\",fill:\"#D2B48C\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M29.9,94.2v54.5h425.4v-54.5H29.9ZM452.5,145.9H32.7v-48.9h419.8v48.9Z\",fill:\"#e0e0e0\"}),/*#__PURE__*/_jsx(\"rect\",{x:\"32.7\",y:\"97\",width:\"\".concat(day.hours/10*419.8),height:\"48.9\",fill:\"#FF4500\",className:\"sleep-fill-rect\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M112.8,46.3h-55.4c-12.1,0-22,9.9-22,22s9.9,22,22,22h55.4c12.1,0,22-9.9,22-22s-9.9-22-22-22ZM112.8,87.5h-55.4c-10.6,0-19.2-8.6-19.2-19.2s8.6-19.2,19.2-19.2h55.4c10.6,0,19.2,8.6,19.2,19.2s-8.6,19.2-19.2,19.2Z\",fill:\"#FFFFFF\",stroke:\"#AAAAAA\",strokeWidth:\"1\"})]})})},\"bed-\".concat(index)))}),/*#__PURE__*/_jsx(\"div\",{className:\"sleep-info-row\",children:weekData.map((day,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"sleep-info-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sleep-hours\",children:[day.hours.toFixed(1),\"h\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"day-label\",children:['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][new Date(day.date).getDay()]}),/*#__PURE__*/_jsx(\"div\",{className:\"date-label\",children:new Date(day.date).getDate()})]},\"info-\".concat(index)))})]}),/*#__PURE__*/_jsx(Legend,{title:\"Sleep Quality\",items:legendItems}),viewMode==='physician'&&weekSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"summary-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Week Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Average Sleep:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.avgHours,\" hours/night\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Sleep:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.totalHours,\" hours\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Sleep Consistency:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[\"\\xB1\",weekSummary.avgVariation,\" hours variation\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Common Quality:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.mostCommonQuality,\" (\",weekSummary.mostCommonQualityCount,\"x)\"]})]})]})]}),threeMonthSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"3-Month Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Average Sleep:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.avgHours,\" hours/night\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Sleep:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.totalHours,\" hours\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Sleep Consistency:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[\"\\xB1\",threeMonthSummary.avgVariation,\" hours variation\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Common Quality:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.mostCommonQuality,\" (\",threeMonthSummary.mostCommonQualityCount,\"x)\"]})]})]})]})]})]});};export default SleepChart;","map":{"version":3,"names":["React","useState","useMemo","useRef","usePatientData","useChartNavigation","Legend","jsx","_jsx","jsxs","_jsxs","SleepChart","_ref","patientId","isExpanded","onExpand","viewMode","navigation","sleepData","loading","error","useInternalNavigation","internalNavigation","nav","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthData","formatDateRange","data","length","startDate","Date","toLocaleDateString","month","day","endDate","concat","qualityLevels","getQualityColor","quality","legendItems","Object","entries","map","_ref2","label","color","weekSummary","totalHours","reduce","sum","hours","avgHours","toFixed","qualityCounts","keys","forEach","undefined","mostCommonQuality","sort","_ref3","_ref4","a","b","hourVariations","Math","abs","parseFloat","avgVariation","v","qualityScores","avgQualityScore","qualityAssessment","adequateSleepNights","mostCommonQualityCount","daysTracked","threeMonthSummary","_ref5","_ref6","className","children","getCurrentMonthYear","index","style","backgroundColor","viewBox","fill","x","y","width","height","stroke","strokeWidth","getDay","getDate","title","items"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/SleepChart.js"],"sourcesContent":["/**\r\n * SleepChart.js - Sleep Pattern Monitoring Visualization\r\n * \r\n * This component provides comprehensive sleep tracking:\r\n * - Sleep duration and quality rating visualization\r\n * - Weekly sleep pattern analysis\r\n * - Color-coded sleep quality indicators\r\n * - Interactive tooltips with sleep details\r\n * - Responsive design with navigation controls\r\n * - Integration with patient data and chart navigation\r\n * \r\n * ARCHITECTURE:\r\n * - Uses custom SVG for bar chart visualization\r\n * - Implements sleep quality categorization system\r\n * - Provides color-coded quality indicators for easy interpretation\r\n * - Supports responsive design with expandable views\r\n * - Implements time-based navigation and data filtering\r\n * \r\n * VISUALIZATION FEATURES:\r\n * - Bar chart showing daily sleep duration\r\n * - Color-coded quality indicators (Very good, Fairly good, Fairly bad, Very bad)\r\n * - Interactive tooltips with detailed sleep information\r\n * - Responsive design adapting to container size\r\n * - Dynamic Y-axis scaling based on sleep duration range\r\n * \r\n * SLEEP QUALITY CATEGORIES:\r\n * - Very good: Optimal sleep quality (green)\r\n * - Fairly good: Good sleep quality (blue)\r\n * - Fairly bad: Poor sleep quality (light green)\r\n * - Very bad: Very poor sleep quality (dark green)\r\n * \r\n * CLINICAL FEATURES:\r\n * - Sleep duration tracking with recommended ranges\r\n * - Quality assessment based on subjective ratings\r\n * - Sleep consistency analysis\r\n * - Summary statistics for physician view\r\n * - Trend analysis over time periods\r\n * \r\n * COMPONENT STRUCTURE:\r\n * - Chart Container: Main SVG container with responsive sizing\r\n * - Y-Axis: Duration scale with hour-based labeling\r\n * - X-Axis: Day-of-week labels with date information\r\n * - Data Bars: Sleep duration bars with quality color coding\r\n * - Legend: Sleep quality explanations\r\n * - Tooltip: Detailed sleep information on hover\r\n * \r\n * Essential for sleep hygiene monitoring and sleep disorder assessment.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\n\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport './SleepChart.css';\r\nimport '../ChartStyles.css';\r\n\r\nconst SleepChart = ({ patientId, isExpanded, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { sleepData, loading, error } = usePatientData(patientId, 'sleep');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('sleep');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n  const weekData = sleepData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = sleepData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\r\n\r\n  const formatDateRange = (data) => {\r\n    if (!data || data.length === 0) return '';\r\n    const startDate = new Date(data[0].date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endDate = new Date(data[data.length - 1].date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startDate} to ${endDate}`;\r\n  };\r\n\r\n  const qualityLevels = {\r\n    'Very good': 'var(--chart-color-sleep-very-good)',\r\n    'Fairly good': 'var(--chart-color-sleep-fairly-good)',\r\n    'Fairly bad': 'var(--chart-color-sleep-fairly-bad)',\r\n    'Very bad': 'var(--chart-color-sleep-very-bad)',\r\n  };\r\n\r\n  const getQualityColor = (quality) => qualityLevels[quality] || '#D3D3D3';\r\n\r\n  const legendItems = Object.entries(qualityLevels).map(([label, color]) => ({\r\n    label,\r\n    color,\r\n  }));\r\n\r\n  // Calculate summary statistics for physician view\r\n  const weekSummary = useMemo(() => {\r\n    if (!weekData || weekData.length === 0) return null;\r\n\r\n    const totalHours = weekData.reduce((sum, day) => sum + day.hours, 0);\r\n    const avgHours = (totalHours / weekData.length).toFixed(1);\r\n\r\n    // Count quality levels\r\n    const qualityCounts = {};\r\n    Object.keys(qualityLevels).forEach(quality => {\r\n      qualityCounts[quality] = 0;\r\n    });\r\n\r\n    weekData.forEach(day => {\r\n      if (qualityCounts[day.quality] !== undefined) {\r\n        qualityCounts[day.quality]++;\r\n      }\r\n    });\r\n\r\n    // Find most common quality\r\n    const mostCommonQuality = Object.entries(qualityCounts)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    // Calculate sleep consistency (how much variation in sleep hours)\r\n    const hourVariations = weekData.map(day => Math.abs(day.hours - parseFloat(avgHours)));\r\n    const avgVariation = (hourVariations.reduce((sum, v) => sum + v, 0) / hourVariations.length).toFixed(1);\r\n\r\n    // Sleep quality score (Very good=4, Fairly good=3, Fairly bad=2, Very bad=1)\r\n    const qualityScores = {\r\n      'Very good': 4,\r\n      'Fairly good': 3,\r\n      'Fairly bad': 2,\r\n      'Very bad': 1\r\n    };\r\n    const avgQualityScore = weekData.reduce((sum, day) => sum + (qualityScores[day.quality] || 0), 0) / weekData.length;\r\n    const qualityAssessment = avgQualityScore >= 3.5 ? 'Good' : avgQualityScore >= 2.5 ? 'Fair' : 'Poor';\r\n\r\n    // Count nights with adequate sleep (7+ hours)\r\n    const adequateSleepNights = weekData.filter(day => day.hours >= 7).length;\r\n\r\n    return {\r\n      totalHours: totalHours.toFixed(1),\r\n      avgHours,\r\n      mostCommonQuality: mostCommonQuality[0],\r\n      mostCommonQualityCount: mostCommonQuality[1],\r\n      avgVariation,\r\n      qualityAssessment,\r\n      adequateSleepNights,\r\n      daysTracked: weekData.length\r\n    };\r\n  }, [weekData]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = useMemo(() => {\r\n    if (!threeMonthData || threeMonthData.length === 0) return null;\r\n\r\n    const totalHours = threeMonthData.reduce((sum, day) => sum + day.hours, 0);\r\n    const avgHours = (totalHours / threeMonthData.length).toFixed(1);\r\n\r\n    // Count quality levels\r\n    const qualityCounts = {};\r\n    Object.keys(qualityLevels).forEach(quality => {\r\n      qualityCounts[quality] = 0;\r\n    });\r\n\r\n    threeMonthData.forEach(day => {\r\n      if (qualityCounts[day.quality] !== undefined) {\r\n        qualityCounts[day.quality]++;\r\n      }\r\n    });\r\n\r\n    // Find most common quality\r\n    const mostCommonQuality = Object.entries(qualityCounts)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    // Calculate sleep consistency (how much variation in sleep hours)\r\n    const hourVariations = threeMonthData.map(day => Math.abs(day.hours - parseFloat(avgHours)));\r\n    const avgVariation = (hourVariations.reduce((sum, v) => sum + v, 0) / hourVariations.length).toFixed(1);\r\n\r\n    return {\r\n      totalHours: totalHours.toFixed(1),\r\n      avgHours,\r\n      mostCommonQuality: mostCommonQuality[0],\r\n      mostCommonQualityCount: mostCommonQuality[1],\r\n      avgVariation,\r\n      daysTracked: threeMonthData.length\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n  return (\r\n      <div className=\"sleep-chart-content\">\r\n        <h3 className=\"chart-title\">Sleep Quality & Duration</h3>\r\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n        <div className=\"sleep-chart\">\r\n          {/* Sleep Quality Indicators Row */}\r\n          <div className=\"sleep-quality-row\">\r\n            {weekData.map((day, index) => (\r\n              <div key={`quality-${index}`} className=\"sleep-quality-item\">\r\n                <div \r\n                  className=\"sleep-quality-indicator\"\r\n                  style={{ backgroundColor: getQualityColor(day.quality) }}\r\n                ></div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          {/* Bed Icons Row */}\r\n          <div className=\"bed-icons-row\">\r\n            {weekData.map((day, index) => (\r\n              <div key={`bed-${index}`} className=\"bed-item\">\r\n                <div className=\"bed-icon-wrapper\">\r\n                  <svg viewBox=\"0 0 486.5 225.1\" className=\"bed-icon\">\r\n                    <path d=\"M471.9,68.9c-8,0-14.5,6.5-14.5,14.5v68.6H26.1l-.6-139.3c0-7-5.8-12.7-12.8-12.7h0C5.7,0,0,5.7,0,12.8v199.6c0,7,5.7,12.8,12.7,12.8s12.8-5.7,12.8-12.8v-37h431.9v35.2c0,8,6.5,14.5,14.5,14.5s14.5-6.5,14.5-14.5v-127.1c0-8-6.5-14.5-14.5-14.5ZM483.7,210.6c0,6.5-5.3,11.8-11.8,11.8s-11.8-5.3-11.8-11.8v-38H22.7v39.7c0,5.5-4.5,10-10,10s-10-4.5-10-10V12.8C2.8,7.3,7.3,2.8,12.7,2.8h0c5.5,0,9.9,4.5,10,9.9l.6,142.1h436.8v-71.4c0-6.5,5.3-11.7,11.8-11.7s11.8,5.3,11.8,11.7v127.1Z\" fill=\"#D2B48C\"/>\r\n                    <path d=\"M29.9,94.2v54.5h425.4v-54.5H29.9ZM452.5,145.9H32.7v-48.9h419.8v48.9Z\" fill=\"#e0e0e0\"/>\r\n                    <rect x=\"32.7\" y=\"97\" width={`${(day.hours / 10) * 419.8}`} height=\"48.9\" fill=\"#FF4500\" className=\"sleep-fill-rect\" />\r\n                    <path d=\"M112.8,46.3h-55.4c-12.1,0-22,9.9-22,22s9.9,22,22,22h55.4c12.1,0,22-9.9,22-22s-9.9-22-22-22ZM112.8,87.5h-55.4c-10.6,0-19.2-8.6-19.2-19.2s8.6-19.2,19.2-19.2h55.4c10.6,0,19.2,8.6,19.2,19.2s-8.6,19.2-19.2,19.2Z\" fill=\"#FFFFFF\" stroke=\"#AAAAAA\" strokeWidth=\"1\"/>\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          {/* Sleep Information Row */}\r\n          <div className=\"sleep-info-row\">\r\n            {weekData.map((day, index) => (\r\n              <div key={`info-${index}`} className=\"sleep-info-item\">\r\n                <div className=\"sleep-hours\">{day.hours.toFixed(1)}h</div>\r\n                <div className=\"day-label\">{['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][new Date(day.date).getDay()]}</div>\r\n                <div className=\"date-label\">{new Date(day.date).getDate()}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        \r\n        <Legend title=\"Sleep Quality\" items={legendItems} />\r\n\r\n        {/* Show summary for physician view only */}\r\n        {viewMode === 'physician' && weekSummary && (\r\n          <div className=\"summary-container\">\r\n            <div className=\"chart-summary\">\r\n              <h4>Week Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Average Sleep:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.avgHours} hours/night\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Total Sleep:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.totalHours} hours\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Sleep Consistency:</span>\r\n                  <span className=\"stat-value\">\r\n                    ±{weekSummary.avgVariation} hours variation\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Common Quality:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.mostCommonQuality} ({weekSummary.mostCommonQualityCount}x)\r\n                  </span>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n            \r\n            {threeMonthSummary && (\r\n              <div className=\"chart-summary\">\r\n                <h4>3-Month Summary</h4>\r\n                <div className=\"summary-stats\">\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Average Sleep:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.avgHours} hours/night\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Total Sleep:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.totalHours} hours\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Sleep Consistency:</span>\r\n                    <span className=\"stat-value\">\r\n                      ±{threeMonthSummary.avgVariation} hours variation\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Common Quality:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.mostCommonQuality} ({threeMonthSummary.mostCommonQualityCount}x)\r\n                    </span>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default SleepChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}