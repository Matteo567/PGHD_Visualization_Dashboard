{"ast":null,"code":"import Papa from 'papaparse';\n\n// Configuration for CSV parsing\nconst CSV_CONFIG = {\n  header: true,\n  skipEmptyLines: true,\n  transformHeader: header => header.trim(),\n  transform: value => value === null || value === void 0 ? void 0 : value.trim()\n};\n\n/**\n * Fetches and parses CSV data for a specific patient\n * @param {string} patientId - The patient identifier\n * @returns {Promise<Array>} Parsed CSV data as array of objects\n */\nconst fetchPatientCsvData = async patientId => {\n  try {\n    // Add cache busting to ensure fresh data\n    const response = await fetch(`/synthetic_patients/${patientId}.csv?v=${Date.now()}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV for ${patientId}: ${response.status} ${response.statusText}`);\n    }\n    const csvText = await response.text();\n    if (!csvText || csvText.trim().length === 0) {\n      throw new Error(`Empty CSV file for patient ${patientId}`);\n    }\n    const parsed = Papa.parse(csvText, CSV_CONFIG);\n    if (parsed.errors.length > 0) {\n      console.warn(`CSV parsing warnings for ${patientId}:`, parsed.errors);\n    }\n    return parsed.data;\n  } catch (error) {\n    console.error(`Error fetching or parsing CSV for ${patientId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Service class for handling patient data operations\n * Provides methods for fetching and processing patient health data from CSV files\n */\nclass DataService {\n  /**\n   * Retrieves and processes all data for a specific patient\n   * @param {string} patientId - The patient identifier\n   * @returns {Promise<Object>} Processed patient data including all health metrics\n   */\n  static async getPatientData(patientId) {\n    if (!patientId) {\n      throw new Error('Patient ID is required');\n    }\n    try {\n      const patientRows = await fetchPatientCsvData(patientId);\n      if (!Array.isArray(patientRows) || patientRows.length === 0) {\n        throw new Error(`No data found for patient ${patientId}`);\n      }\n      return this.processPatientData(patientRows, patientId);\n    } catch (error) {\n      console.error(`Error fetching patient data for ${patientId}:`, error);\n      throw error;\n    }\n  }\n  /**\n   * Processes raw CSV data into structured patient information and health metrics\n   * @param {Array} rows - Raw CSV data rows\n   * @param {string} patientId - The patient identifier\n   * @returns {Object} Structured patient data object\n   */\n  static processPatientData(rows, patientId) {\n    if (!Array.isArray(rows) || rows.length === 0) {\n      throw new Error(`Invalid data structure for patient ${patientId}`);\n    }\n    const firstRow = rows[0];\n    if (!firstRow) {\n      throw new Error(`No valid data rows found for patient ${patientId}`);\n    }\n    const patientInfo = {\n      patientId,\n      patientNumber: patientId,\n      name: firstRow['Name'] || 'Not specified',\n      age: firstRow['Age'] || 'Not specified',\n      gender: firstRow['Gender'] || 'Not specified',\n      dataAvailable: 'May 2025'\n    };\n\n    // Process medications using the cleaner individual medication fields\n    const detailedMedications = [];\n\n    // Get unique medication data from the individual fields\n    const medicationNames = [...new Set(rows.map(row => row['Medication_Names']).filter(Boolean))];\n    const medicationTypes = [...new Set(rows.map(row => row['Medication_Types']).filter(Boolean))];\n    const medicationCategories = [...new Set(rows.map(row => row['Medication_Categories']).filter(Boolean))];\n    const medicationDosages = [...new Set(rows.map(row => row['Medication_Dosages']).filter(Boolean))];\n\n    // Process each medication\n    for (let i = 0; i < Math.max(medicationNames.length, medicationTypes.length, medicationCategories.length, medicationDosages.length); i++) {\n      const name = medicationNames[i] || '';\n      const type = medicationTypes[i] || '';\n      const category = medicationCategories[i] || '';\n      const dosage = medicationDosages[i] || '';\n      if (name) {\n        detailedMedications.push({\n          name: name.trim(),\n          schedule: dosage.trim(),\n          // Use dosage as schedule\n          category: '',\n          // Don't include category in visualization\n          dosage: ''\n        });\n      }\n    }\n\n    // Process conditions\n    const conditionsSet = new Set();\n    const conditionsRaw = [...new Set(rows.map(row => row['Chronic_Conditions'] || row['Conditions']).filter(Boolean))];\n    conditionsRaw.forEach(conditionString => {\n      conditionString.split(',').forEach(c => conditionsSet.add(c.trim()));\n    });\n\n    // Process all data types\n    const glucoseData = this.processGlucoseData(rows);\n    const bloodPressureData = this.processBloodPressureData(rows);\n    const exerciseData = this.processExerciseData(rows);\n    const moodData = this.processMoodData(rows);\n    const painData = this.processPainData(rows);\n    const sleepData = this.processSleepData(rows);\n    const mealData = this.processMealData(rows);\n    return {\n      patientInfo: {\n        ...patientInfo,\n        detailedMedications,\n        conditions: Array.from(conditionsSet)\n      },\n      glucoseData,\n      bloodPressureData,\n      exerciseData,\n      moodData,\n      painData,\n      mealData,\n      sleepData,\n      rawData: rows\n    };\n  }\n  static processGlucoseData(rows) {\n    return rows.flatMap(row => {\n      const baseDate = new Date(row['Date']);\n      const readings = [];\n      const hasMultiColumn = row['Glucose_1'] !== undefined;\n      if (hasMultiColumn) {\n        for (let i = 1; i <= 4; i++) {\n          const value = parseFloat(row[`Glucose_${i}`]);\n          const timeStr = row[`Glucose_Time_${i}`];\n          if (value > 0 && timeStr) {\n            const [hours, minutes] = timeStr.split(':').map(Number);\n            const date = new Date(baseDate);\n            date.setHours(hours, minutes);\n            readings.push({\n              date,\n              value,\n              range: row[`Glucose_Range_${i}`],\n              measurementType: row[`Glucose_Measurement_Type_${i}`]\n            });\n          }\n        }\n      } else {\n        const value = parseFloat(row['Glucose_Level']);\n        if (value > 0) {\n          const randomHour = Math.floor(Math.random() * 24);\n          const randomMinute = Math.floor(Math.random() * 60);\n          const date = new Date(baseDate);\n          date.setHours(randomHour, randomMinute);\n          let range = 'in range';\n          if (value < 70) range = 'below range';else if (value > 180) range = 'above range';\n          readings.push({\n            date,\n            value,\n            range,\n            measurementType: 'Random'\n          });\n        }\n      }\n      return readings;\n    });\n  }\n  static processBloodPressureData(rows) {\n    return rows.flatMap(row => {\n      const baseDate = new Date(row['Date']);\n      const readings = [];\n      const hasMultiColumn = row['Systolic_1'] !== undefined;\n      if (hasMultiColumn) {\n        for (let i = 1; i <= 4; i++) {\n          const systolic = parseInt(row[`Systolic_${i}`]);\n          const diastolic = parseInt(row[`Diastolic_${i}`]);\n          const timeStr = row[`BP_Time_${i}`];\n          if (systolic > 0 && diastolic > 0 && timeStr) {\n            const [hours, minutes] = timeStr.split(':').map(Number);\n            const date = new Date(baseDate);\n            date.setHours(hours, minutes);\n            readings.push({\n              date,\n              systolic,\n              diastolic,\n              systolicType: row[`Systolic_Type_${i}`],\n              diastolicType: row[`Diastolic_Type_${i}`]\n            });\n          }\n        }\n      } else {\n        const systolic = parseInt(row['Systolic_BP']);\n        const diastolic = parseInt(row['Diastolic_BP']);\n        if (systolic > 0 && diastolic > 0) {\n          const randomHour = Math.floor(Math.random() * 24);\n          const randomMinute = Math.floor(Math.random() * 60);\n          const date = new Date(baseDate);\n          date.setHours(randomHour, randomMinute);\n          let systolicType = 'normal';\n          let diastolicType = 'normal';\n          if (systolic >= 180 || diastolic >= 120) {\n            systolicType = 'hypertensive crisis';\n            diastolicType = 'hypertensive crisis';\n          } else if (systolic >= 140 || diastolic >= 90) {\n            systolicType = 'high';\n            diastolicType = 'high';\n          } else if (systolic >= 130 || diastolic >= 80) {\n            systolicType = 'elevated';\n            diastolicType = 'elevated';\n          }\n          readings.push({\n            date,\n            systolic,\n            diastolic,\n            systolicType,\n            diastolicType\n          });\n        }\n      }\n      return readings;\n    });\n  }\n  static processExerciseData(rows) {\n    const exerciseByDate = {};\n    rows.forEach(row => {\n      const date = new Date(row['Date']);\n      const dateKey = date.toDateString();\n      if (!exerciseByDate[dateKey]) {\n        exerciseByDate[dateKey] = {\n          date,\n          walking: 0,\n          swimming: 0,\n          running: 0,\n          'resistance/weights': 0,\n          biking: 0,\n          'balance/stretching': 0,\n          other: 0,\n          totalMinutes: 0\n        };\n      }\n      const hasMultiColumn = row['Exercise_Type_1'] !== undefined;\n      if (hasMultiColumn) {\n        for (let i = 1; i <= 3; i++) {\n          var _row;\n          const type = (_row = row[`Exercise_Type_${i}`]) === null || _row === void 0 ? void 0 : _row.toLowerCase();\n          const minutes = parseFloat(row[`Exercise_Minutes_${i}`]);\n          if (type && minutes > 0) {\n            this.categorizeExercise(type, minutes, exerciseByDate[dateKey]);\n          }\n        }\n      } else {\n        var _row$Exercise_Type;\n        const type = (_row$Exercise_Type = row['Exercise_Type']) === null || _row$Exercise_Type === void 0 ? void 0 : _row$Exercise_Type.toLowerCase();\n        const minutes = parseFloat(row['Exercise_Minutes']);\n        if (type && minutes > 0) {\n          this.categorizeExercise(type, minutes, exerciseByDate[dateKey]);\n        }\n      }\n    });\n    return Object.values(exerciseByDate).filter(d => d.totalMinutes > 0);\n  }\n  static categorizeExercise(type, minutes, dayData) {\n    if (type.includes('walking')) dayData.walking += minutes;else if (type.includes('swimming')) dayData.swimming += minutes;else if (type.includes('running')) dayData.running += minutes;else if (type.includes('resistance') || type.includes('weights')) dayData['resistance/weights'] += minutes;else if (type.includes('biking')) dayData.biking += minutes;else if (type.includes('balance') || type.includes('stretching')) dayData['balance/stretching'] += minutes;else dayData.other += minutes;\n    dayData.totalMinutes += minutes;\n  }\n  static processMoodData(rows) {\n    return rows.filter(row => row['Mood']).map(row => ({\n      date: new Date(row['Date']),\n      mood: row['Mood'],\n      category: row['Mood'] || 'neutral'\n    }));\n  }\n  static processPainData(rows) {\n    return rows.filter(row => row['Pain_Location'] && row['Pain_Level']).map(row => ({\n      date: new Date(row['Date']),\n      location: row['Pain_Location'].toLowerCase(),\n      level: parseInt(row['Pain_Level'])\n    }));\n  }\n  static processSleepData(rows) {\n    return rows.filter(row => row['Sleep_Hours'] && row['Sleep_Quality']).map(row => ({\n      date: new Date(row['Date']),\n      hours: parseFloat(row['Sleep_Hours']),\n      quality: row['Sleep_Quality'],\n      qualityCode: parseInt(row['Sleep_Quality_Code'])\n    }));\n  }\n  static processMealData(rows) {\n    // Return the raw rows with meal data since MealContentsChart expects individual meal components\n    return rows.filter(row => {\n      // Check if any meal data exists for this row\n      const mealTypes = ['Breakfast', 'Lunch', 'Dinner'];\n      const hasMealData = mealTypes.some(mealType => {\n        const time = row[`${mealType}_Time`];\n        const protein = row[`${mealType}_Protein`];\n        const carbs = row[`${mealType}_Carbohydrates`];\n        const vegetables = row[`${mealType}_Vegetables`];\n        const fruit = row[`${mealType}_Fruit`];\n        const alcohol = row[`${mealType}_Alcohol`];\n        const sugar = row[`${mealType}_Added_Sugar`];\n\n        // Check if time exists and at least one food component is present\n        return time && (protein === '1' || carbs === '1' || vegetables === '1' || fruit === '1' || alcohol === '1' || sugar);\n      });\n      return hasMealData;\n    });\n  }\n}\nexport default DataService;","map":{"version":3,"names":["Papa","CSV_CONFIG","header","skipEmptyLines","transformHeader","trim","transform","value","fetchPatientCsvData","patientId","response","fetch","Date","now","ok","Error","status","statusText","csvText","text","length","parsed","parse","errors","console","warn","data","error","DataService","getPatientData","patientRows","Array","isArray","processPatientData","rows","firstRow","patientInfo","patientNumber","name","age","gender","dataAvailable","detailedMedications","medicationNames","Set","map","row","filter","Boolean","medicationTypes","medicationCategories","medicationDosages","i","Math","max","type","category","dosage","push","schedule","conditionsSet","conditionsRaw","forEach","conditionString","split","c","add","glucoseData","processGlucoseData","bloodPressureData","processBloodPressureData","exerciseData","processExerciseData","moodData","processMoodData","painData","processPainData","sleepData","processSleepData","mealData","processMealData","conditions","from","rawData","flatMap","baseDate","readings","hasMultiColumn","undefined","parseFloat","timeStr","hours","minutes","Number","date","setHours","range","measurementType","randomHour","floor","random","randomMinute","systolic","parseInt","diastolic","systolicType","diastolicType","exerciseByDate","dateKey","toDateString","walking","swimming","running","biking","other","totalMinutes","_row","toLowerCase","categorizeExercise","_row$Exercise_Type","Object","values","d","dayData","includes","mood","location","level","quality","qualityCode","mealTypes","hasMealData","some","mealType","time","protein","carbs","vegetables","fruit","alcohol","sugar"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/services/dataService.js"],"sourcesContent":["import Papa from 'papaparse';\n\n// Configuration for CSV parsing\nconst CSV_CONFIG = {\n  header: true,\n  skipEmptyLines: true,\n  transformHeader: (header) => header.trim(),\n  transform: (value) => value?.trim(),\n};\n\n/**\n * Fetches and parses CSV data for a specific patient\n * @param {string} patientId - The patient identifier\n * @returns {Promise<Array>} Parsed CSV data as array of objects\n */\nconst fetchPatientCsvData = async (patientId) => {\n  try {\n    // Add cache busting to ensure fresh data\n    const response = await fetch(`/synthetic_patients/${patientId}.csv?v=${Date.now()}`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV for ${patientId}: ${response.status} ${response.statusText}`);\n    }\n    \n    const csvText = await response.text();\n    \n    if (!csvText || csvText.trim().length === 0) {\n      throw new Error(`Empty CSV file for patient ${patientId}`);\n    }\n    \n    const parsed = Papa.parse(csvText, CSV_CONFIG);\n    \n    if (parsed.errors.length > 0) {\n      console.warn(`CSV parsing warnings for ${patientId}:`, parsed.errors);\n    }\n    \n    return parsed.data;\n  } catch (error) {\n    console.error(`Error fetching or parsing CSV for ${patientId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Service class for handling patient data operations\n * Provides methods for fetching and processing patient health data from CSV files\n */\nclass DataService {\n  /**\n   * Retrieves and processes all data for a specific patient\n   * @param {string} patientId - The patient identifier\n   * @returns {Promise<Object>} Processed patient data including all health metrics\n   */\n  static async getPatientData(patientId) {\n    if (!patientId) {\n      throw new Error('Patient ID is required');\n    }\n\n    try {\n      const patientRows = await fetchPatientCsvData(patientId);\n\n      if (!Array.isArray(patientRows) || patientRows.length === 0) {\n        throw new Error(`No data found for patient ${patientId}`);\n      }\n\n      return this.processPatientData(patientRows, patientId);\n    } catch (error) {\n      console.error(`Error fetching patient data for ${patientId}:`, error);\n      throw error;\n    }\n  }\n  /**\n   * Processes raw CSV data into structured patient information and health metrics\n   * @param {Array} rows - Raw CSV data rows\n   * @param {string} patientId - The patient identifier\n   * @returns {Object} Structured patient data object\n   */\n  static processPatientData(rows, patientId) {\n    if (!Array.isArray(rows) || rows.length === 0) {\n      throw new Error(`Invalid data structure for patient ${patientId}`);\n    }\n\n    const firstRow = rows[0];\n    if (!firstRow) {\n      throw new Error(`No valid data rows found for patient ${patientId}`);\n    }\n\n    const patientInfo = {\n      patientId,\n      patientNumber: patientId,\n      name: firstRow['Name'] || 'Not specified',\n      age: firstRow['Age'] || 'Not specified',\n      gender: firstRow['Gender'] || 'Not specified',\n      dataAvailable: 'May 2025'\n    };\n\n    // Process medications using the cleaner individual medication fields\n    const detailedMedications = [];\n    \n    // Get unique medication data from the individual fields\n    const medicationNames = [...new Set(rows.map(row => row['Medication_Names']).filter(Boolean))];\n    const medicationTypes = [...new Set(rows.map(row => row['Medication_Types']).filter(Boolean))];\n    const medicationCategories = [...new Set(rows.map(row => row['Medication_Categories']).filter(Boolean))];\n    const medicationDosages = [...new Set(rows.map(row => row['Medication_Dosages']).filter(Boolean))];\n    \n    // Process each medication\n    for (let i = 0; i < Math.max(medicationNames.length, medicationTypes.length, medicationCategories.length, medicationDosages.length); i++) {\n        const name = medicationNames[i] || '';\n        const type = medicationTypes[i] || '';\n        const category = medicationCategories[i] || '';\n        const dosage = medicationDosages[i] || '';\n        \n        if (name) {\n            detailedMedications.push({\n                name: name.trim(),\n                schedule: dosage.trim(), // Use dosage as schedule\n                category: '', // Don't include category in visualization\n                dosage: ''\n            });\n        }\n    }\n\n    // Process conditions\n    const conditionsSet = new Set();\n    const conditionsRaw = [...new Set(rows.map(row => row['Chronic_Conditions'] || row['Conditions']).filter(Boolean))];\n    conditionsRaw.forEach(conditionString => {\n        conditionString.split(',').forEach(c => conditionsSet.add(c.trim()));\n    });\n\n    // Process all data types\n    const glucoseData = this.processGlucoseData(rows);\n    const bloodPressureData = this.processBloodPressureData(rows);\n    const exerciseData = this.processExerciseData(rows);\n    const moodData = this.processMoodData(rows);\n    const painData = this.processPainData(rows);\n    const sleepData = this.processSleepData(rows);\n    const mealData = this.processMealData(rows);\n\n    return {\n      patientInfo: { \n        ...patientInfo, \n        detailedMedications, \n        conditions: Array.from(conditionsSet)\n      },\n      glucoseData,\n      bloodPressureData,\n      exerciseData,\n      moodData,\n      painData,\n      mealData,\n      sleepData,\n      rawData: rows\n    };\n  }\n\n  static processGlucoseData(rows) {\n    return rows.flatMap(row => {\n      const baseDate = new Date(row['Date']);\n      const readings = [];\n      \n      const hasMultiColumn = row['Glucose_1'] !== undefined;\n      \n      if (hasMultiColumn) {\n        for (let i = 1; i <= 4; i++) {\n          const value = parseFloat(row[`Glucose_${i}`]);\n          const timeStr = row[`Glucose_Time_${i}`];\n          if (value > 0 && timeStr) {\n            const [hours, minutes] = timeStr.split(':').map(Number);\n            const date = new Date(baseDate);\n            date.setHours(hours, minutes);\n            readings.push({\n              date,\n              value,\n              range: row[`Glucose_Range_${i}`],\n              measurementType: row[`Glucose_Measurement_Type_${i}`]\n            });\n          }\n        }\n      } else {\n        const value = parseFloat(row['Glucose_Level']);\n        if (value > 0) {\n          const randomHour = Math.floor(Math.random() * 24);\n          const randomMinute = Math.floor(Math.random() * 60);\n          const date = new Date(baseDate);\n          date.setHours(randomHour, randomMinute);\n          \n          let range = 'in range';\n          if (value < 70) range = 'below range';\n          else if (value > 180) range = 'above range';\n          \n          readings.push({\n            date,\n            value,\n            range,\n            measurementType: 'Random'\n          });\n        }\n      }\n      \n      return readings;\n    });\n  }\n\n  static processBloodPressureData(rows) {\n    return rows.flatMap(row => {\n        const baseDate = new Date(row['Date']);\n        const readings = [];\n        \n        const hasMultiColumn = row['Systolic_1'] !== undefined;\n        \n        if (hasMultiColumn) {\n            for (let i = 1; i <= 4; i++) {\n                const systolic = parseInt(row[`Systolic_${i}`]);\n                const diastolic = parseInt(row[`Diastolic_${i}`]);\n                const timeStr = row[`BP_Time_${i}`];\n                if (systolic > 0 && diastolic > 0 && timeStr) {\n                    const [hours, minutes] = timeStr.split(':').map(Number);\n                    const date = new Date(baseDate);\n                    date.setHours(hours, minutes);\n                    readings.push({ \n                        date, \n                        systolic, \n                        diastolic, \n                        systolicType: row[`Systolic_Type_${i}`],\n                        diastolicType: row[`Diastolic_Type_${i}`]\n                    });\n                }\n            }\n        } else {\n            const systolic = parseInt(row['Systolic_BP']);\n            const diastolic = parseInt(row['Diastolic_BP']);\n            if (systolic > 0 && diastolic > 0) {\n                const randomHour = Math.floor(Math.random() * 24);\n                const randomMinute = Math.floor(Math.random() * 60);\n                const date = new Date(baseDate);\n                date.setHours(randomHour, randomMinute);\n                \n                let systolicType = 'normal';\n                let diastolicType = 'normal';\n                if (systolic >= 180 || diastolic >= 120) {\n                    systolicType = 'hypertensive crisis';\n                    diastolicType = 'hypertensive crisis';\n                } else if (systolic >= 140 || diastolic >= 90) {\n                    systolicType = 'high';\n                    diastolicType = 'high';\n                } else if (systolic >= 130 || diastolic >= 80) {\n                    systolicType = 'elevated';\n                    diastolicType = 'elevated';\n                }\n                \n                readings.push({ \n                    date, \n                    systolic, \n                    diastolic, \n                    systolicType,\n                    diastolicType\n                });\n            }\n        }\n        \n        return readings;\n    });\n  }\n\n  static processExerciseData(rows) {\n    const exerciseByDate = {};\n    \n    rows.forEach(row => {\n        const date = new Date(row['Date']);\n        const dateKey = date.toDateString();\n        if (!exerciseByDate[dateKey]) {\n            exerciseByDate[dateKey] = { date, walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\n        }\n        \n        const hasMultiColumn = row['Exercise_Type_1'] !== undefined;\n        \n        if (hasMultiColumn) {\n            for (let i = 1; i <= 3; i++) {\n                const type = row[`Exercise_Type_${i}`]?.toLowerCase();\n                const minutes = parseFloat(row[`Exercise_Minutes_${i}`]);\n                if (type && minutes > 0) {\n                    this.categorizeExercise(type, minutes, exerciseByDate[dateKey]);\n                }\n            }\n        } else {\n            const type = row['Exercise_Type']?.toLowerCase();\n            const minutes = parseFloat(row['Exercise_Minutes']);\n            if (type && minutes > 0) {\n                this.categorizeExercise(type, minutes, exerciseByDate[dateKey]);\n            }\n        }\n    });\n    \n    return Object.values(exerciseByDate).filter(d => d.totalMinutes > 0);\n  }\n\n  static categorizeExercise(type, minutes, dayData) {\n    if (type.includes('walking')) dayData.walking += minutes;\n    else if (type.includes('swimming')) dayData.swimming += minutes;\n    else if (type.includes('running')) dayData.running += minutes;\n    else if (type.includes('resistance') || type.includes('weights')) dayData['resistance/weights'] += minutes;\n    else if (type.includes('biking')) dayData.biking += minutes;\n    else if (type.includes('balance') || type.includes('stretching')) dayData['balance/stretching'] += minutes;\n    else dayData.other += minutes;\n    dayData.totalMinutes += minutes;\n  }\n\n  static processMoodData(rows) {\n    return rows.filter(row => row['Mood']).map(row => ({\n        date: new Date(row['Date']),\n        mood: row['Mood'],\n        category: row['Mood'] || 'neutral'\n    }));\n  }\n\n  static processPainData(rows) {\n    return rows.filter(row => row['Pain_Location'] && row['Pain_Level']).map(row => ({\n        date: new Date(row['Date']),\n        location: row['Pain_Location'].toLowerCase(),\n        level: parseInt(row['Pain_Level'])\n    }));\n  }\n\n  static processSleepData(rows) {\n    return rows.filter(row => row['Sleep_Hours'] && row['Sleep_Quality']).map(row => ({\n        date: new Date(row['Date']),\n        hours: parseFloat(row['Sleep_Hours']),\n        quality: row['Sleep_Quality'],\n        qualityCode: parseInt(row['Sleep_Quality_Code'])\n    }));\n  }\n\n  static processMealData(rows) {\n    // Return the raw rows with meal data since MealContentsChart expects individual meal components\n    return rows.filter(row => {\n      // Check if any meal data exists for this row\n      const mealTypes = ['Breakfast', 'Lunch', 'Dinner'];\n      \n      const hasMealData = mealTypes.some(mealType => {\n        const time = row[`${mealType}_Time`];\n        const protein = row[`${mealType}_Protein`];\n        const carbs = row[`${mealType}_Carbohydrates`];\n        const vegetables = row[`${mealType}_Vegetables`];\n        const fruit = row[`${mealType}_Fruit`];\n        const alcohol = row[`${mealType}_Alcohol`];\n        const sugar = row[`${mealType}_Added_Sugar`];\n        \n        // Check if time exists and at least one food component is present\n        return time && (protein === '1' || carbs === '1' || vegetables === '1' || fruit === '1' || alcohol === '1' || sugar);\n      });\n      \n      return hasMealData;\n    });\n  }\n}\n\nexport default DataService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}