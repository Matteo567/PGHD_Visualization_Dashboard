{"ast":null,"code":"/*\n dataService.js - Patient Data Service\n \n This service handles all data operations for the health dashboard:\n - Fetches patient CSV data from the server\n - Parses and processes CSV data using PapaParse\n - Transforms raw data into structured health metrics\n - Provides data validation and error handling\n - Manages patient information, medications, and health tracking data\n - Supports all health metric types (glucose, BP, exercise, mood, pain, sleep, meals)\n \n Architecture:\n - Uses PapaParse library for CSV parsing\n - Implements service class pattern for data operations\n - Provides comprehensive error handling and validation\n - Supports multiple data formats and structures\n \n Data Processing:\n - CSV parsing with header validation\n - Data transformation and normalization\n - Type conversion and validation\n - Error recovery and fallback mechanisms\n \n Health Metrics Supported:\n - Blood glucose monitoring with meal context\n - Blood pressure tracking with risk categorization\n - Exercise activity tracking and categorization\n - Mood assessment and tracking\n - Pain reporting with anatomical mapping\n - Sleep quality and duration analysis\n - Nutritional intake and meal composition\n \n Error Handling:\n - Network error recovery\n - CSV parsing error handling\n - Data validation and sanitization\n - Graceful degradation for missing data\n \n Core service for data management and processing throughout the application.\n */\n\nimport Papa from 'papaparse';\n\n// Configuration for CSV parsing\nconst CSV_CONFIG = {\n  header: true,\n  skipEmptyLines: true,\n  transformHeader: header => header.trim(),\n  transform: value => value === null || value === void 0 ? void 0 : value.trim()\n};\n\n/*\n Fetches and parses CSV data for a specific patient\n \n - @param {string} patientId - The patient identifier\n - @returns {Promise<Array>} Parsed CSV data as array of objects\n - @throws {Error} If CSV fetch or parsing fails\n */\nconst fetchPatientCsvData = async patientId => {\n  try {\n    // Add cache busting to ensure fresh data\n    const response = await fetch(`/synthetic_patients/${patientId}.csv?v=${Date.now()}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV for ${patientId}: ${response.status} ${response.statusText}`);\n    }\n    const csvText = await response.text();\n    if (!csvText || csvText.trim().length === 0) {\n      throw new Error(`Empty CSV file for patient ${patientId}`);\n    }\n    const parsed = Papa.parse(csvText, CSV_CONFIG);\n    if (parsed.errors.length > 0) {\n      // Log parsing errors for debugging but don't throw (only in development)\n      if (process.env.NODE_ENV === 'development') {\n        console.error(`CSV parsing errors for ${patientId}:`, parsed.errors);\n      }\n    }\n    return parsed.data;\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error(`Error fetching or parsing CSV for ${patientId}:`, error);\n    }\n    throw error;\n  }\n};\n\n/*\n Service class for handling patient data operations\n Provides methods for fetching and processing patient health data from CSV files\n */\n/*\n| Retrieves and processes all data for a specific patient\n| \n| @param {string} patientId - The patient identifier\n| @returns {Promise<Object>} Processed patient data including all health metrics\n| @throws {Error} If patient data cannot be retrieved or processed\n| */\nexport async function getPatientData(patientId) {\n  if (!patientId) {\n    throw new Error('Patient ID is required');\n  }\n  try {\n    const patientRows = await fetchPatientCsvData(patientId);\n    if (!Array.isArray(patientRows) || patientRows.length === 0) {\n      throw new Error(`No data found for patient ${patientId}`);\n    }\n    return processPatientData(patientRows, patientId);\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error(`Error fetching patient data for ${patientId}:`, error);\n    }\n    throw error;\n  }\n}\n\n/**\n * Processes raw CSV data into structured patient information and health metrics\n * \n * - @param {Array} rows - Raw CSV data rows\n * - @param {string} patientId - The patient identifier\n * - @returns {Object} Structured patient data object\n * - @throws {Error} If data structure is invalid or processing fails\n */\nexport function processPatientData(rows, patientId) {\n  if (!Array.isArray(rows) || rows.length === 0) {\n    throw new Error(`Invalid data structure for patient ${patientId}`);\n  }\n  const firstRowData = rows[0];\n  if (!firstRowData) {\n    throw new Error(`No valid data rows found for patient ${patientId}`);\n  }\n  const patientInfo = {\n    patientId,\n    patientNumber: patientId,\n    name: firstRowData['Name'] || 'Not specified',\n    age: firstRowData['Age'] || 'Not specified',\n    gender: firstRowData['Gender'] || 'Not specified',\n    dataAvailable: 'May 2025'\n  };\n\n  // Process medications using the cleaner individual medication fields\n  const detailedMedications = [];\n\n  // Get medication data from the first row (should be consistent across all rows for a patient)\n  const medicationNamesStr = firstRowData['Medication_Names'] || '';\n  const medicationTypesStr = firstRowData['Medication_Types'] || '';\n  const medicationCategoriesStr = firstRowData['Medication_Categories'] || '';\n  const medicationDosagesStr = firstRowData['Medication_Dosages'] || '';\n\n  // Split the semicolon-separated strings into arrays\n  const medicationNames = medicationNamesStr ? medicationNamesStr.split('; ').filter(Boolean) : [];\n  const medicationTypes = medicationTypesStr ? medicationTypesStr.split('; ').filter(Boolean) : [];\n  const medicationCategories = medicationCategoriesStr ? medicationCategoriesStr.split('; ').filter(Boolean) : [];\n  const medicationDosages = medicationDosagesStr ? medicationDosagesStr.split('; ').filter(Boolean) : [];\n\n  // Process each medication\n  for (let i = 0; i < Math.max(medicationNames.length, medicationTypes.length, medicationCategories.length, medicationDosages.length); i++) {\n    const name = medicationNames[i] || '';\n    const type = medicationTypes[i] || '';\n    const category = medicationCategories[i] || '';\n    const dosage = medicationDosages[i] || '';\n    if (name && name.trim() && !name.includes('Dose not specified') && name.length < 100 &&\n    // Filter out extremely long medication names\n    !name.includes('Folic Acid Iron Magnesium Calcium Pain and Inflammation')) {\n      detailedMedications.push({\n        name: name.trim(),\n        schedule: dosage.trim(),\n        // Use dosage as schedule\n        category: '',\n        // Don't include category in visualization\n        dosage: ''\n      });\n    }\n  }\n\n  // Process conditions\n  const conditionsSet = new Set();\n  const conditionsRaw = [...new Set(rows.map(row => row['Chronic_Conditions'] || row['Conditions']).filter(Boolean))];\n  conditionsRaw.forEach(conditionString => {\n    conditionString.split(';').forEach(c => conditionsSet.add(c.trim()));\n  });\n\n  // Process all data types\n  const glucoseData = processGlucoseData(rows);\n  const bloodPressureData = processBloodPressureData(rows);\n  const exerciseData = processExerciseData(rows);\n  const moodData = processMoodData(rows);\n  const painData = processPainData(rows);\n  const sleepData = processSleepData(rows);\n  const mealData = processMealData(rows);\n  return {\n    patientInfo: {\n      ...patientInfo,\n      detailedMedications,\n      conditions: Array.from(conditionsSet)\n    },\n    glucoseData,\n    bloodPressureData,\n    exerciseData,\n    moodData,\n    painData,\n    mealData,\n    sleepData,\n    rawData: rows\n  };\n}\n\n// Helper functions for glucose data processing\nfunction parseTimeString(timeStr) {\n  const timeParts = timeStr.split(':');\n  return {\n    hours: parseInt(timeParts[0]),\n    minutes: parseInt(timeParts[1])\n  };\n}\nfunction createGlucoseReading(baseDate, value, timeStr, range, measurementType) {\n  const {\n    hours,\n    minutes\n  } = parseTimeString(timeStr);\n  const date = new Date(baseDate);\n  date.setHours(hours, minutes);\n  return {\n    date: date,\n    value: value,\n    range: range,\n    measurementType: measurementType\n  };\n}\nfunction processMultiColumnGlucose(row, baseDate) {\n  const readings = [];\n  for (let i = 1; i <= 4; i++) {\n    const value = parseFloat(row[`Glucose_${i}`]);\n    const timeStr = row[`Glucose_Time_${i}`];\n    if (value > 0 && timeStr) {\n      const reading = createGlucoseReading(baseDate, value, timeStr, row[`Glucose_Range_${i}`], row[`Glucose_Measurement_Type_${i}`]);\n      readings.push(reading);\n    }\n  }\n  return readings;\n}\nfunction processSingleColumnGlucose(row, baseDate) {\n  const value = parseFloat(row['Glucose_Level']);\n  if (value > 0) {\n    const randomHour = Math.floor(Math.random() * 24);\n    const randomMinute = Math.floor(Math.random() * 60);\n    const date = new Date(baseDate);\n    date.setHours(randomHour, randomMinute);\n    let range = 'in range';\n    if (value < 70) range = 'below range';else if (value > 180) range = 'above range';\n    return [{\n      date: date,\n      value: value,\n      range: range,\n      measurementType: 'Random'\n    }];\n  }\n  return [];\n}\n\n/**\n * Processes blood glucose data from CSV rows\n */\nexport function processGlucoseData(rows) {\n  const readings = [];\n  rows.forEach(row => {\n    const baseDate = new Date(row['Date']);\n    const hasMultiColumn = row['Glucose_1'] !== undefined;\n    if (hasMultiColumn) {\n      readings.push(...processMultiColumnGlucose(row, baseDate));\n    } else {\n      readings.push(...processSingleColumnGlucose(row, baseDate));\n    }\n  });\n  return readings;\n}\n\n/**\n * Processes blood pressure data from CSV rows\n */\nexport function processBloodPressureData(rows) {\n  const readings = [];\n  for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n    const row = rows[rowIndex];\n    const baseDate = new Date(row['Date']);\n    const hasMultiColumn = row['Systolic_1'] !== undefined;\n    if (hasMultiColumn) {\n      // Process up to 4 readings per day\n      for (let i = 1; i <= 4; i++) {\n        const systolic = parseInt(row[`Systolic_${i}`]);\n        const diastolic = parseInt(row[`Diastolic_${i}`]);\n        const timeStr = row[`BP_Time_${i}`];\n        if (systolic > 0 && diastolic > 0 && timeStr) {\n          const timeParts = timeStr.split(':');\n          const hours = parseInt(timeParts[0]);\n          const minutes = parseInt(timeParts[1]);\n          const date = new Date(baseDate);\n          date.setHours(hours, minutes);\n          readings.push({\n            date: date,\n            systolic: systolic,\n            diastolic: diastolic,\n            systolicType: row[`Systolic_Type_${i}`],\n            diastolicType: row[`Diastolic_Type_${i}`]\n          });\n        }\n      }\n    } else {\n      // Single reading format\n      const systolic = parseInt(row['Systolic_BP']);\n      const diastolic = parseInt(row['Diastolic_BP']);\n      if (systolic > 0 && diastolic > 0) {\n        const randomHour = Math.floor(Math.random() * 24);\n        const randomMinute = Math.floor(Math.random() * 60);\n        const date = new Date(baseDate);\n        date.setHours(randomHour, randomMinute);\n        let systolicType = 'normal';\n        let diastolicType = 'normal';\n        if (systolic >= 180 || diastolic >= 120) {\n          systolicType = 'hypertensive crisis';\n          diastolicType = 'hypertensive crisis';\n        } else if (systolic >= 140 || diastolic >= 90) {\n          systolicType = 'high';\n          diastolicType = 'high';\n        } else if (systolic >= 130 || diastolic >= 80) {\n          systolicType = 'elevated';\n          diastolicType = 'elevated';\n        }\n        readings.push({\n          date: date,\n          systolic: systolic,\n          diastolic: diastolic,\n          systolicType: systolicType,\n          diastolicType: diastolicType\n        });\n      }\n    }\n  }\n  return readings;\n}\n\n/**\n * Processes exercise data from CSV rows\n * \n * - @param {Array} rows - CSV data rows\n * - @returns {Array} Processed exercise data with activity types and durations\n */\nexport function processExerciseData(rows) {\n  const exerciseByDate = {};\n  rows.forEach(row => {\n    const date = new Date(row['Date']);\n    const dateKey = date.toDateString();\n    if (!exerciseByDate[dateKey]) {\n      exerciseByDate[dateKey] = {\n        date,\n        walking: 0,\n        swimming: 0,\n        running: 0,\n        biking: 0,\n        'muscle-strengthening': 0,\n        balance: 0,\n        other: 0,\n        totalMinutes: 0\n      };\n    }\n    const hasMultiColumn = row['Exercise_Type_1'] !== undefined;\n    if (hasMultiColumn) {\n      for (let i = 1; i <= 5; i++) {\n        var _row;\n        const type = (_row = row[`Exercise_Type_${i}`]) === null || _row === void 0 ? void 0 : _row.toLowerCase();\n        const minutes = parseFloat(row[`Exercise_Minutes_${i}`]);\n        if (type && minutes > 0) {\n          categorizeExercise(type, minutes, exerciseByDate[dateKey]);\n        }\n      }\n    } else {\n      var _row$Exercise_Type;\n      const type = (_row$Exercise_Type = row['Exercise_Type']) === null || _row$Exercise_Type === void 0 ? void 0 : _row$Exercise_Type.toLowerCase();\n      const minutes = parseFloat(row['Exercise_Minutes']);\n      if (type && minutes > 0) {\n        categorizeExercise(type, minutes, exerciseByDate[dateKey]);\n      }\n    }\n  });\n  return Object.values(exerciseByDate).filter(d => d.totalMinutes > 0);\n}\n\n/**\n * Categorizes exercise activities into predefined types\n * \n * - @param {string} type - Exercise type from CSV\n * - @param {number} minutes - Duration in minutes\n * - @param {Object} dayData - Daily exercise data object\n */\nexport function categorizeExercise(type, minutes, dayData) {\n  if (type.includes('walking')) dayData.walking += minutes;else if (type.includes('swimming')) dayData.swimming += minutes;else if (type.includes('running')) dayData.running += minutes;else if (type.includes('biking')) dayData.biking += minutes;else if (type.includes('muscle-strengthening') || type.includes('muscle strengthening') || type.includes('strength')) dayData['muscle-strengthening'] += minutes;else if (type.includes('balance')) dayData.balance += minutes;else dayData.other += minutes;\n  dayData.totalMinutes += minutes;\n}\n\n/**\n * Processes mood data from CSV rows\n */\nexport function processMoodData(rows) {\n  const moodData = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    if (row['Mood']) {\n      moodData.push({\n        date: new Date(row['Date']),\n        mood: row['Mood'],\n        category: row['Mood'] || 'neutral'\n      });\n    }\n  }\n  return moodData;\n}\n\n/**\n * Processes pain data from CSV rows\n */\nexport function processPainData(rows) {\n  const painData = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    if (row['Pain_Location'] && row['Pain_Level']) {\n      painData.push({\n        date: new Date(row['Date']),\n        location: row['Pain_Location'].toLowerCase(),\n        level: parseInt(row['Pain_Level'])\n      });\n    }\n  }\n  return painData;\n}\n\n/**\n * Processes sleep data from CSV rows\n */\nexport function processSleepData(rows) {\n  const sleepData = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    if (row['Sleep_Hours'] && row['Sleep_Quality']) {\n      sleepData.push({\n        date: new Date(row['Date']),\n        hours: parseFloat(row['Sleep_Hours']),\n        quality: row['Sleep_Quality'],\n        qualityCode: parseInt(row['Sleep_Quality_Code'])\n      });\n    }\n  }\n  return sleepData;\n}\n\n/**\n * Processes meal data from CSV rows\n */\nexport function processMealData(rows) {\n  const filteredRows = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const mealTypes = ['Breakfast', 'Lunch', 'Dinner', 'Late Night Snack'];\n    let hasMealData = false;\n\n    // Check each meal type\n    for (let j = 0; j < mealTypes.length; j++) {\n      const mealType = mealTypes[j];\n      const time = row[`${mealType}_Time`];\n      const protein = row[`${mealType}_Protein`];\n      const carbs = row[`${mealType}_Carbohydrates`];\n      const vegetables = row[`${mealType}_Vegetables`];\n      const fruit = row[`${mealType}_Fruit`];\n      const alcohol = row[`${mealType}_Alcohol`];\n      const sugar = row[`${mealType}_Added_Sugar`];\n\n      // Check if time exists and at least one food component is present\n      const hasFood = protein === 1 || protein === '1' || carbs === 1 || carbs === '1' || vegetables === 1 || vegetables === '1' || fruit === 1 || fruit === '1' || alcohol === 1 || alcohol === '1' || sugar && sugar !== '' && sugar !== 'NaN';\n      if (time && hasFood) {\n        hasMealData = true;\n        break;\n      }\n    }\n    if (hasMealData) {\n      filteredRows.push(row);\n    }\n  }\n  return filteredRows;\n}","map":{"version":3,"names":["Papa","CSV_CONFIG","header","skipEmptyLines","transformHeader","trim","transform","value","fetchPatientCsvData","patientId","response","fetch","Date","now","ok","Error","status","statusText","csvText","text","length","parsed","parse","errors","process","env","NODE_ENV","console","error","data","getPatientData","patientRows","Array","isArray","processPatientData","rows","firstRowData","patientInfo","patientNumber","name","age","gender","dataAvailable","detailedMedications","medicationNamesStr","medicationTypesStr","medicationCategoriesStr","medicationDosagesStr","medicationNames","split","filter","Boolean","medicationTypes","medicationCategories","medicationDosages","i","Math","max","type","category","dosage","includes","push","schedule","conditionsSet","Set","conditionsRaw","map","row","forEach","conditionString","c","add","glucoseData","processGlucoseData","bloodPressureData","processBloodPressureData","exerciseData","processExerciseData","moodData","processMoodData","painData","processPainData","sleepData","processSleepData","mealData","processMealData","conditions","from","rawData","parseTimeString","timeStr","timeParts","hours","parseInt","minutes","createGlucoseReading","baseDate","range","measurementType","date","setHours","processMultiColumnGlucose","readings","parseFloat","reading","processSingleColumnGlucose","randomHour","floor","random","randomMinute","hasMultiColumn","undefined","rowIndex","systolic","diastolic","systolicType","diastolicType","exerciseByDate","dateKey","toDateString","walking","swimming","running","biking","balance","other","totalMinutes","_row","toLowerCase","categorizeExercise","_row$Exercise_Type","Object","values","d","dayData","mood","location","level","quality","qualityCode","filteredRows","mealTypes","hasMealData","j","mealType","time","protein","carbs","vegetables","fruit","alcohol","sugar","hasFood"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/services/dataService.js"],"sourcesContent":["/*\n dataService.js - Patient Data Service\n \n This service handles all data operations for the health dashboard:\n - Fetches patient CSV data from the server\n - Parses and processes CSV data using PapaParse\n - Transforms raw data into structured health metrics\n - Provides data validation and error handling\n - Manages patient information, medications, and health tracking data\n - Supports all health metric types (glucose, BP, exercise, mood, pain, sleep, meals)\n \n Architecture:\n - Uses PapaParse library for CSV parsing\n - Implements service class pattern for data operations\n - Provides comprehensive error handling and validation\n - Supports multiple data formats and structures\n \n Data Processing:\n - CSV parsing with header validation\n - Data transformation and normalization\n - Type conversion and validation\n - Error recovery and fallback mechanisms\n \n Health Metrics Supported:\n - Blood glucose monitoring with meal context\n - Blood pressure tracking with risk categorization\n - Exercise activity tracking and categorization\n - Mood assessment and tracking\n - Pain reporting with anatomical mapping\n - Sleep quality and duration analysis\n - Nutritional intake and meal composition\n \n Error Handling:\n - Network error recovery\n - CSV parsing error handling\n - Data validation and sanitization\n - Graceful degradation for missing data\n \n Core service for data management and processing throughout the application.\n */\n\nimport Papa from 'papaparse';\n\n// Configuration for CSV parsing\nconst CSV_CONFIG = {\n  header: true,\n  skipEmptyLines: true,\n  transformHeader: (header) => header.trim(),\n  transform: (value) => value?.trim(),\n};\n\n/*\n Fetches and parses CSV data for a specific patient\n \n - @param {string} patientId - The patient identifier\n - @returns {Promise<Array>} Parsed CSV data as array of objects\n - @throws {Error} If CSV fetch or parsing fails\n */\nconst fetchPatientCsvData = async (patientId) => {\n  try {\n    // Add cache busting to ensure fresh data\n    const response = await fetch(`/synthetic_patients/${patientId}.csv?v=${Date.now()}`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV for ${patientId}: ${response.status} ${response.statusText}`);\n    }\n    \n    const csvText = await response.text();\n    \n    if (!csvText || csvText.trim().length === 0) {\n      throw new Error(`Empty CSV file for patient ${patientId}`);\n    }\n    \n    const parsed = Papa.parse(csvText, CSV_CONFIG);\n    \n    if (parsed.errors.length > 0) {\n      // Log parsing errors for debugging but don't throw (only in development)\n      if (process.env.NODE_ENV === 'development') {\n        console.error(`CSV parsing errors for ${patientId}:`, parsed.errors);\n      }\n    }\n    \n    return parsed.data;\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error(`Error fetching or parsing CSV for ${patientId}:`, error);\n    }\n    throw error;\n  }\n};\n\n/*\n Service class for handling patient data operations\n Provides methods for fetching and processing patient health data from CSV files\n */\n/*\n| Retrieves and processes all data for a specific patient\n| \n| @param {string} patientId - The patient identifier\n| @returns {Promise<Object>} Processed patient data including all health metrics\n| @throws {Error} If patient data cannot be retrieved or processed\n| */\nexport async function getPatientData(patientId) {\n  if (!patientId) {\n    throw new Error('Patient ID is required');\n  }\n\n  try {\n    const patientRows = await fetchPatientCsvData(patientId);\n\n    if (!Array.isArray(patientRows) || patientRows.length === 0) {\n      throw new Error(`No data found for patient ${patientId}`);\n    }\n\n    return processPatientData(patientRows, patientId);\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error(`Error fetching patient data for ${patientId}:`, error);\n    }\n    throw error;\n  }\n}\n\n/**\n * Processes raw CSV data into structured patient information and health metrics\n * \n * - @param {Array} rows - Raw CSV data rows\n * - @param {string} patientId - The patient identifier\n * - @returns {Object} Structured patient data object\n * - @throws {Error} If data structure is invalid or processing fails\n */\nexport function processPatientData(rows, patientId) {\n  if (!Array.isArray(rows) || rows.length === 0) {\n    throw new Error(`Invalid data structure for patient ${patientId}`);\n  }\n\n  const firstRowData = rows[0];\n  if (!firstRowData) {\n    throw new Error(`No valid data rows found for patient ${patientId}`);\n  }\n\n  const patientInfo = {\n    patientId,\n    patientNumber: patientId,\n    name: firstRowData['Name'] || 'Not specified',\n    age: firstRowData['Age'] || 'Not specified',\n    gender: firstRowData['Gender'] || 'Not specified',\n    dataAvailable: 'May 2025'\n  };\n\n  // Process medications using the cleaner individual medication fields\n  const detailedMedications = [];\n  \n  // Get medication data from the first row (should be consistent across all rows for a patient)\n  const medicationNamesStr = firstRowData['Medication_Names'] || '';\n  const medicationTypesStr = firstRowData['Medication_Types'] || '';\n  const medicationCategoriesStr = firstRowData['Medication_Categories'] || '';\n  const medicationDosagesStr = firstRowData['Medication_Dosages'] || '';\n  \n  // Split the semicolon-separated strings into arrays\n  const medicationNames = medicationNamesStr ? medicationNamesStr.split('; ').filter(Boolean) : [];\n  const medicationTypes = medicationTypesStr ? medicationTypesStr.split('; ').filter(Boolean) : [];\n  const medicationCategories = medicationCategoriesStr ? medicationCategoriesStr.split('; ').filter(Boolean) : [];\n  const medicationDosages = medicationDosagesStr ? medicationDosagesStr.split('; ').filter(Boolean) : [];\n  \n  // Process each medication\n  for (let i = 0; i < Math.max(medicationNames.length, medicationTypes.length, medicationCategories.length, medicationDosages.length); i++) {\n    const name = medicationNames[i] || '';\n    const type = medicationTypes[i] || '';\n    const category = medicationCategories[i] || '';\n    const dosage = medicationDosages[i] || '';\n    \n    if (name && name.trim() && \n        !name.includes('Dose not specified') && \n        name.length < 100 && // Filter out extremely long medication names\n        !name.includes('Folic Acid Iron Magnesium Calcium Pain and Inflammation')) {\n      detailedMedications.push({\n        name: name.trim(),\n        schedule: dosage.trim(), // Use dosage as schedule\n        category: '', // Don't include category in visualization\n        dosage: ''\n      });\n    }\n  }\n\n  // Process conditions\n  const conditionsSet = new Set();\n  const conditionsRaw = [...new Set(rows.map(row => row['Chronic_Conditions'] || row['Conditions']).filter(Boolean))];\n  conditionsRaw.forEach(conditionString => {\n    conditionString.split(';').forEach(c => conditionsSet.add(c.trim()));\n  });\n\n  // Process all data types\n  const glucoseData = processGlucoseData(rows);\n  const bloodPressureData = processBloodPressureData(rows);\n  const exerciseData = processExerciseData(rows);\n  const moodData = processMoodData(rows);\n  const painData = processPainData(rows);\n  const sleepData = processSleepData(rows);\n  const mealData = processMealData(rows);\n\n  return {\n    patientInfo: { \n      ...patientInfo, \n      detailedMedications, \n      conditions: Array.from(conditionsSet)\n    },\n    glucoseData,\n    bloodPressureData,\n    exerciseData,\n    moodData,\n    painData,\n    mealData,\n    sleepData,\n    rawData: rows\n  };\n}\n\n// Helper functions for glucose data processing\nfunction parseTimeString(timeStr) {\n  const timeParts = timeStr.split(':');\n  return {\n    hours: parseInt(timeParts[0]),\n    minutes: parseInt(timeParts[1])\n  };\n}\n\nfunction createGlucoseReading(baseDate, value, timeStr, range, measurementType) {\n  const { hours, minutes } = parseTimeString(timeStr);\n  const date = new Date(baseDate);\n  date.setHours(hours, minutes);\n  \n  return {\n    date: date,\n    value: value,\n    range: range,\n    measurementType: measurementType\n  };\n}\n\nfunction processMultiColumnGlucose(row, baseDate) {\n  const readings = [];\n  \n  for (let i = 1; i <= 4; i++) {\n    const value = parseFloat(row[`Glucose_${i}`]);\n    const timeStr = row[`Glucose_Time_${i}`];\n    \n    if (value > 0 && timeStr) {\n      const reading = createGlucoseReading(\n        baseDate,\n        value,\n        timeStr,\n        row[`Glucose_Range_${i}`],\n        row[`Glucose_Measurement_Type_${i}`]\n      );\n      readings.push(reading);\n    }\n  }\n  \n  return readings;\n}\n\nfunction processSingleColumnGlucose(row, baseDate) {\n  const value = parseFloat(row['Glucose_Level']);\n  if (value > 0) {\n    const randomHour = Math.floor(Math.random() * 24);\n    const randomMinute = Math.floor(Math.random() * 60);\n    const date = new Date(baseDate);\n    date.setHours(randomHour, randomMinute);\n    \n    let range = 'in range';\n    if (value < 70) range = 'below range';\n    else if (value > 180) range = 'above range';\n    \n    return [{\n      date: date,\n      value: value,\n      range: range,\n      measurementType: 'Random'\n    }];\n  }\n  return [];\n}\n\n/**\n * Processes blood glucose data from CSV rows\n */\nexport function processGlucoseData(rows) {\n  const readings = [];\n  \n  rows.forEach(row => {\n    const baseDate = new Date(row['Date']);\n    const hasMultiColumn = row['Glucose_1'] !== undefined;\n    \n    if (hasMultiColumn) {\n      readings.push(...processMultiColumnGlucose(row, baseDate));\n    } else {\n      readings.push(...processSingleColumnGlucose(row, baseDate));\n    }\n  });\n  \n  return readings;\n}\n\n/**\n * Processes blood pressure data from CSV rows\n */\nexport function processBloodPressureData(rows) {\n  const readings = [];\n    \n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      const row = rows[rowIndex];\n      const baseDate = new Date(row['Date']);\n      \n      const hasMultiColumn = row['Systolic_1'] !== undefined;\n      \n      if (hasMultiColumn) {\n        // Process up to 4 readings per day\n        for (let i = 1; i <= 4; i++) {\n          const systolic = parseInt(row[`Systolic_${i}`]);\n          const diastolic = parseInt(row[`Diastolic_${i}`]);\n          const timeStr = row[`BP_Time_${i}`];\n          \n          if (systolic > 0 && diastolic > 0 && timeStr) {\n            const timeParts = timeStr.split(':');\n            const hours = parseInt(timeParts[0]);\n            const minutes = parseInt(timeParts[1]);\n            \n            const date = new Date(baseDate);\n            date.setHours(hours, minutes);\n            \n            readings.push({ \n              date: date, \n              systolic: systolic, \n              diastolic: diastolic, \n              systolicType: row[`Systolic_Type_${i}`],\n              diastolicType: row[`Diastolic_Type_${i}`]\n            });\n          }\n        }\n      } else {\n        // Single reading format\n        const systolic = parseInt(row['Systolic_BP']);\n        const diastolic = parseInt(row['Diastolic_BP']);\n        \n        if (systolic > 0 && diastolic > 0) {\n          const randomHour = Math.floor(Math.random() * 24);\n          const randomMinute = Math.floor(Math.random() * 60);\n          const date = new Date(baseDate);\n          date.setHours(randomHour, randomMinute);\n          \n          let systolicType = 'normal';\n          let diastolicType = 'normal';\n          \n          if (systolic >= 180 || diastolic >= 120) {\n            systolicType = 'hypertensive crisis';\n            diastolicType = 'hypertensive crisis';\n          } else if (systolic >= 140 || diastolic >= 90) {\n            systolicType = 'high';\n            diastolicType = 'high';\n          } else if (systolic >= 130 || diastolic >= 80) {\n            systolicType = 'elevated';\n            diastolicType = 'elevated';\n          }\n          \n          readings.push({ \n            date: date, \n            systolic: systolic, \n            diastolic: diastolic, \n            systolicType: systolicType,\n            diastolicType: diastolicType\n          });\n        }\n      }\n    }\n  \n  return readings;\n}\n\n/**\n * Processes exercise data from CSV rows\n * \n * - @param {Array} rows - CSV data rows\n * - @returns {Array} Processed exercise data with activity types and durations\n */\nexport function processExerciseData(rows) {\n  const exerciseByDate = {};\n    \n    rows.forEach(row => {\n        const date = new Date(row['Date']);\n        const dateKey = date.toDateString();\n        if (!exerciseByDate[dateKey]) {\n            exerciseByDate[dateKey] = { date, walking: 0, swimming: 0, running: 0, biking: 0, 'muscle-strengthening': 0, balance: 0, other: 0, totalMinutes: 0 };\n        }\n        \n        const hasMultiColumn = row['Exercise_Type_1'] !== undefined;\n        \n        if (hasMultiColumn) {\n            for (let i = 1; i <= 5; i++) {\n                const type = row[`Exercise_Type_${i}`]?.toLowerCase();\n                const minutes = parseFloat(row[`Exercise_Minutes_${i}`]);\n                if (type && minutes > 0) {\n                    categorizeExercise(type, minutes, exerciseByDate[dateKey]);\n                }\n            }\n        } else {\n            const type = row['Exercise_Type']?.toLowerCase();\n            const minutes = parseFloat(row['Exercise_Minutes']);\n            if (type && minutes > 0) {\n                categorizeExercise(type, minutes, exerciseByDate[dateKey]);\n            }\n        }\n    });\n  \n  return Object.values(exerciseByDate).filter(d => d.totalMinutes > 0);\n}\n\n/**\n * Categorizes exercise activities into predefined types\n * \n * - @param {string} type - Exercise type from CSV\n * - @param {number} minutes - Duration in minutes\n * - @param {Object} dayData - Daily exercise data object\n */\nexport function categorizeExercise(type, minutes, dayData) {\n  if (type.includes('walking')) dayData.walking += minutes;\n    else if (type.includes('swimming')) dayData.swimming += minutes;\n    else if (type.includes('running')) dayData.running += minutes;\n    else if (type.includes('biking')) dayData.biking += minutes;\n    else if (type.includes('muscle-strengthening') || type.includes('muscle strengthening') || type.includes('strength')) dayData['muscle-strengthening'] += minutes;\n    else if (type.includes('balance')) dayData.balance += minutes;\n  else dayData.other += minutes;\n  dayData.totalMinutes += minutes;\n}\n\n/**\n * Processes mood data from CSV rows\n */\nexport function processMoodData(rows) {\n  const moodData = [];\n    \n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      if (row['Mood']) {\n        moodData.push({\n          date: new Date(row['Date']),\n          mood: row['Mood'],\n          category: row['Mood'] || 'neutral'\n        });\n      }\n    }\n  \n  return moodData;\n}\n\n/**\n * Processes pain data from CSV rows\n */\nexport function processPainData(rows) {\n  const painData = [];\n    \n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      if (row['Pain_Location'] && row['Pain_Level']) {\n        painData.push({\n          date: new Date(row['Date']),\n          location: row['Pain_Location'].toLowerCase(),\n          level: parseInt(row['Pain_Level'])\n        });\n      }\n    }\n  \n  return painData;\n}\n\n/**\n * Processes sleep data from CSV rows\n */\nexport function processSleepData(rows) {\n  const sleepData = [];\n    \n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      if (row['Sleep_Hours'] && row['Sleep_Quality']) {\n        sleepData.push({\n          date: new Date(row['Date']),\n          hours: parseFloat(row['Sleep_Hours']),\n          quality: row['Sleep_Quality'],\n          qualityCode: parseInt(row['Sleep_Quality_Code'])\n        });\n      }\n    }\n  \n  return sleepData;\n}\n\n/**\n * Processes meal data from CSV rows\n */\nexport function processMealData(rows) {\n  const filteredRows = [];\n    \n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      const mealTypes = ['Breakfast', 'Lunch', 'Dinner', 'Late Night Snack'];\n      let hasMealData = false;\n      \n      // Check each meal type\n      for (let j = 0; j < mealTypes.length; j++) {\n        const mealType = mealTypes[j];\n        const time = row[`${mealType}_Time`];\n        const protein = row[`${mealType}_Protein`];\n        const carbs = row[`${mealType}_Carbohydrates`];\n        const vegetables = row[`${mealType}_Vegetables`];\n        const fruit = row[`${mealType}_Fruit`];\n        const alcohol = row[`${mealType}_Alcohol`];\n        const sugar = row[`${mealType}_Added_Sugar`];\n        \n        // Check if time exists and at least one food component is present\n        const hasFood = protein === 1 || protein === '1' || \n                       carbs === 1 || carbs === '1' || \n                       vegetables === 1 || vegetables === '1' || \n                       fruit === 1 || fruit === '1' || \n                       alcohol === 1 || alcohol === '1' || \n                       (sugar && sugar !== '' && sugar !== 'NaN');\n        \n        if (time && hasFood) {\n          hasMealData = true;\n          break;\n        }\n      }\n      \n      if (hasMealData) {\n        filteredRows.push(row);\n      }\n    }\n  \n  return filteredRows;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}