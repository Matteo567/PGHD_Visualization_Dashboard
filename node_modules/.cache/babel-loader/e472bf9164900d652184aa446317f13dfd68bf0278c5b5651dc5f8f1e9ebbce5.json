{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExerciseChart.js\",\n  _s = $RefreshSig$();\n/**\r\n * ExerciseChart.js - Exercise Activity Tracking Visualization\r\n * \r\n * This component provides comprehensive exercise monitoring:\r\n * - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\r\n * - Duration tracking and weekly summaries\r\n * - Color-coded activity categorization\r\n * - Interactive tooltips with exercise details\r\n * - Responsive design with navigation controls\r\n * - Integration with patient data and chart navigation\r\n * \r\n * ARCHITECTURE:\r\n * - Uses custom SVG for stacked bar chart visualization\r\n * - Implements activity categorization system with emoji indicators\r\n * - Provides color-coded activity types for easy identification\r\n * - Supports responsive design with expandable views\r\n * - Implements time-based navigation and data filtering\r\n * \r\n * VISUALIZATION FEATURES:\r\n * - Stacked bar chart showing daily activity breakdown\r\n * - Color-coded activity types with emoji indicators\r\n * - Interactive tooltips with detailed exercise information\r\n * - Responsive design adapting to container size\r\n * - Dynamic Y-axis scaling based on data range\r\n * \r\n * ACTIVITY CATEGORIES:\r\n * - Walking: Low-impact cardiovascular exercise\r\n * - Swimming: Full-body cardiovascular workout\r\n * - Running: High-impact cardiovascular exercise\r\n * - Resistance/Weights: Strength training activities\r\n * - Biking: Low-impact cardiovascular exercise\r\n * - Balance/Stretching: Flexibility and balance training\r\n * - Other: Miscellaneous physical activities\r\n * \r\n * COMPONENT STRUCTURE:\r\n * - Chart Container: Main SVG container with responsive sizing\r\n * - Y-Axis: Duration scale with dynamic labeling\r\n * - X-Axis: Day-of-week labels with date information\r\n * - Data Bars: Stacked activity bars with color coding\r\n * - Legend: Activity type explanations with emojis\r\n * - Tooltip: Detailed exercise information on hover\r\n * \r\n * Essential for physical activity monitoring and fitness tracking.\r\n */\n\nimport React, { useState, useMemo, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport '../ChartStyles.css';\nimport './ExerciseChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseTypes = [{\n  key: 'walking',\n  label: 'Walking',\n  color: 'var(--chart-color-walking)',\n  emoji: '🚶'\n}, {\n  key: 'swimming',\n  label: 'Swimming',\n  color: 'var(--chart-color-swimming)',\n  emoji: '🏊‍♀️'\n}, {\n  key: 'running',\n  label: 'Running',\n  color: 'var(--chart-color-running)',\n  emoji: '🏃‍♂️'\n}, {\n  key: 'resistance/weights',\n  label: 'Resistance/Weights',\n  color: 'var(--chart-color-resistance)',\n  emoji: '🏋️'\n}, {\n  key: 'biking',\n  label: 'Biking',\n  color: 'var(--chart-color-biking)',\n  emoji: '🚴'\n}, {\n  key: 'balance/stretching',\n  label: 'Balance/Stretching',\n  color: 'var(--chart-color-balance)',\n  emoji: '🧘'\n}, {\n  key: 'other',\n  label: 'Other',\n  color: 'var(--chart-color-other)',\n  emoji: '➕'\n}];\nconst exerciseLegendItems = exerciseTypes.map(({\n  label,\n  color,\n  emoji\n}) => ({\n  label: `${emoji} ${label}`,\n  color\n}));\nconst ExerciseChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient',\n  navigation\n}) => {\n  _s();\n  var _exerciseTypes$find, _exerciseTypes$find2;\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId, 'exercise');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n  const config = createChartConfig('exercise', isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Get 3-month data\n  const {\n    start: startOfThreeMonths,\n    end: endOfThreeMonths\n  } = nav.getThreeMonthRange();\n  const threeMonthData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\n  });\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = {\n      walking: 0,\n      swimming: 0,\n      running: 0,\n      'resistance/weights': 0,\n      biking: 0,\n      'balance/stretching': 0,\n      other: 0,\n      totalMinutes: 0\n    };\n    return acc;\n  }, {});\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\n      groupedData[dayName].running += Number(item.running) || 0;\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      groupedData[dayName].biking += Number(item.biking) || 0;\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\n    }\n  });\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n  const generateYAxisLabels = max => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate summary statistics for physician view\n  const weekSummary = useMemo(() => {\n    if (!weekData.length) return null;\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\n\n    // Count days with exercise\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\n\n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    const mostCommonExercise = Object.entries(exerciseTypeTotals).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate exercise consistency (days with 30+ minutes)\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\n\n    // Calculate average session length\n    const totalSessions = weekData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\n    }).length;\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n    return {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      daysWithAdequateExercise,\n      totalSessions,\n      avgSessionLength\n    };\n  }, [weekData, groupedData]);\n\n  // Calculate 3-month summary statistics for physician view\n  const threeMonthSummary = useMemo(() => {\n    if (!threeMonthData.length) return null;\n\n    // Group 3-month data by day\n    const threeMonthGroupedData = {};\n    threeMonthData.forEach(item => {\n      if (!item.date) return;\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      if (!threeMonthGroupedData[dayName]) {\n        threeMonthGroupedData[dayName] = {\n          walking: 0,\n          swimming: 0,\n          running: 0,\n          'resistance/weights': 0,\n          biking: 0,\n          'balance/stretching': 0,\n          other: 0,\n          totalMinutes: 0\n        };\n      }\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\n      threeMonthGroupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\n      threeMonthGroupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName]['resistance/weights'] + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['balance/stretching'] + threeMonthGroupedData[dayName].other;\n    });\n    const totalMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n\n    // Calculate actual days in the 3-month period\n    const {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const avgMinutesPerDay = (totalMinutes / daysInThreeMonths).toFixed(0);\n\n    // Count days with exercise\n    const daysWithExercise = Object.values(threeMonthGroupedData).filter(day => day.totalMinutes > 0).length;\n\n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    const mostCommonExercise = Object.entries(exerciseTypeTotals).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate average session length\n    const totalSessions = threeMonthData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return threeMonthGroupedData[dayName] && threeMonthGroupedData[dayName].totalMinutes > 0;\n    }).length;\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n    return {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      totalSessions,\n      avgSessionLength\n    };\n  }, [threeMonthData]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exercise-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `exercise-chart-content ${isExpanded ? 'expanded' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chart-title\",\n        children: \"Activity Breakdown by Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"chart-subtitle\",\n        children: nav.getCurrentMonthYear()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"100%\",\n        viewBox: `0 0 ${config.width} ${config.height}`,\n        className: \"exercise-svg\",\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"y-axis\",\n          children: [yAxisLabels.map(value => {\n            const y = config.padding.top + chartHeight - value / maxDuration * chartHeight;\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              className: \"y-axis-grid-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                className: \"chart-grid-line-horizontal\",\n                x1: config.padding.left,\n                y1: y,\n                x2: config.width - config.padding.right,\n                y2: y\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: config.padding.left - 15,\n                y: y + 3,\n                fontSize: config.fontSize.yAxis,\n                textAnchor: \"end\",\n                fill: \"var(--chart-color-text-secondary)\",\n                className: \"chart-tick-label\",\n                children: value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 21\n              }, this)]\n            }, value, true, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 19\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: -(config.padding.top + chartHeight / 2),\n            y: config.padding.left / 2 - 5,\n            fontSize: config.fontSize.yAxisTitle,\n            textAnchor: \"middle\",\n            fill: \"var(--chart-color-text-primary)\",\n            transform: \"rotate(-90)\",\n            className: \"y-axis-title\",\n            children: \"Minutes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"x-axis\",\n          children: daysOfWeek.map((day, dayIndex) => {\n            const date = new Date(startOfWeek);\n            date.setDate(date.getDate() + dayIndex);\n            const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n            const dayData = groupedData[day];\n            const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n            const emojis = performedExercises.map(type => type.emoji).join(' ');\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              className: \"x-axis-label-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                className: \"chart-grid-line-vertical\",\n                x1: config.padding.left + dayIndex * config.dayWidth,\n                y1: config.padding.top,\n                x2: config.padding.left + dayIndex * config.dayWidth,\n                y2: config.height - config.padding.bottom\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: x,\n                y: config.height - config.padding.bottom + 15,\n                textAnchor: \"middle\",\n                fontSize: config.fontSize.dayLabel,\n                fill: \"var(--chart-color-text-primary)\",\n                className: \"x-axis-day-label\",\n                children: day\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: x,\n                y: config.height - config.padding.bottom + 30,\n                textAnchor: \"middle\",\n                fontSize: config.fontSize.dateLabel,\n                fill: \"var(--chart-color-text-secondary)\",\n                className: \"x-axis-date-label\",\n                children: date.getDate()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: x,\n                y: config.height - config.padding.bottom + 48,\n                textAnchor: \"middle\",\n                fontSize: config.fontSize.emoji,\n                children: emojis\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 21\n              }, this)]\n            }, dayIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"data-bars\",\n          children: daysOfWeek.map((day, dayIndex) => {\n            const dayData = groupedData[day];\n            const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n            let currentY = config.height - config.padding.bottom;\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              children: exerciseTypes.map(type => {\n                const minutes = Number(dayData[type.key]) || 0;\n                if (minutes <= 0) return null;\n                const segmentHeight = minutes / maxDuration * chartHeight;\n                const segmentY = currentY - segmentHeight;\n                const segment = /*#__PURE__*/_jsxDEV(\"g\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                    x: x - config.barWidth / 2,\n                    y: segmentY,\n                    width: config.barWidth,\n                    height: segmentHeight,\n                    fill: type.color,\n                    className: \"data-bar\",\n                    children: /*#__PURE__*/_jsxDEV(\"title\", {\n                      children: `${type.label}: ${Math.round(minutes)} min`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 311,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 27\n                  }, this), segmentHeight >= 12 && /*#__PURE__*/_jsxDEV(\"text\", {\n                    x: x,\n                    y: segmentY + segmentHeight / 2,\n                    textAnchor: \"middle\",\n                    fontSize: isExpanded ? 8 : 6,\n                    fill: \"black\",\n                    className: \"duration-label\",\n                    style: {\n                      fontWeight: 'bold'\n                    },\n                    children: Math.round(minutes)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 29\n                  }, this)]\n                }, type.key, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 25\n                }, this);\n                currentY = segmentY;\n                return segment;\n              })\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {\n      title: \"Exercise Type\",\n      items: exerciseLegendItems,\n      orientation: \"horizontal\",\n      size: \"medium\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 9\n    }, this), viewMode === 'physician' && weekSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Week Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Total Exercise:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.totalMinutes, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Daily Average:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.avgMinutesPerDay, \" minutes/day\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Exercise Days:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.daysWithExercise, \"/7 days\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [(_exerciseTypes$find = exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)) === null || _exerciseTypes$find === void 0 ? void 0 : _exerciseTypes$find.emoji, \" \", weekSummary.mostCommonExercise, \" (\", weekSummary.mostCommonExerciseMinutes, \" min)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Avg Session:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.avgSessionLength, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 13\n      }, this), threeMonthSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"3-Month Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Total Exercise:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.totalMinutes, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Daily Average:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.avgMinutesPerDay, \" minutes/day\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Exercise Days:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.daysWithExercise, \" days\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [(_exerciseTypes$find2 = exerciseTypes.find(t => t.key === threeMonthSummary.mostCommonExercise)) === null || _exerciseTypes$find2 === void 0 ? void 0 : _exerciseTypes$find2.emoji, \" \", threeMonthSummary.mostCommonExercise, \" (\", threeMonthSummary.mostCommonExerciseMinutes, \" min)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Avg Session:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.avgSessionLength, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 7\n  }, this);\n};\n_s(ExerciseChart, \"ac5YrYk2pknf1H/JwBFwesl444Y=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = ExerciseChart;\nexport default ExerciseChart;\nvar _c;\n$RefreshReg$(_c, \"ExerciseChart\");","map":{"version":3,"names":["React","useState","useMemo","useRef","usePatientData","useChartNavigation","Legend","createChartConfig","jsxDEV","_jsxDEV","exerciseTypes","key","label","color","emoji","exerciseLegendItems","map","ExerciseChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","_exerciseTypes$find","_exerciseTypes$find2","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","config","chartHeight","height","padding","top","bottom","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthData","daysOfWeek","groupedData","reduce","acc","day","walking","swimming","running","biking","other","totalMinutes","forEach","item","dayName","getDay","Number","maxVal","Math","max","Object","values","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","weekSummary","length","sum","avgMinutesPerDay","toFixed","daysWithExercise","exerciseTypeTotals","type","mostCommonExercise","entries","sort","a","b","daysWithAdequateExercise","totalSessions","avgSessionLength","mostCommonExerciseMinutes","threeMonthSummary","threeMonthGroupedData","daysInThreeMonths","formatDateRange","startStr","toLocaleDateString","month","endStr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getCurrentMonthYear","width","viewBox","value","y","x1","left","y1","x2","right","y2","x","fontSize","yAxis","textAnchor","fill","yAxisTitle","transform","dayIndex","setDate","getDate","dayWidth","dayData","performedExercises","emojis","join","dayLabel","dateLabel","currentY","minutes","segmentHeight","segmentY","segment","barWidth","round","style","fontWeight","title","items","orientation","size","find","t","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["/**\r\n * ExerciseChart.js - Exercise Activity Tracking Visualization\r\n * \r\n * This component provides comprehensive exercise monitoring:\r\n * - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\r\n * - Duration tracking and weekly summaries\r\n * - Color-coded activity categorization\r\n * - Interactive tooltips with exercise details\r\n * - Responsive design with navigation controls\r\n * - Integration with patient data and chart navigation\r\n * \r\n * ARCHITECTURE:\r\n * - Uses custom SVG for stacked bar chart visualization\r\n * - Implements activity categorization system with emoji indicators\r\n * - Provides color-coded activity types for easy identification\r\n * - Supports responsive design with expandable views\r\n * - Implements time-based navigation and data filtering\r\n * \r\n * VISUALIZATION FEATURES:\r\n * - Stacked bar chart showing daily activity breakdown\r\n * - Color-coded activity types with emoji indicators\r\n * - Interactive tooltips with detailed exercise information\r\n * - Responsive design adapting to container size\r\n * - Dynamic Y-axis scaling based on data range\r\n * \r\n * ACTIVITY CATEGORIES:\r\n * - Walking: Low-impact cardiovascular exercise\r\n * - Swimming: Full-body cardiovascular workout\r\n * - Running: High-impact cardiovascular exercise\r\n * - Resistance/Weights: Strength training activities\r\n * - Biking: Low-impact cardiovascular exercise\r\n * - Balance/Stretching: Flexibility and balance training\r\n * - Other: Miscellaneous physical activities\r\n * \r\n * COMPONENT STRUCTURE:\r\n * - Chart Container: Main SVG container with responsive sizing\r\n * - Y-Axis: Duration scale with dynamic labeling\r\n * - X-Axis: Day-of-week labels with date information\r\n * - Data Bars: Stacked activity bars with color coding\r\n * - Legend: Activity type explanations with emojis\r\n * - Tooltip: Detailed exercise information on hover\r\n * \r\n * Essential for physical activity monitoring and fitness tracking.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport '../ChartStyles.css';\r\nimport './ExerciseChart.css';\r\n\r\nconst exerciseTypes = [\r\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\r\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\r\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\r\n  { key: 'resistance/weights', label: 'Resistance/Weights', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\r\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\r\n  { key: 'balance/stretching', label: 'Balance/Stretching', color: 'var(--chart-color-balance)', emoji: '🧘' },\r\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\r\n];\r\n\r\nconst exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\r\n  label: `${emoji} ${label}`,\r\n  color,\r\n}));\r\n\r\n\r\n\r\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('exercise');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const config = createChartConfig('exercise', isExpanded);\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\r\n  });\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\r\n  });\r\n\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const groupedData = daysOfWeek.reduce((acc, day) => {\r\n    acc[day] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  weekData.forEach(item => {\r\n    if (!item.date) return;\r\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n    if (groupedData[dayName]) {\r\n      groupedData[dayName].walking += Number(item.walking) || 0;\r\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      groupedData[dayName].running += Number(item.running) || 0;\r\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      groupedData[dayName].biking += Number(item.biking) || 0;\r\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      groupedData[dayName].other += Number(item.other) || 0;\r\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\r\n    }\r\n  });\r\n\r\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\r\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\r\n\r\n  const generateYAxisLabels = (max) => {\r\n    if (max === 0) return [0];\r\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\r\n    const labels = [];\r\n    for (let i = 0; i <= max; i += step) {\r\n      labels.push(i);\r\n    }\r\n    return labels;\r\n  };\r\n\r\n  const yAxisLabels = generateYAxisLabels(maxDuration);\r\n\r\n  // Calculate summary statistics for physician view\r\n  const weekSummary = useMemo(() => {\r\n    if (!weekData.length) return null;\r\n\r\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\r\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\r\n    \r\n    // Count days with exercise\r\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\r\n    \r\n    // Find most common exercise type\r\n    const exerciseTypeTotals = {};\r\n    exerciseTypes.forEach(type => {\r\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\r\n    });\r\n    \r\n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n    \r\n    // Calculate exercise consistency (days with 30+ minutes)\r\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\r\n    \r\n    // Calculate average session length\r\n    const totalSessions = weekData.filter(item => {\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\r\n    }).length;\r\n    \r\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\r\n\r\n    return {\r\n      totalMinutes,\r\n      avgMinutesPerDay,\r\n      daysWithExercise,\r\n      mostCommonExercise: mostCommonExercise[0],\r\n      mostCommonExerciseMinutes: mostCommonExercise[1],\r\n      daysWithAdequateExercise,\r\n      totalSessions,\r\n      avgSessionLength\r\n    };\r\n  }, [weekData, groupedData]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = useMemo(() => {\r\n    if (!threeMonthData.length) return null;\r\n\r\n    // Group 3-month data by day\r\n    const threeMonthGroupedData = {};\r\n    threeMonthData.forEach(item => {\r\n      if (!item.date) return;\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      if (!threeMonthGroupedData[dayName]) {\r\n        threeMonthGroupedData[dayName] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n      }\r\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\r\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\r\n      threeMonthGroupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\r\n      threeMonthGroupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\r\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName]['resistance/weights'] + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['balance/stretching'] + threeMonthGroupedData[dayName].other;\r\n    });\r\n\r\n    const totalMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\r\n    \r\n    // Calculate actual days in the 3-month period\r\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\r\n    const avgMinutesPerDay = (totalMinutes / daysInThreeMonths).toFixed(0);\r\n    \r\n    // Count days with exercise\r\n    const daysWithExercise = Object.values(threeMonthGroupedData).filter(day => day.totalMinutes > 0).length;\r\n    \r\n    // Find most common exercise type\r\n    const exerciseTypeTotals = {};\r\n    exerciseTypes.forEach(type => {\r\n      exerciseTypeTotals[type.key] = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day[type.key], 0);\r\n    });\r\n    \r\n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n    \r\n    // Calculate average session length\r\n    const totalSessions = threeMonthData.filter(item => {\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      return threeMonthGroupedData[dayName] && threeMonthGroupedData[dayName].totalMinutes > 0;\r\n    }).length;\r\n    \r\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\r\n\r\n    return {\r\n      totalMinutes,\r\n      avgMinutesPerDay,\r\n      daysWithExercise,\r\n      mostCommonExercise: mostCommonExercise[0],\r\n      mostCommonExerciseMinutes: mostCommonExercise[1],\r\n      totalSessions,\r\n      avgSessionLength\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  return (\r\n      <div className=\"exercise-chart-container\">\r\n        <div className={`exercise-chart-content ${isExpanded ? 'expanded' : ''}`}>\r\n          <h3 className=\"chart-title\">Activity Breakdown by Type</h3>\r\n          <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n          <svg \r\n            width=\"100%\" \r\n            viewBox={`0 0 ${config.width} ${config.height}`}\r\n            className=\"exercise-svg\"\r\n          >\r\n            <g className=\"y-axis\">\r\n              {yAxisLabels.map(value => {\r\n                const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\r\n                return (\r\n                  <g key={value} className=\"y-axis-grid-group\">\r\n                    <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\r\n                    <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\r\n                  </g>\r\n                );\r\n              })}\r\n              <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\r\n            </g>\r\n\r\n            <g className=\"x-axis\">\r\n              {daysOfWeek.map((day, dayIndex) => {\r\n                const date = new Date(startOfWeek);\r\n                date.setDate(date.getDate() + dayIndex);\r\n                const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n\r\n                const dayData = groupedData[day];\r\n                const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\r\n                const emojis = performedExercises.map(type => type.emoji).join(' ');\r\n\r\n                return (\r\n                  <g key={dayIndex} className=\"x-axis-label-group\">\r\n                    <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\r\n                    <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\r\n                    <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\r\n                    <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n\r\n            <g className=\"data-bars\">\r\n              {daysOfWeek.map((day, dayIndex) => {\r\n                const dayData = groupedData[day];\r\n                const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n                let currentY = config.height - config.padding.bottom;\r\n\r\n                return (\r\n                  <g key={day}>\r\n                    {exerciseTypes.map(type => {\r\n                      const minutes = Number(dayData[type.key]) || 0;\r\n                      if (minutes <= 0) return null;\r\n\r\n                      const segmentHeight = (minutes / maxDuration) * chartHeight;\r\n                      const segmentY = currentY - segmentHeight;\r\n\r\n                      const segment = (\r\n                        <g key={type.key}>\r\n                          <rect\r\n                            x={x - config.barWidth / 2}\r\n                            y={segmentY}\r\n                            width={config.barWidth}\r\n                            height={segmentHeight}\r\n                            fill={type.color}\r\n                            className=\"data-bar\"\r\n                          >\r\n                            <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\r\n                          </rect>\r\n                          {/* Duration label inside the segment */}\r\n                          {segmentHeight >= 12 && (\r\n                            <text\r\n                              x={x}\r\n                              y={segmentY + segmentHeight / 2}\r\n                              textAnchor=\"middle\"\r\n                              fontSize={isExpanded ? 8 : 6}\r\n                              fill=\"black\"\r\n                              className=\"duration-label\"\r\n                              style={{ \r\n                                fontWeight: 'bold'\r\n                              }}\r\n                            >\r\n                              {Math.round(minutes)}\r\n                            </text>\r\n                          )}\r\n                        </g>\r\n                      );\r\n\r\n                      currentY = segmentY;\r\n                      return segment;\r\n                    })}\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n          </svg>\r\n        </div>\r\n        \r\n        <Legend \r\n          title=\"Exercise Type\" \r\n          items={exerciseLegendItems} \r\n          orientation=\"horizontal\" \r\n          size=\"medium\" \r\n        />\r\n\r\n        {/* Show summary for physician view only */}\r\n        {viewMode === 'physician' && weekSummary && (\r\n          <div className=\"summary-container\">\r\n            <div className=\"chart-summary\">\r\n              <h4>Week Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Total Exercise:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.totalMinutes} minutes\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Daily Average:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.avgMinutesPerDay} minutes/day\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Exercise Days:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.daysWithExercise}/7 days\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Most Common:</span>\r\n                  <span className=\"stat-value\">\r\n                    {exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)?.emoji} {weekSummary.mostCommonExercise} ({weekSummary.mostCommonExerciseMinutes} min)\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Avg Session:</span>\r\n                  <span className=\"stat-value\">\r\n                    {weekSummary.avgSessionLength} minutes\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {threeMonthSummary && (\r\n              <div className=\"chart-summary\">\r\n                <h4>3-Month Summary</h4>\r\n                <div className=\"summary-stats\">\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Total Exercise:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.totalMinutes} minutes\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Daily Average:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.avgMinutesPerDay} minutes/day\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Exercise Days:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.daysWithExercise} days\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Most Common:</span>\r\n                    <span className=\"stat-value\">\r\n                      {exerciseTypes.find(t => t.key === threeMonthSummary.mostCommonExercise)?.emoji} {threeMonthSummary.mostCommonExercise} ({threeMonthSummary.mostCommonExerciseMinutes} min)\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Avg Session:</span>\r\n                    <span className=\"stat-value\">\r\n                      {threeMonthSummary.avgSessionLength} minutes\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ExerciseChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}