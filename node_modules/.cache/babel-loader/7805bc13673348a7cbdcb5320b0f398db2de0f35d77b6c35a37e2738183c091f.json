{"ast":null,"code":"/*\r\n PhysicianDashboard.js - Physician View Dashboard Component\r\n \r\n This component renders the physician-focused dashboard view with clinical overview\r\n optimized for healthcare providers, patient information with medical context,\r\n chart expansion capabilities, and support for clinical notes and observations.\r\n \r\n Architecture:\r\n - Designed for physicians to monitor multiple health metrics simultaneously\r\n - Provides clinical summaries and statistical analysis\r\n - Implements professional medical interface design\r\n - Handles patient selection and data validation\r\n \r\n Custom Hooks Used:\r\n - usePatientData: Manages patient data fetching and caching\r\n - useVisualizations: Handles visualization configuration and availability\r\n - useVisualizationHelpers: Provides chart expansion and rendering utilities\r\n - useChartNavigation: Manages time-based navigation for each chart type\r\n \r\n Component Structure:\r\n - Physician header with clinical context\r\n - PatientInfoCard: Displays patient demographics and medical information\r\n - DashboardGrid: Renders the chart grid with clinical summaries\r\n - Individual chart components with physician-specific features\r\n \r\n State Management:\r\n - Manages selected patient state independently from parent\r\n - Uses custom hooks for centralized state management\r\n - Handles chart expansion state through useVisualizationHelpers\r\n - Manages navigation state for each chart type independently\r\n \r\n Clinical Features:\r\n - Summary statistics for each health metric\r\n - Trend analysis and pattern recognition\r\n - Professional medical interface design\r\n - Comprehensive data visualization for clinical decision making\r\n */import React,{useState}from'react';import usePatientData from'./hooks/usePatientData';import useVisualizations from'./hooks/useVisualizations';import useVisualizationHelpers from'./hooks/useVisualizationHelpers';import useChartNavigation from'./hooks/useChartNavigation';import PatientInfoCard from'./components/PatientInfoCard';import DashboardGrid from'./components/DashboardGrid';import Placeholder from'./components/ui/Placeholder';import'./PhysicianDashboard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PhysicianDashboard=_ref=>{let{patientId:initialPatientId}=_ref;const[selectedPatientId,setSelectedPatientId]=useState(initialPatientId||'');const{data,loading,error}=usePatientData(selectedPatientId);// Update selected patient if prop changes\nReact.useEffect(()=>{if(initialPatientId&&initialPatientId!==selectedPatientId){setSelectedPatientId(initialPatientId);}},[initialPatientId,selectedPatientId]);const{allVisualizations,availableVisualizations,selectedVisualizations,handleVisualizationChange}=useVisualizations('physician',data);const{expandedItem,handleExpand,renderVisualization}=useVisualizationHelpers(selectedPatientId,allVisualizations,selectedVisualizations);// Create universal navigation for each chart type\nconst glucoseNavigation=useChartNavigation('glucose');const bloodPressureNavigation=useChartNavigation('bloodPressure');const exerciseNavigation=useChartNavigation('exercise');const sleepNavigation=useChartNavigation('sleep');const painNavigation=useChartNavigation('pain');const moodNavigation=useChartNavigation('mood');const mealContentsNavigation=useChartNavigation('mealContents');const chartNavigation={glucose:glucoseNavigation,bloodPressure:bloodPressureNavigation,exercise:exerciseNavigation,sleep:sleepNavigation,pain:painNavigation,mood:moodNavigation,mealContents:mealContentsNavigation};// Override renderVisualization to set correct viewMode and handle no patient case\nconst renderVisualizationWithMode=(visualizationType,windowId)=>{if(!selectedPatientId){return/*#__PURE__*/_jsx(Placeholder,{message:\"Please select a patient to view data.\",type:\"select-patient\"});}const viz=allVisualizations[visualizationType];if(!viz)return/*#__PURE__*/_jsx(Placeholder,{message:\"Invalid visualization\",type:\"error\"});const Component=viz.component;const isExpanded=expandedItem===windowId;const navigation=chartNavigation[visualizationType];return/*#__PURE__*/_jsx(Component,{patientId:selectedPatientId,viewMode:\"physician\",isExpanded:isExpanded,onExpand:()=>handleExpand(windowId),navigation:navigation});};const patientInfo=data===null||data===void 0?void 0:data.patientInfo;return/*#__PURE__*/_jsxs(\"div\",{className:\"physician-dashboard\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"physician-header\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Physician Dashboard\"})}),selectedPatientId&&/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-content\",children:[/*#__PURE__*/_jsx(PatientInfoCard,{patientInfo:patientInfo,loading:loading,error:error,variant:\"physician\",className:\"patient-info-card-physician\"}),/*#__PURE__*/_jsx(DashboardGrid,{viewMode:\"physician\",selectedVisualizations:selectedVisualizations,availableVisualizations:availableVisualizations,allVisualizations:allVisualizations,onVisualizationChange:handleVisualizationChange,onExpand:handleExpand,expandedItem:expandedItem,renderVisualization:renderVisualizationWithMode,chartNavigation:chartNavigation,disabled:Object.keys(availableVisualizations).length===0,placeholderText:\"No data available for this patient.\"})]})]});};export default PhysicianDashboard;","map":{"version":3,"names":["React","useState","usePatientData","useVisualizations","useVisualizationHelpers","useChartNavigation","PatientInfoCard","DashboardGrid","Placeholder","jsx","_jsx","jsxs","_jsxs","PhysicianDashboard","_ref","patientId","initialPatientId","selectedPatientId","setSelectedPatientId","data","loading","error","useEffect","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedItem","handleExpand","renderVisualization","glucoseNavigation","bloodPressureNavigation","exerciseNavigation","sleepNavigation","painNavigation","moodNavigation","mealContentsNavigation","chartNavigation","glucose","bloodPressure","exercise","sleep","pain","mood","mealContents","renderVisualizationWithMode","visualizationType","windowId","message","type","viz","Component","component","isExpanded","navigation","viewMode","onExpand","patientInfo","className","children","variant","onVisualizationChange","disabled","Object","keys","length","placeholderText"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/Health_data_dashboard-MCC_project_checkpoint/src/PhysicianDashboard.js"],"sourcesContent":["/*\r\n PhysicianDashboard.js - Physician View Dashboard Component\r\n \r\n This component renders the physician-focused dashboard view with clinical overview\r\n optimized for healthcare providers, patient information with medical context,\r\n chart expansion capabilities, and support for clinical notes and observations.\r\n \r\n Architecture:\r\n - Designed for physicians to monitor multiple health metrics simultaneously\r\n - Provides clinical summaries and statistical analysis\r\n - Implements professional medical interface design\r\n - Handles patient selection and data validation\r\n \r\n Custom Hooks Used:\r\n - usePatientData: Manages patient data fetching and caching\r\n - useVisualizations: Handles visualization configuration and availability\r\n - useVisualizationHelpers: Provides chart expansion and rendering utilities\r\n - useChartNavigation: Manages time-based navigation for each chart type\r\n \r\n Component Structure:\r\n - Physician header with clinical context\r\n - PatientInfoCard: Displays patient demographics and medical information\r\n - DashboardGrid: Renders the chart grid with clinical summaries\r\n - Individual chart components with physician-specific features\r\n \r\n State Management:\r\n - Manages selected patient state independently from parent\r\n - Uses custom hooks for centralized state management\r\n - Handles chart expansion state through useVisualizationHelpers\r\n - Manages navigation state for each chart type independently\r\n \r\n Clinical Features:\r\n - Summary statistics for each health metric\r\n - Trend analysis and pattern recognition\r\n - Professional medical interface design\r\n - Comprehensive data visualization for clinical decision making\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport usePatientData from './hooks/usePatientData';\r\nimport useVisualizations from './hooks/useVisualizations';\r\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\r\nimport useChartNavigation from './hooks/useChartNavigation';\r\nimport PatientInfoCard from './components/PatientInfoCard';\r\nimport DashboardGrid from './components/DashboardGrid';\r\nimport Placeholder from './components/ui/Placeholder';\r\nimport './PhysicianDashboard.css';\r\n\r\nconst PhysicianDashboard = ({ patientId: initialPatientId }) => {\r\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\r\n  const { data, loading, error } = usePatientData(selectedPatientId);\r\n  \r\n  // Update selected patient if prop changes\r\n  React.useEffect(() => {\r\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\r\n      setSelectedPatientId(initialPatientId);\r\n    }\r\n  }, [initialPatientId, selectedPatientId]);\r\n\r\n  const { \r\n    allVisualizations, \r\n    availableVisualizations, \r\n    selectedVisualizations, \r\n    handleVisualizationChange \r\n  } = useVisualizations('physician', data);\r\n\r\n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\r\n    selectedPatientId, \r\n    allVisualizations, \r\n    selectedVisualizations\r\n  );\r\n\r\n  // Create universal navigation for each chart type\r\n  const glucoseNavigation = useChartNavigation('glucose');\r\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\r\n  const exerciseNavigation = useChartNavigation('exercise');\r\n  const sleepNavigation = useChartNavigation('sleep');\r\n  const painNavigation = useChartNavigation('pain');\r\n  const moodNavigation = useChartNavigation('mood');\r\n  const mealContentsNavigation = useChartNavigation('mealContents');\r\n\r\n  const chartNavigation = {\r\n    glucose: glucoseNavigation,\r\n    bloodPressure: bloodPressureNavigation,\r\n    exercise: exerciseNavigation,\r\n    sleep: sleepNavigation,\r\n    pain: painNavigation,\r\n    mood: moodNavigation,\r\n    mealContents: mealContentsNavigation\r\n  };\r\n\r\n  // Override renderVisualization to set correct viewMode and handle no patient case\r\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\r\n    if (!selectedPatientId) {\r\n      return <Placeholder message=\"Please select a patient to view data.\" type=\"select-patient\" />;\r\n    }\r\n    \r\n    const viz = allVisualizations[visualizationType];\r\n    if (!viz) return <Placeholder message=\"Invalid visualization\" type=\"error\" />;\r\n\r\n    const Component = viz.component;\r\n    const isExpanded = expandedItem === windowId;\r\n    const navigation = chartNavigation[visualizationType];\r\n    \r\n    return <Component \r\n      patientId={selectedPatientId} \r\n      viewMode=\"physician\"\r\n      isExpanded={isExpanded}\r\n      onExpand={() => handleExpand(windowId)}\r\n      navigation={navigation}\r\n    />;\r\n  };\r\n\r\n  const patientInfo = data?.patientInfo;\r\n\r\n  return (\r\n    <div className=\"physician-dashboard\">\r\n      <div className=\"physician-header\">\r\n        <h1>Physician Dashboard</h1>\r\n      </div>\r\n\r\n      {selectedPatientId && (\r\n        <div className=\"dashboard-content\">\r\n          <PatientInfoCard \r\n            patientInfo={patientInfo}\r\n            loading={loading}\r\n            error={error}\r\n            variant=\"physician\"\r\n            className=\"patient-info-card-physician\"\r\n          />\r\n\r\n          <DashboardGrid\r\n            viewMode=\"physician\"\r\n            selectedVisualizations={selectedVisualizations}\r\n            availableVisualizations={availableVisualizations}\r\n            allVisualizations={allVisualizations}\r\n            onVisualizationChange={handleVisualizationChange}\r\n            onExpand={handleExpand}\r\n            expandedItem={expandedItem}\r\n            renderVisualization={renderVisualizationWithMode}\r\n            chartNavigation={chartNavigation}\r\n            disabled={Object.keys(availableVisualizations).length === 0}\r\n            placeholderText=\"No data available for this patient.\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhysicianDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}