{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExerciseChart.js\",\n  _s = $RefreshSig$();\n/**\r\n * ExerciseChart.js - Exercise Activity Tracking Visualization\r\n * \r\n * This component provides comprehensive exercise monitoring:\r\n * - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\r\n * - Duration tracking and weekly summaries\r\n * - Color-coded activity categorization\r\n * - Interactive tooltips with exercise details\r\n * - Navigation controls for time periods\r\n * - Integration with patient data and chart navigation\r\n * \r\n * Architecture:\r\n * - Uses custom SVG for stacked bar chart visualization\r\n * - Implements activity categorization system with emoji indicators\r\n * - Provides color-coded activity types for easy identification\r\n * - Supports expandable views\r\n * - Implements time-based navigation and data filtering\r\n * \r\n * Visualization Features:\r\n * - Stacked bar chart showing daily activity breakdown\r\n * - Color-coded activity types with emoji indicators\r\n * - Interactive tooltips with detailed exercise information\r\n * - Design adapting to container size\r\n * - Dynamic Y-axis scaling based on data range\r\n * \r\n * Activity Categories:\r\n * - Walking: Low-impact cardiovascular exercise\r\n * - Swimming: Full-body cardiovascular workout\r\n * - Running: High-impact cardiovascular exercise\r\n * - Resistance/Weights: Strength training activities\r\n * - Biking: Low-impact cardiovascular exercise\r\n * - Balance/Stretching: Flexibility and balance training\r\n * - Other: Miscellaneous physical activities\r\n * \r\n * Component Structure:\r\n * - Chart Container: Main SVG container with sizing\r\n * - Y-Axis: Duration scale with dynamic labeling\r\n * - X-Axis: Day-of-week labels with date information\r\n * - Data Bars: Stacked activity bars with color coding\r\n * - Legend: Activity type explanations with emojis\r\n * - Tooltip: Detailed exercise information on hover\r\n * \r\n * Essential for physical activity monitoring and fitness tracking.\r\n */\n\nimport React, { useState, useMemo, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport InfoBox from '../InfoBox';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport './ExerciseChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseTypes = [{\n  key: 'walking',\n  label: 'Walking',\n  color: 'var(--chart-color-walking)',\n  emoji: '🚶'\n}, {\n  key: 'swimming',\n  label: 'Swimming',\n  color: 'var(--chart-color-swimming)',\n  emoji: '🏊‍♀️'\n}, {\n  key: 'running',\n  label: 'Running',\n  color: 'var(--chart-color-running)',\n  emoji: '🏃‍♂️'\n}, {\n  key: 'resistance/weights',\n  label: 'Resistance/Weights',\n  color: 'var(--chart-color-resistance)',\n  emoji: '🏋️'\n}, {\n  key: 'biking',\n  label: 'Biking',\n  color: 'var(--chart-color-biking)',\n  emoji: '🚴'\n}, {\n  key: 'balance/stretching',\n  label: 'Balance/Stretching',\n  color: 'var(--chart-color-balance)',\n  emoji: '🧘'\n}, {\n  key: 'other',\n  label: 'Other',\n  color: 'var(--chart-color-other)',\n  emoji: '➕'\n}];\n\n// Exercise goals for physician view\nconst EXERCISE_GOALS = {\n  aerobic: {\n    target: 150,\n    // minutes per week\n    label: 'Aerobic Activity',\n    color: '#1f78b4',\n    description: '150 minutes/week'\n  },\n  strength: {\n    target: 2,\n    // sessions per week (minimum 10 minutes each)\n    label: 'Strength Training',\n    color: '#e31a1c',\n    description: '2 sessions/week (10+ min each)'\n  },\n  flexibility: {\n    target: 1,\n    // session per week\n    label: 'Flexibility/Balance',\n    color: '#33a02c',\n    description: '1 session/week'\n  }\n};\nconst ExerciseChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient',\n  navigation\n}) => {\n  _s();\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId, 'exercise');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n  const config = createChartConfig('exercise', isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Get 3-month data\n  const {\n    start: startOfThreeMonths,\n    end: endOfThreeMonths\n  } = nav.getThreeMonthRange();\n  const threeMonthData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\n  });\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = {\n      walking: 0,\n      swimming: 0,\n      running: 0,\n      'resistance/weights': 0,\n      biking: 0,\n      'balance/stretching': 0,\n      other: 0,\n      totalMinutes: 0\n    };\n    return acc;\n  }, {});\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\n      groupedData[dayName].running += Number(item.running) || 0;\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      groupedData[dayName].biking += Number(item.biking) || 0;\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\n    }\n  });\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n  const generateYAxisLabels = max => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate exercise progress for physician view\n  const exerciseProgress = useMemo(() => {\n    if (!weekData.length) return null;\n\n    // Calculate aerobic activity (walking, swimming, running, biking)\n    const aerobicMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.walking + day.swimming + day.running + day.biking, 0);\n\n    // Calculate strength training sessions (resistance/weights with 10+ minutes)\n    const strengthSessions = Object.values(groupedData).filter(day => day['resistance/weights'] >= 10).length;\n\n    // Calculate flexibility/balance sessions\n    const flexibilitySessions = Object.values(groupedData).filter(day => day['balance/stretching'] > 0).length;\n    return {\n      aerobic: {\n        current: aerobicMinutes,\n        target: EXERCISE_GOALS.aerobic.target,\n        percentage: Math.min(100, aerobicMinutes / EXERCISE_GOALS.aerobic.target * 100)\n      },\n      strength: {\n        current: strengthSessions,\n        target: EXERCISE_GOALS.strength.target,\n        percentage: Math.min(100, strengthSessions / EXERCISE_GOALS.strength.target * 100)\n      },\n      flexibility: {\n        current: flexibilitySessions,\n        target: EXERCISE_GOALS.flexibility.target,\n        percentage: Math.min(100, flexibilitySessions / EXERCISE_GOALS.flexibility.target * 100)\n      }\n    };\n  }, [weekData, groupedData]);\n\n  // Calculate 3-month exercise progress\n  const threeMonthProgress = useMemo(() => {\n    if (!threeMonthData.length) return null;\n\n    // Group 3-month data by day\n    const threeMonthGroupedData = {};\n    threeMonthData.forEach(item => {\n      if (!item.date) return;\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      if (!threeMonthGroupedData[dayName]) {\n        threeMonthGroupedData[dayName] = {\n          walking: 0,\n          swimming: 0,\n          running: 0,\n          'resistance/weights': 0,\n          biking: 0,\n          'balance/stretching': 0,\n          other: 0,\n          totalMinutes: 0\n        };\n      }\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\n      threeMonthGroupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\n      threeMonthGroupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName]['resistance/weights'] + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['balance/stretching'] + threeMonthGroupedData[dayName].other;\n    });\n\n    // Calculate actual weeks in the 3-month period\n    const {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const weeksInThreeMonths = daysInThreeMonths / 7;\n\n    // Calculate aerobic activity\n    const aerobicMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.walking + day.swimming + day.running + day.biking, 0);\n    const avgAerobicPerWeek = aerobicMinutes / weeksInThreeMonths;\n\n    // Calculate strength training sessions\n    const strengthSessions = Object.values(threeMonthGroupedData).filter(day => day['resistance/weights'] >= 10).length;\n    const avgStrengthPerWeek = strengthSessions / weeksInThreeMonths;\n\n    // Calculate flexibility/balance sessions\n    const flexibilitySessions = Object.values(threeMonthGroupedData).filter(day => day['balance/stretching'] > 0).length;\n    const avgFlexibilityPerWeek = flexibilitySessions / weeksInThreeMonths;\n    return {\n      aerobic: {\n        current: avgAerobicPerWeek,\n        target: EXERCISE_GOALS.aerobic.target,\n        percentage: Math.min(100, avgAerobicPerWeek / EXERCISE_GOALS.aerobic.target * 100)\n      },\n      strength: {\n        current: avgStrengthPerWeek,\n        target: EXERCISE_GOALS.strength.target,\n        percentage: Math.min(100, avgStrengthPerWeek / EXERCISE_GOALS.strength.target * 100)\n      },\n      flexibility: {\n        current: avgFlexibilityPerWeek,\n        target: EXERCISE_GOALS.flexibility.target,\n        percentage: Math.min(100, avgFlexibilityPerWeek / EXERCISE_GOALS.flexibility.target * 100)\n      }\n    };\n  }, [threeMonthData]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n\n  // Render physician view with exercise progress bars\n  if (viewMode === 'physician') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `exercise-chart-container ${isExpanded ? 'expanded' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chart-title\",\n        children: \"Exercise Goals Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"chart-subtitle\",\n        children: nav.getCurrentMonthYear()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), exerciseProgress && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-progress-container\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          viewBox: `0 0 ${config.width} ${config.height}`,\n          className: \"exercise-progress-svg\",\n          children: /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"progress-bars\",\n            children: Object.entries(exerciseProgress).map(([key, progress], index) => {\n              const barWidth = 120;\n              const barHeight = 20;\n              const barSpacing = 40;\n              const startX = config.padding.left + 50;\n              const startY = config.padding.top + 50 + index * barSpacing;\n              const goal = EXERCISE_GOALS[key];\n              const percentage = Math.min(100, progress.percentage);\n              return /*#__PURE__*/_jsxDEV(\"g\", {\n                className: \"progress-bar-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                  x: startX,\n                  y: startY,\n                  width: barWidth,\n                  height: barHeight,\n                  fill: \"#e0e0e0\",\n                  rx: \"10\",\n                  ry: \"10\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n                  x: startX,\n                  y: startY,\n                  width: percentage / 100 * barWidth,\n                  height: barHeight,\n                  fill: goal.color,\n                  rx: \"10\",\n                  ry: \"10\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: startX - 10,\n                  y: startY + barHeight / 2 + 5,\n                  textAnchor: \"end\",\n                  fontSize: \"12\",\n                  fill: \"var(--chart-color-text-primary)\",\n                  className: \"progress-label\",\n                  children: goal.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: startX + barWidth + 10,\n                  y: startY + barHeight / 2 + 5,\n                  textAnchor: \"start\",\n                  fontSize: \"12\",\n                  fill: \"var(--chart-color-text-primary)\",\n                  className: \"progress-percentage\",\n                  children: [Math.round(percentage), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: startX,\n                  y: startY + barHeight + 15,\n                  textAnchor: \"start\",\n                  fontSize: \"10\",\n                  fill: \"var(--chart-color-text-secondary)\",\n                  className: \"progress-details\",\n                  children: key === 'aerobic' ? `${Math.round(progress.current)}/${progress.target} min` : key === 'strength' ? `${Math.round(progress.current)}/${progress.target} sessions` : `${Math.round(progress.current)}/${progress.target} sessions`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 23\n                }, this)]\n              }, key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), exerciseProgress && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Week Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Aerobic Activity:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [Math.round(exerciseProgress.aerobic.current), \"/\", exerciseProgress.aerobic.target, \" minutes\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Strength Training:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [Math.round(exerciseProgress.strength.current), \"/\", exerciseProgress.strength.target, \" sessions\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Flexibility/Balance:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [Math.round(exerciseProgress.flexibility.current), \"/\", exerciseProgress.flexibility.target, \" sessions\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this), threeMonthProgress && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"3-Month Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Aerobic Activity:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [Math.round(threeMonthProgress.aerobic.current), \"/\", threeMonthProgress.aerobic.target, \" min/week\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Strength Training:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [Math.round(threeMonthProgress.strength.current), \"/\", threeMonthProgress.strength.target, \" sessions/week\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Flexibility/Balance:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [Math.round(threeMonthProgress.flexibility.current), \"/\", threeMonthProgress.flexibility.target, \" sessions/week\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Original patient view with stacked bar chart\n  const exerciseLegendItems = exerciseTypes.map(({\n    label,\n    color,\n    emoji\n  }) => ({\n    label: `${emoji} ${label}`,\n    color\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `exercise-chart-container ${isExpanded ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Activity Breakdown by Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"chart-subtitle\",\n      children: nav.getCurrentMonthYear()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      viewBox: `0 0 ${config.width} ${config.height}`,\n      className: \"exercise-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"y-axis\",\n        children: [yAxisLabels.map(value => {\n          const y = config.padding.top + chartHeight - value / maxDuration * chartHeight;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"y-axis-grid-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              className: \"chart-grid-line-horizontal\",\n              x1: config.padding.left,\n              y1: y,\n              x2: config.width - config.padding.right,\n              y2: y\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: config.padding.left - 15,\n              y: y + 3,\n              fontSize: config.fontSize.yAxis,\n              textAnchor: \"end\",\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"chart-tick-label\",\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 19\n            }, this)]\n          }, value, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: -(config.padding.top + chartHeight / 2),\n          y: config.padding.left / 2 - 5,\n          fontSize: config.fontSize.yAxisTitle,\n          textAnchor: \"middle\",\n          fill: \"var(--chart-color-text-primary)\",\n          transform: \"rotate(-90)\",\n          className: \"y-axis-title\",\n          children: \"Minutes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\",\n        children: daysOfWeek.map((day, dayIndex) => {\n          const date = new Date(startOfWeek);\n          date.setDate(date.getDate() + dayIndex);\n          const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n          const dayData = groupedData[day];\n          const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n          const emojis = performedExercises.map(type => type.emoji).join(' ');\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"x-axis-label-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              className: \"chart-grid-line-vertical\",\n              x1: config.padding.left + dayIndex * config.dayWidth,\n              y1: config.padding.top,\n              x2: config.padding.left + dayIndex * config.dayWidth,\n              y2: config.height - config.padding.bottom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 15,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.dayLabel,\n              fill: \"var(--chart-color-text-primary)\",\n              className: \"x-axis-day-label\",\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 30,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.dateLabel,\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"x-axis-date-label\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 48,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.emoji,\n              children: emojis\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 19\n            }, this)]\n          }, dayIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"data-bars\",\n        children: daysOfWeek.map((day, dayIndex) => {\n          const dayData = groupedData[day];\n          const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n          let currentY = config.height - config.padding.bottom;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: exerciseTypes.map(type => {\n              const minutes = Number(dayData[type.key]) || 0;\n              if (minutes <= 0) return null;\n              const segmentHeight = minutes / maxDuration * chartHeight;\n              const segmentY = currentY - segmentHeight;\n              const segment = /*#__PURE__*/_jsxDEV(\"g\", {\n                children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                  x: x - config.barWidth / 2,\n                  y: segmentY,\n                  width: config.barWidth,\n                  height: segmentHeight,\n                  fill: type.color,\n                  className: \"data-bar\",\n                  children: /*#__PURE__*/_jsxDEV(\"title\", {\n                    children: `${type.label}: ${Math.round(minutes)} min`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 481,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 473,\n                  columnNumber: 25\n                }, this), segmentHeight >= 12 && /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: x,\n                  y: segmentY + segmentHeight / 2,\n                  textAnchor: \"middle\",\n                  fontSize: isExpanded ? 8 : 6,\n                  fill: \"black\",\n                  className: \"duration-label\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: Math.round(minutes)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 27\n                }, this)]\n              }, type.key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 23\n              }, this);\n              currentY = segmentY;\n              return segment;\n            })\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {\n      title: \"Exercise Type\",\n      items: exerciseLegendItems,\n      orientation: \"horizontal\",\n      size: \"medium\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 7\n  }, this);\n};\n_s(ExerciseChart, \"gERe3LoXulZy8fjWNx0G0xFALWc=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = ExerciseChart;\nexport default ExerciseChart;\nvar _c;\n$RefreshReg$(_c, \"ExerciseChart\");","map":{"version":3,"names":["React","useState","useMemo","useRef","usePatientData","useChartNavigation","Legend","InfoBox","createChartConfig","jsxDEV","_jsxDEV","exerciseTypes","key","label","color","emoji","EXERCISE_GOALS","aerobic","target","description","strength","flexibility","ExerciseChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","config","chartHeight","height","padding","top","bottom","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthData","daysOfWeek","groupedData","reduce","acc","day","walking","swimming","running","biking","other","totalMinutes","forEach","item","dayName","getDay","Number","maxVal","Math","max","Object","values","map","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","exerciseProgress","length","aerobicMinutes","sum","strengthSessions","flexibilitySessions","current","percentage","min","threeMonthProgress","threeMonthGroupedData","daysInThreeMonths","weeksInThreeMonths","avgAerobicPerWeek","avgStrengthPerWeek","avgFlexibilityPerWeek","formatDateRange","startStr","toLocaleDateString","month","endStr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getCurrentMonthYear","width","viewBox","entries","progress","index","barWidth","barHeight","barSpacing","startX","left","startY","goal","x","y","fill","rx","ry","textAnchor","fontSize","round","exerciseLegendItems","value","x1","y1","x2","right","y2","yAxis","yAxisTitle","transform","dayIndex","setDate","getDate","dayWidth","dayData","performedExercises","type","emojis","join","dayLabel","dateLabel","currentY","minutes","segmentHeight","segmentY","segment","style","fontWeight","title","items","orientation","size","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["/**\r\n * ExerciseChart.js - Exercise Activity Tracking Visualization\r\n * \r\n * This component provides comprehensive exercise monitoring:\r\n * - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\r\n * - Duration tracking and weekly summaries\r\n * - Color-coded activity categorization\r\n * - Interactive tooltips with exercise details\r\n * - Navigation controls for time periods\r\n * - Integration with patient data and chart navigation\r\n * \r\n * Architecture:\r\n * - Uses custom SVG for stacked bar chart visualization\r\n * - Implements activity categorization system with emoji indicators\r\n * - Provides color-coded activity types for easy identification\r\n * - Supports expandable views\r\n * - Implements time-based navigation and data filtering\r\n * \r\n * Visualization Features:\r\n * - Stacked bar chart showing daily activity breakdown\r\n * - Color-coded activity types with emoji indicators\r\n * - Interactive tooltips with detailed exercise information\r\n * - Design adapting to container size\r\n * - Dynamic Y-axis scaling based on data range\r\n * \r\n * Activity Categories:\r\n * - Walking: Low-impact cardiovascular exercise\r\n * - Swimming: Full-body cardiovascular workout\r\n * - Running: High-impact cardiovascular exercise\r\n * - Resistance/Weights: Strength training activities\r\n * - Biking: Low-impact cardiovascular exercise\r\n * - Balance/Stretching: Flexibility and balance training\r\n * - Other: Miscellaneous physical activities\r\n * \r\n * Component Structure:\r\n * - Chart Container: Main SVG container with sizing\r\n * - Y-Axis: Duration scale with dynamic labeling\r\n * - X-Axis: Day-of-week labels with date information\r\n * - Data Bars: Stacked activity bars with color coding\r\n * - Legend: Activity type explanations with emojis\r\n * - Tooltip: Detailed exercise information on hover\r\n * \r\n * Essential for physical activity monitoring and fitness tracking.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport InfoBox from '../InfoBox';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport './ExerciseChart.css';\r\n\r\nconst exerciseTypes = [\r\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\r\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\r\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\r\n  { key: 'resistance/weights', label: 'Resistance/Weights', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\r\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\r\n  { key: 'balance/stretching', label: 'Balance/Stretching', color: 'var(--chart-color-balance)', emoji: '🧘' },\r\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\r\n];\r\n\r\n// Exercise goals for physician view\r\nconst EXERCISE_GOALS = {\r\n  aerobic: {\r\n    target: 150, // minutes per week\r\n    label: 'Aerobic Activity',\r\n    color: '#1f78b4',\r\n    description: '150 minutes/week'\r\n  },\r\n  strength: {\r\n    target: 2, // sessions per week (minimum 10 minutes each)\r\n    label: 'Strength Training',\r\n    color: '#e31a1c',\r\n    description: '2 sessions/week (10+ min each)'\r\n  },\r\n  flexibility: {\r\n    target: 1, // session per week\r\n    label: 'Flexibility/Balance',\r\n    color: '#33a02c',\r\n    description: '1 session/week'\r\n  }\r\n};\r\n\r\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('exercise');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const config = createChartConfig('exercise', isExpanded);\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\r\n  });\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\r\n  });\r\n\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const groupedData = daysOfWeek.reduce((acc, day) => {\r\n    acc[day] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  weekData.forEach(item => {\r\n    if (!item.date) return;\r\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n    if (groupedData[dayName]) {\r\n      groupedData[dayName].walking += Number(item.walking) || 0;\r\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      groupedData[dayName].running += Number(item.running) || 0;\r\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      groupedData[dayName].biking += Number(item.biking) || 0;\r\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      groupedData[dayName].other += Number(item.other) || 0;\r\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\r\n    }\r\n  });\r\n\r\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\r\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\r\n\r\n  const generateYAxisLabels = (max) => {\r\n    if (max === 0) return [0];\r\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\r\n    const labels = [];\r\n    for (let i = 0; i <= max; i += step) {\r\n      labels.push(i);\r\n    }\r\n    return labels;\r\n  };\r\n\r\n  const yAxisLabels = generateYAxisLabels(maxDuration);\r\n\r\n  // Calculate exercise progress for physician view\r\n  const exerciseProgress = useMemo(() => {\r\n    if (!weekData.length) return null;\r\n\r\n    // Calculate aerobic activity (walking, swimming, running, biking)\r\n    const aerobicMinutes = Object.values(groupedData).reduce((sum, day) => \r\n      sum + day.walking + day.swimming + day.running + day.biking, 0\r\n    );\r\n\r\n    // Calculate strength training sessions (resistance/weights with 10+ minutes)\r\n    const strengthSessions = Object.values(groupedData).filter(day => \r\n      day['resistance/weights'] >= 10\r\n    ).length;\r\n\r\n    // Calculate flexibility/balance sessions\r\n    const flexibilitySessions = Object.values(groupedData).filter(day => \r\n      day['balance/stretching'] > 0\r\n    ).length;\r\n\r\n    return {\r\n      aerobic: {\r\n        current: aerobicMinutes,\r\n        target: EXERCISE_GOALS.aerobic.target,\r\n        percentage: Math.min(100, (aerobicMinutes / EXERCISE_GOALS.aerobic.target) * 100)\r\n      },\r\n      strength: {\r\n        current: strengthSessions,\r\n        target: EXERCISE_GOALS.strength.target,\r\n        percentage: Math.min(100, (strengthSessions / EXERCISE_GOALS.strength.target) * 100)\r\n      },\r\n      flexibility: {\r\n        current: flexibilitySessions,\r\n        target: EXERCISE_GOALS.flexibility.target,\r\n        percentage: Math.min(100, (flexibilitySessions / EXERCISE_GOALS.flexibility.target) * 100)\r\n      }\r\n    };\r\n  }, [weekData, groupedData]);\r\n\r\n  // Calculate 3-month exercise progress\r\n  const threeMonthProgress = useMemo(() => {\r\n    if (!threeMonthData.length) return null;\r\n\r\n    // Group 3-month data by day\r\n    const threeMonthGroupedData = {};\r\n    threeMonthData.forEach(item => {\r\n      if (!item.date) return;\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      if (!threeMonthGroupedData[dayName]) {\r\n        threeMonthGroupedData[dayName] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n      }\r\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\r\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\r\n      threeMonthGroupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\r\n      threeMonthGroupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\r\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName]['resistance/weights'] + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['balance/stretching'] + threeMonthGroupedData[dayName].other;\r\n    });\r\n\r\n    // Calculate actual weeks in the 3-month period\r\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\r\n    const weeksInThreeMonths = daysInThreeMonths / 7;\r\n\r\n    // Calculate aerobic activity\r\n    const aerobicMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => \r\n      sum + day.walking + day.swimming + day.running + day.biking, 0\r\n    );\r\n    const avgAerobicPerWeek = aerobicMinutes / weeksInThreeMonths;\r\n\r\n    // Calculate strength training sessions\r\n    const strengthSessions = Object.values(threeMonthGroupedData).filter(day => \r\n      day['resistance/weights'] >= 10\r\n    ).length;\r\n    const avgStrengthPerWeek = strengthSessions / weeksInThreeMonths;\r\n\r\n    // Calculate flexibility/balance sessions\r\n    const flexibilitySessions = Object.values(threeMonthGroupedData).filter(day => \r\n      day['balance/stretching'] > 0\r\n    ).length;\r\n    const avgFlexibilityPerWeek = flexibilitySessions / weeksInThreeMonths;\r\n\r\n    return {\r\n      aerobic: {\r\n        current: avgAerobicPerWeek,\r\n        target: EXERCISE_GOALS.aerobic.target,\r\n        percentage: Math.min(100, (avgAerobicPerWeek / EXERCISE_GOALS.aerobic.target) * 100)\r\n      },\r\n      strength: {\r\n        current: avgStrengthPerWeek,\r\n        target: EXERCISE_GOALS.strength.target,\r\n        percentage: Math.min(100, (avgStrengthPerWeek / EXERCISE_GOALS.strength.target) * 100)\r\n      },\r\n      flexibility: {\r\n        current: avgFlexibilityPerWeek,\r\n        target: EXERCISE_GOALS.flexibility.target,\r\n        percentage: Math.min(100, (avgFlexibilityPerWeek / EXERCISE_GOALS.flexibility.target) * 100)\r\n      }\r\n    };\r\n  }, [threeMonthData]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  // Render physician view with exercise progress bars\r\n  if (viewMode === 'physician') {\r\n    return (\r\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\r\n        <h3 className=\"chart-title\">Exercise Goals Progress</h3>\r\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n        \r\n        {exerciseProgress && (\r\n          <div className=\"exercise-progress-container\">\r\n            <svg \r\n              width=\"100%\" \r\n              viewBox={`0 0 ${config.width} ${config.height}`}\r\n              className=\"exercise-progress-svg\"\r\n            >\r\n              {/* Background bars */}\r\n              <g className=\"progress-bars\">\r\n                {Object.entries(exerciseProgress).map(([key, progress], index) => {\r\n                  const barWidth = 120;\r\n                  const barHeight = 20;\r\n                  const barSpacing = 40;\r\n                  const startX = config.padding.left + 50;\r\n                  const startY = config.padding.top + 50 + (index * barSpacing);\r\n                  \r\n                  const goal = EXERCISE_GOALS[key];\r\n                  const percentage = Math.min(100, progress.percentage);\r\n                  \r\n                  return (\r\n                    <g key={key} className=\"progress-bar-group\">\r\n                      {/* Background bar */}\r\n                      <rect\r\n                        x={startX}\r\n                        y={startY}\r\n                        width={barWidth}\r\n                        height={barHeight}\r\n                        fill=\"#e0e0e0\"\r\n                        rx=\"10\"\r\n                        ry=\"10\"\r\n                      />\r\n                      {/* Progress bar */}\r\n                      <rect\r\n                        x={startX}\r\n                        y={startY}\r\n                        width={(percentage / 100) * barWidth}\r\n                        height={barHeight}\r\n                        fill={goal.color}\r\n                        rx=\"10\"\r\n                        ry=\"10\"\r\n                      />\r\n                      {/* Label */}\r\n                      <text\r\n                        x={startX - 10}\r\n                        y={startY + barHeight / 2 + 5}\r\n                        textAnchor=\"end\"\r\n                        fontSize=\"12\"\r\n                        fill=\"var(--chart-color-text-primary)\"\r\n                        className=\"progress-label\"\r\n                      >\r\n                        {goal.label}\r\n                      </text>\r\n                      {/* Percentage text */}\r\n                      <text\r\n                        x={startX + barWidth + 10}\r\n                        y={startY + barHeight / 2 + 5}\r\n                        textAnchor=\"start\"\r\n                        fontSize=\"12\"\r\n                        fill=\"var(--chart-color-text-primary)\"\r\n                        className=\"progress-percentage\"\r\n                      >\r\n                        {Math.round(percentage)}%\r\n                      </text>\r\n                      {/* Current/Target text */}\r\n                      <text\r\n                        x={startX}\r\n                        y={startY + barHeight + 15}\r\n                        textAnchor=\"start\"\r\n                        fontSize=\"10\"\r\n                        fill=\"var(--chart-color-text-secondary)\"\r\n                        className=\"progress-details\"\r\n                      >\r\n                        {key === 'aerobic' ? `${Math.round(progress.current)}/${progress.target} min` :\r\n                         key === 'strength' ? `${Math.round(progress.current)}/${progress.target} sessions` :\r\n                         `${Math.round(progress.current)}/${progress.target} sessions`}\r\n                      </text>\r\n                    </g>\r\n                  );\r\n                })}\r\n              </g>\r\n            </svg>\r\n          </div>\r\n        )}\r\n\r\n        {/* Show summary for physician view */}\r\n        {exerciseProgress && (\r\n          <div className=\"summary-container\">\r\n            <div className=\"chart-summary\">\r\n              <h4>Week Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Aerobic Activity:</span>\r\n                  <span className=\"stat-value\">\r\n                    {Math.round(exerciseProgress.aerobic.current)}/{exerciseProgress.aerobic.target} minutes\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Strength Training:</span>\r\n                  <span className=\"stat-value\">\r\n                    {Math.round(exerciseProgress.strength.current)}/{exerciseProgress.strength.target} sessions\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Flexibility/Balance:</span>\r\n                  <span className=\"stat-value\">\r\n                    {Math.round(exerciseProgress.flexibility.current)}/{exerciseProgress.flexibility.target} sessions\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {threeMonthProgress && (\r\n              <div className=\"chart-summary\">\r\n                <h4>3-Month Average</h4>\r\n                <div className=\"summary-stats\">\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Aerobic Activity:</span>\r\n                    <span className=\"stat-value\">\r\n                      {Math.round(threeMonthProgress.aerobic.current)}/{threeMonthProgress.aerobic.target} min/week\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Strength Training:</span>\r\n                    <span className=\"stat-value\">\r\n                      {Math.round(threeMonthProgress.strength.current)}/{threeMonthProgress.strength.target} sessions/week\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Flexibility/Balance:</span>\r\n                    <span className=\"stat-value\">\r\n                      {Math.round(threeMonthProgress.flexibility.current)}/{threeMonthProgress.flexibility.target} sessions/week\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Original patient view with stacked bar chart\r\n  const exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\r\n    label: `${emoji} ${label}`,\r\n    color,\r\n  }));\r\n\r\n  return (\r\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\r\n        <h3 className=\"chart-title\">Activity Breakdown by Type</h3>\r\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n        \r\n        <svg \r\n          width=\"100%\" \r\n          viewBox={`0 0 ${config.width} ${config.height}`}\r\n          className=\"exercise-svg\"\r\n        >\r\n          <g className=\"y-axis\">\r\n            {yAxisLabels.map(value => {\r\n              const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\r\n              return (\r\n                <g key={value} className=\"y-axis-grid-group\">\r\n                  <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\r\n                  <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\r\n                </g>\r\n              );\r\n            })}\r\n            <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\r\n          </g>\r\n\r\n          <g className=\"x-axis\">\r\n            {daysOfWeek.map((day, dayIndex) => {\r\n              const date = new Date(startOfWeek);\r\n              date.setDate(date.getDate() + dayIndex);\r\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n\r\n              const dayData = groupedData[day];\r\n              const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\r\n              const emojis = performedExercises.map(type => type.emoji).join(' ');\r\n\r\n              return (\r\n                <g key={dayIndex} className=\"x-axis-label-group\">\r\n                  <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\r\n                  <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\r\n                  <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\r\n                  <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n\r\n          <g className=\"data-bars\">\r\n            {daysOfWeek.map((day, dayIndex) => {\r\n              const dayData = groupedData[day];\r\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n              let currentY = config.height - config.padding.bottom;\r\n\r\n              return (\r\n                <g key={day}>\r\n                  {exerciseTypes.map(type => {\r\n                    const minutes = Number(dayData[type.key]) || 0;\r\n                    if (minutes <= 0) return null;\r\n\r\n                    const segmentHeight = (minutes / maxDuration) * chartHeight;\r\n                    const segmentY = currentY - segmentHeight;\r\n\r\n                    const segment = (\r\n                      <g key={type.key}>\r\n                        <rect\r\n                          x={x - config.barWidth / 2}\r\n                          y={segmentY}\r\n                          width={config.barWidth}\r\n                          height={segmentHeight}\r\n                          fill={type.color}\r\n                          className=\"data-bar\"\r\n                        >\r\n                          <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\r\n                        </rect>\r\n                        {/* Duration label inside the segment */}\r\n                        {segmentHeight >= 12 && (\r\n                          <text\r\n                            x={x}\r\n                            y={segmentY + segmentHeight / 2}\r\n                            textAnchor=\"middle\"\r\n                            fontSize={isExpanded ? 8 : 6}\r\n                            fill=\"black\"\r\n                            className=\"duration-label\"\r\n                            style={{ \r\n                              fontWeight: 'bold'\r\n                            }}\r\n                          >\r\n                            {Math.round(minutes)}\r\n                          </text>\r\n                        )}\r\n                      </g>\r\n                    );\r\n\r\n                    currentY = segmentY;\r\n                    return segment;\r\n                  })}\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n        </svg>\r\n        \r\n        <Legend \r\n          title=\"Exercise Type\" \r\n          items={exerciseLegendItems} \r\n          orientation=\"horizontal\" \r\n          size=\"medium\" \r\n        />\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ExerciseChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}