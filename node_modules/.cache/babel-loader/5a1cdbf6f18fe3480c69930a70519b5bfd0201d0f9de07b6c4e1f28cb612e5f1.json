{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\Health_data_dashboard-MCC_project_checkpoint\\\\src\\\\PhysicianDashboard.js\",\n  _s = $RefreshSig$();\n/*\r\n PhysicianDashboard.js - Physician View Dashboard Component\r\n \r\n This component renders the physician-focused dashboard view with clinical overview\r\n optimized for healthcare providers, patient information with medical context,\r\n chart expansion capabilities, and support for clinical notes and observations.\r\n \r\n Architecture:\r\n - Designed for physicians to monitor multiple health metrics simultaneously\r\n - Provides clinical summaries and statistical analysis\r\n - Implements professional medical interface design\r\n - Handles patient selection and data validation\r\n \r\n Custom Hooks Used:\r\n - usePatientData: Manages patient data fetching and caching\r\n - useVisualizations: Handles visualization configuration and availability\r\n - useVisualizationHelpers: Provides chart expansion and rendering utilities\r\n - useChartNavigation: Manages time-based navigation for each chart type\r\n \r\n Component Structure:\r\n - Physician header with clinical context\r\n - PatientInfoCard: Displays patient demographics and medical information\r\n - DashboardGrid: Renders the chart grid with clinical summaries\r\n - Individual chart components with physician-specific features\r\n \r\n State Management:\r\n - Manages selected patient state independently from parent\r\n - Uses custom hooks for centralized state management\r\n - Handles chart expansion state through useVisualizationHelpers\r\n - Manages navigation state for each chart type independently\r\n \r\n Clinical Features:\r\n - Summary statistics for each health metric\r\n - Trend analysis and pattern recognition\r\n - Professional medical interface design\r\n - Comprehensive data visualization for clinical decision making\r\n */\n\nimport React, { useState } from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport Placeholder from './components/ui/Placeholder';\nimport './PhysicianDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhysicianDashboard = ({\n  patientId: initialPatientId\n}) => {\n  _s();\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\n  const {\n    data,\n    loading,\n    error\n  } = usePatientData(selectedPatientId);\n\n  // Update selected patient if prop changes\n  React.useEffect(() => {\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\n      setSelectedPatientId(initialPatientId);\n    }\n  }, [initialPatientId, selectedPatientId]);\n  const {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange\n  } = useVisualizations('physician', data);\n  const {\n    expandedItem,\n    handleExpand,\n    renderVisualization\n  } = useVisualizationHelpers(selectedPatientId, allVisualizations, selectedVisualizations);\n\n  // Create universal navigation for each chart type\n  const glucoseNavigation = useChartNavigation('glucose');\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\n  const exerciseNavigation = useChartNavigation('exercise');\n  const sleepNavigation = useChartNavigation('sleep');\n  const painNavigation = useChartNavigation('pain');\n  const moodNavigation = useChartNavigation('mood');\n  const mealContentsNavigation = useChartNavigation('mealContents');\n  const chartNavigation = {\n    glucose: glucoseNavigation,\n    bloodPressure: bloodPressureNavigation,\n    exercise: exerciseNavigation,\n    sleep: sleepNavigation,\n    pain: painNavigation,\n    mood: moodNavigation,\n    mealContents: mealContentsNavigation\n  };\n\n  // Override renderVisualization to set correct viewMode and handle no patient case\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return /*#__PURE__*/_jsxDEV(Placeholder, {\n        message: \"Please select a patient to view data.\",\n        type: \"select-patient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 14\n      }, this);\n    }\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return /*#__PURE__*/_jsxDEV(Placeholder, {\n      message: \"Invalid visualization\",\n      type: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 22\n    }, this);\n    const Component = viz.component;\n    const isExpanded = expandedItem === windowId;\n    const navigation = chartNavigation[visualizationType];\n    return /*#__PURE__*/_jsxDEV(Component, {\n      patientId: selectedPatientId,\n      viewMode: \"physician\",\n      isExpanded: isExpanded,\n      onExpand: () => handleExpand(windowId),\n      navigation: navigation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this);\n  };\n  const patientInfo = data === null || data === void 0 ? void 0 : data.patientInfo;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"physician-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"physician-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Physician Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), selectedPatientId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(PatientInfoCard, {\n        patientInfo: patientInfo,\n        loading: loading,\n        error: error,\n        variant: \"physician\",\n        className: \"patient-info-card-physician\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DashboardGrid, {\n        viewMode: \"physician\",\n        selectedVisualizations: selectedVisualizations,\n        availableVisualizations: availableVisualizations,\n        allVisualizations: allVisualizations,\n        onVisualizationChange: handleVisualizationChange,\n        onExpand: handleExpand,\n        expandedItem: expandedItem,\n        renderVisualization: renderVisualizationWithMode,\n        chartNavigation: chartNavigation,\n        disabled: Object.keys(availableVisualizations).length === 0,\n        placeholderText: \"No data available for this patient.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(PhysicianDashboard, \"77Tji3TaIj4maiBEkU4Qp2SQ+eo=\", false, function () {\n  return [usePatientData, useVisualizations, useVisualizationHelpers, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation];\n});\n_c = PhysicianDashboard;\nexport default PhysicianDashboard;\nvar _c;\n$RefreshReg$(_c, \"PhysicianDashboard\");","map":{"version":3,"names":["React","useState","usePatientData","useVisualizations","useVisualizationHelpers","useChartNavigation","PatientInfoCard","DashboardGrid","Placeholder","jsxDEV","_jsxDEV","PhysicianDashboard","patientId","initialPatientId","_s","selectedPatientId","setSelectedPatientId","data","loading","error","useEffect","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedItem","handleExpand","renderVisualization","glucoseNavigation","bloodPressureNavigation","exerciseNavigation","sleepNavigation","painNavigation","moodNavigation","mealContentsNavigation","chartNavigation","glucose","bloodPressure","exercise","sleep","pain","mood","mealContents","renderVisualizationWithMode","visualizationType","windowId","message","type","fileName","_jsxFileName","lineNumber","columnNumber","viz","Component","component","isExpanded","navigation","viewMode","onExpand","patientInfo","className","children","variant","onVisualizationChange","disabled","Object","keys","length","placeholderText","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/Health_data_dashboard-MCC_project_checkpoint/src/PhysicianDashboard.js"],"sourcesContent":["/*\r\n PhysicianDashboard.js - Physician View Dashboard Component\r\n \r\n This component renders the physician-focused dashboard view with clinical overview\r\n optimized for healthcare providers, patient information with medical context,\r\n chart expansion capabilities, and support for clinical notes and observations.\r\n \r\n Architecture:\r\n - Designed for physicians to monitor multiple health metrics simultaneously\r\n - Provides clinical summaries and statistical analysis\r\n - Implements professional medical interface design\r\n - Handles patient selection and data validation\r\n \r\n Custom Hooks Used:\r\n - usePatientData: Manages patient data fetching and caching\r\n - useVisualizations: Handles visualization configuration and availability\r\n - useVisualizationHelpers: Provides chart expansion and rendering utilities\r\n - useChartNavigation: Manages time-based navigation for each chart type\r\n \r\n Component Structure:\r\n - Physician header with clinical context\r\n - PatientInfoCard: Displays patient demographics and medical information\r\n - DashboardGrid: Renders the chart grid with clinical summaries\r\n - Individual chart components with physician-specific features\r\n \r\n State Management:\r\n - Manages selected patient state independently from parent\r\n - Uses custom hooks for centralized state management\r\n - Handles chart expansion state through useVisualizationHelpers\r\n - Manages navigation state for each chart type independently\r\n \r\n Clinical Features:\r\n - Summary statistics for each health metric\r\n - Trend analysis and pattern recognition\r\n - Professional medical interface design\r\n - Comprehensive data visualization for clinical decision making\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport usePatientData from './hooks/usePatientData';\r\nimport useVisualizations from './hooks/useVisualizations';\r\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\r\nimport useChartNavigation from './hooks/useChartNavigation';\r\nimport PatientInfoCard from './components/PatientInfoCard';\r\nimport DashboardGrid from './components/DashboardGrid';\r\nimport Placeholder from './components/ui/Placeholder';\r\nimport './PhysicianDashboard.css';\r\n\r\nconst PhysicianDashboard = ({ patientId: initialPatientId }) => {\r\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\r\n  const { data, loading, error } = usePatientData(selectedPatientId);\r\n  \r\n  // Update selected patient if prop changes\r\n  React.useEffect(() => {\r\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\r\n      setSelectedPatientId(initialPatientId);\r\n    }\r\n  }, [initialPatientId, selectedPatientId]);\r\n\r\n  const { \r\n    allVisualizations, \r\n    availableVisualizations, \r\n    selectedVisualizations, \r\n    handleVisualizationChange \r\n  } = useVisualizations('physician', data);\r\n\r\n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\r\n    selectedPatientId, \r\n    allVisualizations, \r\n    selectedVisualizations\r\n  );\r\n\r\n  // Create universal navigation for each chart type\r\n  const glucoseNavigation = useChartNavigation('glucose');\r\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\r\n  const exerciseNavigation = useChartNavigation('exercise');\r\n  const sleepNavigation = useChartNavigation('sleep');\r\n  const painNavigation = useChartNavigation('pain');\r\n  const moodNavigation = useChartNavigation('mood');\r\n  const mealContentsNavigation = useChartNavigation('mealContents');\r\n\r\n  const chartNavigation = {\r\n    glucose: glucoseNavigation,\r\n    bloodPressure: bloodPressureNavigation,\r\n    exercise: exerciseNavigation,\r\n    sleep: sleepNavigation,\r\n    pain: painNavigation,\r\n    mood: moodNavigation,\r\n    mealContents: mealContentsNavigation\r\n  };\r\n\r\n  // Override renderVisualization to set correct viewMode and handle no patient case\r\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\r\n    if (!selectedPatientId) {\r\n      return <Placeholder message=\"Please select a patient to view data.\" type=\"select-patient\" />;\r\n    }\r\n    \r\n    const viz = allVisualizations[visualizationType];\r\n    if (!viz) return <Placeholder message=\"Invalid visualization\" type=\"error\" />;\r\n\r\n    const Component = viz.component;\r\n    const isExpanded = expandedItem === windowId;\r\n    const navigation = chartNavigation[visualizationType];\r\n    \r\n    return <Component \r\n      patientId={selectedPatientId} \r\n      viewMode=\"physician\"\r\n      isExpanded={isExpanded}\r\n      onExpand={() => handleExpand(windowId)}\r\n      navigation={navigation}\r\n    />;\r\n  };\r\n\r\n  const patientInfo = data?.patientInfo;\r\n\r\n  return (\r\n    <div className=\"physician-dashboard\">\r\n      <div className=\"physician-header\">\r\n        <h1>Physician Dashboard</h1>\r\n      </div>\r\n\r\n      {selectedPatientId && (\r\n        <div className=\"dashboard-content\">\r\n          <PatientInfoCard \r\n            patientInfo={patientInfo}\r\n            loading={loading}\r\n            error={error}\r\n            variant=\"physician\"\r\n            className=\"patient-info-card-physician\"\r\n          />\r\n\r\n          <DashboardGrid\r\n            viewMode=\"physician\"\r\n            selectedVisualizations={selectedVisualizations}\r\n            availableVisualizations={availableVisualizations}\r\n            allVisualizations={allVisualizations}\r\n            onVisualizationChange={handleVisualizationChange}\r\n            onExpand={handleExpand}\r\n            expandedItem={expandedItem}\r\n            renderVisualization={renderVisualizationWithMode}\r\n            chartNavigation={chartNavigation}\r\n            disabled={Object.keys(availableVisualizations).length === 0}\r\n            placeholderText=\"No data available for this patient.\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhysicianDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}