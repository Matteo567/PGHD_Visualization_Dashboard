{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExercisePhysicianChart.js\",\n  _s = $RefreshSig$();\n/**\r\n * ExercisePhysicianChart.js - Physician Exercise Activity Summary Visualization\r\n * \r\n * This component provides a physician-focused exercise summary with:\r\n * - Three-category bar chart (Aerobic, Strength, Flexibility/Balance)\r\n * - Goal-based progress visualization with percentage completion\r\n * - Weekly exercise recommendations and compliance tracking\r\n * - Color-coded progress indicators (green for goal met, amber for partial, red for below goal)\r\n * - Integration with physician dashboard and navigation\r\n * \r\n * Architecture:\r\n * - Uses custom SVG for horizontal bar chart visualization\r\n * - Implements goal-based progress calculation\r\n * - Provides clinical exercise recommendations\r\n * - Supports expandable views and navigation\r\n * \r\n * Exercise Goals:\r\n * - Aerobic: 150 minutes per week (WHO recommendation)\r\n * - Strength: 2+ sessions per week, minimum 10 minutes each\r\n * - Flexibility/Balance: 1+ session per week\r\n * \r\n * Component Structure:\r\n * - Chart Container: Main SVG container with sizing\r\n * - Progress Bars: Horizontal bars showing goal completion percentage\r\n * - Goal Indicators: Visual markers for target achievement\r\n * - Summary Statistics: Clinical exercise metrics\r\n * - Recommendations: Exercise guidance for physicians\r\n */\n\nimport React, { useState, useMemo } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport './ExercisePhysicianChart.css';\n\n// Exercise category configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseCategories = [{\n  key: 'aerobic',\n  label: 'Aerobic Activity',\n  goal: 150,\n  // minutes per week\n  goalUnit: 'minutes/week',\n  color: '#2ecc71',\n  // Green\n  description: 'Cardiovascular exercise (walking, swimming, running, biking)',\n  recommendation: 'WHO recommends 150 minutes of moderate-intensity aerobic activity per week'\n}, {\n  key: 'strength',\n  label: 'Strength Training',\n  goal: 2,\n  // sessions per week\n  goalUnit: 'sessions/week',\n  color: '#3498db',\n  // Blue\n  description: 'Resistance training and weight-bearing exercises',\n  recommendation: 'Minimum 2 sessions per week, 10+ minutes each'\n}, {\n  key: 'flexibility',\n  label: 'Flexibility/Balance',\n  goal: 1,\n  // session per week\n  goalUnit: 'sessions/week',\n  color: '#9b59b6',\n  // Purple\n  description: 'Stretching, yoga, balance exercises',\n  recommendation: 'At least 1 session per week for flexibility and balance'\n}];\nconst ExercisePhysicianChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'physician',\n  navigation\n}) => {\n  _s();\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId, 'exercise');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n  const config = createChartConfig('exercise', isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n\n  // Filter data for current week\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Calculate exercise metrics by category\n  const exerciseMetrics = useMemo(() => {\n    if (!weekData.length) {\n      return exerciseCategories.map(category => ({\n        ...category,\n        actual: 0,\n        percentage: 0,\n        status: 'below-goal'\n      }));\n    }\n\n    // Group exercise data by category\n    const categoryData = {\n      aerobic: {\n        totalMinutes: 0,\n        sessions: 0\n      },\n      strength: {\n        totalMinutes: 0,\n        sessions: 0\n      },\n      flexibility: {\n        totalMinutes: 0,\n        sessions: 0\n      }\n    };\n    weekData.forEach(day => {\n      // Aerobic activities (walking, swimming, running, biking)\n      const aerobicMinutes = (Number(day.walking) || 0) + (Number(day.swimming) || 0) + (Number(day.running) || 0) + (Number(day.biking) || 0);\n      if (aerobicMinutes > 0) {\n        categoryData.aerobic.totalMinutes += aerobicMinutes;\n        categoryData.aerobic.sessions += 1;\n      }\n\n      // Strength training (resistance/weights)\n      const strengthMinutes = Number(day['resistance/weights']) || 0;\n      if (strengthMinutes > 0) {\n        categoryData.strength.totalMinutes += strengthMinutes;\n        categoryData.strength.sessions += 1;\n      }\n\n      // Flexibility/Balance (balance/stretching)\n      const flexibilityMinutes = Number(day['balance/stretching']) || 0;\n      if (flexibilityMinutes > 0) {\n        categoryData.flexibility.totalMinutes += flexibilityMinutes;\n        categoryData.flexibility.sessions += 1;\n      }\n    });\n    return exerciseCategories.map(category => {\n      let actual, percentage, status;\n      if (category.key === 'aerobic') {\n        actual = categoryData.aerobic.totalMinutes;\n        percentage = Math.min(actual / category.goal * 100, 100);\n        status = percentage >= 100 ? 'goal-met' : percentage >= 50 ? 'partial' : 'below-goal';\n      } else {\n        actual = categoryData[category.key].sessions;\n        percentage = Math.min(actual / category.goal * 100, 100);\n        status = percentage >= 100 ? 'goal-met' : percentage >= 50 ? 'partial' : 'below-goal';\n      }\n      return {\n        ...category,\n        actual,\n        percentage: Math.round(percentage),\n        status\n      };\n    });\n  }, [weekData]);\n\n  // Calculate overall exercise summary\n  const exerciseSummary = useMemo(() => {\n    if (!weekData.length) {\n      return {\n        totalMinutes: 0,\n        totalSessions: 0,\n        daysWithExercise: 0,\n        goalCompliance: 0\n      };\n    }\n    const totalMinutes = exerciseMetrics.reduce((sum, metric) => {\n      return sum + (metric.key === 'aerobic' ? metric.actual : 0);\n    }, 0);\n    const totalSessions = exerciseMetrics.reduce((sum, metric) => {\n      return sum + (metric.key !== 'aerobic' ? metric.actual : 0);\n    }, 0);\n    const daysWithExercise = weekData.filter(day => {\n      const dayTotal = (Number(day.walking) || 0) + (Number(day.swimming) || 0) + (Number(day.running) || 0) + (Number(day.biking) || 0) + (Number(day['resistance/weights']) || 0) + (Number(day['balance/stretching']) || 0);\n      return dayTotal > 0;\n    }).length;\n    const goalsMet = exerciseMetrics.filter(metric => metric.status === 'goal-met').length;\n    const goalCompliance = Math.round(goalsMet / exerciseMetrics.length * 100);\n    return {\n      totalMinutes,\n      totalSessions,\n      daysWithExercise,\n      goalCompliance\n    };\n  }, [weekData, exerciseMetrics]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-spinner\",\n    children: \"Loading exercise data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-message\",\n    children: [\"Error loading exercise data: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `exercise-physician-chart-container ${isExpanded ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Exercise Activity Summary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"chart-subtitle\",\n      children: formatDateRange(startOfWeek, endOfWeek)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      viewBox: `0 0 ${config.width} ${config.height}`,\n      className: \"exercise-physician-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"grid\",\n        children: [0, 25, 50, 75, 100].map(value => {\n          const x = config.padding.left + value / 100 * (config.width - config.padding.left - config.padding.right);\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: x,\n            y1: config.padding.top,\n            x2: x,\n            y2: config.height - config.padding.bottom,\n            className: \"chart-grid-line-vertical\",\n            stroke: \"var(--chart-color-grid)\",\n            strokeWidth: \"1\",\n            opacity: \"0.3\"\n          }, value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"category-bars\",\n        children: exerciseMetrics.map((metric, index) => {\n          const barHeight = 40;\n          const barSpacing = 60;\n          const y = config.padding.top + index * barSpacing;\n          const barWidth = metric.percentage / 100 * (config.width - config.padding.left - config.padding.right - 200);\n          const barX = config.padding.left + 200;\n\n          // Status-based color\n          let barColor = metric.color;\n          if (metric.status === 'goal-met') barColor = '#27ae60'; // Green\n          else if (metric.status === 'partial') barColor = '#f39c12'; // Orange\n          else barColor = '#e74c3c'; // Red\n\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"category-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"text\", {\n              x: config.padding.left,\n              y: y + barHeight / 2 + 5,\n              fontSize: config.fontSize.categoryLabel,\n              fill: \"var(--chart-color-text-primary)\",\n              className: \"category-label\",\n              children: metric.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: config.padding.left + 150,\n              y: y + barHeight / 2 + 5,\n              fontSize: config.fontSize.goalLabel,\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"goal-label\",\n              children: [\"Goal: \", metric.goal, \" \", metric.goalUnit]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n              x: barX,\n              y: y,\n              width: config.width - config.padding.right - barX,\n              height: barHeight,\n              fill: \"var(--chart-color-background)\",\n              stroke: \"var(--chart-color-border)\",\n              strokeWidth: \"1\",\n              className: \"bar-background\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n              x: barX,\n              y: y,\n              width: barWidth,\n              height: barHeight,\n              fill: barColor,\n              className: \"progress-bar\",\n              children: /*#__PURE__*/_jsxDEV(\"title\", {\n                children: `${metric.actual} ${metric.goalUnit} (${metric.percentage}% of goal)`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: barX + barWidth + 10,\n              y: y + barHeight / 2 + 5,\n              fontSize: config.fontSize.percentage,\n              fill: \"var(--chart-color-text-primary)\",\n              className: \"percentage-label\",\n              children: [metric.percentage, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: barX + barWidth + 10,\n              y: y + barHeight / 2 + 20,\n              fontSize: config.fontSize.actualValue,\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"actual-value\",\n              children: [metric.actual, \" \", metric.goalUnit]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 17\n            }, this)]\n          }, metric.key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Weekly Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Total Aerobic Activity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [exerciseSummary.totalMinutes, \" minutes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Strength & Flexibility Sessions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [exerciseSummary.totalSessions, \" sessions\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Active Days:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [exerciseSummary.daysWithExercise, \"/7 days\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Goal Compliance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [exerciseSummary.goalCompliance, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-recommendations\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Clinical Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recommendations-list\",\n        children: exerciseMetrics.map(metric => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `recommendation-item ${metric.status}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"recommendation-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"recommendation-category\",\n              children: metric.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `status-indicator ${metric.status}`,\n              children: metric.status === 'goal-met' ? '✓ Goal Met' : metric.status === 'partial' ? '⚠ Partial' : '✗ Below Goal'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"recommendation-text\",\n            children: metric.recommendation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this)]\n        }, metric.key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(ExercisePhysicianChart, \"PUPKijOVYIHyjBiRWylkcIrYJBs=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = ExercisePhysicianChart;\nexport default ExercisePhysicianChart;\nvar _c;\n$RefreshReg$(_c, \"ExercisePhysicianChart\");","map":{"version":3,"names":["React","useState","useMemo","usePatientData","useChartNavigation","Legend","createChartConfig","jsxDEV","_jsxDEV","exerciseCategories","key","label","goal","goalUnit","color","description","recommendation","ExercisePhysicianChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","config","chartHeight","height","padding","top","bottom","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","exerciseMetrics","length","map","category","actual","percentage","status","categoryData","aerobic","totalMinutes","sessions","strength","flexibility","forEach","day","aerobicMinutes","Number","walking","swimming","running","biking","strengthMinutes","flexibilityMinutes","Math","min","round","exerciseSummary","totalSessions","daysWithExercise","goalCompliance","reduce","sum","metric","dayTotal","goalsMet","formatDateRange","startStr","toLocaleDateString","month","endStr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","viewBox","value","x","left","right","x1","y1","x2","y2","stroke","strokeWidth","opacity","index","barHeight","barSpacing","y","barWidth","barX","barColor","fontSize","categoryLabel","fill","goalLabel","actualValue","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExercisePhysicianChart.js"],"sourcesContent":["/**\r\n * ExercisePhysicianChart.js - Physician Exercise Activity Summary Visualization\r\n * \r\n * This component provides a physician-focused exercise summary with:\r\n * - Three-category bar chart (Aerobic, Strength, Flexibility/Balance)\r\n * - Goal-based progress visualization with percentage completion\r\n * - Weekly exercise recommendations and compliance tracking\r\n * - Color-coded progress indicators (green for goal met, amber for partial, red for below goal)\r\n * - Integration with physician dashboard and navigation\r\n * \r\n * Architecture:\r\n * - Uses custom SVG for horizontal bar chart visualization\r\n * - Implements goal-based progress calculation\r\n * - Provides clinical exercise recommendations\r\n * - Supports expandable views and navigation\r\n * \r\n * Exercise Goals:\r\n * - Aerobic: 150 minutes per week (WHO recommendation)\r\n * - Strength: 2+ sessions per week, minimum 10 minutes each\r\n * - Flexibility/Balance: 1+ session per week\r\n * \r\n * Component Structure:\r\n * - Chart Container: Main SVG container with sizing\r\n * - Progress Bars: Horizontal bars showing goal completion percentage\r\n * - Goal Indicators: Visual markers for target achievement\r\n * - Summary Statistics: Clinical exercise metrics\r\n * - Recommendations: Exercise guidance for physicians\r\n */\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport './ExercisePhysicianChart.css';\r\n\r\n// Exercise category configuration\r\nconst exerciseCategories = [\r\n  {\r\n    key: 'aerobic',\r\n    label: 'Aerobic Activity',\r\n    goal: 150, // minutes per week\r\n    goalUnit: 'minutes/week',\r\n    color: '#2ecc71', // Green\r\n    description: 'Cardiovascular exercise (walking, swimming, running, biking)',\r\n    recommendation: 'WHO recommends 150 minutes of moderate-intensity aerobic activity per week'\r\n  },\r\n  {\r\n    key: 'strength',\r\n    label: 'Strength Training',\r\n    goal: 2, // sessions per week\r\n    goalUnit: 'sessions/week',\r\n    color: '#3498db', // Blue\r\n    description: 'Resistance training and weight-bearing exercises',\r\n    recommendation: 'Minimum 2 sessions per week, 10+ minutes each'\r\n  },\r\n  {\r\n    key: 'flexibility',\r\n    label: 'Flexibility/Balance',\r\n    goal: 1, // session per week\r\n    goalUnit: 'sessions/week',\r\n    color: '#9b59b6', // Purple\r\n    description: 'Stretching, yoga, balance exercises',\r\n    recommendation: 'At least 1 session per week for flexibility and balance'\r\n  }\r\n];\r\n\r\nconst ExercisePhysicianChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'physician', navigation }) => {\r\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('exercise');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const config = createChartConfig('exercise', isExpanded);\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  // Filter data for current week\r\n  const weekData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\r\n  });\r\n\r\n  // Calculate exercise metrics by category\r\n  const exerciseMetrics = useMemo(() => {\r\n    if (!weekData.length) {\r\n      return exerciseCategories.map(category => ({\r\n        ...category,\r\n        actual: 0,\r\n        percentage: 0,\r\n        status: 'below-goal'\r\n      }));\r\n    }\r\n\r\n    // Group exercise data by category\r\n    const categoryData = {\r\n      aerobic: { totalMinutes: 0, sessions: 0 },\r\n      strength: { totalMinutes: 0, sessions: 0 },\r\n      flexibility: { totalMinutes: 0, sessions: 0 }\r\n    };\r\n\r\n    weekData.forEach(day => {\r\n      // Aerobic activities (walking, swimming, running, biking)\r\n      const aerobicMinutes = (Number(day.walking) || 0) + (Number(day.swimming) || 0) + \r\n                           (Number(day.running) || 0) + (Number(day.biking) || 0);\r\n      if (aerobicMinutes > 0) {\r\n        categoryData.aerobic.totalMinutes += aerobicMinutes;\r\n        categoryData.aerobic.sessions += 1;\r\n      }\r\n\r\n      // Strength training (resistance/weights)\r\n      const strengthMinutes = Number(day['resistance/weights']) || 0;\r\n      if (strengthMinutes > 0) {\r\n        categoryData.strength.totalMinutes += strengthMinutes;\r\n        categoryData.strength.sessions += 1;\r\n      }\r\n\r\n      // Flexibility/Balance (balance/stretching)\r\n      const flexibilityMinutes = Number(day['balance/stretching']) || 0;\r\n      if (flexibilityMinutes > 0) {\r\n        categoryData.flexibility.totalMinutes += flexibilityMinutes;\r\n        categoryData.flexibility.sessions += 1;\r\n      }\r\n    });\r\n\r\n    return exerciseCategories.map(category => {\r\n      let actual, percentage, status;\r\n\r\n      if (category.key === 'aerobic') {\r\n        actual = categoryData.aerobic.totalMinutes;\r\n        percentage = Math.min((actual / category.goal) * 100, 100);\r\n        status = percentage >= 100 ? 'goal-met' : percentage >= 50 ? 'partial' : 'below-goal';\r\n      } else {\r\n        actual = categoryData[category.key].sessions;\r\n        percentage = Math.min((actual / category.goal) * 100, 100);\r\n        status = percentage >= 100 ? 'goal-met' : percentage >= 50 ? 'partial' : 'below-goal';\r\n      }\r\n\r\n      return {\r\n        ...category,\r\n        actual,\r\n        percentage: Math.round(percentage),\r\n        status\r\n      };\r\n    });\r\n  }, [weekData]);\r\n\r\n  // Calculate overall exercise summary\r\n  const exerciseSummary = useMemo(() => {\r\n    if (!weekData.length) {\r\n      return {\r\n        totalMinutes: 0,\r\n        totalSessions: 0,\r\n        daysWithExercise: 0,\r\n        goalCompliance: 0\r\n      };\r\n    }\r\n\r\n    const totalMinutes = exerciseMetrics.reduce((sum, metric) => {\r\n      return sum + (metric.key === 'aerobic' ? metric.actual : 0);\r\n    }, 0);\r\n\r\n    const totalSessions = exerciseMetrics.reduce((sum, metric) => {\r\n      return sum + (metric.key !== 'aerobic' ? metric.actual : 0);\r\n    }, 0);\r\n\r\n    const daysWithExercise = weekData.filter(day => {\r\n      const dayTotal = (Number(day.walking) || 0) + (Number(day.swimming) || 0) + \r\n                      (Number(day.running) || 0) + (Number(day.biking) || 0) + \r\n                      (Number(day['resistance/weights']) || 0) + \r\n                      (Number(day['balance/stretching']) || 0);\r\n      return dayTotal > 0;\r\n    }).length;\r\n\r\n    const goalsMet = exerciseMetrics.filter(metric => metric.status === 'goal-met').length;\r\n    const goalCompliance = Math.round((goalsMet / exerciseMetrics.length) * 100);\r\n\r\n    return {\r\n      totalMinutes,\r\n      totalSessions,\r\n      daysWithExercise,\r\n      goalCompliance\r\n    };\r\n  }, [weekData, exerciseMetrics]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  if (loading) return <div className=\"loading-spinner\">Loading exercise data...</div>;\r\n  if (error) return <div className=\"error-message\">Error loading exercise data: {error}</div>;\r\n\r\n  return (\r\n    <div className={`exercise-physician-chart-container ${isExpanded ? 'expanded' : ''}`}>\r\n      <h3 className=\"chart-title\">Exercise Activity Summary</h3>\r\n      <h4 className=\"chart-subtitle\">{formatDateRange(startOfWeek, endOfWeek)}</h4>\r\n      \r\n      <svg \r\n        width=\"100%\" \r\n        viewBox={`0 0 ${config.width} ${config.height}`}\r\n        className=\"exercise-physician-svg\"\r\n      >\r\n        {/* Background grid */}\r\n        <g className=\"grid\">\r\n          {[0, 25, 50, 75, 100].map(value => {\r\n            const x = config.padding.left + (value / 100) * (config.width - config.padding.left - config.padding.right);\r\n            return (\r\n              <line\r\n                key={value}\r\n                x1={x}\r\n                y1={config.padding.top}\r\n                x2={x}\r\n                y2={config.height - config.padding.bottom}\r\n                className=\"chart-grid-line-vertical\"\r\n                stroke=\"var(--chart-color-grid)\"\r\n                strokeWidth=\"1\"\r\n                opacity=\"0.3\"\r\n              />\r\n            );\r\n          })}\r\n        </g>\r\n\r\n        {/* Category bars */}\r\n        <g className=\"category-bars\">\r\n          {exerciseMetrics.map((metric, index) => {\r\n            const barHeight = 40;\r\n            const barSpacing = 60;\r\n            const y = config.padding.top + index * barSpacing;\r\n            const barWidth = (metric.percentage / 100) * (config.width - config.padding.left - config.padding.right - 200);\r\n            const barX = config.padding.left + 200;\r\n\r\n            // Status-based color\r\n            let barColor = metric.color;\r\n            if (metric.status === 'goal-met') barColor = '#27ae60'; // Green\r\n            else if (metric.status === 'partial') barColor = '#f39c12'; // Orange\r\n            else barColor = '#e74c3c'; // Red\r\n\r\n            return (\r\n              <g key={metric.key} className=\"category-group\">\r\n                {/* Category label */}\r\n                <text\r\n                  x={config.padding.left}\r\n                  y={y + barHeight / 2 + 5}\r\n                  fontSize={config.fontSize.categoryLabel}\r\n                  fill=\"var(--chart-color-text-primary)\"\r\n                  className=\"category-label\"\r\n                >\r\n                  {metric.label}\r\n                </text>\r\n\r\n                {/* Goal indicator */}\r\n                <text\r\n                  x={config.padding.left + 150}\r\n                  y={y + barHeight / 2 + 5}\r\n                  fontSize={config.fontSize.goalLabel}\r\n                  fill=\"var(--chart-color-text-secondary)\"\r\n                  className=\"goal-label\"\r\n                >\r\n                  Goal: {metric.goal} {metric.goalUnit}\r\n                </text>\r\n\r\n                {/* Progress bar background */}\r\n                <rect\r\n                  x={barX}\r\n                  y={y}\r\n                  width={config.width - config.padding.right - barX}\r\n                  height={barHeight}\r\n                  fill=\"var(--chart-color-background)\"\r\n                  stroke=\"var(--chart-color-border)\"\r\n                  strokeWidth=\"1\"\r\n                  className=\"bar-background\"\r\n                />\r\n\r\n                {/* Progress bar fill */}\r\n                <rect\r\n                  x={barX}\r\n                  y={y}\r\n                  width={barWidth}\r\n                  height={barHeight}\r\n                  fill={barColor}\r\n                  className=\"progress-bar\"\r\n                >\r\n                  <title>{`${metric.actual} ${metric.goalUnit} (${metric.percentage}% of goal)`}</title>\r\n                </rect>\r\n\r\n                {/* Progress percentage */}\r\n                <text\r\n                  x={barX + barWidth + 10}\r\n                  y={y + barHeight / 2 + 5}\r\n                  fontSize={config.fontSize.percentage}\r\n                  fill=\"var(--chart-color-text-primary)\"\r\n                  className=\"percentage-label\"\r\n                >\r\n                  {metric.percentage}%\r\n                </text>\r\n\r\n                {/* Actual value */}\r\n                <text\r\n                  x={barX + barWidth + 10}\r\n                  y={y + barHeight / 2 + 20}\r\n                  fontSize={config.fontSize.actualValue}\r\n                  fill=\"var(--chart-color-text-secondary)\"\r\n                  className=\"actual-value\"\r\n                >\r\n                  {metric.actual} {metric.goalUnit}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n        </g>\r\n      </svg>\r\n\r\n      {/* Summary statistics */}\r\n      <div className=\"exercise-summary\">\r\n        <h4>Weekly Summary</h4>\r\n        <div className=\"summary-stats\">\r\n          <div className=\"stat-item\">\r\n            <span className=\"stat-label\">Total Aerobic Activity:</span>\r\n            <span className=\"stat-value\">{exerciseSummary.totalMinutes} minutes</span>\r\n          </div>\r\n          <div className=\"stat-item\">\r\n            <span className=\"stat-label\">Strength & Flexibility Sessions:</span>\r\n            <span className=\"stat-value\">{exerciseSummary.totalSessions} sessions</span>\r\n          </div>\r\n          <div className=\"stat-item\">\r\n            <span className=\"stat-label\">Active Days:</span>\r\n            <span className=\"stat-value\">{exerciseSummary.daysWithExercise}/7 days</span>\r\n          </div>\r\n          <div className=\"stat-item\">\r\n            <span className=\"stat-label\">Goal Compliance:</span>\r\n            <span className=\"stat-value\">{exerciseSummary.goalCompliance}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Exercise recommendations */}\r\n      <div className=\"exercise-recommendations\">\r\n        <h4>Clinical Recommendations</h4>\r\n        <div className=\"recommendations-list\">\r\n          {exerciseMetrics.map(metric => (\r\n            <div key={metric.key} className={`recommendation-item ${metric.status}`}>\r\n              <div className=\"recommendation-header\">\r\n                <span className=\"recommendation-category\">{metric.label}</span>\r\n                <span className={`status-indicator ${metric.status}`}>\r\n                  {metric.status === 'goal-met' ? '✓ Goal Met' : \r\n                   metric.status === 'partial' ? '⚠ Partial' : '✗ Below Goal'}\r\n                </span>\r\n              </div>\r\n              <div className=\"recommendation-text\">{metric.recommendation}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExercisePhysicianChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}