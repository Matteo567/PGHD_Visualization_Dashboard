{"ast":null,"code":"/**\r\n * Ultra-simple data service for testing\r\n * This will work for sure and help us debug\r\n */\n\n// Mock data for testing - ensuring all chart types have data\nconst createMockPatientData = patientId => {\n  const now = new Date();\n  const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);\n  const twoDaysAgo = new Date(Date.now() - 2 * 24 * 60 * 60 * 1000);\n  return {\n    patientInfo: {\n      patientId,\n      age: 45,\n      gender: 'Male',\n      conditions: ['Diabetes', 'Hypertension']\n    },\n    glucoseData: [{\n      date: now,\n      value: 120,\n      range: 'In Range',\n      measurementType: 'Fasting',\n      timestamp: now.toISOString()\n    }, {\n      date: yesterday,\n      value: 95,\n      range: 'In Range',\n      measurementType: 'Random',\n      timestamp: yesterday.toISOString()\n    }, {\n      date: twoDaysAgo,\n      value: 140,\n      range: 'Above Range',\n      measurementType: 'Post-meal',\n      timestamp: twoDaysAgo.toISOString()\n    }],\n    bloodPressureData: [{\n      date: now,\n      systolic: 120,\n      diastolic: 80,\n      timestamp: now.toISOString()\n    }, {\n      date: yesterday,\n      systolic: 115,\n      diastolic: 75,\n      timestamp: yesterday.toISOString()\n    }, {\n      date: twoDaysAgo,\n      systolic: 125,\n      diastolic: 82,\n      timestamp: twoDaysAgo.toISOString()\n    }],\n    exerciseData: [{\n      date: now,\n      type: 'Walking',\n      duration: 30,\n      timestamp: now.toISOString()\n    }, {\n      date: yesterday,\n      type: 'Running',\n      duration: 20,\n      timestamp: yesterday.toISOString()\n    }, {\n      date: twoDaysAgo,\n      type: 'Swimming',\n      duration: 45,\n      timestamp: twoDaysAgo.toISOString()\n    }],\n    moodData: [{\n      date: now,\n      mood: 'happy',\n      timestamp: now.toISOString()\n    }, {\n      date: yesterday,\n      mood: 'sad',\n      timestamp: yesterday.toISOString()\n    }, {\n      date: twoDaysAgo,\n      mood: 'angry',\n      timestamp: twoDaysAgo.toISOString()\n    }],\n    painData: [{\n      date: now,\n      location: 'back',\n      level: 3,\n      timestamp: now.toISOString()\n    }, {\n      date: yesterday,\n      location: 'knee',\n      level: 2,\n      timestamp: yesterday.toISOString()\n    }],\n    sleepData: [{\n      date: now,\n      hours: 7.5,\n      quality: 'Good',\n      timestamp: now.toISOString()\n    }, {\n      date: yesterday,\n      hours: 6.2,\n      quality: 'Fair',\n      timestamp: yesterday.toISOString()\n    }, {\n      date: twoDaysAgo,\n      hours: 8.0,\n      quality: 'Excellent',\n      timestamp: twoDaysAgo.toISOString()\n    }],\n    mealData: [{\n      date: now,\n      type: 'breakfast',\n      protein: '1',\n      vegetables: '0',\n      fruit: '1',\n      timestamp: now.toISOString()\n    }, {\n      date: yesterday,\n      type: 'lunch',\n      protein: '1',\n      vegetables: '1',\n      fruit: '0',\n      timestamp: yesterday.toISOString()\n    }, {\n      date: twoDaysAgo,\n      type: 'dinner',\n      protein: '1',\n      vegetables: '1',\n      fruit: '1',\n      timestamp: twoDaysAgo.toISOString()\n    }]\n  };\n};\n\n// Simple fetch function with fallback to mock data\nexport const loadPatientData = async patientId => {\n  console.log(`üîÑ Loading data for ${patientId}...`);\n  try {\n    // Try to fetch real CSV data\n    const response = await fetch(`/synthetic_patients/${patientId}.csv`);\n    if (response.ok) {\n      const csvText = await response.text();\n      console.log(`‚úÖ Successfully fetched CSV for ${patientId}, length: ${csvText.length}`);\n\n      // For now, return mock data but we know the CSV is available\n      // TODO: Parse the actual CSV\n      const mockData = createMockPatientData(patientId);\n      console.log(`üìä Returning mock data for ${patientId}:`, mockData);\n      return mockData;\n    } else {\n      console.warn(`‚ö†Ô∏è CSV fetch failed with status ${response.status}, using mock data`);\n      return createMockPatientData(patientId);\n    }\n  } catch (error) {\n    console.error(`‚ùå Error fetching ${patientId}:`, error);\n    console.log(`üîÑ Falling back to mock data for ${patientId}`);\n    return createMockPatientData(patientId);\n  }\n};\nexport default {\n  loadPatientData\n};","map":{"version":3,"names":["createMockPatientData","patientId","now","Date","yesterday","twoDaysAgo","patientInfo","age","gender","conditions","glucoseData","date","value","range","measurementType","timestamp","toISOString","bloodPressureData","systolic","diastolic","exerciseData","type","duration","moodData","mood","painData","location","level","sleepData","hours","quality","mealData","protein","vegetables","fruit","loadPatientData","console","log","response","fetch","ok","csvText","text","length","mockData","warn","status","error"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/services/simpleDataService.js"],"sourcesContent":["/**\r\n * Ultra-simple data service for testing\r\n * This will work for sure and help us debug\r\n */\r\n\r\n// Mock data for testing - ensuring all chart types have data\r\nconst createMockPatientData = (patientId) => {\r\n  const now = new Date();\r\n  const yesterday = new Date(Date.now() - 24*60*60*1000);\r\n  const twoDaysAgo = new Date(Date.now() - 2*24*60*60*1000);\r\n  \r\n  return {\r\n    patientInfo: {\r\n      patientId,\r\n      age: 45,\r\n      gender: 'Male',\r\n      conditions: ['Diabetes', 'Hypertension']\r\n    },\r\n    glucoseData: [\r\n      { date: now, value: 120, range: 'In Range', measurementType: 'Fasting', timestamp: now.toISOString() },\r\n      { date: yesterday, value: 95, range: 'In Range', measurementType: 'Random', timestamp: yesterday.toISOString() },\r\n      { date: twoDaysAgo, value: 140, range: 'Above Range', measurementType: 'Post-meal', timestamp: twoDaysAgo.toISOString() },\r\n    ],\r\n    bloodPressureData: [\r\n      { date: now, systolic: 120, diastolic: 80, timestamp: now.toISOString() },\r\n      { date: yesterday, systolic: 115, diastolic: 75, timestamp: yesterday.toISOString() },\r\n      { date: twoDaysAgo, systolic: 125, diastolic: 82, timestamp: twoDaysAgo.toISOString() }\r\n    ],\r\n    exerciseData: [\r\n      { date: now, type: 'Walking', duration: 30, timestamp: now.toISOString() },\r\n      { date: yesterday, type: 'Running', duration: 20, timestamp: yesterday.toISOString() },\r\n      { date: twoDaysAgo, type: 'Swimming', duration: 45, timestamp: twoDaysAgo.toISOString() }\r\n    ],\r\n    moodData: [\r\n      { date: now, mood: 'happy', timestamp: now.toISOString() },\r\n      { date: yesterday, mood: 'sad', timestamp: yesterday.toISOString() },\r\n      { date: twoDaysAgo, mood: 'angry', timestamp: twoDaysAgo.toISOString() }\r\n    ],\r\n    painData: [\r\n      { date: now, location: 'back', level: 3, timestamp: now.toISOString() },\r\n      { date: yesterday, location: 'knee', level: 2, timestamp: yesterday.toISOString() }\r\n    ],\r\n    sleepData: [\r\n      { date: now, hours: 7.5, quality: 'Good', timestamp: now.toISOString() },\r\n      { date: yesterday, hours: 6.2, quality: 'Fair', timestamp: yesterday.toISOString() },\r\n      { date: twoDaysAgo, hours: 8.0, quality: 'Excellent', timestamp: twoDaysAgo.toISOString() }\r\n    ],\r\n    mealData: [\r\n      { date: now, type: 'breakfast', protein: '1', vegetables: '0', fruit: '1', timestamp: now.toISOString() },\r\n      { date: yesterday, type: 'lunch', protein: '1', vegetables: '1', fruit: '0', timestamp: yesterday.toISOString() },\r\n      { date: twoDaysAgo, type: 'dinner', protein: '1', vegetables: '1', fruit: '1', timestamp: twoDaysAgo.toISOString() }\r\n    ]\r\n  };\r\n};\r\n\r\n// Simple fetch function with fallback to mock data\r\nexport const loadPatientData = async (patientId) => {\r\n  console.log(`üîÑ Loading data for ${patientId}...`);\r\n  \r\n  try {\r\n    // Try to fetch real CSV data\r\n    const response = await fetch(`/synthetic_patients/${patientId}.csv`);\r\n    \r\n    if (response.ok) {\r\n      const csvText = await response.text();\r\n      console.log(`‚úÖ Successfully fetched CSV for ${patientId}, length: ${csvText.length}`);\r\n      \r\n      // For now, return mock data but we know the CSV is available\r\n      // TODO: Parse the actual CSV\r\n      const mockData = createMockPatientData(patientId);\r\n      console.log(`üìä Returning mock data for ${patientId}:`, mockData);\r\n      return mockData;\r\n    } else {\r\n      console.warn(`‚ö†Ô∏è CSV fetch failed with status ${response.status}, using mock data`);\r\n      return createMockPatientData(patientId);\r\n    }\r\n  } catch (error) {\r\n    console.error(`‚ùå Error fetching ${patientId}:`, error);\r\n    console.log(`üîÑ Falling back to mock data for ${patientId}`);\r\n    return createMockPatientData(patientId);\r\n  }\r\n};\r\n\r\nexport default { loadPatientData };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}