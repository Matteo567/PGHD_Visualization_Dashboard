{"ast":null,"code":"import _objectSpread from\"C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useMemo}from'react';import{VISUALIZATION_CONFIG,DASHBOARD_CONFIG}from'../constants';// Import all chart components\nimport GlucoseChart from'../components/patient_charts/GlucoseChart';import BloodPressureChart from'../components/patient_charts/BloodPressureChart';import ExerciseChart from'../components/patient_charts/ExerciseChart';import MoodCalendar from'../components/patient_charts/MoodCalendar';import PainChart from'../components/patient_charts/PainChart';import MealContentsChart from'../components/patient_charts/MealContentsChart';import SleepChart from'../components/patient_charts/SleepChart';/**\r\n * Shared hook for managing visualizations across different dashboard types\r\n * @param {string} viewMode - 'patient' or 'physician'\r\n * @param {Object} data - Patient data object\r\n * @returns {Object} Visualization state and utilities\r\n */const useVisualizations=(viewMode,data)=>{const config=DASHBOARD_CONFIG[viewMode];// Create visualization registry with components\nconst allVisualizations=useMemo(()=>({glucose:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.glucose),{},{component:GlucoseChart}),bloodPressure:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.bloodPressure),{},{component:BloodPressureChart}),exercise:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.exercise),{},{component:ExerciseChart}),mood:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.mood),{},{component:MoodCalendar}),pain:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.pain),{},{component:PainChart}),mealContents:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.mealContents),{},{component:MealContentsChart}),sleep:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.sleep),{},{component:SleepChart})}),[]);// Determine available visualizations based on data\nconst availableVisualizations=useMemo(()=>{if(!data)return{};return Object.entries(allVisualizations).reduce((acc,_ref)=>{let[key,viz]=_ref;const dataKey=\"\".concat(key,\"Data\");// Special case for meal contents\nif(key==='mealContents'&&data['mealData']&&data['mealData'].length>0){acc[key]=viz;}else if(data[dataKey]&&data[dataKey].length>0){acc[key]=viz;}return acc;},{});},[data,allVisualizations]);// Initialize selected visualizations based on view mode\nconst[selectedVisualizations,setSelectedVisualizations]=useState(config.defaultVisualizations);// Update selections when available visualizations change\nReact.useEffect(()=>{if(Object.keys(availableVisualizations).length>0){const availableKeys=Object.keys(availableVisualizations);const defaultOrder=['glucose','bloodPressure','exercise','sleep','mood','pain','mealContents'];// Filter default order to only include available visualizations\nconst orderedAvailable=defaultOrder.filter(key=>availableKeys.includes(key));// Fill in any remaining slots with available visualizations not in default order\nconst remaining=availableKeys.filter(key=>!orderedAvailable.includes(key));const finalOrder=[...orderedAvailable,...remaining];setSelectedVisualizations(prev=>{const updated=_objectSpread({},prev);const chartIds=Object.keys(config.defaultVisualizations);chartIds.forEach((chartId,index)=>{if(finalOrder[index]){updated[chartId]=finalOrder[index];}else if(!availableKeys.includes(updated[chartId])){// If current selection is not available, use the first available\nupdated[chartId]=finalOrder[0]||'glucose';}});return updated;});}},[availableVisualizations,config.defaultVisualizations]);const handleVisualizationChange=(chartId,visualizationType)=>{setSelectedVisualizations(prev=>_objectSpread(_objectSpread({},prev),{},{[chartId]:visualizationType}));};return{allVisualizations,availableVisualizations,selectedVisualizations,handleVisualizationChange,config};};export default useVisualizations;","map":{"version":3,"names":["useState","useMemo","VISUALIZATION_CONFIG","DASHBOARD_CONFIG","GlucoseChart","BloodPressureChart","ExerciseChart","MoodCalendar","PainChart","MealContentsChart","SleepChart","useVisualizations","viewMode","data","config","allVisualizations","glucose","_objectSpread","component","bloodPressure","exercise","mood","pain","mealContents","sleep","availableVisualizations","Object","entries","reduce","acc","_ref","key","viz","dataKey","concat","length","selectedVisualizations","setSelectedVisualizations","defaultVisualizations","React","useEffect","keys","availableKeys","defaultOrder","orderedAvailable","filter","includes","remaining","finalOrder","prev","updated","chartIds","forEach","chartId","index","handleVisualizationChange","visualizationType"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/useVisualizations.js"],"sourcesContent":["import { useState, useMemo } from 'react';\r\nimport { VISUALIZATION_CONFIG, DASHBOARD_CONFIG } from '../constants';\r\n\r\n// Import all chart components\r\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\r\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\r\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\r\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\r\nimport PainChart from '../components/patient_charts/PainChart';\r\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\r\nimport SleepChart from '../components/patient_charts/SleepChart';\r\n\r\n/**\r\n * Shared hook for managing visualizations across different dashboard types\r\n * @param {string} viewMode - 'patient' or 'physician'\r\n * @param {Object} data - Patient data object\r\n * @returns {Object} Visualization state and utilities\r\n */\r\nconst useVisualizations = (viewMode, data) => {\r\n  const config = DASHBOARD_CONFIG[viewMode];\r\n  \r\n  // Create visualization registry with components\r\n  const allVisualizations = useMemo(() => ({\r\n    glucose: { ...VISUALIZATION_CONFIG.glucose, component: GlucoseChart },\r\n    bloodPressure: { ...VISUALIZATION_CONFIG.bloodPressure, component: BloodPressureChart },\r\n    exercise: { ...VISUALIZATION_CONFIG.exercise, component: ExerciseChart },\r\n    mood: { ...VISUALIZATION_CONFIG.mood, component: MoodCalendar },\r\n    pain: { ...VISUALIZATION_CONFIG.pain, component: PainChart },\r\n    mealContents: { ...VISUALIZATION_CONFIG.mealContents, component: MealContentsChart },\r\n    sleep: { ...VISUALIZATION_CONFIG.sleep, component: SleepChart },\r\n  }), []);\r\n\r\n  // Determine available visualizations based on data\r\n  const availableVisualizations = useMemo(() => {\r\n    if (!data) return {};\r\n\r\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\r\n      const dataKey = `${key}Data`;\r\n      // Special case for meal contents\r\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\r\n        acc[key] = viz;\r\n      } else if (data[dataKey] && data[dataKey].length > 0) {\r\n        acc[key] = viz;\r\n      }\r\n      return acc;\r\n    }, {});\r\n  }, [data, allVisualizations]);\r\n\r\n  // Initialize selected visualizations based on view mode\r\n  const [selectedVisualizations, setSelectedVisualizations] = useState(\r\n    config.defaultVisualizations\r\n  );\r\n\r\n  // Update selections when available visualizations change\r\n  React.useEffect(() => {\r\n    if (Object.keys(availableVisualizations).length > 0) {\r\n      const availableKeys = Object.keys(availableVisualizations);\r\n      const defaultOrder = ['glucose', 'bloodPressure', 'exercise', 'sleep', 'mood', 'pain', 'mealContents'];\r\n      \r\n      // Filter default order to only include available visualizations\r\n      const orderedAvailable = defaultOrder.filter(key => availableKeys.includes(key));\r\n      \r\n      // Fill in any remaining slots with available visualizations not in default order\r\n      const remaining = availableKeys.filter(key => !orderedAvailable.includes(key));\r\n      const finalOrder = [...orderedAvailable, ...remaining];\r\n      \r\n      setSelectedVisualizations(prev => {\r\n        const updated = { ...prev };\r\n        const chartIds = Object.keys(config.defaultVisualizations);\r\n        \r\n        chartIds.forEach((chartId, index) => {\r\n          if (finalOrder[index]) {\r\n            updated[chartId] = finalOrder[index];\r\n          } else if (!availableKeys.includes(updated[chartId])) {\r\n            // If current selection is not available, use the first available\r\n            updated[chartId] = finalOrder[0] || 'glucose';\r\n          }\r\n        });\r\n        \r\n        return updated;\r\n      });\r\n    }\r\n  }, [availableVisualizations, config.defaultVisualizations]);\r\n\r\n  const handleVisualizationChange = (chartId, visualizationType) => {\r\n    setSelectedVisualizations(prev => ({ ...prev, [chartId]: visualizationType }));\r\n  };\r\n\r\n  return {\r\n    allVisualizations,\r\n    availableVisualizations,\r\n    selectedVisualizations,\r\n    handleVisualizationChange,\r\n    config\r\n  };\r\n};\r\n\r\nexport default useVisualizations;\r\n"],"mappings":"8KAAA,OAASA,QAAQ,CAAEC,OAAO,KAAQ,OAAO,CACzC,OAASC,oBAAoB,CAAEC,gBAAgB,KAAQ,cAAc,CAErE;AACA,MAAO,CAAAC,YAAY,KAAM,2CAA2C,CACpE,MAAO,CAAAC,kBAAkB,KAAM,iDAAiD,CAChF,MAAO,CAAAC,aAAa,KAAM,4CAA4C,CACtE,MAAO,CAAAC,YAAY,KAAM,2CAA2C,CACpE,MAAO,CAAAC,SAAS,KAAM,wCAAwC,CAC9D,MAAO,CAAAC,iBAAiB,KAAM,gDAAgD,CAC9E,MAAO,CAAAC,UAAU,KAAM,yCAAyC,CAEhE;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAGA,CAACC,QAAQ,CAAEC,IAAI,GAAK,CAC5C,KAAM,CAAAC,MAAM,CAAGX,gBAAgB,CAACS,QAAQ,CAAC,CAEzC;AACA,KAAM,CAAAG,iBAAiB,CAAGd,OAAO,CAAC,KAAO,CACvCe,OAAO,CAAAC,aAAA,CAAAA,aAAA,IAAOf,oBAAoB,CAACc,OAAO,MAAEE,SAAS,CAAEd,YAAY,EAAE,CACrEe,aAAa,CAAAF,aAAA,CAAAA,aAAA,IAAOf,oBAAoB,CAACiB,aAAa,MAAED,SAAS,CAAEb,kBAAkB,EAAE,CACvFe,QAAQ,CAAAH,aAAA,CAAAA,aAAA,IAAOf,oBAAoB,CAACkB,QAAQ,MAAEF,SAAS,CAAEZ,aAAa,EAAE,CACxEe,IAAI,CAAAJ,aAAA,CAAAA,aAAA,IAAOf,oBAAoB,CAACmB,IAAI,MAAEH,SAAS,CAAEX,YAAY,EAAE,CAC/De,IAAI,CAAAL,aAAA,CAAAA,aAAA,IAAOf,oBAAoB,CAACoB,IAAI,MAAEJ,SAAS,CAAEV,SAAS,EAAE,CAC5De,YAAY,CAAAN,aAAA,CAAAA,aAAA,IAAOf,oBAAoB,CAACqB,YAAY,MAAEL,SAAS,CAAET,iBAAiB,EAAE,CACpFe,KAAK,CAAAP,aAAA,CAAAA,aAAA,IAAOf,oBAAoB,CAACsB,KAAK,MAAEN,SAAS,CAAER,UAAU,EAC/D,CAAC,CAAC,CAAE,EAAE,CAAC,CAEP;AACA,KAAM,CAAAe,uBAAuB,CAAGxB,OAAO,CAAC,IAAM,CAC5C,GAAI,CAACY,IAAI,CAAE,MAAO,CAAC,CAAC,CAEpB,MAAO,CAAAa,MAAM,CAACC,OAAO,CAACZ,iBAAiB,CAAC,CAACa,MAAM,CAAC,CAACC,GAAG,CAAAC,IAAA,GAAiB,IAAf,CAACC,GAAG,CAAEC,GAAG,CAAC,CAAAF,IAAA,CAC9D,KAAM,CAAAG,OAAO,IAAAC,MAAA,CAAMH,GAAG,QAAM,CAC5B;AACA,GAAIA,GAAG,GAAK,cAAc,EAAIlB,IAAI,CAAC,UAAU,CAAC,EAAIA,IAAI,CAAC,UAAU,CAAC,CAACsB,MAAM,CAAG,CAAC,CAAE,CAC7EN,GAAG,CAACE,GAAG,CAAC,CAAGC,GAAG,CAChB,CAAC,IAAM,IAAInB,IAAI,CAACoB,OAAO,CAAC,EAAIpB,IAAI,CAACoB,OAAO,CAAC,CAACE,MAAM,CAAG,CAAC,CAAE,CACpDN,GAAG,CAACE,GAAG,CAAC,CAAGC,GAAG,CAChB,CACA,MAAO,CAAAH,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CACR,CAAC,CAAE,CAAChB,IAAI,CAAEE,iBAAiB,CAAC,CAAC,CAE7B;AACA,KAAM,CAACqB,sBAAsB,CAAEC,yBAAyB,CAAC,CAAGrC,QAAQ,CAClEc,MAAM,CAACwB,qBACT,CAAC,CAED;AACAC,KAAK,CAACC,SAAS,CAAC,IAAM,CACpB,GAAId,MAAM,CAACe,IAAI,CAAChB,uBAAuB,CAAC,CAACU,MAAM,CAAG,CAAC,CAAE,CACnD,KAAM,CAAAO,aAAa,CAAGhB,MAAM,CAACe,IAAI,CAAChB,uBAAuB,CAAC,CAC1D,KAAM,CAAAkB,YAAY,CAAG,CAAC,SAAS,CAAE,eAAe,CAAE,UAAU,CAAE,OAAO,CAAE,MAAM,CAAE,MAAM,CAAE,cAAc,CAAC,CAEtG;AACA,KAAM,CAAAC,gBAAgB,CAAGD,YAAY,CAACE,MAAM,CAACd,GAAG,EAAIW,aAAa,CAACI,QAAQ,CAACf,GAAG,CAAC,CAAC,CAEhF;AACA,KAAM,CAAAgB,SAAS,CAAGL,aAAa,CAACG,MAAM,CAACd,GAAG,EAAI,CAACa,gBAAgB,CAACE,QAAQ,CAACf,GAAG,CAAC,CAAC,CAC9E,KAAM,CAAAiB,UAAU,CAAG,CAAC,GAAGJ,gBAAgB,CAAE,GAAGG,SAAS,CAAC,CAEtDV,yBAAyB,CAACY,IAAI,EAAI,CAChC,KAAM,CAAAC,OAAO,CAAAjC,aAAA,IAAQgC,IAAI,CAAE,CAC3B,KAAM,CAAAE,QAAQ,CAAGzB,MAAM,CAACe,IAAI,CAAC3B,MAAM,CAACwB,qBAAqB,CAAC,CAE1Da,QAAQ,CAACC,OAAO,CAAC,CAACC,OAAO,CAAEC,KAAK,GAAK,CACnC,GAAIN,UAAU,CAACM,KAAK,CAAC,CAAE,CACrBJ,OAAO,CAACG,OAAO,CAAC,CAAGL,UAAU,CAACM,KAAK,CAAC,CACtC,CAAC,IAAM,IAAI,CAACZ,aAAa,CAACI,QAAQ,CAACI,OAAO,CAACG,OAAO,CAAC,CAAC,CAAE,CACpD;AACAH,OAAO,CAACG,OAAO,CAAC,CAAGL,UAAU,CAAC,CAAC,CAAC,EAAI,SAAS,CAC/C,CACF,CAAC,CAAC,CAEF,MAAO,CAAAE,OAAO,CAChB,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,CAACzB,uBAAuB,CAAEX,MAAM,CAACwB,qBAAqB,CAAC,CAAC,CAE3D,KAAM,CAAAiB,yBAAyB,CAAGA,CAACF,OAAO,CAAEG,iBAAiB,GAAK,CAChEnB,yBAAyB,CAACY,IAAI,EAAAhC,aAAA,CAAAA,aAAA,IAAUgC,IAAI,MAAE,CAACI,OAAO,EAAGG,iBAAiB,EAAG,CAAC,CAChF,CAAC,CAED,MAAO,CACLzC,iBAAiB,CACjBU,uBAAuB,CACvBW,sBAAsB,CACtBmB,yBAAyB,CACzBzC,MACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAH,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}