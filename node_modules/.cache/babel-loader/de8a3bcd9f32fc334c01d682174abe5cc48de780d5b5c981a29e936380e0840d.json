{"ast":null,"code":"/**\n * PhysicianDashboard.js - Physician View Dashboard Component\n * \n * This component renders the physician-focused dashboard view with:\n * - Clinical overview optimized for healthcare providers\n * - Patient information card with medical context\n * - Chart expansion capabilities for detailed review\n * - Support for clinical notes and observations\n * - Chart navigation controls for time period switching\n * \n * ARCHITECTURE:\n * - Designed for physicians to monitor multiple health metrics simultaneously\n * - Provides clinical summaries and statistical analysis\n * - Implements professional medical interface design\n * - Handles patient selection and data validation\n * \n * CUSTOM HOOKS USED:\n * - usePatientData: Manages patient data fetching and caching\n * - useVisualizations: Handles visualization configuration and availability\n * - useVisualizationHelpers: Provides chart expansion and rendering utilities\n * - useChartNavigation: Manages time-based navigation for each chart type\n * \n * COMPONENT STRUCTURE:\n * - Physician header with clinical context\n * - PatientInfoCard: Displays patient demographics and medical information\n * - DashboardGrid: Renders the chart grid with clinical summaries\n * - Individual chart components with physician-specific features\n * \n * STATE MANAGEMENT:\n * - Manages selected patient state independently from parent\n * - Uses custom hooks for centralized state management\n * - Handles chart expansion state through useVisualizationHelpers\n * - Manages navigation state for each chart type independently\n * \n * CLINICAL FEATURES:\n * - Summary statistics for each health metric\n * - Trend analysis and pattern recognition\n * - Professional medical interface design\n * - Comprehensive data visualization for clinical decision making\n * \n * This component provides a comprehensive clinical monitoring interface\n * designed specifically for healthcare providers with advanced analytics\n * and professional medical workflow integration.\n */import React,{useState}from'react';import usePatientData from'./hooks/usePatientData';import useVisualizations from'./hooks/useVisualizations';import useVisualizationHelpers from'./hooks/useVisualizationHelpers';import useChartNavigation from'./hooks/useChartNavigation';import PatientInfoCard from'./components/PatientInfoCard';import DashboardGrid from'./components/DashboardGrid';import'./PhysicianDashboard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PhysicianDashboard=_ref=>{let{patientId:initialPatientId}=_ref;const[selectedPatientId,setSelectedPatientId]=useState(initialPatientId||'');const{data,loading,error}=usePatientData(selectedPatientId);// Update selected patient if prop changes\nReact.useEffect(()=>{if(initialPatientId&&initialPatientId!==selectedPatientId){setSelectedPatientId(initialPatientId);}},[initialPatientId,selectedPatientId]);const{allVisualizations,availableVisualizations,selectedVisualizations,handleVisualizationChange}=useVisualizations('physician',data);const{expandedItem,handleExpand,renderVisualization}=useVisualizationHelpers(selectedPatientId,allVisualizations,selectedVisualizations);// Create universal navigation for each chart type\nconst glucoseNavigation=useChartNavigation('glucose');const bloodPressureNavigation=useChartNavigation('bloodPressure');const exerciseNavigation=useChartNavigation('exercise');const sleepNavigation=useChartNavigation('sleep');const painNavigation=useChartNavigation('pain');const moodNavigation=useChartNavigation('mood');const mealContentsNavigation=useChartNavigation('mealContents');const chartNavigation={glucose:glucoseNavigation,bloodPressure:bloodPressureNavigation,exercise:exerciseNavigation,sleep:sleepNavigation,pain:painNavigation,mood:moodNavigation,mealContents:mealContentsNavigation};// Override renderVisualization to set correct viewMode and handle no patient case\nconst renderVisualizationWithMode=(visualizationType,windowId)=>{if(!selectedPatientId){return/*#__PURE__*/_jsx(\"div\",{className:\"chart-placeholder\",children:\"Please select a patient to view data.\"});}const viz=allVisualizations[visualizationType];if(!viz)return/*#__PURE__*/_jsx(\"div\",{className:\"chart-placeholder\",children:\"Invalid visualization\"});const Component=viz.component;const isExpanded=expandedItem===windowId;const navigation=chartNavigation[visualizationType];return/*#__PURE__*/_jsx(Component,{patientId:selectedPatientId,viewMode:\"physician\",isExpanded:isExpanded,onExpand:()=>handleExpand(windowId),navigation:navigation});};const patientInfo=data===null||data===void 0?void 0:data.patientInfo;return/*#__PURE__*/_jsxs(\"div\",{className:\"physician-dashboard\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"physician-header\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Physician Dashboard\"})}),selectedPatientId&&/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-content\",children:[/*#__PURE__*/_jsx(PatientInfoCard,{patientInfo:patientInfo,loading:loading,error:error,variant:\"physician\",className:\"patient-info-card-physician\"}),/*#__PURE__*/_jsx(DashboardGrid,{viewMode:\"physician\",selectedVisualizations:selectedVisualizations,availableVisualizations:availableVisualizations,allVisualizations:allVisualizations,onVisualizationChange:handleVisualizationChange,onExpand:handleExpand,expandedItem:expandedItem,renderVisualization:renderVisualizationWithMode,chartNavigation:chartNavigation,disabled:Object.keys(availableVisualizations).length===0,placeholderText:\"No data available for this patient.\"})]})]});};export default PhysicianDashboard;","map":{"version":3,"names":["React","useState","usePatientData","useVisualizations","useVisualizationHelpers","useChartNavigation","PatientInfoCard","DashboardGrid","jsx","_jsx","jsxs","_jsxs","PhysicianDashboard","_ref","patientId","initialPatientId","selectedPatientId","setSelectedPatientId","data","loading","error","useEffect","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedItem","handleExpand","renderVisualization","glucoseNavigation","bloodPressureNavigation","exerciseNavigation","sleepNavigation","painNavigation","moodNavigation","mealContentsNavigation","chartNavigation","glucose","bloodPressure","exercise","sleep","pain","mood","mealContents","renderVisualizationWithMode","visualizationType","windowId","className","children","viz","Component","component","isExpanded","navigation","viewMode","onExpand","patientInfo","variant","onVisualizationChange","disabled","Object","keys","length","placeholderText"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PhysicianDashboard.js"],"sourcesContent":["/**\n * PhysicianDashboard.js - Physician View Dashboard Component\n * \n * This component renders the physician-focused dashboard view with:\n * - Clinical overview optimized for healthcare providers\n * - Patient information card with medical context\n * - Chart expansion capabilities for detailed review\n * - Support for clinical notes and observations\n * - Chart navigation controls for time period switching\n * \n * ARCHITECTURE:\n * - Designed for physicians to monitor multiple health metrics simultaneously\n * - Provides clinical summaries and statistical analysis\n * - Implements professional medical interface design\n * - Handles patient selection and data validation\n * \n * CUSTOM HOOKS USED:\n * - usePatientData: Manages patient data fetching and caching\n * - useVisualizations: Handles visualization configuration and availability\n * - useVisualizationHelpers: Provides chart expansion and rendering utilities\n * - useChartNavigation: Manages time-based navigation for each chart type\n * \n * COMPONENT STRUCTURE:\n * - Physician header with clinical context\n * - PatientInfoCard: Displays patient demographics and medical information\n * - DashboardGrid: Renders the chart grid with clinical summaries\n * - Individual chart components with physician-specific features\n * \n * STATE MANAGEMENT:\n * - Manages selected patient state independently from parent\n * - Uses custom hooks for centralized state management\n * - Handles chart expansion state through useVisualizationHelpers\n * - Manages navigation state for each chart type independently\n * \n * CLINICAL FEATURES:\n * - Summary statistics for each health metric\n * - Trend analysis and pattern recognition\n * - Professional medical interface design\n * - Comprehensive data visualization for clinical decision making\n * \n * This component provides a comprehensive clinical monitoring interface\n * designed specifically for healthcare providers with advanced analytics\n * and professional medical workflow integration.\n */\n\nimport React, { useState } from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PhysicianDashboard.css';\n\nconst PhysicianDashboard = ({ patientId: initialPatientId }) => {\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\n  const { data, loading, error } = usePatientData(selectedPatientId);\n  \n  // Update selected patient if prop changes\n  React.useEffect(() => {\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\n      setSelectedPatientId(initialPatientId);\n    }\n  }, [initialPatientId, selectedPatientId]);\n\n  const { \n    allVisualizations, \n    availableVisualizations, \n    selectedVisualizations, \n    handleVisualizationChange \n  } = useVisualizations('physician', data);\n\n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\n    selectedPatientId, \n    allVisualizations, \n    selectedVisualizations\n  );\n\n  // Create universal navigation for each chart type\n  const glucoseNavigation = useChartNavigation('glucose');\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\n  const exerciseNavigation = useChartNavigation('exercise');\n  const sleepNavigation = useChartNavigation('sleep');\n  const painNavigation = useChartNavigation('pain');\n  const moodNavigation = useChartNavigation('mood');\n  const mealContentsNavigation = useChartNavigation('mealContents');\n\n  const chartNavigation = {\n    glucose: glucoseNavigation,\n    bloodPressure: bloodPressureNavigation,\n    exercise: exerciseNavigation,\n    sleep: sleepNavigation,\n    pain: painNavigation,\n    mood: moodNavigation,\n    mealContents: mealContentsNavigation\n  };\n\n  // Override renderVisualization to set correct viewMode and handle no patient case\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return <div className=\"chart-placeholder\">Please select a patient to view data.</div>;\n    }\n    \n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <div className=\"chart-placeholder\">Invalid visualization</div>;\n\n    const Component = viz.component;\n    const isExpanded = expandedItem === windowId;\n    const navigation = chartNavigation[visualizationType];\n    \n    return <Component \n      patientId={selectedPatientId} \n      viewMode=\"physician\"\n      isExpanded={isExpanded}\n      onExpand={() => handleExpand(windowId)}\n      navigation={navigation}\n    />;\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  return (\n    <div className=\"physician-dashboard\">\n      <div className=\"physician-header\">\n        <h1>Physician Dashboard</h1>\n      </div>\n\n      {selectedPatientId && (\n        <div className=\"dashboard-content\">\n          <PatientInfoCard \n            patientInfo={patientInfo}\n            loading={loading}\n            error={error}\n            variant=\"physician\"\n            className=\"patient-info-card-physician\"\n          />\n\n          <DashboardGrid\n            viewMode=\"physician\"\n            selectedVisualizations={selectedVisualizations}\n            availableVisualizations={availableVisualizations}\n            allVisualizations={allVisualizations}\n            onVisualizationChange={handleVisualizationChange}\n            onExpand={handleExpand}\n            expandedItem={expandedItem}\n            renderVisualization={renderVisualizationWithMode}\n            chartNavigation={chartNavigation}\n            disabled={Object.keys(availableVisualizations).length === 0}\n            placeholderText=\"No data available for this patient.\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PhysicianDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}