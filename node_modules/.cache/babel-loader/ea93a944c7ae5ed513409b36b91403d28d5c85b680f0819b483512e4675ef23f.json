{"ast":null,"code":"/**\r\n * PainChart.js - Pain Assessment and Visualization Component\r\n * \r\n * This component provides comprehensive pain monitoring:\r\n * - Anatomical body mapping for pain location\r\n * - Pain intensity scale (0-10) with color coding\r\n * - Daily pain tracking and trend analysis\r\n * - Interactive body diagram for pain location selection\r\n * - Pain level input and editing capabilities\r\n * - Responsive design with navigation controls\r\n * \r\n * Critical for pain management and treatment monitoring.\r\n */import React,{useState,useMemo,useRef}from'react';import usePatientData from'../../hooks/usePatientData';import useChartNavigation from'../../hooks/useChartNavigation';import Legend from'../Legend';import'../ChartStyles.css';import BodySVG from'./BodySvg';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PainChart=_ref=>{let{patientId,isExpanded=false,onExpand,viewMode='patient',navigation}=_ref;const{painData,isLoading:loading,error}=usePatientData(patientId,'pain');// Use navigation from parent or fallback to internal navigation\nconst useInternalNavigation=!navigation;const internalNavigation=useChartNavigation('pain');const nav=navigation||internalNavigation;const getPainColor=level=>{// 10-class RdYlBu color scheme\nconst painColors=['#313695',// 0 - No pain (dark blue)\n'#4575b4',// 1 - Very mild pain\n'#74add1',// 2 - Mild pain\n'#abd9e9',// 3 - Mild-moderate pain\n'#e0f3f8',// 4 - Moderate pain\n'#fee090',// 5 - Moderate-severe pain\n'#fdae61',// 6 - Severe pain\n'#f46d43',// 7 - Very severe pain\n'#d73027',// 8 - Extremely severe pain\n'#a50026',// 9 - Most severe pain\n'#a50026'// 10 - Maximum pain (same as 9)\n];return painColors[Math.min(level,10)];};const painLegendItems=Array.from({length:11},(_,i)=>i).map(level=>({color:getPainColor(level),label:\"\".concat(level)}));const{start:startOfWeek,end:endOfWeek}=nav.getDateRange();const weekPainData=painData.filter(d=>d.date>=startOfWeek&&d.date<=endOfWeek);// Get 3-month data\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const threeMonthPainData=painData.filter(d=>d.date>=startOfThreeMonths&&d.date<=endOfThreeMonths);// Process data for chart\nconst{chartData,mostCommonLocation,averagePainLevel}=useMemo(()=>{if(!weekPainData.length)return{chartData:[],mostCommonLocation:null,averagePainLevel:0};// Create a map of dates to pain levels\nconst dateMap=new Map();const locationCounts=new Map();weekPainData.forEach(item=>{const dateKey=item.date.toDateString();dateMap.set(dateKey,item.level);// Count locations\nconst location=item.location.toLowerCase();locationCounts.set(location,(locationCounts.get(location)||0)+1);});// Find most common location\nlet mostCommon=null;let maxCount=0;for(const[location,count]of locationCounts){if(count>maxCount){maxCount=count;mostCommon=location;}}// Generate chart data for all 7 days of the week\nconst data=[];for(let i=0;i<7;i++){const date=new Date(startOfWeek);date.setDate(date.getDate()+i);const dateKey=date.toDateString();const painLevel=dateMap.get(dateKey)||0;data.push({date,day:['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][date.getDay()],level:painLevel,color:getPainColor(painLevel)});}const totalPain=weekPainData.reduce((sum,item)=>sum+item.level,0);const avgPain=weekPainData.length>0?totalPain/weekPainData.length:0;return{chartData:data,mostCommonLocation:mostCommon,averagePainLevel:avgPain};},[weekPainData,startOfWeek]);// Calculate 3-month summary statistics for physician view\nconst threeMonthSummary=useMemo(()=>{if(!threeMonthPainData.length)return null;// Create a map of dates to pain levels for 3-month period\nconst dateMap=new Map();const locationCounts=new Map();threeMonthPainData.forEach(item=>{const dateKey=item.date.toDateString();dateMap.set(dateKey,item.level);// Count locations\nconst location=item.location.toLowerCase();locationCounts.set(location,(locationCounts.get(location)||0)+1);});// Find most common location\nlet mostCommon=null;let maxCount=0;for(const[location,count]of locationCounts){if(count>maxCount){maxCount=count;mostCommon=location;}}const totalPain=threeMonthPainData.reduce((sum,item)=>sum+item.level,0);const avgPain=threeMonthPainData.length>0?totalPain/threeMonthPainData.length:0;// Count days with pain\nconst daysWithPain=new Set(threeMonthPainData.map(d=>d.date.toDateString())).size;const daysInThreeMonths=92;// May, June, July (31 + 30 + 31)\n// Calculate pain severity distribution\nconst painLevelCounts={};for(let i=0;i<=10;i++){painLevelCounts[i]=0;}threeMonthPainData.forEach(item=>{painLevelCounts[item.level]++;});// Find most common pain level\nconst mostCommonPainLevel=Object.entries(painLevelCounts).sort((_ref2,_ref3)=>{let[,a]=_ref2;let[,b]=_ref3;return b-a;})[0];return{totalEntries:threeMonthPainData.length,daysWithPain,daysInThreeMonths,mostCommonLocation:mostCommon,mostCommonLocationCount:maxCount,averagePainLevel:avgPain,mostCommonPainLevel:parseInt(mostCommonPainLevel[0]),mostCommonPainLevelCount:mostCommonPainLevel[1]};},[threeMonthPainData]);const formatDateRange=(start,end)=>{const startStr=start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" to \").concat(endStr);};// Line Chart Component for Pain Ratings\nconst PainLineChart=_ref4=>{let{data,isExpanded}=_ref4;const config={width:isExpanded?600:400,// Match legend width (600px) when expanded\nheight:isExpanded?200:150,padding:{top:20,right:30,bottom:40,left:50},yAxisRange:10,fontSize:{yAxis:isExpanded?10:8,xAxis:isExpanded?10:8}};const chartWidth=config.width-config.padding.left-config.padding.right;const chartHeight=config.height-config.padding.top-config.padding.bottom;const dayWidth=chartWidth/6;// 7 days, 6 intervals\n// Create line path\nconst linePath=data.map((point,index)=>{const x=config.padding.left+index*dayWidth;const y=config.padding.top+chartHeight-point.level/config.yAxisRange*chartHeight;return\"\".concat(index===0?'M':'L',\" \").concat(x,\" \").concat(y);}).join(' ');return/*#__PURE__*/_jsx(\"div\",{className:\"pain-line-chart\",children:/*#__PURE__*/_jsxs(\"svg\",{width:\"100%\",height:\"100%\",viewBox:\"0 0 \".concat(config.width,\" \").concat(config.height),children:[[0,2,4,6,8,10].map(level=>{const y=config.padding.top+chartHeight-level/config.yAxisRange*chartHeight;return/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"line\",{x1:config.padding.left,y1:y,x2:config.width-config.padding.right,y2:y,stroke:\"#e0e0e0\",strokeWidth:\"1\",strokeDasharray:\"2,2\"}),/*#__PURE__*/_jsx(\"text\",{x:config.padding.left-10,y:y+3,fontSize:config.fontSize.yAxis,textAnchor:\"end\",fill:\"var(--chart-color-text-secondary)\",children:level})]},level);}),data.map((point,index)=>{const x=config.padding.left+index*dayWidth;return/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+15,fontSize:config.fontSize.xAxis,textAnchor:\"middle\",className:\"x-axis-day-label\",children:point.day},index);}),/*#__PURE__*/_jsx(\"path\",{d:linePath,stroke:\"var(--chart-color-primary)\",strokeWidth:\"3\",fill:\"none\"}),data.map((point,index)=>{const x=config.padding.left+index*dayWidth;const y=config.padding.top+chartHeight-point.level/config.yAxisRange*chartHeight;return/*#__PURE__*/_jsx(\"circle\",{cx:x,cy:y,r:\"4\",fill:point.color,stroke:\"var(--chart-color-primary)\",strokeWidth:\"2\"},index);})]})});};const Body=_ref5=>{let{location,level}=_ref5;const color=getPainColor(level);const locationLower=location.toLowerCase();return/*#__PURE__*/_jsx(\"div\",{className:\"body-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"body-views\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"body-view\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"body-view-label\",children:\"Front\"}),/*#__PURE__*/_jsx(BodySVG,{className:\"body-svg\",painLocation:locationLower,painColor:color,view:\"front\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"body-view\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"body-view-label\",children:\"Back\"}),/*#__PURE__*/_jsx(BodySVG,{className:\"body-svg\",painLocation:locationLower,painColor:color,view:\"back\"})]})]})});};if(viewMode==='patient'){return/*#__PURE__*/_jsxs(\"div\",{className:\"pain-chart-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-chart-wrapper\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Pain\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getCurrentMonthYear()}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-list\",children:weekPainData.length>0?weekPainData.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"pain-list-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-item-info\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pain-item-date\",children:new Date(item.date).toLocaleDateString('en-US',{weekday:'short',month:'short',day:'numeric'})}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-item-details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-level\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Pain Level:\"}),\" \",item.level,\"/10\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-location\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Location:\"}),\" \",item.location]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-item-body\",children:/*#__PURE__*/_jsx(Body,{location:item.location,level:item.level})})]},index)):/*#__PURE__*/_jsx(\"div\",{className:\"no-pain-data\",children:\"No pain data available for this week\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Pain Intensity Scale (0-10)\",items:painLegendItems})})]});}// Physician view\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"physician-pain-chart-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-line-chart-container\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Pain\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getCurrentMonthYear()}),/*#__PURE__*/_jsx(PainLineChart,{data:chartData,isExpanded:isExpanded})]}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-location-info\",children:/*#__PURE__*/_jsxs(\"h4\",{children:[\"Pain Location: \",mostCommonLocation||'N/A']})}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Pain Intensity Scale (0-10)\",items:painLegendItems})}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Week Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Average Pain Intensity:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[averagePainLevel.toFixed(1),\"/10\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common Location:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:mostCommonLocation||'N/A'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Days with Pain:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekPainData.length,\"/7\"]})]})]})]}),threeMonthSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"3-Month Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Average Pain Intensity:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.averagePainLevel.toFixed(1),\"/10\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common Location:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.mostCommonLocation||'N/A',\" (\",threeMonthSummary.mostCommonLocationCount,\"x)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Days with Pain:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.daysWithPain,\"/\",threeMonthSummary.daysInThreeMonths]})]})]})]})]})]});};export default PainChart;","map":{"version":3,"names":["React","useState","useMemo","useRef","usePatientData","useChartNavigation","Legend","BodySVG","jsx","_jsx","jsxs","_jsxs","PainChart","_ref","patientId","isExpanded","onExpand","viewMode","navigation","painData","isLoading","loading","error","useInternalNavigation","internalNavigation","nav","getPainColor","level","painColors","Math","min","painLegendItems","Array","from","length","_","i","map","color","label","concat","start","startOfWeek","end","endOfWeek","getDateRange","weekPainData","filter","d","date","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthPainData","chartData","mostCommonLocation","averagePainLevel","dateMap","Map","locationCounts","forEach","item","dateKey","toDateString","set","location","toLowerCase","get","mostCommon","maxCount","count","data","Date","setDate","getDate","painLevel","push","day","getDay","totalPain","reduce","sum","avgPain","threeMonthSummary","daysWithPain","Set","size","daysInThreeMonths","painLevelCounts","mostCommonPainLevel","Object","entries","sort","_ref2","_ref3","a","b","totalEntries","mostCommonLocationCount","parseInt","mostCommonPainLevelCount","formatDateRange","startStr","toLocaleDateString","month","endStr","PainLineChart","_ref4","config","width","height","padding","top","right","bottom","left","yAxisRange","fontSize","yAxis","xAxis","chartWidth","chartHeight","dayWidth","linePath","point","index","x","y","join","className","children","viewBox","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","textAnchor","fill","cx","cy","r","Body","_ref5","locationLower","painLocation","painColor","view","getCurrentMonthYear","weekday","title","items","toFixed"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/PainChart.js"],"sourcesContent":["/**\r\n * PainChart.js - Pain Assessment and Visualization Component\r\n * \r\n * This component provides comprehensive pain monitoring:\r\n * - Anatomical body mapping for pain location\r\n * - Pain intensity scale (0-10) with color coding\r\n * - Daily pain tracking and trend analysis\r\n * - Interactive body diagram for pain location selection\r\n * - Pain level input and editing capabilities\r\n * - Responsive design with navigation controls\r\n * \r\n * Critical for pain management and treatment monitoring.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\n\r\nimport Legend from '../Legend';\r\nimport '../ChartStyles.css';\r\nimport BodySVG from './BodySvg';\r\n\r\nconst PainChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { painData, isLoading: loading, error } = usePatientData(patientId, 'pain');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('pain');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const getPainColor = (level) => {\r\n    // 10-class RdYlBu color scheme\r\n    const painColors = [\r\n      '#313695', // 0 - No pain (dark blue)\r\n      '#4575b4', // 1 - Very mild pain\r\n      '#74add1', // 2 - Mild pain\r\n      '#abd9e9', // 3 - Mild-moderate pain\r\n      '#e0f3f8', // 4 - Moderate pain\r\n      '#fee090', // 5 - Moderate-severe pain\r\n      '#fdae61', // 6 - Severe pain\r\n      '#f46d43', // 7 - Very severe pain\r\n      '#d73027', // 8 - Extremely severe pain\r\n      '#a50026', // 9 - Most severe pain\r\n      '#a50026'  // 10 - Maximum pain (same as 9)\r\n    ];\r\n    \r\n    return painColors[Math.min(level, 10)];\r\n  };\r\n\r\n\r\n\r\n  const painLegendItems = Array.from({ length: 11 }, (_, i) => i).map(level => ({\r\n    color: getPainColor(level),\r\n    label: `${level}`,\r\n  }));\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\r\n\r\n  // Get 3-month data\r\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\r\n  const threeMonthPainData = painData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\r\n\r\n  // Process data for chart\r\n  const { chartData, mostCommonLocation, averagePainLevel } = useMemo(() => {\r\n    if (!weekPainData.length) return { chartData: [], mostCommonLocation: null, averagePainLevel: 0 };\r\n\r\n    // Create a map of dates to pain levels\r\n    const dateMap = new Map();\r\n    const locationCounts = new Map();\r\n\r\n    weekPainData.forEach(item => {\r\n      const dateKey = item.date.toDateString();\r\n      dateMap.set(dateKey, item.level);\r\n      \r\n      // Count locations\r\n      const location = item.location.toLowerCase();\r\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\r\n    });\r\n\r\n    // Find most common location\r\n    let mostCommon = null;\r\n    let maxCount = 0;\r\n    for (const [location, count] of locationCounts) {\r\n      if (count > maxCount) {\r\n        maxCount = count;\r\n        mostCommon = location;\r\n      }\r\n    }\r\n\r\n    // Generate chart data for all 7 days of the week\r\n    const data = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(startOfWeek);\r\n      date.setDate(date.getDate() + i);\r\n      const dateKey = date.toDateString();\r\n      const painLevel = dateMap.get(dateKey) || 0;\r\n      \r\n      data.push({\r\n        date,\r\n        day: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][date.getDay()],\r\n        level: painLevel,\r\n        color: getPainColor(painLevel)\r\n      });\r\n    }\r\n\r\n    const totalPain = weekPainData.reduce((sum, item) => sum + item.level, 0);\r\n    const avgPain = weekPainData.length > 0 ? (totalPain / weekPainData.length) : 0;\r\n\r\n    return {\r\n      chartData: data,\r\n      mostCommonLocation: mostCommon,\r\n      averagePainLevel: avgPain\r\n    };\r\n  }, [weekPainData, startOfWeek]);\r\n\r\n  // Calculate 3-month summary statistics for physician view\r\n  const threeMonthSummary = useMemo(() => {\r\n    if (!threeMonthPainData.length) return null;\r\n\r\n    // Create a map of dates to pain levels for 3-month period\r\n    const dateMap = new Map();\r\n    const locationCounts = new Map();\r\n\r\n    threeMonthPainData.forEach(item => {\r\n      const dateKey = item.date.toDateString();\r\n      dateMap.set(dateKey, item.level);\r\n      \r\n      // Count locations\r\n      const location = item.location.toLowerCase();\r\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\r\n    });\r\n\r\n    // Find most common location\r\n    let mostCommon = null;\r\n    let maxCount = 0;\r\n    for (const [location, count] of locationCounts) {\r\n      if (count > maxCount) {\r\n        maxCount = count;\r\n        mostCommon = location;\r\n      }\r\n    }\r\n\r\n    const totalPain = threeMonthPainData.reduce((sum, item) => sum + item.level, 0);\r\n    const avgPain = threeMonthPainData.length > 0 ? (totalPain / threeMonthPainData.length) : 0;\r\n\r\n    // Count days with pain\r\n    const daysWithPain = new Set(threeMonthPainData.map(d => d.date.toDateString())).size;\r\n    const daysInThreeMonths = 92; // May, June, July (31 + 30 + 31)\r\n\r\n    // Calculate pain severity distribution\r\n    const painLevelCounts = {};\r\n    for (let i = 0; i <= 10; i++) {\r\n      painLevelCounts[i] = 0;\r\n    }\r\n    threeMonthPainData.forEach(item => {\r\n      painLevelCounts[item.level]++;\r\n    });\r\n\r\n    // Find most common pain level\r\n    const mostCommonPainLevel = Object.entries(painLevelCounts)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n\r\n    return {\r\n      totalEntries: threeMonthPainData.length,\r\n      daysWithPain,\r\n      daysInThreeMonths,\r\n      mostCommonLocation: mostCommon,\r\n      mostCommonLocationCount: maxCount,\r\n      averagePainLevel: avgPain,\r\n      mostCommonPainLevel: parseInt(mostCommonPainLevel[0]),\r\n      mostCommonPainLevelCount: mostCommonPainLevel[1]\r\n    };\r\n  }, [threeMonthPainData]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  // Line Chart Component for Pain Ratings\r\n  const PainLineChart = ({ data, isExpanded }) => {\r\n    const config = {\r\n      width: isExpanded ? 600 : 400, // Match legend width (600px) when expanded\r\n      height: isExpanded ? 200 : 150,\r\n      padding: { top: 20, right: 30, bottom: 40, left: 50 },\r\n      yAxisRange: 10,\r\n      fontSize: {\r\n        yAxis: isExpanded ? 10 : 8,\r\n        xAxis: isExpanded ? 10 : 8,\r\n      }\r\n    };\r\n\r\n    const chartWidth = config.width - config.padding.left - config.padding.right;\r\n    const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n    const dayWidth = chartWidth / 6; // 7 days, 6 intervals\r\n\r\n    // Create line path\r\n    const linePath = data.map((point, index) => {\r\n      const x = config.padding.left + (index * dayWidth);\r\n      const y = config.padding.top + chartHeight - (point.level / config.yAxisRange) * chartHeight;\r\n      return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\r\n    }).join(' ');\r\n\r\n    return (\r\n      <div className=\"pain-line-chart\">\r\n        <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${config.width} ${config.height}`}>\r\n          {/* Grid lines */}\r\n          {[0, 2, 4, 6, 8, 10].map(level => {\r\n            const y = config.padding.top + chartHeight - (level / config.yAxisRange) * chartHeight;\r\n            return (\r\n              <g key={level}>\r\n                <line \r\n                  x1={config.padding.left} \r\n                  y1={y} \r\n                  x2={config.width - config.padding.right} \r\n                  y2={y} \r\n                  stroke=\"#e0e0e0\" \r\n                  strokeWidth=\"1\" \r\n                  strokeDasharray=\"2,2\"\r\n                />\r\n                <text \r\n                  x={config.padding.left - 10} \r\n                  y={y + 3} \r\n                  fontSize={config.fontSize.yAxis} \r\n                  textAnchor=\"end\" \r\n                  fill=\"var(--chart-color-text-secondary)\"\r\n                >\r\n                  {level}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n\r\n          {/* X-axis labels */}\r\n          {data.map((point, index) => {\r\n            const x = config.padding.left + (index * dayWidth);\r\n            return (\r\n              <text \r\n                key={index}\r\n                x={x} \r\n                y={config.height - config.padding.bottom + 15} \r\n                fontSize={config.fontSize.xAxis} \r\n                textAnchor=\"middle\" \r\n                className=\"x-axis-day-label\"\r\n              >\r\n                {point.day}\r\n              </text>\r\n            );\r\n          })}\r\n\r\n          {/* Line */}\r\n          <path \r\n            d={linePath} \r\n            stroke=\"var(--chart-color-primary)\" \r\n            strokeWidth=\"3\" \r\n            fill=\"none\"\r\n          />\r\n\r\n          {/* Data points */}\r\n          {data.map((point, index) => {\r\n            const x = config.padding.left + (index * dayWidth);\r\n            const y = config.padding.top + chartHeight - (point.level / config.yAxisRange) * chartHeight;\r\n            return (\r\n              <circle \r\n                key={index}\r\n                cx={x} \r\n                cy={y} \r\n                r=\"4\" \r\n                fill={point.color} \r\n                stroke=\"var(--chart-color-primary)\" \r\n                strokeWidth=\"2\"\r\n              />\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const Body = ({ location, level }) => {\r\n    const color = getPainColor(level);\r\n    const locationLower = location.toLowerCase();\r\n\r\n    return (\r\n      <div className=\"body-container\">\r\n        <div className=\"body-views\">\r\n          <div className=\"body-view\">\r\n            <div className=\"body-view-label\">Front</div>\r\n            <BodySVG \r\n              className=\"body-svg\" \r\n              painLocation={locationLower} \r\n              painColor={color} \r\n              view=\"front\" \r\n            />\r\n          </div>\r\n          <div className=\"body-view\">\r\n            <div className=\"body-view-label\">Back</div>\r\n            <BodySVG \r\n              className=\"body-svg\" \r\n              painLocation={locationLower} \r\n              painColor={color} \r\n              view=\"back\" \r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (viewMode === 'patient') {\r\n    return (\r\n        <div className=\"pain-chart-container\">\r\n          <div className=\"pain-chart-wrapper\">\r\n            <h3 className=\"chart-title\">Pain</h3>\r\n            <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n            <div className=\"pain-list\">\r\n              {weekPainData.length > 0 ? (\r\n                weekPainData.map((item, index) => (\r\n                  <div key={index} className=\"pain-list-item\">\r\n                    <div className=\"pain-item-info\">\r\n                      <div className=\"pain-item-date\">\r\n                        {new Date(item.date).toLocaleDateString('en-US', { \r\n                          weekday: 'short', \r\n                          month: 'short', \r\n                          day: 'numeric' \r\n                        })}\r\n                      </div>\r\n                      <div className=\"pain-item-details\">\r\n                        <div className=\"pain-level\">\r\n                          <strong>Pain Level:</strong> {item.level}/10\r\n                        </div>\r\n                        <div className=\"pain-location\">\r\n                          <strong>Location:</strong> {item.location}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"pain-item-body\">\r\n                      <Body location={item.location} level={item.level} />\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className=\"no-pain-data\">No pain data available for this week</div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"pain-legend-wrapper\">\r\n            <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  // Physician view\r\n  return (\r\n      <div className=\"physician-pain-chart-container\">\r\n        <div className=\"pain-line-chart-container\">\r\n          <h3 className=\"chart-title\">Pain</h3>\r\n          <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n          <PainLineChart data={chartData} isExpanded={isExpanded} />\r\n        </div>\r\n\r\n        <div className=\"pain-location-info\">\r\n          <h4>Pain Location: {mostCommonLocation || 'N/A'}</h4>\r\n        </div>\r\n        \r\n        <div className=\"pain-legend-wrapper\">\r\n          <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\r\n        </div>\r\n\r\n        <div className=\"summary-container\">\r\n          <div className=\"chart-summary\">\r\n            <h4>Week Summary</h4>\r\n            <div className=\"summary-stats\">\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Average Pain Intensity:</span>\r\n                <span className=\"stat-value\">{averagePainLevel.toFixed(1)}/10</span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Most Common Location:</span>\r\n                <span className=\"stat-value\">{mostCommonLocation || 'N/A'}</span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Days with Pain:</span>\r\n                <span className=\"stat-value\">{weekPainData.length}/7</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {threeMonthSummary && (\r\n            <div className=\"chart-summary\">\r\n              <h4>3-Month Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Average Pain Intensity:</span>\r\n                  <span className=\"stat-value\">{threeMonthSummary.averagePainLevel.toFixed(1)}/10</span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Most Common Location:</span>\r\n                  <span className=\"stat-value\">\r\n                    {threeMonthSummary.mostCommonLocation || 'N/A'} ({threeMonthSummary.mostCommonLocationCount}x)\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Days with Pain:</span>\r\n                  <span className=\"stat-value\">\r\n                    {threeMonthSummary.daysWithPain}/{threeMonthSummary.daysInThreeMonths}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default PainChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}