{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\PhysicianDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PatientSelector from './PatientSelector';\nimport usePatientData from './hooks/usePatientData';\nimport GlucoseChart from './components/patient_charts/GlucoseChart';\nimport BloodPressureChart from './components/patient_charts/BloodPressureChart';\nimport ExerciseChart from './components/patient_charts/ExerciseChart';\nimport MoodCalendar from './components/patient_charts/MoodCalendar';\nimport PhysicianPainChart from './components/patient_charts/PhysicianPainChart';\nimport MealContentsChart from './components/patient_charts/MealContentsChart';\nimport SleepChart from './components/patient_charts/SleepChart';\nimport './PhysicianDashboard.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PATIENT_COUNT = 100;\nconst PATIENTS = Array.from({\n  length: PATIENT_COUNT\n}, (_, i) => `Patient_${(i + 1).toString().padStart(3, '0')}`);\nconst PhysicianDashboard = () => {\n  _s();\n  var _patientInfo$conditio, _patientInfo$detailed;\n  const [selectedPatientId, setSelectedPatientId] = useState('');\n  const {\n    data,\n    loading,\n    error\n  } = usePatientData(selectedPatientId);\n  const allVisualizations = {\n    glucose: {\n      name: 'Blood Glucose',\n      component: GlucoseChart,\n      color: '#3498db'\n    },\n    bloodPressure: {\n      name: 'Blood Pressure',\n      component: BloodPressureChart,\n      color: '#e74c3c'\n    },\n    exercise: {\n      name: 'Exercise Chart',\n      component: ExerciseChart,\n      color: '#f39c12'\n    },\n    mood: {\n      name: 'Mood Calendar',\n      component: MoodCalendar,\n      color: '#9b59b6'\n    },\n    pain: {\n      name: 'Pain Report 2',\n      component: PhysicianPainChart,\n      color: '#e67e22'\n    },\n    mealContents: {\n      name: 'Meal Contents',\n      component: MealContentsChart,\n      color: '#27ae60'\n    },\n    sleep: {\n      name: 'Sleep Chart',\n      component: SleepChart,\n      color: '#34495e'\n    }\n  };\n\n  // Check for available visualizations based on data\n  const availableVisualizations = React.useMemo(() => {\n    if (!data) return {};\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\n      const dataKey = `${key}Data`;\n      // Special case for meal contents\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\n        acc[key] = viz;\n      } else if (data[dataKey] && data[dataKey].length > 0) {\n        acc[key] = viz;\n      }\n      return acc;\n    }, {});\n  }, [data]);\n\n  // Default selections for 6 windows\n  const [selectedVisualizations, setSelectedVisualizations] = useState({\n    window1: 'glucose',\n    window2: 'bloodPressure',\n    window3: 'exercise',\n    window4: 'sleep',\n    window5: 'mood',\n    window6: 'pain'\n  });\n  const [expandedWindow, setExpandedWindow] = useState(null);\n\n  // Update selections when available visualizations change\n  React.useEffect(() => {\n    if (Object.keys(availableVisualizations).length > 0) {\n      const availableKeys = Object.keys(availableVisualizations);\n      const defaultOrder = ['glucose', 'bloodPressure', 'exercise', 'sleep', 'mood', 'pain', 'mealContents'];\n\n      // Filter default order to only include available visualizations\n      const orderedAvailable = defaultOrder.filter(key => availableKeys.includes(key));\n\n      // Fill in any remaining slots with available visualizations not in default order\n      const remaining = availableKeys.filter(key => !orderedAvailable.includes(key));\n      const finalOrder = [...orderedAvailable, ...remaining];\n      setSelectedVisualizations(prev => {\n        const updated = {\n          ...prev\n        };\n        const windowIds = ['window1', 'window2', 'window3', 'window4', 'window5', 'window6'];\n        windowIds.forEach((windowId, index) => {\n          if (finalOrder[index]) {\n            updated[windowId] = finalOrder[index];\n          } else if (!availableKeys.includes(updated[windowId])) {\n            // If current selection is not available, use the first available\n            updated[windowId] = finalOrder[0] || 'glucose';\n          }\n        });\n        return updated;\n      });\n    }\n  }, [availableVisualizations]);\n  const handleVisualizationChange = (windowId, visualizationType) => {\n    setSelectedVisualizations(prev => ({\n      ...prev,\n      [windowId]: visualizationType\n    }));\n  };\n  const handleExpand = windowId => {\n    setExpandedWindow(prev => prev === windowId ? null : windowId);\n  };\n  const renderVisualization = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-placeholder\",\n        children: \"Please select a patient to view data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 14\n      }, this);\n    }\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-placeholder\",\n      children: \"Invalid visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 22\n    }, this);\n    const Component = viz.component;\n    const isExpanded = expandedWindow === windowId;\n    return /*#__PURE__*/_jsxDEV(Component, {\n      patientId: selectedPatientId,\n      isPhysicianView: true,\n      isExpanded: isExpanded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Component for individual visualization windows\n  const VisualizationWindow = ({\n    windowId,\n    className,\n    isExpanded = false\n  }) => {\n    const selectedViz = selectedVisualizations[windowId];\n    const viz = allVisualizations[selectedViz];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `physician-chart-container ${className}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedViz,\n          onChange: e => handleVisualizationChange(windowId, e.target.value),\n          style: {\n            color: (viz === null || viz === void 0 ? void 0 : viz.color) || '#2c3e50'\n          },\n          disabled: Object.keys(availableVisualizations).length === 0,\n          children: Object.entries(availableVisualizations).map(([key, viz]) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            children: viz.name\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleExpand(windowId),\n          className: \"expand-button\",\n          children: expandedWindow === windowId ? 'Collapse' : 'Expand'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization-content\",\n        children: Object.keys(availableVisualizations).length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-placeholder\",\n          children: \"No data available for this patient.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this) : renderVisualization(selectedViz, windowId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  };\n  const patientInfo = data === null || data === void 0 ? void 0 : data.patientInfo;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"physician-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"physician-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Physician Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PatientSelector, {\n        patients: PATIENTS,\n        value: selectedPatientId,\n        onChange: setSelectedPatientId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), selectedPatientId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"patient-info-card-physician\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Patient Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading patient info...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Error loading data.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 23\n        }, this), patientInfo && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Patient #:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 22\n            }, this), \" \", patientInfo.patientNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Age:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 22\n            }, this), \" \", patientInfo.age, \" years\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Gender:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 22\n            }, this), \" \", patientInfo.gender || 'Not specified']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conditions-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Conditions:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"conditions-list\",\n              children: (_patientInfo$conditio = patientInfo.conditions) === null || _patientInfo$conditio === void 0 ? void 0 : _patientInfo$conditio.map((condition, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"condition-item\",\n                children: condition\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"medications-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Medications:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"medications-list\",\n              children: (_patientInfo$detailed = patientInfo.detailedMedications) === null || _patientInfo$detailed === void 0 ? void 0 : _patientInfo$detailed.map((med, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"medication-item\",\n                children: med.name\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"physician-charts-grid\",\n        children: [/*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window1\",\n          className: \"window-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window2\",\n          className: \"window-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window3\",\n          className: \"window-3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window4\",\n          className: \"window-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window5\",\n          className: \"window-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window6\",\n          className: \"window-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(PhysicianDashboard, \"1coUZwLJgKi1gvWRrrFOuXCc9ww=\", false, function () {\n  return [usePatientData];\n});\n_c = PhysicianDashboard;\nexport default PhysicianDashboard;\nvar _c;\n$RefreshReg$(_c, \"PhysicianDashboard\");","map":{"version":3,"names":["React","useState","PatientSelector","usePatientData","GlucoseChart","BloodPressureChart","ExerciseChart","MoodCalendar","PhysicianPainChart","MealContentsChart","SleepChart","jsxDEV","_jsxDEV","Fragment","_Fragment","PATIENT_COUNT","PATIENTS","Array","from","length","_","i","toString","padStart","PhysicianDashboard","_s","_patientInfo$conditio","_patientInfo$detailed","selectedPatientId","setSelectedPatientId","data","loading","error","allVisualizations","glucose","name","component","color","bloodPressure","exercise","mood","pain","mealContents","sleep","availableVisualizations","useMemo","Object","entries","reduce","acc","key","viz","dataKey","selectedVisualizations","setSelectedVisualizations","window1","window2","window3","window4","window5","window6","expandedWindow","setExpandedWindow","useEffect","keys","availableKeys","defaultOrder","orderedAvailable","filter","includes","remaining","finalOrder","prev","updated","windowIds","forEach","windowId","index","handleVisualizationChange","visualizationType","handleExpand","renderVisualization","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Component","isExpanded","patientId","isPhysicianView","VisualizationWindow","selectedViz","value","onChange","e","target","style","disabled","map","onClick","patientInfo","patients","patientNumber","age","gender","conditions","condition","detailedMedications","med","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PhysicianDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PatientSelector from './PatientSelector';\nimport usePatientData from './hooks/usePatientData';\n\nimport GlucoseChart from './components/patient_charts/GlucoseChart';\nimport BloodPressureChart from './components/patient_charts/BloodPressureChart';\nimport ExerciseChart from './components/patient_charts/ExerciseChart';\nimport MoodCalendar from './components/patient_charts/MoodCalendar';\nimport PhysicianPainChart from './components/patient_charts/PhysicianPainChart';\nimport MealContentsChart from './components/patient_charts/MealContentsChart';\nimport SleepChart from './components/patient_charts/SleepChart';\n\nimport './PhysicianDashboard.css';\n\nconst PATIENT_COUNT = 100;\nconst PATIENTS = Array.from({ length: PATIENT_COUNT }, (_, i) => `Patient_${(i + 1).toString().padStart(3, '0')}`);\n\nconst PhysicianDashboard = () => {\n  const [selectedPatientId, setSelectedPatientId] = useState('');\n  const { data, loading, error } = usePatientData(selectedPatientId);\n\n  const allVisualizations = {\n    glucose: { name: 'Blood Glucose', component: GlucoseChart, color: '#3498db' },\n    bloodPressure: { name: 'Blood Pressure', component: BloodPressureChart, color: '#e74c3c' },\n    exercise: { name: 'Exercise Chart', component: ExerciseChart, color: '#f39c12' },\n    mood: { name: 'Mood Calendar', component: MoodCalendar, color: '#9b59b6' },\n    pain: { name: 'Pain Report 2', component: PhysicianPainChart, color: '#e67e22' },\n    mealContents: { name: 'Meal Contents', component: MealContentsChart, color: '#27ae60' },\n    sleep: { name: 'Sleep Chart', component: SleepChart, color: '#34495e' },\n  };\n\n  // Check for available visualizations based on data\n  const availableVisualizations = React.useMemo(() => {\n    if (!data) return {};\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\n      const dataKey = `${key}Data`;\n      // Special case for meal contents\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\n        acc[key] = viz;\n      } else if (data[dataKey] && data[dataKey].length > 0) {\n        acc[key] = viz;\n      }\n      return acc;\n    }, {});\n  }, [data]);\n\n  // Default selections for 6 windows\n  const [selectedVisualizations, setSelectedVisualizations] = useState({\n    window1: 'glucose',\n    window2: 'bloodPressure',\n    window3: 'exercise',\n    window4: 'sleep',\n    window5: 'mood',\n    window6: 'pain'\n  });\n\n  const [expandedWindow, setExpandedWindow] = useState(null);\n\n  // Update selections when available visualizations change\n  React.useEffect(() => {\n    if (Object.keys(availableVisualizations).length > 0) {\n      const availableKeys = Object.keys(availableVisualizations);\n      const defaultOrder = ['glucose', 'bloodPressure', 'exercise', 'sleep', 'mood', 'pain', 'mealContents'];\n      \n      // Filter default order to only include available visualizations\n      const orderedAvailable = defaultOrder.filter(key => availableKeys.includes(key));\n      \n      // Fill in any remaining slots with available visualizations not in default order\n      const remaining = availableKeys.filter(key => !orderedAvailable.includes(key));\n      const finalOrder = [...orderedAvailable, ...remaining];\n      \n      setSelectedVisualizations(prev => {\n        const updated = { ...prev };\n        const windowIds = ['window1', 'window2', 'window3', 'window4', 'window5', 'window6'];\n        \n        windowIds.forEach((windowId, index) => {\n          if (finalOrder[index]) {\n            updated[windowId] = finalOrder[index];\n          } else if (!availableKeys.includes(updated[windowId])) {\n            // If current selection is not available, use the first available\n            updated[windowId] = finalOrder[0] || 'glucose';\n          }\n        });\n        \n        return updated;\n      });\n    }\n  }, [availableVisualizations]);\n\n  const handleVisualizationChange = (windowId, visualizationType) => {\n    setSelectedVisualizations(prev => ({ ...prev, [windowId]: visualizationType }));\n  };\n\n  const handleExpand = (windowId) => {\n    setExpandedWindow(prev => (prev === windowId ? null : windowId));\n  };\n\n  const renderVisualization = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return <div className=\"chart-placeholder\">Please select a patient to view data.</div>;\n    }\n    \n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <div className=\"chart-placeholder\">Invalid visualization</div>;\n\n    const Component = viz.component;\n    const isExpanded = expandedWindow === windowId;\n    return <Component patientId={selectedPatientId} isPhysicianView={true} isExpanded={isExpanded} />;\n  };\n\n  // Component for individual visualization windows\n  const VisualizationWindow = ({ windowId, className, isExpanded = false }) => {\n    const selectedViz = selectedVisualizations[windowId];\n    const viz = allVisualizations[selectedViz];\n    \n    return (\n      <div className={`physician-chart-container ${className}`}>\n        <div className=\"visualization-header\">\n          <select \n            value={selectedViz}\n            onChange={(e) => handleVisualizationChange(windowId, e.target.value)}\n            style={{ color: viz?.color || '#2c3e50' }}\n            disabled={Object.keys(availableVisualizations).length === 0}\n          >\n            {Object.entries(availableVisualizations).map(([key, viz]) => (\n              <option key={key} value={key}>{viz.name}</option>\n            ))}\n          </select>\n          <button onClick={() => handleExpand(windowId)} className=\"expand-button\">\n            {expandedWindow === windowId ? 'Collapse' : 'Expand'}\n          </button>\n        </div>\n        <div className=\"visualization-content\">\n          {Object.keys(availableVisualizations).length === 0 ? (\n            <div className=\"chart-placeholder\">No data available for this patient.</div>\n          ) : (\n            renderVisualization(selectedViz, windowId)\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  return (\n    <div className=\"physician-dashboard\">\n      <div className=\"physician-header\">\n        <h1>Physician Dashboard</h1>\n        <PatientSelector\n          patients={PATIENTS}\n          value={selectedPatientId}\n          onChange={setSelectedPatientId}\n        />\n      </div>\n\n      {selectedPatientId && (\n        <div className=\"dashboard-content\">\n          <div className=\"patient-info-card-physician\">\n            <h3>Patient Information</h3>\n            {loading && <p>Loading patient info...</p>}\n            {error && <p>Error loading data.</p>}\n            {patientInfo && (\n              <>\n                <div><span>Patient #:</span> {patientInfo.patientNumber}</div>\n                <div><span>Age:</span> {patientInfo.age} years</div>\n                <div><span>Gender:</span> {patientInfo.gender || 'Not specified'}</div>\n                <div className=\"conditions-section\">\n                  <span>Conditions:</span>\n                  <div className=\"conditions-list\">\n                    {patientInfo.conditions?.map((condition, i) => (\n                      <div key={i} className=\"condition-item\">{condition}</div>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"medications-section\">\n                  <span>Medications:</span>\n                  <div className=\"medications-list\">\n                    {patientInfo.detailedMedications?.map((med, i) => (\n                      <div key={i} className=\"medication-item\">{med.name}</div>\n                    ))}\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n\n          <div className=\"physician-charts-grid\">\n            <VisualizationWindow windowId=\"window1\" className=\"window-1\" />\n            <VisualizationWindow windowId=\"window2\" className=\"window-2\" />\n            <VisualizationWindow windowId=\"window3\" className=\"window-3\" />\n            <VisualizationWindow windowId=\"window4\" className=\"window-4\" />\n            <VisualizationWindow windowId=\"window5\" className=\"window-5\" />\n            <VisualizationWindow windowId=\"window6\" className=\"window-6\" />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PhysicianDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}