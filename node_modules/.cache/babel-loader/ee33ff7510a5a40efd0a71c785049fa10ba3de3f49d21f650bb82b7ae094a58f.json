{"ast":null,"code":"import React,{useState}from'react';import usePatientData from'../../hooks/usePatientData';import ChartContainer from'../ChartContainer';import Legend from'../Legend';import'../ChartStyles.css';import'./PainChart.css';import BodySVG from'./BodySvg';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PainChart=_ref=>{let{patientId,isExpanded=false,onExpand}=_ref;const{painData,isLoading:loading,error}=usePatientData(patientId,'pain');const[currentWeek,setCurrentWeek]=useState(new Date(2025,4,1));// Default to May 2025\nconst handlePrevWeek=()=>{setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate()-7)));};const handleNextWeek=()=>{setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate()+7)));};const getPainColor=level=>{if(level===0)return'#E8F5E8';// Very light green for no pain\nif(level<=2)return'var(--chart-color-good)';// Green for mild pain\nif(level<=4)return'var(--chart-color-warning)';// Orange for moderate pain\nif(level<=6)return'#FF8C69';// Dark orange for moderate-severe pain\nif(level<=8)return'var(--chart-color-danger)';// Red for severe pain\nreturn'#DC143C';// Dark red for extreme pain\n};const getPainIntensity=level=>{if(level===0)return'No Pain';if(level<=2)return'Mild';if(level<=4)return'Moderate';if(level<=6)return'Moderate-Severe';if(level<=8)return'Severe';return'Extreme';};const painLegendItems=Array.from({length:11},(_,i)=>i).map(level=>({color:getPainColor(level),label:\"\".concat(level)}));const Body=_ref2=>{let{location,level}=_ref2;const color=getPainColor(level);return/*#__PURE__*/_jsx(\"div\",{className:\"body-container\",children:/*#__PURE__*/_jsx(BodySVG,{className:\"body-svg\",painLocation:location.toLowerCase(),painColor:color})});};const startOfWeek=new Date(currentWeek);startOfWeek.setDate(startOfWeek.getDate()-startOfWeek.getDay());startOfWeek.setHours(0,0,0,0);const endOfWeek=new Date(startOfWeek);endOfWeek.setDate(endOfWeek.getDate()+6);endOfWeek.setHours(23,59,59,999);const weekPainData=painData.filter(d=>d.date>=startOfWeek&&d.date<=endOfWeek);const formatDateRange=(start,end)=>{const startStr=start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" to \").concat(endStr);};return/*#__PURE__*/_jsx(ChartContainer,{title:\"Pain Report\",icon:\"\\uD83E\\uDD15\",isLoading:loading,error:error,noData:!loading&&!error&&(!painData||painData.length===0),isExpanded:isExpanded,onExpand:onExpand,onPrev:handlePrevWeek,onNext:handleNextWeek,navigationLabel:formatDateRange(startOfWeek,endOfWeek),children:/*#__PURE__*/_jsxs(\"div\",{className:\"pain-chart-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pain-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Pain Intensity Scale (0-10)\",items:painLegendItems})}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-chart-wrapper\",children:/*#__PURE__*/_jsx(\"div\",{className:\"pain-list\",children:weekPainData.length>0?weekPainData.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"pain-list-item\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pain-item-date\",children:new Date(item.date).toLocaleDateString('en-US',{weekday:'short',month:'short',day:'numeric'})}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-item-body\",children:/*#__PURE__*/_jsx(Body,{location:item.location,level:item.level})}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-item-details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-level\",children:[\"Level: \",item.level,\"/10\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-location\",children:item.location})]})]},index)):/*#__PURE__*/_jsx(\"p\",{className:\"no-pain-data\",children:\"No pain reported this week\"})})})]})});};export default PainChart;","map":{"version":3,"names":["React","useState","usePatientData","ChartContainer","Legend","BodySVG","jsx","_jsx","jsxs","_jsxs","PainChart","_ref","patientId","isExpanded","onExpand","painData","isLoading","loading","error","currentWeek","setCurrentWeek","Date","handlePrevWeek","setDate","getDate","handleNextWeek","getPainColor","level","getPainIntensity","painLegendItems","Array","from","length","_","i","map","color","label","concat","Body","_ref2","location","className","children","painLocation","toLowerCase","painColor","startOfWeek","getDay","setHours","endOfWeek","weekPainData","filter","d","date","formatDateRange","start","end","startStr","toLocaleDateString","month","day","endStr","title","icon","noData","onPrev","onNext","navigationLabel","items","item","index","weekday"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/PainChart.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport ChartContainer from '../ChartContainer';\r\nimport Legend from '../Legend';\r\nimport '../ChartStyles.css';\r\nimport './PainChart.css';\r\nimport BodySVG from './BodySvg';\r\n\r\nconst PainChart = ({ patientId, isExpanded = false, onExpand }) => {\r\n  const { painData, isLoading: loading, error } = usePatientData(patientId, 'pain');\r\n  const [currentWeek, setCurrentWeek] = useState(new Date(2025, 4, 1)); // Default to May 2025\r\n\r\n  const handlePrevWeek = () => {\r\n    setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate() - 7)));\r\n  };\r\n\r\n  const handleNextWeek = () => {\r\n    setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate() + 7)));\r\n  };\r\n\r\n  const getPainColor = (level) => {\r\n    if (level === 0) return '#E8F5E8'; // Very light green for no pain\r\n    if (level <= 2) return 'var(--chart-color-good)'; // Green for mild pain\r\n    if (level <= 4) return 'var(--chart-color-warning)'; // Orange for moderate pain\r\n    if (level <= 6) return '#FF8C69'; // Dark orange for moderate-severe pain\r\n    if (level <= 8) return 'var(--chart-color-danger)'; // Red for severe pain\r\n    return '#DC143C'; // Dark red for extreme pain\r\n  };\r\n\r\n  const getPainIntensity = (level) => {\r\n    if (level === 0) return 'No Pain';\r\n    if (level <= 2) return 'Mild';\r\n    if (level <= 4) return 'Moderate';\r\n    if (level <= 6) return 'Moderate-Severe';\r\n    if (level <= 8) return 'Severe';\r\n    return 'Extreme';\r\n  };\r\n\r\n  const painLegendItems = Array.from({ length: 11 }, (_, i) => i).map(level => ({\r\n    color: getPainColor(level),\r\n    label: `${level}`,\r\n  }));\r\n\r\n  const Body = ({ location, level }) => {\r\n    const color = getPainColor(level);\r\n\r\n    return (\r\n      <div className=\"body-container\">\r\n        <BodySVG className=\"body-svg\" painLocation={location.toLowerCase()} painColor={color} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  \r\n  const startOfWeek = new Date(currentWeek);\r\n  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\r\n  startOfWeek.setHours(0, 0, 0, 0);\r\n\r\n  const endOfWeek = new Date(startOfWeek);\r\n  endOfWeek.setDate(endOfWeek.getDate() + 6);\r\n  endOfWeek.setHours(23, 59, 59, 999);\r\n\r\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\r\n  \r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  return (\r\n    <ChartContainer\r\n      title=\"Pain Report\"\r\n      icon=\"ðŸ¤•\"\r\n      isLoading={loading}\r\n      error={error}\r\n      noData={!loading && !error && (!painData || painData.length === 0)}\r\n      isExpanded={isExpanded}\r\n      onExpand={onExpand}\r\n      onPrev={handlePrevWeek}\r\n      onNext={handleNextWeek}\r\n      navigationLabel={formatDateRange(startOfWeek, endOfWeek)}\r\n    >\r\n      <div className=\"pain-chart-container\">\r\n        <div className=\"pain-legend-wrapper\">\r\n            <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\r\n        </div>\r\n        <div className=\"pain-chart-wrapper\">\r\n            <div className=\"pain-list\">\r\n            {weekPainData.length > 0 ? (\r\n                weekPainData.map((item, index) => (\r\n                <div key={index} className=\"pain-list-item\">\r\n                    <div className=\"pain-item-date\">\r\n                    {new Date(item.date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}\r\n                    </div>\r\n                    <div className=\"pain-item-body\">\r\n                    <Body location={item.location} level={item.level} />\r\n                    </div>\r\n                    <div className=\"pain-item-details\">\r\n                    <div className=\"pain-level\">Level: {item.level}/10</div>\r\n                    <div className=\"pain-location\">{item.location}</div>\r\n                    </div>\r\n                </div>\r\n                ))\r\n            ) : (\r\n                <p className=\"no-pain-data\">No pain reported this week</p>\r\n            )}\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </ChartContainer>\r\n  );\r\n};\r\n\r\nexport default PainChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}