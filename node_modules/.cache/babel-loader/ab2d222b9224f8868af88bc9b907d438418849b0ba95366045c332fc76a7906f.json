{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\PhysicianPainChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport ChartContainer from '../ChartContainer';\nimport Legend from '../Legend';\nimport '../ChartStyles.css';\nimport './PhysicianPainChart.css';\nimport BodySVG from './BodySvg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhysicianPainChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand\n}) => {\n  _s();\n  const {\n    painData,\n    isLoading: loading,\n    error\n  } = usePatientData(patientId, 'pain');\n  const [currentWeek, setCurrentWeek] = useState(new Date(2025, 4, 1)); // Default to May 2025\n\n  const handlePrevWeek = () => {\n    setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate() - 7)));\n  };\n  const handleNextWeek = () => {\n    setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate() + 7)));\n  };\n  const getPainColor = level => {\n    if (level === 0) return '#E8F5E8'; // Very light green for no pain\n    if (level <= 2) return '#FFE4B5'; // Light orange for mild pain\n    if (level <= 4) return '#FFB347'; // Orange for moderate pain\n    if (level <= 6) return '#FF8C69'; // Dark orange for moderate-severe pain\n    if (level <= 8) return '#FF6347'; // Red for severe pain\n    return '#DC143C'; // Dark red for extreme pain\n  };\n  const getPainIntensity = level => {\n    if (level === 0) return 'No Pain';\n    if (level <= 2) return 'Mild';\n    if (level <= 4) return 'Moderate';\n    if (level <= 6) return 'Moderate-Severe';\n    if (level <= 8) return 'Severe';\n    return 'Extreme';\n  };\n  const painLegendItems = Array.from({\n    length: 11\n  }, (_, i) => i).map(level => ({\n    color: getPainColor(level),\n    label: `${level}`\n  }));\n\n  // Calculate week dates\n  const startOfWeek = new Date(currentWeek);\n  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n  startOfWeek.setHours(0, 0, 0, 0);\n  const endOfWeek = new Date(startOfWeek);\n  endOfWeek.setDate(endOfWeek.getDate() + 6);\n  endOfWeek.setHours(23, 59, 59, 999);\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\n\n  // Process data for chart\n  const {\n    chartData,\n    mostCommonLocation,\n    averagePainLevel\n  } = useMemo(() => {\n    if (!weekPainData.length) return {\n      chartData: [],\n      mostCommonLocation: null,\n      averagePainLevel: 0\n    };\n\n    // Create a map of dates to pain levels\n    const dateMap = new Map();\n    const locationCounts = new Map();\n    weekPainData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap.set(dateKey, item.level);\n\n      // Count locations\n      const location = item.location.toLowerCase();\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\n    });\n\n    // Find most common location\n    let mostCommon = null;\n    let maxCount = 0;\n    for (const [location, count] of locationCounts) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommon = location;\n      }\n    }\n\n    // Generate chart data for all 7 days of the week\n    const data = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(date.getDate() + i);\n      const dateKey = date.toDateString();\n      const painLevel = dateMap.get(dateKey) || 0;\n      data.push({\n        date,\n        day: date.toLocaleDateString('en-US', {\n          weekday: 'short'\n        }),\n        level: painLevel,\n        color: getPainColor(painLevel)\n      });\n    }\n    const totalPain = weekPainData.reduce((sum, item) => sum + item.level, 0);\n    const avgPain = weekPainData.length > 0 ? totalPain / weekPainData.length : 0;\n    return {\n      chartData: data,\n      mostCommonLocation: mostCommon,\n      averagePainLevel: avgPain.toFixed(1)\n    };\n  }, [weekPainData, startOfWeek]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n\n  // SVG Line Chart Component\n  const LineChart = ({\n    data\n  }) => {\n    const width = 400;\n    const height = 200;\n    const padding = {\n      top: 20,\n      right: 20,\n      bottom: 40,\n      left: 40\n    };\n    const chartWidth = width - padding.left - padding.right;\n    const chartHeight = height - padding.top - padding.bottom;\n    if (!data.length) return null;\n\n    // Create path for line\n    const pathData = data.map((point, index) => {\n      const x = index / (data.length - 1) * chartWidth;\n      const y = chartHeight - point.level / 10 * chartHeight;\n      return `${index === 0 ? 'M' : 'L'} ${x + padding.left} ${y + padding.top}`;\n    }).join(' ');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Pain Levels Over Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: width,\n        height: height,\n        className: \"pain-line-chart\",\n        children: [[0, 2, 4, 6, 8, 10].map(level => /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"line\", {\n            x1: padding.left,\n            y1: padding.top + chartHeight - level / 10 * chartHeight,\n            x2: padding.left + chartWidth,\n            y2: padding.top + chartHeight - level / 10 * chartHeight,\n            stroke: \"#e0e0e0\",\n            strokeWidth: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: padding.left - 5,\n            y: padding.top + chartHeight - level / 10 * chartHeight + 3,\n            textAnchor: \"end\",\n            fontSize: \"10\",\n            fill: \"#666\",\n            children: level\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)]\n        }, level, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)), data.map((point, index) => /*#__PURE__*/_jsxDEV(\"text\", {\n          x: padding.left + index / (data.length - 1) * chartWidth,\n          y: height - 10,\n          textAnchor: \"middle\",\n          fontSize: \"10\",\n          fill: \"#666\",\n          children: point.day\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: pathData,\n          fill: \"none\",\n          stroke: \"#4A90E2\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), data.map((point, index) => {\n          const x = index / (data.length - 1) * chartWidth + padding.left;\n          const y = chartHeight - point.level / 10 * chartHeight + padding.top;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: x,\n              cy: y,\n              r: \"4\",\n              fill: point.color,\n              stroke: \"#fff\",\n              strokeWidth: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this), point.level > 0 && /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: y - 8,\n              textAnchor: \"middle\",\n              fontSize: \"10\",\n              fill: \"#333\",\n              fontWeight: \"bold\",\n              children: point.level\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: padding.left,\n          y1: padding.top,\n          x2: padding.left,\n          y2: padding.top + chartHeight,\n          stroke: \"#333\",\n          strokeWidth: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: padding.left,\n          y1: padding.top + chartHeight,\n          x2: padding.left + chartWidth,\n          y2: padding.top + chartHeight,\n          stroke: \"#333\",\n          strokeWidth: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 15,\n          y: padding.top + chartHeight / 2,\n          textAnchor: \"middle\",\n          fontSize: \"11\",\n          fill: \"#333\",\n          transform: `rotate(-90, 15, ${padding.top + chartHeight / 2})`,\n          children: \"Pain Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    title: \"Pain Analysis (Physician View)\",\n    icon: \"\\uD83E\\uDE7A\",\n    isLoading: loading,\n    error: error,\n    noData: !loading && !error && (!painData || painData.length === 0),\n    isExpanded: isExpanded,\n    onExpand: onExpand,\n    onPrev: handlePrevWeek,\n    onNext: handleNextWeek,\n    navigationLabel: formatDateRange(startOfWeek, endOfWeek),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"physician-pain-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pain-legend-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Legend, {\n          title: \"Pain Intensity Scale (0-10)\",\n          items: painLegendItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pain-analysis-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body-summary-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"body-display\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Most Common Pain Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this), mostCommonLocation ? /*#__PURE__*/_jsxDEV(BodySVG, {\n              className: \"physician-body-svg\",\n              painLocation: mostCommonLocation,\n              painColor: getPainColor(parseInt(averagePainLevel))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-pain-display\",\n              children: [/*#__PURE__*/_jsxDEV(BodySVG, {\n                className: \"physician-body-svg\",\n                painLocation: \"\",\n                painColor: \"#E8F5E8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No pain reported this week\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pain-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Week Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-stats\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-label\",\n                  children: \"Average Pain Level:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-value\",\n                  style: {\n                    color: getPainColor(parseFloat(averagePainLevel))\n                  },\n                  children: [averagePainLevel, \"/10\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-label\",\n                  children: \"Most Common Location:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-value\",\n                  children: mostCommonLocation ? mostCommonLocation.charAt(0).toUpperCase() + mostCommonLocation.slice(1) : 'None'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-label\",\n                  children: \"Pain Intensity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-value\",\n                  children: getPainIntensity(parseFloat(averagePainLevel))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-label\",\n                  children: \"Days with Pain:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-value\",\n                  children: [chartData.filter(d => d.level > 0).length, \"/7\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-section\",\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s(PhysicianPainChart, \"wqFjhrSPuIXTKsODnLymNDlSLT4=\", false, function () {\n  return [usePatientData];\n});\n_c = PhysicianPainChart;\nexport default PhysicianPainChart;\nvar _c;\n$RefreshReg$(_c, \"PhysicianPainChart\");","map":{"version":3,"names":["React","useState","useMemo","usePatientData","ChartContainer","Legend","BodySVG","jsxDEV","_jsxDEV","PhysicianPainChart","patientId","isExpanded","onExpand","_s","painData","isLoading","loading","error","currentWeek","setCurrentWeek","Date","handlePrevWeek","setDate","getDate","handleNextWeek","getPainColor","level","getPainIntensity","painLegendItems","Array","from","length","_","i","map","color","label","startOfWeek","getDay","setHours","endOfWeek","weekPainData","filter","d","date","chartData","mostCommonLocation","averagePainLevel","dateMap","Map","locationCounts","forEach","item","dateKey","toDateString","set","location","toLowerCase","get","mostCommon","maxCount","count","data","painLevel","push","day","toLocaleDateString","weekday","totalPain","reduce","sum","avgPain","toFixed","formatDateRange","start","end","startStr","month","endStr","LineChart","width","height","padding","top","right","bottom","left","chartWidth","chartHeight","pathData","point","index","x","y","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","x1","y1","x2","y2","stroke","strokeWidth","textAnchor","fontSize","fill","cx","cy","r","fontWeight","transform","title","icon","noData","onPrev","onNext","navigationLabel","items","painLocation","painColor","parseInt","style","parseFloat","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/PhysicianPainChart.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport ChartContainer from '../ChartContainer';\r\nimport Legend from '../Legend';\r\nimport '../ChartStyles.css';\r\nimport './PhysicianPainChart.css';\r\nimport BodySVG from './BodySvg';\r\n\r\nconst PhysicianPainChart = ({ patientId, isExpanded = false, onExpand }) => {\r\n  const { painData, isLoading: loading, error } = usePatientData(patientId, 'pain');\r\n  const [currentWeek, setCurrentWeek] = useState(new Date(2025, 4, 1)); // Default to May 2025\r\n\r\n  const handlePrevWeek = () => {\r\n    setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate() - 7)));\r\n  };\r\n\r\n  const handleNextWeek = () => {\r\n    setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate() + 7)));\r\n  };\r\n\r\n  const getPainColor = (level) => {\r\n    if (level === 0) return '#E8F5E8'; // Very light green for no pain\r\n    if (level <= 2) return '#FFE4B5'; // Light orange for mild pain\r\n    if (level <= 4) return '#FFB347'; // Orange for moderate pain\r\n    if (level <= 6) return '#FF8C69'; // Dark orange for moderate-severe pain\r\n    if (level <= 8) return '#FF6347'; // Red for severe pain\r\n    return '#DC143C'; // Dark red for extreme pain\r\n  };\r\n\r\n  const getPainIntensity = (level) => {\r\n    if (level === 0) return 'No Pain';\r\n    if (level <= 2) return 'Mild';\r\n    if (level <= 4) return 'Moderate';\r\n    if (level <= 6) return 'Moderate-Severe';\r\n    if (level <= 8) return 'Severe';\r\n    return 'Extreme';\r\n  };\r\n\r\n  const painLegendItems = Array.from({ length: 11 }, (_, i) => i).map(level => ({\r\n    color: getPainColor(level),\r\n    label: `${level}`,\r\n  }));\r\n\r\n  // Calculate week dates\r\n  const startOfWeek = new Date(currentWeek);\r\n  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\r\n  startOfWeek.setHours(0, 0, 0, 0);\r\n\r\n  const endOfWeek = new Date(startOfWeek);\r\n  endOfWeek.setDate(endOfWeek.getDate() + 6);\r\n  endOfWeek.setHours(23, 59, 59, 999);\r\n\r\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\r\n\r\n  // Process data for chart\r\n  const { chartData, mostCommonLocation, averagePainLevel } = useMemo(() => {\r\n    if (!weekPainData.length) return { chartData: [], mostCommonLocation: null, averagePainLevel: 0 };\r\n\r\n    // Create a map of dates to pain levels\r\n    const dateMap = new Map();\r\n    const locationCounts = new Map();\r\n\r\n    weekPainData.forEach(item => {\r\n      const dateKey = item.date.toDateString();\r\n      dateMap.set(dateKey, item.level);\r\n      \r\n      // Count locations\r\n      const location = item.location.toLowerCase();\r\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\r\n    });\r\n\r\n    // Find most common location\r\n    let mostCommon = null;\r\n    let maxCount = 0;\r\n    for (const [location, count] of locationCounts) {\r\n      if (count > maxCount) {\r\n        maxCount = count;\r\n        mostCommon = location;\r\n      }\r\n    }\r\n\r\n    // Generate chart data for all 7 days of the week\r\n    const data = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(startOfWeek);\r\n      date.setDate(date.getDate() + i);\r\n      const dateKey = date.toDateString();\r\n      const painLevel = dateMap.get(dateKey) || 0;\r\n      \r\n      data.push({\r\n        date,\r\n        day: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n        level: painLevel,\r\n        color: getPainColor(painLevel)\r\n      });\r\n    }\r\n\r\n    const totalPain = weekPainData.reduce((sum, item) => sum + item.level, 0);\r\n    const avgPain = weekPainData.length > 0 ? (totalPain / weekPainData.length) : 0;\r\n\r\n    return { \r\n      chartData: data, \r\n      mostCommonLocation: mostCommon, \r\n      averagePainLevel: avgPain.toFixed(1) \r\n    };\r\n  }, [weekPainData, startOfWeek]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  // SVG Line Chart Component\r\n  const LineChart = ({ data }) => {\r\n    const width = 400;\r\n    const height = 200;\r\n    const padding = { top: 20, right: 20, bottom: 40, left: 40 };\r\n    const chartWidth = width - padding.left - padding.right;\r\n    const chartHeight = height - padding.top - padding.bottom;\r\n\r\n    if (!data.length) return null;\r\n\r\n    // Create path for line\r\n    const pathData = data.map((point, index) => {\r\n      const x = (index / (data.length - 1)) * chartWidth;\r\n      const y = chartHeight - (point.level / 10) * chartHeight;\r\n      return `${index === 0 ? 'M' : 'L'} ${x + padding.left} ${y + padding.top}`;\r\n    }).join(' ');\r\n\r\n    return (\r\n      <div className=\"line-chart-container\">\r\n        <h4>Pain Levels Over Week</h4>\r\n        <svg width={width} height={height} className=\"pain-line-chart\">\r\n          {/* Grid lines */}\r\n          {[0, 2, 4, 6, 8, 10].map(level => (\r\n            <g key={level}>\r\n              <line\r\n                x1={padding.left}\r\n                y1={padding.top + chartHeight - (level / 10) * chartHeight}\r\n                x2={padding.left + chartWidth}\r\n                y2={padding.top + chartHeight - (level / 10) * chartHeight}\r\n                stroke=\"#e0e0e0\"\r\n                strokeWidth=\"1\"\r\n              />\r\n              <text\r\n                x={padding.left - 5}\r\n                y={padding.top + chartHeight - (level / 10) * chartHeight + 3}\r\n                textAnchor=\"end\"\r\n                fontSize=\"10\"\r\n                fill=\"#666\"\r\n              >\r\n                {level}\r\n              </text>\r\n            </g>\r\n          ))}\r\n\r\n          {/* X-axis labels */}\r\n          {data.map((point, index) => (\r\n            <text\r\n              key={index}\r\n              x={padding.left + (index / (data.length - 1)) * chartWidth}\r\n              y={height - 10}\r\n              textAnchor=\"middle\"\r\n              fontSize=\"10\"\r\n              fill=\"#666\"\r\n            >\r\n              {point.day}\r\n            </text>\r\n          ))}\r\n\r\n          {/* Line */}\r\n          <path\r\n            d={pathData}\r\n            fill=\"none\"\r\n            stroke=\"#4A90E2\"\r\n            strokeWidth=\"2\"\r\n          />\r\n\r\n          {/* Data points */}\r\n          {data.map((point, index) => {\r\n            const x = (index / (data.length - 1)) * chartWidth + padding.left;\r\n            const y = chartHeight - (point.level / 10) * chartHeight + padding.top;\r\n            return (\r\n              <g key={index}>\r\n                <circle\r\n                  cx={x}\r\n                  cy={y}\r\n                  r=\"4\"\r\n                  fill={point.color}\r\n                  stroke=\"#fff\"\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {point.level > 0 && (\r\n                  <text\r\n                    x={x}\r\n                    y={y - 8}\r\n                    textAnchor=\"middle\"\r\n                    fontSize=\"10\"\r\n                    fill=\"#333\"\r\n                    fontWeight=\"bold\"\r\n                  >\r\n                    {point.level}\r\n                  </text>\r\n                )}\r\n              </g>\r\n            );\r\n          })}\r\n\r\n          {/* Axes */}\r\n          <line\r\n            x1={padding.left}\r\n            y1={padding.top}\r\n            x2={padding.left}\r\n            y2={padding.top + chartHeight}\r\n            stroke=\"#333\"\r\n            strokeWidth=\"1\"\r\n          />\r\n          <line\r\n            x1={padding.left}\r\n            y1={padding.top + chartHeight}\r\n            x2={padding.left + chartWidth}\r\n            y2={padding.top + chartHeight}\r\n            stroke=\"#333\"\r\n            strokeWidth=\"1\"\r\n          />\r\n\r\n          {/* Y-axis label */}\r\n          <text\r\n            x={15}\r\n            y={padding.top + chartHeight / 2}\r\n            textAnchor=\"middle\"\r\n            fontSize=\"11\"\r\n            fill=\"#333\"\r\n            transform={`rotate(-90, 15, ${padding.top + chartHeight / 2})`}\r\n          >\r\n            Pain Level\r\n          </text>\r\n        </svg>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ChartContainer\r\n      title=\"Pain Analysis (Physician View)\"\r\n      icon=\"🩺\"\r\n      isLoading={loading}\r\n      error={error}\r\n      noData={!loading && !error && (!painData || painData.length === 0)}\r\n      isExpanded={isExpanded}\r\n      onExpand={onExpand}\r\n      onPrev={handlePrevWeek}\r\n      onNext={handleNextWeek}\r\n      navigationLabel={formatDateRange(startOfWeek, endOfWeek)}\r\n    >\r\n      <div className=\"physician-pain-chart-container\">\r\n        <div className=\"pain-legend-wrapper\">\r\n          <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\r\n        </div>\r\n        \r\n        <div className=\"pain-analysis-content\">\r\n          {/* Body SVG and Summary */}\r\n          <div className=\"body-summary-section\">\r\n            <div className=\"body-display\">\r\n              <h4>Most Common Pain Location</h4>\r\n              {mostCommonLocation ? (\r\n                <BodySVG \r\n                  className=\"physician-body-svg\" \r\n                  painLocation={mostCommonLocation} \r\n                  painColor={getPainColor(parseInt(averagePainLevel))} \r\n                />\r\n              ) : (\r\n                <div className=\"no-pain-display\">\r\n                  <BodySVG className=\"physician-body-svg\" painLocation=\"\" painColor=\"#E8F5E8\" />\r\n                  <p>No pain reported this week</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n            <div className=\"pain-summary\">\r\n              <h4>Week Summary</h4>\r\n              <div className=\"summary-stats\">\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Average Pain Level:</span>\r\n                  <span className=\"stat-value\" style={{ color: getPainColor(parseFloat(averagePainLevel)) }}>\r\n                    {averagePainLevel}/10\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Most Common Location:</span>\r\n                  <span className=\"stat-value\">\r\n                    {mostCommonLocation ? mostCommonLocation.charAt(0).toUpperCase() + mostCommonLocation.slice(1) : 'None'}\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Pain Intensity:</span>\r\n                  <span className=\"stat-value\">\r\n                    {getPainIntensity(parseFloat(averagePainLevel))}\r\n                  </span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <span className=\"stat-label\">Days with Pain:</span>\r\n                  <span className=\"stat-value\">\r\n                    {chartData.filter(d => d.level > 0).length}/7\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Line Chart */}\r\n          <div className=\"chart-section\">\r\n            <LineChart data={chartData} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ChartContainer>\r\n  );\r\n};\r\n\r\nexport default PhysicianPainChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}