{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\DashboardGrid.js\";\nimport React from 'react';\nimport VisualizationWrapper from './VisualizationWrapper';\nimport './DashboardGrid.css';\n\n/**\r\n * Shared component for rendering dashboard grids with visualization wrappers\r\n * Now shows all available visualizations instead of using dropdown selectors\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardGrid = ({\n  viewMode,\n  // 'patient' or 'physician'\n  selectedVisualizations,\n  availableVisualizations,\n  allVisualizations,\n  onVisualizationChange,\n  onExpand,\n  expandedItem,\n  renderVisualization,\n  disabled = false,\n  placeholderText = \"No data available for this patient.\",\n  // New props for physician summary functionality\n  showSummaries = false,\n  summaryTexts = {},\n  onSummaryChange = null\n}) => {\n  // Configuration for different view modes\n  const gridConfig = {\n    patient: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    },\n    physician: {\n      className: 'physician-charts-grid',\n      chartClassNames: ['physician-chart-container']\n    }\n  };\n  const config = gridConfig[viewMode];\n\n  // Get all available visualization types\n  const availableVizTypes = Object.keys(availableVisualizations);\n\n  // If there's an expanded item, show only that\n  if (expandedItem) {\n    const selectedViz = selectedVisualizations[expandedItem];\n    const wrapperProps = {\n      id: expandedItem,\n      className: `${config.chartClassNames[0]} expanded-view`,\n      selectedViz: selectedViz,\n      availableVisualizations: availableVisualizations,\n      allVisualizations: allVisualizations,\n      onVisualizationChange: onVisualizationChange,\n      onExpand: onExpand,\n      isExpanded: true,\n      renderVisualization: renderVisualization,\n      disabled: disabled,\n      placeholderText: placeholderText,\n      // Navigation props - these will be handled by individual chart components\n      showNavigation: true\n    };\n    return /*#__PURE__*/_jsxDEV(VisualizationWrapper, {\n      ...wrapperProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If no visualizations available, show placeholder\n  if (availableVizTypes.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: config.className,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-data-placeholder\",\n        children: placeholderText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render all available visualizations\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: config.className,\n    children: availableVizTypes.map((vizType, index) => {\n      const chartId = `${viewMode}-chart-${index}`;\n      const wrapperProps = {\n        key: chartId,\n        id: chartId,\n        className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\n        selectedViz: vizType,\n        availableVisualizations: availableVisualizations,\n        allVisualizations: allVisualizations,\n        onVisualizationChange: onVisualizationChange,\n        onExpand: onExpand,\n        isExpanded: expandedItem === chartId,\n        renderVisualization: renderVisualization,\n        disabled: disabled,\n        placeholderText: placeholderText,\n        // Navigation props - these will be handled by individual chart components\n        showNavigation: true\n      };\n      return /*#__PURE__*/_jsxDEV(VisualizationWrapper, {\n        ...wrapperProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_c = DashboardGrid;\nexport default DashboardGrid;\nvar _c;\n$RefreshReg$(_c, \"DashboardGrid\");","map":{"version":3,"names":["React","VisualizationWrapper","jsxDEV","_jsxDEV","DashboardGrid","viewMode","selectedVisualizations","availableVisualizations","allVisualizations","onVisualizationChange","onExpand","expandedItem","renderVisualization","disabled","placeholderText","showSummaries","summaryTexts","onSummaryChange","gridConfig","patient","className","chartClassNames","physician","config","availableVizTypes","Object","keys","selectedViz","wrapperProps","id","isExpanded","showNavigation","fileName","_jsxFileName","lineNumber","columnNumber","length","children","map","vizType","index","chartId","key","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/DashboardGrid.js"],"sourcesContent":["import React from 'react';\r\nimport VisualizationWrapper from './VisualizationWrapper';\r\nimport './DashboardGrid.css';\r\n\r\n/**\r\n * Shared component for rendering dashboard grids with visualization wrappers\r\n * Now shows all available visualizations instead of using dropdown selectors\r\n */\r\nconst DashboardGrid = ({\r\n  viewMode, // 'patient' or 'physician'\r\n  selectedVisualizations,\r\n  availableVisualizations,\r\n  allVisualizations,\r\n  onVisualizationChange,\r\n  onExpand,\r\n  expandedItem,\r\n  renderVisualization,\r\n  disabled = false,\r\n  placeholderText = \"No data available for this patient.\",\r\n  // New props for physician summary functionality\r\n  showSummaries = false,\r\n  summaryTexts = {},\r\n  onSummaryChange = null\r\n}) => {\r\n  // Configuration for different view modes\r\n  const gridConfig = {\r\n    patient: {\r\n      className: 'dashboard-grid',\r\n      chartClassNames: ['visualization-box']\r\n    },\r\n    physician: {\r\n      className: 'physician-charts-grid',\r\n      chartClassNames: ['physician-chart-container']\r\n    }\r\n  };\r\n\r\n  const config = gridConfig[viewMode];\r\n\r\n  // Get all available visualization types\r\n  const availableVizTypes = Object.keys(availableVisualizations);\r\n\r\n  // If there's an expanded item, show only that\r\n  if (expandedItem) {\r\n    const selectedViz = selectedVisualizations[expandedItem];\r\n    \r\n    const wrapperProps = {\r\n      id: expandedItem,\r\n      className: `${config.chartClassNames[0]} expanded-view`,\r\n      selectedViz: selectedViz,\r\n      availableVisualizations: availableVisualizations,\r\n      allVisualizations: allVisualizations,\r\n      onVisualizationChange: onVisualizationChange,\r\n      onExpand: onExpand,\r\n      isExpanded: true,\r\n      renderVisualization: renderVisualization,\r\n      disabled: disabled,\r\n      placeholderText: placeholderText,\r\n      // Navigation props - these will be handled by individual chart components\r\n      showNavigation: true\r\n    };\r\n\r\n    return <VisualizationWrapper {...wrapperProps} />;\r\n  }\r\n\r\n  // If no visualizations available, show placeholder\r\n  if (availableVizTypes.length === 0) {\r\n    return (\r\n      <div className={config.className}>\r\n        <div className=\"no-data-placeholder\">\r\n          {placeholderText}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render all available visualizations\r\n  return (\r\n    <div className={config.className}>\r\n      {availableVizTypes.map((vizType, index) => {\r\n        const chartId = `${viewMode}-chart-${index}`;\r\n        \r\n        const wrapperProps = {\r\n          key: chartId,\r\n          id: chartId,\r\n          className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\r\n          selectedViz: vizType,\r\n          availableVisualizations: availableVisualizations,\r\n          allVisualizations: allVisualizations,\r\n          onVisualizationChange: onVisualizationChange,\r\n          onExpand: onExpand,\r\n          isExpanded: expandedItem === chartId,\r\n          renderVisualization: renderVisualization,\r\n          disabled: disabled,\r\n          placeholderText: placeholderText,\r\n          // Navigation props - these will be handled by individual chart components\r\n          showNavigation: true\r\n        };\r\n\r\n        return <VisualizationWrapper {...wrapperProps} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}