{"ast":null,"code":"/**\n MoodCalendar.js - Mood Tracking Calendar Visualization\n \n This component provides comprehensive mood monitoring:\n - Daily mood tracking in calendar format\n - Color-coded mood states (happy, sad, angry)\n - Monthly navigation and trend analysis\n - Interactive mood selection and editing\n - Calendar layout\n - Integration with patient data and navigation\n \n Essential for mental health monitoring and emotional well-being tracking.\n */import React,{useState,useRef}from'react';import usePatientData from'../../hooks/usePatientData';import useChartNavigation from'../../hooks/useChartNavigation';import Legend from'../Legend';import'./MoodCalendar.css';// --- Constants & Config ---\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MOODS={happy:'ðŸ˜Š',sad:'ðŸ˜¢',angry:'ðŸ˜ '};const MOOD_COLORS={happy:'var(--chart-color-mood-happy)',sad:'var(--chart-color-mood-sad)',angry:'var(--chart-color-mood-angry)'};const MOOD_BACKGROUNDS={happy:'var(--chart-color-mood-happy-bg)',sad:'var(--chart-color-mood-sad-bg)',angry:'var(--chart-color-mood-angry-bg)'};const DAYS_OF_WEEK=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];// Separate configurations for clarity\nconst CHART_CONFIGS={normal:{svgWidth:350,svgHeight:300,cellWidth:50,cellHeight:44,dayLabelY:30,dayLabelFontSize:9,dateLabelX:5,dateLabelY:12,dateLabelFontSize:8,moodIconFontSize:20,startX:25,startY:55},expanded:{svgWidth:700,svgHeight:600,cellWidth:100,cellHeight:85,dayLabelY:55,dayLabelFontSize:16,dateLabelX:12,dateLabelY:22,dateLabelFontSize:14,moodIconFontSize:36,startX:50,startY:100}};const getCalendarConfig=isExpanded=>{return isExpanded?CHART_CONFIGS.expanded:CHART_CONFIGS.normal;};// --- Helper Functions ---\nconst normalizeMood=mood=>mood&&MOODS[mood.toLowerCase()]?mood.toLowerCase():null;const getMoodEmoji=mood=>MOODS[normalizeMood(mood)];const getMoodColor=mood=>MOOD_COLORS[normalizeMood(mood)];const getMoodBackgroundColor=mood=>MOOD_BACKGROUNDS[normalizeMood(mood)]||'#ffffff';const moodLegendItems=Object.entries(MOODS).map(_ref=>{let[mood,emoji]=_ref;return{icon:emoji,label:mood.charAt(0).toUpperCase()+mood.slice(1),style:{backgroundColor:MOOD_BACKGROUNDS[mood],borderColor:MOOD_COLORS[mood]}};});// --- Sub-components ---\nconst CalendarHeader=_ref2=>{let{config}=_ref2;return/*#__PURE__*/_jsx(\"g\",{className:\"calendar-header\",children:DAYS_OF_WEEK.map((day,i)=>/*#__PURE__*/_jsx(\"text\",{x:config.startX+i*config.cellWidth,y:config.dayLabelY,className:\"day-name-label\",style:{fontSize:config.dayLabelFontSize},children:day},day))});};const DayCell=_ref3=>{let{config,date,moods}=_ref3;const dayOfMonth=date.getDate();const dayOfWeek=date.getDay();const weekOfMonth=Math.floor((dayOfMonth-1+(()=>{const firstDay=new Date(date.getFullYear(),date.getMonth(),1);return!isNaN(firstDay.getTime())?firstDay.getDay():0;})())/7);const x=config.startX+dayOfWeek*config.cellWidth;const y=config.startY+weekOfMonth*(config.cellHeight+2);const primaryMood=moods.length>0?moods[0]:null;return/*#__PURE__*/_jsxs(\"g\",{className:\"day-cell-group\",transform:\"translate(\".concat(x-config.cellWidth/2,\", \").concat(y-config.cellHeight/2,\")\"),children:[/*#__PURE__*/_jsx(\"rect\",{width:config.cellWidth,height:config.cellHeight,fill:getMoodBackgroundColor(primaryMood),className:\"day-cell-bg\"}),/*#__PURE__*/_jsx(\"text\",{x:config.dateLabelX,y:config.dateLabelY,className:\"date-label\",style:{fontSize:config.dateLabelFontSize},children:dayOfMonth}),primaryMood&&/*#__PURE__*/_jsx(\"text\",{x:config.cellWidth/2,y:config.cellHeight*0.65,className:\"mood-icon\",fill:getMoodColor(primaryMood),style:{fontSize:config.moodIconFontSize},children:getMoodEmoji(primaryMood)})]});};const Calendar=_ref4=>{let{isExpanded,moodByDate,currentMonth,monthDisplay}=_ref4;const config=getCalendarConfig(isExpanded);const year=currentMonth.getFullYear();const month=currentMonth.getMonth();const daysInMonth=(()=>{const lastDay=new Date(year,month+1,0);return!isNaN(lastDay.getTime())?lastDay.getDate():30;})();return/*#__PURE__*/_jsxs(\"div\",{className:\"mood-calendar-svg-container\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Mood Calendar\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:monthDisplay}),/*#__PURE__*/_jsxs(\"svg\",{viewBox:\"0 0 \".concat(config.svgWidth,\" \").concat(config.svgHeight),className:\"mood-calendar-svg\",children:[/*#__PURE__*/_jsx(\"rect\",{width:config.svgWidth,height:config.svgHeight,fill:\"white\"}),/*#__PURE__*/_jsx(CalendarHeader,{config:config}),/*#__PURE__*/_jsx(\"g\",{className:\"calendar-body\",children:[...Array(daysInMonth)].map((_,i)=>{const dayOfMonth=i+1;const date=new Date(year,month,dayOfMonth);return/*#__PURE__*/_jsx(DayCell,{config:config,date:date,moods:moodByDate[dayOfMonth]||[]},i);})})]})]});};// --- Main Component ---\nconst MoodCalendar=_ref5=>{let{patientId,isExpanded=false,onExpand,viewMode='patient',navigation,screenshotMode=false,showThreeMonthSummaries=false}=_ref5;const{moodData,isLoading:loading,error}=usePatientData(patientId,'mood');// Use navigation from parent or fallback to internal navigation\nconst useInternalNavigation=!navigation;const internalNavigation=useChartNavigation('mood');const nav=navigation||internalNavigation;// For mood chart, determine the month to display based on the navigation\n// If using weekly navigation, show the month that contains the current week\nlet currentMonth;if(nav.navigationType==='week'){// Use the week's start date to determine which month to display\nconst weekRange=nav.getDateRange();currentMonth=new Date(weekRange.start.getFullYear(),weekRange.start.getMonth(),1);}else{// Use monthly navigation directly\ncurrentMonth=nav.currentDate;}const moodByDate=moodData.filter(d=>d.date.getFullYear()===currentMonth.getFullYear()&&d.date.getMonth()===currentMonth.getMonth()).reduce((acc,item)=>{const dateKey=item.date.getDate();if(!acc[dateKey])acc[dateKey]=[];acc[dateKey].push(item.mood);return acc;},{});// Get appropriate month display based on navigation type\nconst monthDisplay=nav.navigationType==='week'?currentMonth.toLocaleDateString('en-US',{month:'long',year:'numeric'}):nav.getFormattedDateRange();// Get 3-month data\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const threeMonthData=moodData.filter(d=>d.date>=startOfThreeMonths&&d.date<=endOfThreeMonths);// Calculate summary statistics for physician view\nconst currentMonthData=moodData.filter(d=>d.date.getFullYear()===currentMonth.getFullYear()&&d.date.getMonth()===currentMonth.getMonth());let monthSummary=null;if(currentMonthData.length>0){// Count mood occurrences\nconst moodCounts={};Object.keys(MOODS).forEach(mood=>{moodCounts[mood]=0;});currentMonthData.forEach(entry=>{const normalizedMood=normalizeMood(entry.mood);if(normalizedMood&&moodCounts[normalizedMood]!==undefined){moodCounts[normalizedMood]++;}});// Find most common mood\nconst mostCommonMood=Object.entries(moodCounts).sort((_ref6,_ref7)=>{let[,a]=_ref6;let[,b]=_ref7;return b-a;})[0];// Calculate mood distribution percentages\nconst totalEntries=currentMonthData.length;const moodPercentages={};Object.entries(moodCounts).forEach(_ref8=>{let[mood,count]=_ref8;moodPercentages[mood]=totalEntries>0?(count/totalEntries*100).toFixed(0):0;});// Days in current month\nconst daysInMonth=(()=>{const lastDay=new Date(currentMonth.getFullYear(),currentMonth.getMonth()+1,0);return!isNaN(lastDay.getTime())?lastDay.getDate():30;})();const daysWithMood=new Set(currentMonthData.map(d=>d.date.getDate())).size;// Calculate mood score (happy=3, sad=1, angry=1)\nconst moodScore=(moodCounts.happy*3+moodCounts.sad*1+moodCounts.angry*1)/totalEntries;const moodTrend=moodScore>=2.5?'Positive':moodScore>=1.5?'Mixed':'Needs Attention';monthSummary={totalEntries,daysWithMood,daysInMonth,mostCommonMood:mostCommonMood[0],mostCommonMoodCount:mostCommonMood[1],moodCounts,moodPercentages,moodTrend};}// Calculate 3-month summary statistics for physician view\nlet threeMonthSummary=null;if(threeMonthData.length>0){// Count mood occurrences\nconst moodCounts={};Object.keys(MOODS).forEach(mood=>{moodCounts[mood]=0;});threeMonthData.forEach(entry=>{const normalizedMood=normalizeMood(entry.mood);if(normalizedMood&&moodCounts[normalizedMood]!==undefined){moodCounts[normalizedMood]++;}});// Find most common mood\nconst mostCommonMood=Object.entries(moodCounts).sort((_ref9,_ref0)=>{let[,a]=_ref9;let[,b]=_ref0;return b-a;})[0];// Calculate mood distribution percentages\nconst totalEntries=threeMonthData.length;const moodPercentages={};Object.entries(moodCounts).forEach(_ref1=>{let[mood,count]=_ref1;moodPercentages[mood]=totalEntries>0?(count/totalEntries*100).toFixed(0):0;});// Calculate actual days in the 3-month period\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const daysInThreeMonths=Math.ceil((endOfThreeMonths-startOfThreeMonths)/(1000*60*60*24))+1;const daysWithMood=new Set(threeMonthData.map(d=>d.date.toDateString())).size;// Calculate mood score (happy=3, sad=1, angry=1)\nconst moodScore=(moodCounts.happy*3+moodCounts.sad*1+moodCounts.angry*1)/totalEntries;const moodTrend=moodScore>=2.5?'Positive':moodScore>=1.5?'Mixed':'Needs Attention';threeMonthSummary={totalEntries,daysWithMood,daysInThreeMonths,mostCommonMood:mostCommonMood[0],mostCommonMoodCount:mostCommonMood[1],moodCounts,moodPercentages,moodTrend};}return/*#__PURE__*/_jsxs(\"div\",{className:\"mood-calendar-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"mood-calendar-wrapper \".concat(isExpanded?'expanded':''),children:/*#__PURE__*/_jsx(Calendar,{isExpanded:isExpanded,moodByDate:moodByDate,currentMonth:currentMonth,monthDisplay:monthDisplay})}),/*#__PURE__*/_jsx(\"div\",{className:\"mood-calendar-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Mood\",items:moodLegendItems,hide:screenshotMode})}),(viewMode==='physician'||viewMode==='unified')&&monthSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"summary-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Month Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Mood Entries:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[monthSummary.totalEntries,\" entries\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common Mood:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[MOODS[monthSummary.mostCommonMood],\" \",monthSummary.mostCommonMood.charAt(0).toUpperCase()+monthSummary.mostCommonMood.slice(1),\" (\",monthSummary.mostCommonMoodCount,\"x)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Mood Distribution:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[\"\\uD83D\\uDE0A\",monthSummary.moodPercentages.happy,\"% \\uD83D\\uDE22\",monthSummary.moodPercentages.sad,\"% \\uD83D\\uDE20\",monthSummary.moodPercentages.angry,\"%\"]})]})]})]}),showThreeMonthSummaries&&threeMonthSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"3-Month Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Mood Entries:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.totalEntries,\" entries\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common Mood:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[MOODS[threeMonthSummary.mostCommonMood],\" \",threeMonthSummary.mostCommonMood.charAt(0).toUpperCase()+threeMonthSummary.mostCommonMood.slice(1),\" (\",threeMonthSummary.mostCommonMoodCount,\"x)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Mood Distribution:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[\"\\uD83D\\uDE0A\",threeMonthSummary.moodPercentages.happy,\"% \\uD83D\\uDE22\",threeMonthSummary.moodPercentages.sad,\"% \\uD83D\\uDE20\",threeMonthSummary.moodPercentages.angry,\"%\"]})]})]})]})]})]});};export default MoodCalendar;","map":{"version":3,"names":["React","useState","useRef","usePatientData","useChartNavigation","Legend","jsx","_jsx","jsxs","_jsxs","MOODS","happy","sad","angry","MOOD_COLORS","MOOD_BACKGROUNDS","DAYS_OF_WEEK","CHART_CONFIGS","normal","svgWidth","svgHeight","cellWidth","cellHeight","dayLabelY","dayLabelFontSize","dateLabelX","dateLabelY","dateLabelFontSize","moodIconFontSize","startX","startY","expanded","getCalendarConfig","isExpanded","normalizeMood","mood","toLowerCase","getMoodEmoji","getMoodColor","getMoodBackgroundColor","moodLegendItems","Object","entries","map","_ref","emoji","icon","label","charAt","toUpperCase","slice","style","backgroundColor","borderColor","CalendarHeader","_ref2","config","className","children","day","i","x","y","fontSize","DayCell","_ref3","date","moods","dayOfMonth","getDate","dayOfWeek","getDay","weekOfMonth","Math","floor","firstDay","Date","getFullYear","getMonth","isNaN","getTime","primaryMood","length","transform","concat","width","height","fill","Calendar","_ref4","moodByDate","currentMonth","monthDisplay","year","month","daysInMonth","lastDay","viewBox","Array","_","MoodCalendar","_ref5","patientId","onExpand","viewMode","navigation","screenshotMode","showThreeMonthSummaries","moodData","isLoading","loading","error","useInternalNavigation","internalNavigation","nav","navigationType","weekRange","getDateRange","start","currentDate","filter","d","reduce","acc","item","dateKey","push","toLocaleDateString","getFormattedDateRange","startOfThreeMonths","end","endOfThreeMonths","getThreeMonthRange","threeMonthData","currentMonthData","monthSummary","moodCounts","keys","forEach","entry","normalizedMood","undefined","mostCommonMood","sort","_ref6","_ref7","a","b","totalEntries","moodPercentages","_ref8","count","toFixed","daysWithMood","Set","size","moodScore","moodTrend","mostCommonMoodCount","threeMonthSummary","_ref9","_ref0","_ref1","daysInThreeMonths","ceil","toDateString","title","items","hide"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/components/patient_charts/MoodCalendar.js"],"sourcesContent":["/**\n MoodCalendar.js - Mood Tracking Calendar Visualization\n \n This component provides comprehensive mood monitoring:\n - Daily mood tracking in calendar format\n - Color-coded mood states (happy, sad, angry)\n - Monthly navigation and trend analysis\n - Interactive mood selection and editing\n - Calendar layout\n - Integration with patient data and navigation\n \n Essential for mental health monitoring and emotional well-being tracking.\n */\n\nimport React, { useState, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\n\nimport './MoodCalendar.css';\n\n// --- Constants & Config ---\nconst MOODS = { happy: 'ðŸ˜Š', sad: 'ðŸ˜¢', angry: 'ðŸ˜ ' };\nconst MOOD_COLORS = { \n  happy: 'var(--chart-color-mood-happy)', \n  sad: 'var(--chart-color-mood-sad)', \n  angry: 'var(--chart-color-mood-angry)' \n};\nconst MOOD_BACKGROUNDS = { \n  happy: 'var(--chart-color-mood-happy-bg)', \n  sad: 'var(--chart-color-mood-sad-bg)', \n  angry: 'var(--chart-color-mood-angry-bg)' \n};\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n// Separate configurations for clarity\nconst CHART_CONFIGS = {\n  normal: {\n    svgWidth: 350,\n    svgHeight: 300,\n    cellWidth: 50,\n    cellHeight: 44,\n    dayLabelY: 30,\n    dayLabelFontSize: 9,\n    dateLabelX: 5,\n    dateLabelY: 12,\n    dateLabelFontSize: 8,\n    moodIconFontSize: 20,\n    startX: 25,\n    startY: 55,\n  },\n  expanded: {\n    svgWidth: 700,\n    svgHeight: 600,\n    cellWidth: 100,\n    cellHeight: 85,\n    dayLabelY: 55,\n    dayLabelFontSize: 16,\n    dateLabelX: 12,\n    dateLabelY: 22,\n    dateLabelFontSize: 14,\n    moodIconFontSize: 36,\n    startX: 50,\n    startY: 100,\n  }\n};\n\nconst getCalendarConfig = (isExpanded) => {\n  return isExpanded ? CHART_CONFIGS.expanded : CHART_CONFIGS.normal;\n};\n\n// --- Helper Functions ---\nconst normalizeMood = (mood) => (mood && MOODS[mood.toLowerCase()]) ? mood.toLowerCase() : null;\nconst getMoodEmoji = (mood) => MOODS[normalizeMood(mood)];\nconst getMoodColor = (mood) => MOOD_COLORS[normalizeMood(mood)];\nconst getMoodBackgroundColor = (mood) => MOOD_BACKGROUNDS[normalizeMood(mood)] || '#ffffff';\n\nconst moodLegendItems = Object.entries(MOODS).map(([mood, emoji]) => ({\n  icon: emoji,\n  label: mood.charAt(0).toUpperCase() + mood.slice(1),\n  style: {\n    backgroundColor: MOOD_BACKGROUNDS[mood],\n    borderColor: MOOD_COLORS[mood],\n  },\n}));\n\n// --- Sub-components ---\n\nconst CalendarHeader = ({ config }) => (\n  <g className=\"calendar-header\">\n    {DAYS_OF_WEEK.map((day, i) => (\n      <text \n        key={day} \n        x={config.startX + i * config.cellWidth} \n        y={config.dayLabelY} \n        className=\"day-name-label\"\n        style={{ fontSize: config.dayLabelFontSize }}\n      >\n        {day}\n      </text>\n    ))}\n  </g>\n);\n\nconst DayCell = ({ config, date, moods }) => {\n  const dayOfMonth = date.getDate();\n  const dayOfWeek = date.getDay();\n  const weekOfMonth = Math.floor((dayOfMonth - 1 + (() => {\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n    return !isNaN(firstDay.getTime()) ? firstDay.getDay() : 0;\n  })()) / 7);\n  const x = config.startX + dayOfWeek * config.cellWidth;\n  const y = config.startY + weekOfMonth * (config.cellHeight + 2);\n  const primaryMood = moods.length > 0 ? moods[0] : null;\n\n  return (\n    <g className=\"day-cell-group\" transform={`translate(${x - config.cellWidth / 2}, ${y - config.cellHeight / 2})`}>\n      <rect width={config.cellWidth} height={config.cellHeight} fill={getMoodBackgroundColor(primaryMood)} className=\"day-cell-bg\" />\n      <text \n        x={config.dateLabelX} \n        y={config.dateLabelY} \n        className=\"date-label\" \n        style={{ fontSize: config.dateLabelFontSize }}\n      >\n        {dayOfMonth}\n      </text>\n      {primaryMood && (\n        <text \n          x={config.cellWidth / 2} \n          y={config.cellHeight * 0.65} \n          className=\"mood-icon\" \n          fill={getMoodColor(primaryMood)}\n          style={{ fontSize: config.moodIconFontSize }}\n        >\n          {getMoodEmoji(primaryMood)}\n        </text>\n      )}\n    </g>\n  );\n};\n\nconst Calendar = ({ isExpanded, moodByDate, currentMonth, monthDisplay }) => {\n  const config = getCalendarConfig(isExpanded);\n  const year = currentMonth.getFullYear();\n  const month = currentMonth.getMonth();\n    const daysInMonth = (() => {\n      const lastDay = new Date(year, month + 1, 0);\n      return !isNaN(lastDay.getTime()) ? lastDay.getDate() : 30;\n    })();\n\n  return (\n    <div className=\"mood-calendar-svg-container\">\n      <h3 className=\"chart-title\">Mood Calendar</h3>\n      <h4 className=\"chart-subtitle\">{monthDisplay}</h4>\n      <svg viewBox={`0 0 ${config.svgWidth} ${config.svgHeight}`} className=\"mood-calendar-svg\">\n        <rect width={config.svgWidth} height={config.svgHeight} fill=\"white\" />\n        <CalendarHeader config={config} />\n        <g className=\"calendar-body\">\n          {[...Array(daysInMonth)].map((_, i) => {\n            const dayOfMonth = i + 1;\n            const date = new Date(year, month, dayOfMonth);\n            return <DayCell key={i} config={config} date={date} moods={moodByDate[dayOfMonth] || []} />;\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\n// --- Main Component ---\nconst MoodCalendar = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation, screenshotMode = false, showThreeMonthSummaries = false }) => {\n  const { moodData, isLoading: loading, error } = usePatientData(patientId, 'mood');\n  \n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('mood');\n  const nav = navigation || internalNavigation;\n  \n  // For mood chart, determine the month to display based on the navigation\n  // If using weekly navigation, show the month that contains the current week\n  let currentMonth;\n  if (nav.navigationType === 'week') {\n    // Use the week's start date to determine which month to display\n    const weekRange = nav.getDateRange();\n    currentMonth = new Date(weekRange.start.getFullYear(), weekRange.start.getMonth(), 1);\n  } else {\n    // Use monthly navigation directly\n    currentMonth = nav.currentDate;\n  }\n\n  const moodByDate = moodData\n    .filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth())\n    .reduce((acc, item) => {\n      const dateKey = item.date.getDate();\n      if (!acc[dateKey]) acc[dateKey] = [];\n      acc[dateKey].push(item.mood);\n      return acc;\n    }, {});\n\n  // Get appropriate month display based on navigation type\n  const monthDisplay = nav.navigationType === 'week' \n    ? currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })\n    : nav.getFormattedDateRange();\n\n  // Get 3-month data\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n  const threeMonthData = moodData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\n\n  // Calculate summary statistics for physician view\n  const currentMonthData = moodData.filter(d => \n    d.date.getFullYear() === currentMonth.getFullYear() && \n    d.date.getMonth() === currentMonth.getMonth()\n  );\n  \n  let monthSummary = null;\n  if (currentMonthData.length > 0) {\n\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n\n    currentMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = currentMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? ((count / totalEntries) * 100).toFixed(0) : 0;\n    });\n\n    // Days in current month\n    const daysInMonth = (() => {\n      const lastDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n      return !isNaN(lastDay.getTime()) ? lastDay.getDate() : 30;\n    })();\n    const daysWithMood = new Set(currentMonthData.map(d => d.date.getDate())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n\n    monthSummary = {\n      totalEntries,\n      daysWithMood,\n      daysInMonth,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthData.length > 0) {\n\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n\n    threeMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = threeMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? ((count / totalEntries) * 100).toFixed(0) : 0;\n    });\n\n    // Calculate actual days in the 3-month period\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const daysWithMood = new Set(threeMonthData.map(d => d.date.toDateString())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n\n    threeMonthSummary = {\n      totalEntries,\n      daysWithMood,\n      daysInThreeMonths,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }\n\n  return (\n    <div className=\"mood-calendar-container\">\n      <div className={`mood-calendar-wrapper ${isExpanded ? 'expanded' : ''}`}>\n        <Calendar isExpanded={isExpanded} moodByDate={moodByDate} currentMonth={currentMonth} monthDisplay={monthDisplay} />\n      </div>\n      <div className=\"mood-calendar-legend-wrapper\">\n          <Legend title=\"Mood\" items={moodLegendItems} hide={screenshotMode} />\n      </div>\n\n      {/* Show summary for physician/unified view */}\n      {(viewMode === 'physician' || viewMode === 'unified') && monthSummary && (\n        <div className=\"summary-container\">\n          <div className=\"chart-summary\">\n            <h4>Month Summary</h4>\n            <div className=\"summary-stats\">\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Mood Entries:</span>\n                <span className=\"stat-value\">\n                  {monthSummary.totalEntries} entries\n                </span>\n              </div>\n\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Most Common Mood:</span>\n                <span className=\"stat-value\">\n                  {MOODS[monthSummary.mostCommonMood]} {monthSummary.mostCommonMood.charAt(0).toUpperCase() + monthSummary.mostCommonMood.slice(1)} ({monthSummary.mostCommonMoodCount}x)\n                </span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Mood Distribution:</span>\n                <span className=\"stat-value\">\n                  ðŸ˜Š{monthSummary.moodPercentages.happy}% ðŸ˜¢{monthSummary.moodPercentages.sad}% ðŸ˜ {monthSummary.moodPercentages.angry}%\n                </span>\n              </div>\n\n            </div>\n          </div>\n          \n          {showThreeMonthSummaries && threeMonthSummary && (\n            <div className=\"chart-summary\">\n              <h4>3-Month Summary</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Mood Entries:</span>\n                  <span className=\"stat-value\">\n                    {threeMonthSummary.totalEntries} entries\n                  </span>\n                </div>\n\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Most Common Mood:</span>\n                  <span className=\"stat-value\">\n                    {MOODS[threeMonthSummary.mostCommonMood]} {threeMonthSummary.mostCommonMood.charAt(0).toUpperCase() + threeMonthSummary.mostCommonMood.slice(1)} ({threeMonthSummary.mostCommonMoodCount}x)\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Mood Distribution:</span>\n                  <span className=\"stat-value\">\n                    ðŸ˜Š{threeMonthSummary.moodPercentages.happy}% ðŸ˜¢{threeMonthSummary.moodPercentages.sad}% ðŸ˜ {threeMonthSummary.moodPercentages.angry}%\n                  </span>\n                </div>\n\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MoodCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}