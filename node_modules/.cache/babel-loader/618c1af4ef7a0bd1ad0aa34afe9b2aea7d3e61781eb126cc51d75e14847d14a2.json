{"ast":null,"code":"import _objectSpread from\"C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useMemo}from'react';import{VISUALIZATION_CONFIG,DASHBOARD_CONFIG}from'../constants';// Import all chart components\nimport GlucoseChart from'../components/patient_charts/GlucoseChart';import BloodPressureChart from'../components/patient_charts/BloodPressureChart';import ExerciseChart from'../components/patient_charts/ExerciseChart';import MoodCalendar from'../components/patient_charts/MoodCalendar';import PainChart from'../components/patient_charts/PainChart';import MealContentsChart from'../components/patient_charts/MealContentsChart';import SleepChart from'../components/patient_charts/SleepChart';/**\r\n * Shared hook for managing visualizations across different dashboard types\r\n * Now supports showing all available visualizations\r\n * @param {string} viewMode - 'patient' or 'physician'\r\n * @param {Object} data - Patient data object\r\n * @returns {Object} Visualization state and utilities\r\n */const useVisualizations=(viewMode,data)=>{const config=DASHBOARD_CONFIG[viewMode];// Create visualization registry with components\nconst allVisualizations=useMemo(()=>({glucose:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.glucose),{},{component:GlucoseChart}),bloodPressure:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.bloodPressure),{},{component:BloodPressureChart}),exercise:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.exercise),{},{component:ExerciseChart}),mood:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.mood),{},{component:MoodCalendar}),pain:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.pain),{},{component:PainChart}),mealContents:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.mealContents),{},{component:MealContentsChart}),sleep:_objectSpread(_objectSpread({},VISUALIZATION_CONFIG.sleep),{},{component:SleepChart})}),[]);// Determine available visualizations based on data\nconst availableVisualizations=useMemo(()=>{if(!data)return{};return Object.entries(allVisualizations).reduce((acc,_ref)=>{let[key,viz]=_ref;const dataKey=\"\".concat(key,\"Data\");// Special case for meal contents\nif(key==='mealContents'&&data['mealData']&&data['mealData'].length>0){acc[key]=viz;}else if(data[dataKey]&&data[dataKey].length>0){acc[key]=viz;}return acc;},{});},[data,allVisualizations]);// Create dynamic selected visualizations based on available ones\n// Remove ordering logic to fix expand button bug\nconst selectedVisualizations=useMemo(()=>{const availableKeys=Object.keys(availableVisualizations);// Create chart IDs for all available visualizations in the same order as they appear\nconst chartIds=availableKeys.map((_,index)=>\"\".concat(viewMode,\"-chart-\").concat(index));return chartIds.reduce((acc,chartId,index)=>{acc[chartId]=availableKeys[index];return acc;},{});},[availableVisualizations,viewMode]);const handleVisualizationChange=(chartId,visualizationType)=>{// This function is kept for compatibility but may not be needed\n// since we're now showing all available visualizations\nconsole.log('Visualization change requested:',chartId,visualizationType);};return{allVisualizations,availableVisualizations,selectedVisualizations,handleVisualizationChange,config};};export default useVisualizations;","map":{"version":3,"names":["React","useState","useMemo","VISUALIZATION_CONFIG","DASHBOARD_CONFIG","GlucoseChart","BloodPressureChart","ExerciseChart","MoodCalendar","PainChart","MealContentsChart","SleepChart","useVisualizations","viewMode","data","config","allVisualizations","glucose","_objectSpread","component","bloodPressure","exercise","mood","pain","mealContents","sleep","availableVisualizations","Object","entries","reduce","acc","_ref","key","viz","dataKey","concat","length","selectedVisualizations","availableKeys","keys","chartIds","map","_","index","chartId","handleVisualizationChange","visualizationType","console","log"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/useVisualizations.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport { VISUALIZATION_CONFIG, DASHBOARD_CONFIG } from '../constants';\r\n\r\n// Import all chart components\r\nimport GlucoseChart from '../components/patient_charts/GlucoseChart';\r\nimport BloodPressureChart from '../components/patient_charts/BloodPressureChart';\r\nimport ExerciseChart from '../components/patient_charts/ExerciseChart';\r\nimport MoodCalendar from '../components/patient_charts/MoodCalendar';\r\nimport PainChart from '../components/patient_charts/PainChart';\r\nimport MealContentsChart from '../components/patient_charts/MealContentsChart';\r\nimport SleepChart from '../components/patient_charts/SleepChart';\r\n\r\n/**\r\n * Shared hook for managing visualizations across different dashboard types\r\n * Now supports showing all available visualizations\r\n * @param {string} viewMode - 'patient' or 'physician'\r\n * @param {Object} data - Patient data object\r\n * @returns {Object} Visualization state and utilities\r\n */\r\nconst useVisualizations = (viewMode, data) => {\r\n  const config = DASHBOARD_CONFIG[viewMode];\r\n  \r\n  // Create visualization registry with components\r\n  const allVisualizations = useMemo(() => ({\r\n    glucose: { ...VISUALIZATION_CONFIG.glucose, component: GlucoseChart },\r\n    bloodPressure: { ...VISUALIZATION_CONFIG.bloodPressure, component: BloodPressureChart },\r\n    exercise: { ...VISUALIZATION_CONFIG.exercise, component: ExerciseChart },\r\n    mood: { ...VISUALIZATION_CONFIG.mood, component: MoodCalendar },\r\n    pain: { ...VISUALIZATION_CONFIG.pain, component: PainChart },\r\n    mealContents: { ...VISUALIZATION_CONFIG.mealContents, component: MealContentsChart },\r\n    sleep: { ...VISUALIZATION_CONFIG.sleep, component: SleepChart },\r\n  }), []);\r\n\r\n  // Determine available visualizations based on data\r\n  const availableVisualizations = useMemo(() => {\r\n    if (!data) return {};\r\n\r\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\r\n      const dataKey = `${key}Data`;\r\n      // Special case for meal contents\r\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\r\n        acc[key] = viz;\r\n      } else if (data[dataKey] && data[dataKey].length > 0) {\r\n        acc[key] = viz;\r\n      }\r\n      return acc;\r\n    }, {});\r\n  }, [data, allVisualizations]);\r\n\r\n  // Create dynamic selected visualizations based on available ones\r\n  // Remove ordering logic to fix expand button bug\r\n  const selectedVisualizations = useMemo(() => {\r\n    const availableKeys = Object.keys(availableVisualizations);\r\n    \r\n    // Create chart IDs for all available visualizations in the same order as they appear\r\n    const chartIds = availableKeys.map((_, index) => `${viewMode}-chart-${index}`);\r\n    \r\n    return chartIds.reduce((acc, chartId, index) => {\r\n      acc[chartId] = availableKeys[index];\r\n      return acc;\r\n    }, {});\r\n  }, [availableVisualizations, viewMode]);\r\n\r\n  const handleVisualizationChange = (chartId, visualizationType) => {\r\n    // This function is kept for compatibility but may not be needed\r\n    // since we're now showing all available visualizations\r\n    console.log('Visualization change requested:', chartId, visualizationType);\r\n  };\r\n\r\n  return {\r\n    allVisualizations,\r\n    availableVisualizations,\r\n    selectedVisualizations,\r\n    handleVisualizationChange,\r\n    config\r\n  };\r\n};\r\n\r\nexport default useVisualizations;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}