{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\DashboardGrid.js\";\nimport React from 'react';\nimport VisualizationWrapper from './VisualizationWrapper';\nimport PhysicianVisualizationWrapper from './PhysicianVisualizationWrapper';\nimport './DashboardGrid.css';\n\n/**\r\n * Shared component for rendering dashboard grids with visualization wrappers\r\n * Handles the repetitive VisualizationWrapper rendering logic\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardGrid = ({\n  viewMode,\n  // 'patient' or 'physician'\n  selectedVisualizations,\n  availableVisualizations,\n  allVisualizations,\n  onVisualizationChange,\n  onExpand,\n  expandedItem,\n  renderVisualization,\n  disabled = false,\n  placeholderText = \"No data available for this patient.\",\n  // New props for physician summary functionality\n  showSummaries = false,\n  summaryTexts = {},\n  onSummaryChange = null\n}) => {\n  // Configuration for different view modes\n  const gridConfig = {\n    patient: {\n      className: 'dashboard-grid',\n      chartIds: ['box1', 'box2', 'box3'],\n      chartClassNames: ['visualization-box', 'visualization-box-1', 'visualization-box-2', 'visualization-box-3']\n    },\n    physician: {\n      className: 'physician-charts-grid',\n      chartIds: ['window1', 'window2', 'window3', 'window4', 'window5', 'window6'],\n      chartClassNames: ['physician-chart-container', 'window-1', 'window-2', 'window-3', 'window-4', 'window-5', 'window-6']\n    }\n  };\n  const config = gridConfig[viewMode];\n\n  // Choose the appropriate wrapper component\n  const getWrapperComponent = (chartId, selectedViz) => {\n    if (viewMode === 'physician' && showSummaries) {\n      return PhysicianVisualizationWrapper;\n    }\n    return VisualizationWrapper;\n  };\n\n  // If there's an expanded item, show only that\n  if (expandedItem) {\n    const selectedViz = selectedVisualizations[expandedItem];\n    const WrapperComponent = getWrapperComponent(expandedItem, selectedViz);\n    const wrapperProps = {\n      id: expandedItem,\n      className: `${config.chartClassNames[0]} expanded-view`,\n      selectedViz: selectedViz,\n      availableVisualizations: availableVisualizations,\n      allVisualizations: allVisualizations,\n      onVisualizationChange: onVisualizationChange,\n      onExpand: onExpand,\n      isExpanded: true,\n      renderVisualization: renderVisualization,\n      disabled: disabled,\n      placeholderText: placeholderText\n    };\n\n    // Add physician-specific props if using PhysicianVisualizationWrapper\n    if (viewMode === 'physician' && showSummaries) {\n      wrapperProps.showSummary = true;\n      wrapperProps.summaryText = summaryTexts[expandedItem] || '';\n      wrapperProps.onSummaryChange = onSummaryChange;\n    }\n    return /*#__PURE__*/_jsxDEV(WrapperComponent, {\n      ...wrapperProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render the grid of visualization wrappers\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: config.className,\n    children: config.chartIds.map((chartId, index) => {\n      const wrapperProps = {\n        key: chartId,\n        id: chartId,\n        className: `${config.chartClassNames[0]} ${config.chartClassNames[index + 1] || ''}`,\n        selectedViz: selectedVisualizations[chartId],\n        availableVisualizations: availableVisualizations,\n        allVisualizations: allVisualizations,\n        onVisualizationChange: onVisualizationChange,\n        onExpand: onExpand,\n        isExpanded: expandedItem === chartId,\n        renderVisualization: renderVisualization,\n        disabled: disabled,\n        placeholderText: placeholderText\n      };\n\n      // Add physician-specific props if using PhysicianVisualizationWrapper\n      if (viewMode === 'physician' && showSummaries) {\n        wrapperProps.showSummary = true;\n        wrapperProps.summaryText = summaryTexts[chartId] || '';\n        wrapperProps.onSummaryChange = onSummaryChange;\n      }\n      return /*#__PURE__*/_jsxDEV(WrapperComponent, {\n        ...wrapperProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_c = DashboardGrid;\nexport default DashboardGrid;\nvar _c;\n$RefreshReg$(_c, \"DashboardGrid\");","map":{"version":3,"names":["React","VisualizationWrapper","PhysicianVisualizationWrapper","jsxDEV","_jsxDEV","DashboardGrid","viewMode","selectedVisualizations","availableVisualizations","allVisualizations","onVisualizationChange","onExpand","expandedItem","renderVisualization","disabled","placeholderText","showSummaries","summaryTexts","onSummaryChange","gridConfig","patient","className","chartIds","chartClassNames","physician","config","getWrapperComponent","chartId","selectedViz","WrapperComponent","wrapperProps","id","isExpanded","showSummary","summaryText","fileName","_jsxFileName","lineNumber","columnNumber","children","map","index","key","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/DashboardGrid.js"],"sourcesContent":["import React from 'react';\r\nimport VisualizationWrapper from './VisualizationWrapper';\r\nimport PhysicianVisualizationWrapper from './PhysicianVisualizationWrapper';\r\nimport './DashboardGrid.css';\r\n\r\n/**\r\n * Shared component for rendering dashboard grids with visualization wrappers\r\n * Handles the repetitive VisualizationWrapper rendering logic\r\n */\r\nconst DashboardGrid = ({\r\n  viewMode, // 'patient' or 'physician'\r\n  selectedVisualizations,\r\n  availableVisualizations,\r\n  allVisualizations,\r\n  onVisualizationChange,\r\n  onExpand,\r\n  expandedItem,\r\n  renderVisualization,\r\n  disabled = false,\r\n  placeholderText = \"No data available for this patient.\",\r\n  // New props for physician summary functionality\r\n  showSummaries = false,\r\n  summaryTexts = {},\r\n  onSummaryChange = null\r\n}) => {\r\n  // Configuration for different view modes\r\n  const gridConfig = {\r\n    patient: {\r\n      className: 'dashboard-grid',\r\n      chartIds: ['box1', 'box2', 'box3'],\r\n      chartClassNames: ['visualization-box', 'visualization-box-1', 'visualization-box-2', 'visualization-box-3']\r\n    },\r\n    physician: {\r\n      className: 'physician-charts-grid',\r\n      chartIds: ['window1', 'window2', 'window3', 'window4', 'window5', 'window6'],\r\n      chartClassNames: ['physician-chart-container', 'window-1', 'window-2', 'window-3', 'window-4', 'window-5', 'window-6']\r\n    }\r\n  };\r\n\r\n  const config = gridConfig[viewMode];\r\n\r\n  // Choose the appropriate wrapper component\r\n  const getWrapperComponent = (chartId, selectedViz) => {\r\n    if (viewMode === 'physician' && showSummaries) {\r\n      return PhysicianVisualizationWrapper;\r\n    }\r\n    return VisualizationWrapper;\r\n  };\r\n\r\n  // If there's an expanded item, show only that\r\n  if (expandedItem) {\r\n    const selectedViz = selectedVisualizations[expandedItem];\r\n    const WrapperComponent = getWrapperComponent(expandedItem, selectedViz);\r\n    \r\n    const wrapperProps = {\r\n      id: expandedItem,\r\n      className: `${config.chartClassNames[0]} expanded-view`,\r\n      selectedViz: selectedViz,\r\n      availableVisualizations: availableVisualizations,\r\n      allVisualizations: allVisualizations,\r\n      onVisualizationChange: onVisualizationChange,\r\n      onExpand: onExpand,\r\n      isExpanded: true,\r\n      renderVisualization: renderVisualization,\r\n      disabled: disabled,\r\n      placeholderText: placeholderText\r\n    };\r\n\r\n    // Add physician-specific props if using PhysicianVisualizationWrapper\r\n    if (viewMode === 'physician' && showSummaries) {\r\n      wrapperProps.showSummary = true;\r\n      wrapperProps.summaryText = summaryTexts[expandedItem] || '';\r\n      wrapperProps.onSummaryChange = onSummaryChange;\r\n    }\r\n\r\n    return <WrapperComponent {...wrapperProps} />;\r\n  }\r\n\r\n  // Render the grid of visualization wrappers\r\n  return (\r\n    <div className={config.className}>\r\n      {config.chartIds.map((chartId, index) => {\r\n        const wrapperProps = {\r\n          key: chartId,\r\n          id: chartId,\r\n          className: `${config.chartClassNames[0]} ${config.chartClassNames[index + 1] || ''}`,\r\n          selectedViz: selectedVisualizations[chartId],\r\n          availableVisualizations: availableVisualizations,\r\n          allVisualizations: allVisualizations,\r\n          onVisualizationChange: onVisualizationChange,\r\n          onExpand: onExpand,\r\n          isExpanded: expandedItem === chartId,\r\n          renderVisualization: renderVisualization,\r\n          disabled: disabled,\r\n          placeholderText: placeholderText\r\n        };\r\n\r\n        // Add physician-specific props if using PhysicianVisualizationWrapper\r\n        if (viewMode === 'physician' && showSummaries) {\r\n          wrapperProps.showSummary = true;\r\n          wrapperProps.summaryText = summaryTexts[chartId] || '';\r\n          wrapperProps.onSummaryChange = onSummaryChange;\r\n        }\r\n\r\n        return <WrapperComponent {...wrapperProps} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}