{"ast":null,"code":"var _s = $RefreshSig$();\n/**\r\n * Unified hook for container width management\r\n * Replaces redundant container width logic across chart components\r\n * Provides consistent responsive sizing for all visualizations\r\n */\n\nimport { useState, useEffect, useRef, useLayoutEffect } from 'react';\nexport const useContainerWidth = (defaultWidth = 400, options = {}) => {\n  _s();\n  const [containerWidth, setContainerWidth] = useState(defaultWidth);\n  const containerRef = useRef(null);\n  const {\n    useResizeObserver = true,\n    useWindowResize = true,\n    debounceMs = 100\n  } = options;\n\n  // Debounced width update function\n  const debouncedSetWidth = (() => {\n    let timeoutId;\n    return width => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        setContainerWidth(width);\n      }, debounceMs);\n    };\n  })();\n\n  // Update container width\n  const updateContainerWidth = () => {\n    if (containerRef.current) {\n      const width = containerRef.current.offsetWidth;\n      if (width > 0) {\n        debouncedSetWidth(width);\n      }\n    }\n  };\n\n  // Use ResizeObserver for more efficient updates\n  useLayoutEffect(() => {\n    if (!useResizeObserver || !containerRef.current) return;\n    const resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        const {\n          width\n        } = entry.contentRect;\n        if (width > 0) {\n          debouncedSetWidth(width);\n        }\n      }\n    });\n    resizeObserver.observe(containerRef.current);\n    return () => resizeObserver.disconnect();\n  }, [useResizeObserver]);\n\n  // Fallback to window resize listener\n  useEffect(() => {\n    if (!useWindowResize) return;\n    updateContainerWidth();\n    window.addEventListener('resize', updateContainerWidth);\n    return () => window.removeEventListener('resize', updateContainerWidth);\n  }, [useWindowResize]);\n  return {\n    containerWidth,\n    containerRef,\n    updateContainerWidth\n  };\n};\n_s(useContainerWidth, \"KTE5v5DSr4UWxC+m0mrpeLkiqfo=\");\nexport default useContainerWidth;","map":{"version":3,"names":["useState","useEffect","useRef","useLayoutEffect","useContainerWidth","defaultWidth","options","_s","containerWidth","setContainerWidth","containerRef","useResizeObserver","useWindowResize","debounceMs","debouncedSetWidth","timeoutId","width","clearTimeout","setTimeout","updateContainerWidth","current","offsetWidth","resizeObserver","ResizeObserver","entries","entry","contentRect","observe","disconnect","window","addEventListener","removeEventListener"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/useContainerWidth.js"],"sourcesContent":["/**\r\n * Unified hook for container width management\r\n * Replaces redundant container width logic across chart components\r\n * Provides consistent responsive sizing for all visualizations\r\n */\r\n\r\nimport { useState, useEffect, useRef, useLayoutEffect } from 'react';\r\n\r\nexport const useContainerWidth = (defaultWidth = 400, options = {}) => {\r\n  const [containerWidth, setContainerWidth] = useState(defaultWidth);\r\n  const containerRef = useRef(null);\r\n  const { \r\n    useResizeObserver = true, \r\n    useWindowResize = true,\r\n    debounceMs = 100 \r\n  } = options;\r\n\r\n  // Debounced width update function\r\n  const debouncedSetWidth = (() => {\r\n    let timeoutId;\r\n    return (width) => {\r\n      clearTimeout(timeoutId);\r\n      timeoutId = setTimeout(() => {\r\n        setContainerWidth(width);\r\n      }, debounceMs);\r\n    };\r\n  })();\r\n\r\n  // Update container width\r\n  const updateContainerWidth = () => {\r\n    if (containerRef.current) {\r\n      const width = containerRef.current.offsetWidth;\r\n      if (width > 0) {\r\n        debouncedSetWidth(width);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Use ResizeObserver for more efficient updates\r\n  useLayoutEffect(() => {\r\n    if (!useResizeObserver || !containerRef.current) return;\r\n\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      for (let entry of entries) {\r\n        const { width } = entry.contentRect;\r\n        if (width > 0) {\r\n          debouncedSetWidth(width);\r\n        }\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(containerRef.current);\r\n    return () => resizeObserver.disconnect();\r\n  }, [useResizeObserver]);\r\n\r\n  // Fallback to window resize listener\r\n  useEffect(() => {\r\n    if (!useWindowResize) return;\r\n\r\n    updateContainerWidth();\r\n    window.addEventListener('resize', updateContainerWidth);\r\n    return () => window.removeEventListener('resize', updateContainerWidth);\r\n  }, [useWindowResize]);\r\n\r\n  return {\r\n    containerWidth,\r\n    containerRef,\r\n    updateContainerWidth\r\n  };\r\n};\r\n\r\nexport default useContainerWidth;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,eAAe,QAAQ,OAAO;AAEpE,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,YAAY,GAAG,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAACK,YAAY,CAAC;EAClE,MAAMK,YAAY,GAAGR,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM;IACJS,iBAAiB,GAAG,IAAI;IACxBC,eAAe,GAAG,IAAI;IACtBC,UAAU,GAAG;EACf,CAAC,GAAGP,OAAO;;EAEX;EACA,MAAMQ,iBAAiB,GAAG,CAAC,MAAM;IAC/B,IAAIC,SAAS;IACb,OAAQC,KAAK,IAAK;MAChBC,YAAY,CAACF,SAAS,CAAC;MACvBA,SAAS,GAAGG,UAAU,CAAC,MAAM;QAC3BT,iBAAiB,CAACO,KAAK,CAAC;MAC1B,CAAC,EAAEH,UAAU,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,CAAC;;EAEJ;EACA,MAAMM,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAIT,YAAY,CAACU,OAAO,EAAE;MACxB,MAAMJ,KAAK,GAAGN,YAAY,CAACU,OAAO,CAACC,WAAW;MAC9C,IAAIL,KAAK,GAAG,CAAC,EAAE;QACbF,iBAAiB,CAACE,KAAK,CAAC;MAC1B;IACF;EACF,CAAC;;EAED;EACAb,eAAe,CAAC,MAAM;IACpB,IAAI,CAACQ,iBAAiB,IAAI,CAACD,YAAY,CAACU,OAAO,EAAE;IAEjD,MAAME,cAAc,GAAG,IAAIC,cAAc,CAACC,OAAO,IAAI;MACnD,KAAK,IAAIC,KAAK,IAAID,OAAO,EAAE;QACzB,MAAM;UAAER;QAAM,CAAC,GAAGS,KAAK,CAACC,WAAW;QACnC,IAAIV,KAAK,GAAG,CAAC,EAAE;UACbF,iBAAiB,CAACE,KAAK,CAAC;QAC1B;MACF;IACF,CAAC,CAAC;IAEFM,cAAc,CAACK,OAAO,CAACjB,YAAY,CAACU,OAAO,CAAC;IAC5C,OAAO,MAAME,cAAc,CAACM,UAAU,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACjB,iBAAiB,CAAC,CAAC;;EAEvB;EACAV,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,eAAe,EAAE;IAEtBO,oBAAoB,CAAC,CAAC;IACtBU,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEX,oBAAoB,CAAC;IACvD,OAAO,MAAMU,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEZ,oBAAoB,CAAC;EACzE,CAAC,EAAE,CAACP,eAAe,CAAC,CAAC;EAErB,OAAO;IACLJ,cAAc;IACdE,YAAY;IACZS;EACF,CAAC;AACH,CAAC;AAACZ,EAAA,CA7DWH,iBAAiB;AA+D9B,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}