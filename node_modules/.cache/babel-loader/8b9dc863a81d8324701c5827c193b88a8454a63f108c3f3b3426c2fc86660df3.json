{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local Experimental\\\\PGHD_Visualization_Dashboard\\\\src\\\\components\\\\patient_charts\\\\MoodCalendar.js\",\n  _s = $RefreshSig$();\n/**\n MoodCalendar.js - Mood Tracking Calendar Visualization\n \n This component provides comprehensive mood monitoring:\n - Daily mood tracking in calendar format\n - Color-coded mood states (happy, sad, angry)\n - Monthly navigation and trend analysis\n - Interactive mood selection and editing\n - Calendar layout\n - Integration with patient data and navigation\n \n Essential for mental health monitoring and emotional well-being tracking.\n */\n\nimport React, { useState, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport './MoodCalendar.css';\n\n// --- Constants & Config ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOODS = {\n  happy: 'ðŸ˜Š',\n  sad: 'ðŸ˜¢',\n  angry: 'ðŸ˜ '\n};\nconst MOOD_COLORS = {\n  happy: 'var(--chart-color-mood-happy)',\n  sad: 'var(--chart-color-mood-sad)',\n  angry: 'var(--chart-color-mood-angry)'\n};\nconst MOOD_BACKGROUNDS = {\n  happy: 'var(--chart-color-mood-happy-bg)',\n  sad: 'var(--chart-color-mood-sad-bg)',\n  angry: 'var(--chart-color-mood-angry-bg)'\n};\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst getCalendarConfig = isExpanded => ({\n  svgWidth: isExpanded ? 700 : 350,\n  svgHeight: isExpanded ? 600 : 300,\n  cellWidth: isExpanded ? 100 : 50,\n  cellHeight: isExpanded ? 85 : 44,\n  dayLabelY: isExpanded ? 55 : 30,\n  dayLabelFontSize: isExpanded ? 16 : 9,\n  dateLabelX: isExpanded ? 12 : 5,\n  dateLabelY: isExpanded ? 22 : 12,\n  dateLabelFontSize: isExpanded ? 14 : 8,\n  moodIconFontSize: isExpanded ? 36 : 20,\n  startX: isExpanded ? 50 : 25,\n  startY: isExpanded ? 100 : 55\n});\n\n// --- Helper Functions ---\nconst normalizeMood = mood => mood && MOODS[mood.toLowerCase()] ? mood.toLowerCase() : null;\nconst getMoodEmoji = mood => MOODS[normalizeMood(mood)];\nconst getMoodColor = mood => MOOD_COLORS[normalizeMood(mood)];\nconst getMoodBackgroundColor = mood => MOOD_BACKGROUNDS[normalizeMood(mood)] || '#ffffff';\nconst moodLegendItems = Object.entries(MOODS).map(([mood, emoji]) => ({\n  icon: emoji,\n  label: mood.charAt(0).toUpperCase() + mood.slice(1),\n  style: {\n    backgroundColor: MOOD_BACKGROUNDS[mood],\n    borderColor: MOOD_COLORS[mood]\n  }\n}));\n\n// --- Sub-components ---\n\nconst CalendarHeader = ({\n  config\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  className: \"calendar-header\",\n  children: DAYS_OF_WEEK.map((day, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n    x: config.startX + i * config.cellWidth,\n    y: config.dayLabelY,\n    className: \"day-name-label\",\n    style: {\n      fontSize: config.dayLabelFontSize\n    },\n    children: day\n  }, day, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 69,\n  columnNumber: 3\n}, this);\n_c = CalendarHeader;\nconst DayCell = ({\n  config,\n  date,\n  moods\n}) => {\n  const dayOfMonth = date.getDate();\n  const dayOfWeek = date.getDay();\n  const weekOfMonth = Math.floor((dayOfMonth - 1 + new Date(date.getFullYear(), date.getMonth(), 1).getDay()) / 7);\n  const x = config.startX + dayOfWeek * config.cellWidth;\n  const y = config.startY + weekOfMonth * (config.cellHeight + 2);\n  const primaryMood = moods.length > 0 ? moods[0] : null;\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"day-cell-group\",\n    transform: `translate(${x - config.cellWidth / 2}, ${y - config.cellHeight / 2})`,\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      width: config.cellWidth,\n      height: config.cellHeight,\n      fill: getMoodBackgroundColor(primaryMood),\n      className: \"day-cell-bg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: config.dateLabelX,\n      y: config.dateLabelY,\n      className: \"date-label\",\n      style: {\n        fontSize: config.dateLabelFontSize\n      },\n      children: dayOfMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), primaryMood && /*#__PURE__*/_jsxDEV(\"text\", {\n      x: config.cellWidth / 2,\n      y: config.cellHeight * 0.65,\n      className: \"mood-icon\",\n      fill: getMoodColor(primaryMood),\n      style: {\n        fontSize: config.moodIconFontSize\n      },\n      children: getMoodEmoji(primaryMood)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_c2 = DayCell;\nconst Calendar = ({\n  isExpanded,\n  moodByDate,\n  currentMonth,\n  monthDisplay\n}) => {\n  const config = getCalendarConfig(isExpanded);\n  const year = currentMonth.getFullYear();\n  const month = currentMonth.getMonth();\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-calendar-svg-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Mood Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"chart-subtitle\",\n      children: monthDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: `0 0 ${config.svgWidth} ${config.svgHeight}`,\n      className: \"mood-calendar-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        width: config.svgWidth,\n        height: config.svgHeight,\n        fill: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalendarHeader, {\n        config: config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"calendar-body\",\n        children: [...Array(daysInMonth)].map((_, i) => {\n          const dayOfMonth = i + 1;\n          const date = new Date(year, month, dayOfMonth);\n          return /*#__PURE__*/_jsxDEV(DayCell, {\n            config: config,\n            date: date,\n            moods: moodByDate[dayOfMonth] || []\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\n// --- Main Component ---\n_c3 = Calendar;\nconst MoodCalendar = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient',\n  navigation,\n  screenshotMode = false,\n  showThreeMonthSummaries = false\n}) => {\n  _s();\n  const {\n    moodData,\n    isLoading: loading,\n    error\n  } = usePatientData(patientId, 'mood');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('mood');\n  const nav = navigation || internalNavigation;\n  const currentMonth = nav.currentDate;\n  const moodByDate = moodData.filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth()).reduce((acc, item) => {\n    const dateKey = item.date.getDate();\n    if (!acc[dateKey]) acc[dateKey] = [];\n    acc[dateKey].push(item.mood);\n    return acc;\n  }, {});\n  const monthDisplay = nav.getFormattedDateRange();\n\n  // Get 3-month data\n  const {\n    start: startOfThreeMonths,\n    end: endOfThreeMonths\n  } = nav.getThreeMonthRange();\n  const threeMonthData = moodData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\n\n  // Calculate summary statistics for physician view\n  const currentMonthData = moodData.filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth());\n  let monthSummary = null;\n  if (currentMonthData.length > 0) {\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n    currentMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = currentMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? (count / totalEntries * 100).toFixed(0) : 0;\n    });\n\n    // Days in current month\n    const daysInMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();\n    const daysWithMood = new Set(currentMonthData.map(d => d.date.getDate())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n    monthSummary = {\n      totalEntries,\n      daysWithMood,\n      daysInMonth,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthData.length > 0) {\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n    threeMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = threeMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? (count / totalEntries * 100).toFixed(0) : 0;\n    });\n\n    // Calculate actual days in the 3-month period\n    const {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const daysWithMood = new Set(threeMonthData.map(d => d.date.toDateString())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n    threeMonthSummary = {\n      totalEntries,\n      daysWithMood,\n      daysInThreeMonths,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mood-calendar-wrapper ${isExpanded ? 'expanded' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(Calendar, {\n        isExpanded: isExpanded,\n        moodByDate: moodByDate,\n        currentMonth: currentMonth,\n        monthDisplay: monthDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-calendar-legend-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Legend, {\n        title: \"Mood\",\n        items: moodLegendItems,\n        hide: screenshotMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), (viewMode === 'physician' || viewMode === 'unified') && monthSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Month Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Mood Entries:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [monthSummary.totalEntries, \" entries\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common Mood:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [MOODS[monthSummary.mostCommonMood], \" \", monthSummary.mostCommonMood.charAt(0).toUpperCase() + monthSummary.mostCommonMood.slice(1), \" (\", monthSummary.mostCommonMoodCount, \"x)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Mood Distribution:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [\"\\uD83D\\uDE0A\", monthSummary.moodPercentages.happy, \"% \\uD83D\\uDE22\", monthSummary.moodPercentages.sad, \"% \\uD83D\\uDE20\", monthSummary.moodPercentages.angry, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), threeMonthSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"3-Month Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Mood Entries:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.totalEntries, \" entries\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common Mood:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [MOODS[threeMonthSummary.mostCommonMood], \" \", threeMonthSummary.mostCommonMood.charAt(0).toUpperCase() + threeMonthSummary.mostCommonMood.slice(1), \" (\", threeMonthSummary.mostCommonMoodCount, \"x)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Mood Distribution:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [\"\\uD83D\\uDE0A\", threeMonthSummary.moodPercentages.happy, \"% \\uD83D\\uDE22\", threeMonthSummary.moodPercentages.sad, \"% \\uD83D\\uDE20\", threeMonthSummary.moodPercentages.angry, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodCalendar, \"33u2VOIX4JnTHuMC+1VURPpsjxA=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c4 = MoodCalendar;\nexport default MoodCalendar;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CalendarHeader\");\n$RefreshReg$(_c2, \"DayCell\");\n$RefreshReg$(_c3, \"Calendar\");\n$RefreshReg$(_c4, \"MoodCalendar\");","map":{"version":3,"names":["React","useState","useRef","usePatientData","useChartNavigation","Legend","jsxDEV","_jsxDEV","MOODS","happy","sad","angry","MOOD_COLORS","MOOD_BACKGROUNDS","DAYS_OF_WEEK","getCalendarConfig","isExpanded","svgWidth","svgHeight","cellWidth","cellHeight","dayLabelY","dayLabelFontSize","dateLabelX","dateLabelY","dateLabelFontSize","moodIconFontSize","startX","startY","normalizeMood","mood","toLowerCase","getMoodEmoji","getMoodColor","getMoodBackgroundColor","moodLegendItems","Object","entries","map","emoji","icon","label","charAt","toUpperCase","slice","style","backgroundColor","borderColor","CalendarHeader","config","className","children","day","i","x","y","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","DayCell","date","moods","dayOfMonth","getDate","dayOfWeek","getDay","weekOfMonth","Math","floor","Date","getFullYear","getMonth","primaryMood","length","transform","width","height","fill","_c2","Calendar","moodByDate","currentMonth","monthDisplay","year","month","daysInMonth","viewBox","Array","_","_c3","MoodCalendar","patientId","onExpand","viewMode","navigation","screenshotMode","showThreeMonthSummaries","_s","moodData","isLoading","loading","error","useInternalNavigation","internalNavigation","nav","currentDate","filter","d","reduce","acc","item","dateKey","push","getFormattedDateRange","start","startOfThreeMonths","end","endOfThreeMonths","getThreeMonthRange","threeMonthData","currentMonthData","monthSummary","moodCounts","keys","forEach","entry","normalizedMood","undefined","mostCommonMood","sort","a","b","totalEntries","moodPercentages","count","toFixed","daysWithMood","Set","size","moodScore","moodTrend","mostCommonMoodCount","threeMonthSummary","daysInThreeMonths","ceil","toDateString","title","items","hide","_c4","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/components/patient_charts/MoodCalendar.js"],"sourcesContent":["/**\n MoodCalendar.js - Mood Tracking Calendar Visualization\n \n This component provides comprehensive mood monitoring:\n - Daily mood tracking in calendar format\n - Color-coded mood states (happy, sad, angry)\n - Monthly navigation and trend analysis\n - Interactive mood selection and editing\n - Calendar layout\n - Integration with patient data and navigation\n \n Essential for mental health monitoring and emotional well-being tracking.\n */\n\nimport React, { useState, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\n\nimport './MoodCalendar.css';\n\n// --- Constants & Config ---\nconst MOODS = { happy: 'ðŸ˜Š', sad: 'ðŸ˜¢', angry: 'ðŸ˜ ' };\nconst MOOD_COLORS = { \n  happy: 'var(--chart-color-mood-happy)', \n  sad: 'var(--chart-color-mood-sad)', \n  angry: 'var(--chart-color-mood-angry)' \n};\nconst MOOD_BACKGROUNDS = { \n  happy: 'var(--chart-color-mood-happy-bg)', \n  sad: 'var(--chart-color-mood-sad-bg)', \n  angry: 'var(--chart-color-mood-angry-bg)' \n};\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nconst getCalendarConfig = (isExpanded) => ({\n  svgWidth: isExpanded ? 700 : 350,\n  svgHeight: isExpanded ? 600 : 300,\n  cellWidth: isExpanded ? 100 : 50,\n  cellHeight: isExpanded ? 85 : 44,\n  dayLabelY: isExpanded ? 55 : 30,\n  dayLabelFontSize: isExpanded ? 16 : 9,\n  dateLabelX: isExpanded ? 12 : 5,\n  dateLabelY: isExpanded ? 22 : 12,\n  dateLabelFontSize: isExpanded ? 14 : 8,\n  moodIconFontSize: isExpanded ? 36 : 20,\n  startX: isExpanded ? 50 : 25,\n  startY: isExpanded ? 100 : 55,\n});\n\n// --- Helper Functions ---\nconst normalizeMood = (mood) => (mood && MOODS[mood.toLowerCase()]) ? mood.toLowerCase() : null;\nconst getMoodEmoji = (mood) => MOODS[normalizeMood(mood)];\nconst getMoodColor = (mood) => MOOD_COLORS[normalizeMood(mood)];\nconst getMoodBackgroundColor = (mood) => MOOD_BACKGROUNDS[normalizeMood(mood)] || '#ffffff';\n\nconst moodLegendItems = Object.entries(MOODS).map(([mood, emoji]) => ({\n  icon: emoji,\n  label: mood.charAt(0).toUpperCase() + mood.slice(1),\n  style: {\n    backgroundColor: MOOD_BACKGROUNDS[mood],\n    borderColor: MOOD_COLORS[mood],\n  },\n}));\n\n// --- Sub-components ---\n\nconst CalendarHeader = ({ config }) => (\n  <g className=\"calendar-header\">\n    {DAYS_OF_WEEK.map((day, i) => (\n      <text \n        key={day} \n        x={config.startX + i * config.cellWidth} \n        y={config.dayLabelY} \n        className=\"day-name-label\"\n        style={{ fontSize: config.dayLabelFontSize }}\n      >\n        {day}\n      </text>\n    ))}\n  </g>\n);\n\nconst DayCell = ({ config, date, moods }) => {\n  const dayOfMonth = date.getDate();\n  const dayOfWeek = date.getDay();\n  const weekOfMonth = Math.floor((dayOfMonth - 1 + new Date(date.getFullYear(), date.getMonth(), 1).getDay()) / 7);\n  const x = config.startX + dayOfWeek * config.cellWidth;\n  const y = config.startY + weekOfMonth * (config.cellHeight + 2);\n  const primaryMood = moods.length > 0 ? moods[0] : null;\n\n  return (\n    <g className=\"day-cell-group\" transform={`translate(${x - config.cellWidth / 2}, ${y - config.cellHeight / 2})`}>\n      <rect width={config.cellWidth} height={config.cellHeight} fill={getMoodBackgroundColor(primaryMood)} className=\"day-cell-bg\" />\n      <text \n        x={config.dateLabelX} \n        y={config.dateLabelY} \n        className=\"date-label\" \n        style={{ fontSize: config.dateLabelFontSize }}\n      >\n        {dayOfMonth}\n      </text>\n      {primaryMood && (\n        <text \n          x={config.cellWidth / 2} \n          y={config.cellHeight * 0.65} \n          className=\"mood-icon\" \n          fill={getMoodColor(primaryMood)}\n          style={{ fontSize: config.moodIconFontSize }}\n        >\n          {getMoodEmoji(primaryMood)}\n        </text>\n      )}\n    </g>\n  );\n};\n\nconst Calendar = ({ isExpanded, moodByDate, currentMonth, monthDisplay }) => {\n  const config = getCalendarConfig(isExpanded);\n  const year = currentMonth.getFullYear();\n  const month = currentMonth.getMonth();\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n  return (\n    <div className=\"mood-calendar-svg-container\">\n      <h3 className=\"chart-title\">Mood Calendar</h3>\n      <h4 className=\"chart-subtitle\">{monthDisplay}</h4>\n      <svg viewBox={`0 0 ${config.svgWidth} ${config.svgHeight}`} className=\"mood-calendar-svg\">\n        <rect width={config.svgWidth} height={config.svgHeight} fill=\"white\" />\n        <CalendarHeader config={config} />\n        <g className=\"calendar-body\">\n          {[...Array(daysInMonth)].map((_, i) => {\n            const dayOfMonth = i + 1;\n            const date = new Date(year, month, dayOfMonth);\n            return <DayCell key={i} config={config} date={date} moods={moodByDate[dayOfMonth] || []} />;\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\n// --- Main Component ---\nconst MoodCalendar = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation, screenshotMode = false, showThreeMonthSummaries = false }) => {\n  const { moodData, isLoading: loading, error } = usePatientData(patientId, 'mood');\n  \n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('mood');\n  const nav = navigation || internalNavigation;\n  \n  const currentMonth = nav.currentDate;\n\n  const moodByDate = moodData\n    .filter(d => d.date.getFullYear() === currentMonth.getFullYear() && d.date.getMonth() === currentMonth.getMonth())\n    .reduce((acc, item) => {\n      const dateKey = item.date.getDate();\n      if (!acc[dateKey]) acc[dateKey] = [];\n      acc[dateKey].push(item.mood);\n      return acc;\n    }, {});\n\n  const monthDisplay = nav.getFormattedDateRange();\n\n  // Get 3-month data\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n  const threeMonthData = moodData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\n\n  // Calculate summary statistics for physician view\n  const currentMonthData = moodData.filter(d => \n    d.date.getFullYear() === currentMonth.getFullYear() && \n    d.date.getMonth() === currentMonth.getMonth()\n  );\n  \n  let monthSummary = null;\n  if (currentMonthData.length > 0) {\n\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n\n    currentMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = currentMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? ((count / totalEntries) * 100).toFixed(0) : 0;\n    });\n\n    // Days in current month\n    const daysInMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();\n    const daysWithMood = new Set(currentMonthData.map(d => d.date.getDate())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n\n    monthSummary = {\n      totalEntries,\n      daysWithMood,\n      daysInMonth,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthData.length > 0) {\n\n    // Count mood occurrences\n    const moodCounts = {};\n    Object.keys(MOODS).forEach(mood => {\n      moodCounts[mood] = 0;\n    });\n\n    threeMonthData.forEach(entry => {\n      const normalizedMood = normalizeMood(entry.mood);\n      if (normalizedMood && moodCounts[normalizedMood] !== undefined) {\n        moodCounts[normalizedMood]++;\n      }\n    });\n\n    // Find most common mood\n    const mostCommonMood = Object.entries(moodCounts)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    // Calculate mood distribution percentages\n    const totalEntries = threeMonthData.length;\n    const moodPercentages = {};\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      moodPercentages[mood] = totalEntries > 0 ? ((count / totalEntries) * 100).toFixed(0) : 0;\n    });\n\n    // Calculate actual days in the 3-month period\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const daysWithMood = new Set(threeMonthData.map(d => d.date.toDateString())).size;\n\n    // Calculate mood score (happy=3, sad=1, angry=1)\n    const moodScore = (moodCounts.happy * 3 + moodCounts.sad * 1 + moodCounts.angry * 1) / totalEntries;\n    const moodTrend = moodScore >= 2.5 ? 'Positive' : moodScore >= 1.5 ? 'Mixed' : 'Needs Attention';\n\n    threeMonthSummary = {\n      totalEntries,\n      daysWithMood,\n      daysInThreeMonths,\n      mostCommonMood: mostCommonMood[0],\n      mostCommonMoodCount: mostCommonMood[1],\n      moodCounts,\n      moodPercentages,\n      moodTrend\n    };\n  }\n\n  return (\n    <div className=\"mood-calendar-container\">\n      <div className={`mood-calendar-wrapper ${isExpanded ? 'expanded' : ''}`}>\n        <Calendar isExpanded={isExpanded} moodByDate={moodByDate} currentMonth={currentMonth} monthDisplay={monthDisplay} />\n      </div>\n      <div className=\"mood-calendar-legend-wrapper\">\n          <Legend title=\"Mood\" items={moodLegendItems} hide={screenshotMode} />\n      </div>\n\n      {/* Show summary for physician/unified view */}\n      {(viewMode === 'physician' || viewMode === 'unified') && monthSummary && (\n        <div className=\"summary-container\">\n          <div className=\"chart-summary\">\n            <h4>Month Summary</h4>\n            <div className=\"summary-stats\">\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Mood Entries:</span>\n                <span className=\"stat-value\">\n                  {monthSummary.totalEntries} entries\n                </span>\n              </div>\n\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Most Common Mood:</span>\n                <span className=\"stat-value\">\n                  {MOODS[monthSummary.mostCommonMood]} {monthSummary.mostCommonMood.charAt(0).toUpperCase() + monthSummary.mostCommonMood.slice(1)} ({monthSummary.mostCommonMoodCount}x)\n                </span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Mood Distribution:</span>\n                <span className=\"stat-value\">\n                  ðŸ˜Š{monthSummary.moodPercentages.happy}% ðŸ˜¢{monthSummary.moodPercentages.sad}% ðŸ˜ {monthSummary.moodPercentages.angry}%\n                </span>\n              </div>\n\n            </div>\n          </div>\n          \n          {threeMonthSummary && (\n            <div className=\"chart-summary\">\n              <h4>3-Month Summary</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Mood Entries:</span>\n                  <span className=\"stat-value\">\n                    {threeMonthSummary.totalEntries} entries\n                  </span>\n                </div>\n\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Most Common Mood:</span>\n                  <span className=\"stat-value\">\n                    {MOODS[threeMonthSummary.mostCommonMood]} {threeMonthSummary.mostCommonMood.charAt(0).toUpperCase() + threeMonthSummary.mostCommonMood.slice(1)} ({threeMonthSummary.mostCommonMoodCount}x)\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Mood Distribution:</span>\n                  <span className=\"stat-value\">\n                    ðŸ˜Š{threeMonthSummary.moodPercentages.happy}% ðŸ˜¢{threeMonthSummary.moodPercentages.sad}% ðŸ˜ {threeMonthSummary.moodPercentages.angry}%\n                  </span>\n                </div>\n\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MoodCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}