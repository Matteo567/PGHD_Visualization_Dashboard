{"ast":null,"code":"/*\n Simple chart navigation hook\n Provides navigation state and functions for charts\n */import React,{useState}from'react';const useChartNavigation=function(chartType){let initialDate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Date(2025,4,1);const[currentDate,setCurrentDate]=useState(initialDate);// Determine navigation type based on chart type\nconst navigationType=chartType==='mood'?'month':'week';const navigationLabel=chartType==='mood'?'Month':'Week';// Go to previous week or month\nconst goToPrevious=()=>{const newDate=new Date(currentDate);if(navigationType==='month'){newDate.setMonth(newDate.getMonth()-1);}else{newDate.setDate(newDate.getDate()-7);}setCurrentDate(newDate);};// Go to next week or month\nconst goToNext=()=>{const newDate=new Date(currentDate);if(navigationType==='month'){newDate.setMonth(newDate.getMonth()+1);}else{newDate.setDate(newDate.getDate()+7);}setCurrentDate(newDate);};// Get date range for current period\nconst getDateRange=()=>{if(navigationType==='month'){const startOfMonth=new Date(currentDate.getFullYear(),currentDate.getMonth(),1);const endOfMonth=new Date(currentDate.getFullYear(),currentDate.getMonth()+1,0);return{start:startOfMonth,end:endOfMonth};}else{const startOfWeek=new Date(currentDate);startOfWeek.setDate(startOfWeek.getDate()-startOfWeek.getDay());startOfWeek.setHours(0,0,0,0);const endOfWeek=new Date(startOfWeek);endOfWeek.setDate(endOfWeek.getDate()+6);endOfWeek.setHours(23,59,59,999);return{start:startOfWeek,end:endOfWeek};}};// Get current month/year display\nconst getCurrentMonthYear=()=>{return currentDate.toLocaleDateString('en-US',{month:'long',year:'numeric'});};// Get current week display\nconst getCurrentWeekDisplay=()=>{const range=getDateRange();const startStr=range.start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=range.end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" - \").concat(endStr);};// Get formatted date range with year (e.g., \"May 1 - 7, 2025\" for weeks or \"May 1 - 31, 2025\" for months)\nconst getFormattedDateRange=()=>{const range=getDateRange();const startMonth=range.start.toLocaleDateString('en-US',{month:'long'});const startDay=range.start.getDate();const endDay=range.end.getDate();const year=range.start.getFullYear();// Check if start and end are in the same month\nif(range.start.getMonth()===range.end.getMonth()){return\"\".concat(startMonth,\" \").concat(startDay,\" - \").concat(endDay,\", \").concat(year);}else{// Different months (edge case for weeks spanning month boundaries)\nconst endMonth=range.end.toLocaleDateString('en-US',{month:'long'});return\"\".concat(startMonth,\" \").concat(startDay,\" - \").concat(endMonth,\" \").concat(endDay,\", \").concat(year);}};// Get 3-month date range\nconst getThreeMonthRange=()=>{const endOfThreeMonths=new Date(currentDate);const startOfThreeMonths=new Date(currentDate);startOfThreeMonths.setMonth(startOfThreeMonths.getMonth()-3);const dataStartDate=new Date(2024,6,1);if(startOfThreeMonths<dataStartDate){startOfThreeMonths.setTime(dataStartDate.getTime());}const dataEndDate=new Date(2025,6,31);if(endOfThreeMonths>dataEndDate){endOfThreeMonths.setTime(dataEndDate.getTime());}return{start:startOfThreeMonths,end:endOfThreeMonths};};// Get 3-month display string\nconst getThreeMonthDisplay=()=>{const range=getThreeMonthRange();const startStr=range.start.toLocaleDateString('en-US',{month:'short',year:'numeric'});const endStr=range.end.toLocaleDateString('en-US',{month:'short',year:'numeric'});return\"\".concat(startStr,\" - \").concat(endStr);};return{currentDate,navigationType,navigationLabel,goToPrevious,goToNext,getDateRange,getThreeMonthRange,getCurrentMonthYear,getCurrentWeekDisplay,getThreeMonthDisplay,getFormattedDateRange};};export default useChartNavigation;","map":{"version":3,"names":["React","useState","useChartNavigation","chartType","initialDate","arguments","length","undefined","Date","currentDate","setCurrentDate","navigationType","navigationLabel","goToPrevious","newDate","setMonth","getMonth","setDate","getDate","goToNext","getDateRange","startOfMonth","getFullYear","endOfMonth","start","end","startOfWeek","getDay","setHours","endOfWeek","getCurrentMonthYear","toLocaleDateString","month","year","getCurrentWeekDisplay","range","startStr","day","endStr","concat","getFormattedDateRange","startMonth","startDay","endDay","endMonth","getThreeMonthRange","endOfThreeMonths","startOfThreeMonths","dataStartDate","setTime","getTime","dataEndDate","getThreeMonthDisplay"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/hooks/useChartNavigation.js"],"sourcesContent":["/*\n Simple chart navigation hook\n Provides navigation state and functions for charts\n */\n\nimport React, { useState } from 'react';\n\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  // Determine navigation type based on chart type\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\n\n  // Go to previous week or month\n  const goToPrevious = () => {\n    const newDate = new Date(currentDate);\n    if (navigationType === 'month') {\n      newDate.setMonth(newDate.getMonth() - 1);\n    } else {\n      newDate.setDate(newDate.getDate() - 7);\n    }\n    setCurrentDate(newDate);\n  };\n\n  // Go to next week or month\n  const goToNext = () => {\n    const newDate = new Date(currentDate);\n    if (navigationType === 'month') {\n      newDate.setMonth(newDate.getMonth() + 1);\n    } else {\n      newDate.setDate(newDate.getDate() + 7);\n    }\n    setCurrentDate(newDate);\n  };\n\n  // Get date range for current period\n  const getDateRange = () => {\n    if (navigationType === 'month') {\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n      return { start: startOfMonth, end: endOfMonth };\n    } else {\n      const startOfWeek = new Date(currentDate);\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      \n      const endOfWeek = new Date(startOfWeek);\n      endOfWeek.setDate(endOfWeek.getDate() + 6);\n      endOfWeek.setHours(23, 59, 59, 999);\n      \n      return { start: startOfWeek, end: endOfWeek };\n    }\n  };\n\n  // Get current month/year display\n  const getCurrentMonthYear = () => {\n    return currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n  };\n\n  // Get current week display\n  const getCurrentWeekDisplay = () => {\n    const range = getDateRange();\n    const startStr = range.start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const endStr = range.end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${startStr} - ${endStr}`;\n  };\n\n  // Get formatted date range with year (e.g., \"May 1 - 7, 2025\" for weeks or \"May 1 - 31, 2025\" for months)\n  const getFormattedDateRange = () => {\n    const range = getDateRange();\n    const startMonth = range.start.toLocaleDateString('en-US', { month: 'long' });\n    const startDay = range.start.getDate();\n    const endDay = range.end.getDate();\n    const year = range.start.getFullYear();\n    \n    // Check if start and end are in the same month\n    if (range.start.getMonth() === range.end.getMonth()) {\n      return `${startMonth} ${startDay} - ${endDay}, ${year}`;\n    } else {\n      // Different months (edge case for weeks spanning month boundaries)\n      const endMonth = range.end.toLocaleDateString('en-US', { month: 'long' });\n      return `${startMonth} ${startDay} - ${endMonth} ${endDay}, ${year}`;\n    }\n  };\n\n  // Get 3-month date range\n  const getThreeMonthRange = () => {\n    const endOfThreeMonths = new Date(currentDate);\n    const startOfThreeMonths = new Date(currentDate);\n    startOfThreeMonths.setMonth(startOfThreeMonths.getMonth() - 3);\n    \n    const dataStartDate = new Date(2024, 6, 1);\n    if (startOfThreeMonths < dataStartDate) {\n      startOfThreeMonths.setTime(dataStartDate.getTime());\n    }\n    \n    const dataEndDate = new Date(2025, 6, 31);\n    if (endOfThreeMonths > dataEndDate) {\n      endOfThreeMonths.setTime(dataEndDate.getTime());\n    }\n    \n    return { start: startOfThreeMonths, end: endOfThreeMonths };\n  };\n\n  // Get 3-month display string\n  const getThreeMonthDisplay = () => {\n    const range = getThreeMonthRange();\n    const startStr = range.start.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    const endStr = range.end.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    return `${startStr} - ${endStr}`;\n  };\n\n  return {\n    currentDate,\n    navigationType,\n    navigationLabel,\n    goToPrevious,\n    goToNext,\n    getDateRange,\n    getThreeMonthRange,\n    getCurrentMonthYear,\n    getCurrentWeekDisplay,\n    getThreeMonthDisplay,\n    getFormattedDateRange\n  };\n};\n\nexport default useChartNavigation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}