{"ast":null,"code":"var _s = $RefreshSig$();\n// Hook for managing chart navigation with week or month navigation\nimport { useState } from 'react';\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  // Determine navigation type based on chart type\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\n\n  // Go to previous week or month\n  const goToPrevious = () => {\n    const newDate = new Date(currentDate);\n    if (navigationType === 'month') {\n      newDate.setMonth(newDate.getMonth() - 1);\n    } else {\n      // Subtract 7 days for week navigation\n      newDate.setDate(newDate.getDate() - 7);\n    }\n    setCurrentDate(newDate);\n  };\n\n  // Go to next week or month\n  const goToNext = () => {\n    const newDate = new Date(currentDate);\n    if (navigationType === 'month') {\n      newDate.setMonth(newDate.getMonth() + 1);\n    } else {\n      // Add 7 days for week navigation\n      newDate.setDate(newDate.getDate() + 7);\n    }\n    setCurrentDate(newDate);\n  };\n\n  // Get month date range (first day to last day of current month)\n  const getMonthDateRange = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const startOfMonth = new Date(year, month, 1);\n    const endOfMonth = new Date(year, month + 1, 0); // Last day of month (day 0 of next month)\n    return {\n      start: startOfMonth,\n      end: endOfMonth\n    };\n  };\n\n  // Get week date range (Sunday to Saturday)\n  const getWeekDateRange = () => {\n    const startOfWeek = new Date(currentDate);\n    const currentDayOfWeek = startOfWeek.getDay(); // 0 = Sunday, 6 = Saturday\n    const daysToSubtract = currentDayOfWeek; // Go back to Sunday\n\n    startOfWeek.setDate(startOfWeek.getDate() - daysToSubtract);\n    startOfWeek.setHours(0, 0, 0, 0); // Start of day\n\n    const endOfWeek = new Date(startOfWeek);\n    const daysInWeek = 6; // Sunday to Saturday = 7 days, but we start on Sunday so add 6\n    endOfWeek.setDate(endOfWeek.getDate() + daysInWeek);\n    endOfWeek.setHours(23, 59, 59, 999); // End of day\n\n    return {\n      start: startOfWeek,\n      end: endOfWeek\n    };\n  };\n\n  // Get date range for current period (week or month)\n  const getDateRange = () => {\n    if (navigationType === 'month') {\n      return getMonthDateRange();\n    } else {\n      return getWeekDateRange();\n    }\n  };\n\n  // Get formatted date range with year (e.g., \"May 1 - 7, 2025\" for weeks or \"May 1 - 31, 2025\" for months)\n  const getFormattedDateRange = () => {\n    const range = getDateRange();\n    const startMonth = range.start.toLocaleDateString('en-US', {\n      month: 'long'\n    });\n    const startDay = range.start.getDate();\n    const endDay = range.end.getDate();\n    const year = range.start.getFullYear();\n\n    // Check if start and end are in the same month\n    if (range.start.getMonth() === range.end.getMonth()) {\n      return `${startMonth} ${startDay} - ${endDay}, ${year}`;\n    } else {\n      // Different months (edge case for weeks spanning month boundaries)\n      const endMonth = range.end.toLocaleDateString('en-US', {\n        month: 'long'\n      });\n      return `${startMonth} ${startDay} - ${endMonth} ${endDay}, ${year}`;\n    }\n  };\n\n  // Get 3-month date range (3 months before current date)\n  const getThreeMonthRange = () => {\n    const endOfThreeMonths = new Date(currentDate);\n    const startOfThreeMonths = new Date(currentDate);\n    startOfThreeMonths.setMonth(startOfThreeMonths.getMonth() - 3);\n\n    // Make sure we don't go before the earliest data date\n    const dataStartDate = new Date(2024, 6, 1);\n    if (startOfThreeMonths < dataStartDate) {\n      startOfThreeMonths.setTime(dataStartDate.getTime());\n    }\n\n    // Make sure we don't go after the latest data date\n    const dataEndDate = new Date(2025, 6, 31);\n    if (endOfThreeMonths > dataEndDate) {\n      endOfThreeMonths.setTime(dataEndDate.getTime());\n    }\n    return {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    };\n  };\n\n  // Get 3-month display string\n  const getThreeMonthDisplay = () => {\n    const range = getThreeMonthRange();\n    const startStr = range.start.toLocaleDateString('en-US', {\n      month: 'short',\n      year: 'numeric'\n    });\n    const endStr = range.end.toLocaleDateString('en-US', {\n      month: 'short',\n      year: 'numeric'\n    });\n    return `${startStr} - ${endStr}`;\n  };\n  return {\n    currentDate,\n    navigationType,\n    navigationLabel,\n    goToPrevious,\n    goToNext,\n    getDateRange,\n    getThreeMonthRange,\n    getThreeMonthDisplay,\n    getFormattedDateRange\n  };\n};\n_s(useChartNavigation, \"7ABt9H5MmU1h6X0+FO8sd1XbO3g=\");\nexport default useChartNavigation;","map":{"version":3,"names":["useState","useChartNavigation","chartType","initialDate","Date","_s","currentDate","setCurrentDate","navigationType","navigationLabel","goToPrevious","newDate","setMonth","getMonth","setDate","getDate","goToNext","getMonthDateRange","year","getFullYear","month","startOfMonth","endOfMonth","start","end","getWeekDateRange","startOfWeek","currentDayOfWeek","getDay","daysToSubtract","setHours","endOfWeek","daysInWeek","getDateRange","getFormattedDateRange","range","startMonth","toLocaleDateString","startDay","endDay","endMonth","getThreeMonthRange","endOfThreeMonths","startOfThreeMonths","dataStartDate","setTime","getTime","dataEndDate","getThreeMonthDisplay","startStr","endStr"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/hooks/useChartNavigation.js"],"sourcesContent":["// Hook for managing chart navigation with week or month navigation\nimport { useState } from 'react';\n\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  // Determine navigation type based on chart type\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\n\n  // Go to previous week or month\n  const goToPrevious = () => {\n    const newDate = new Date(currentDate);\n    if (navigationType === 'month') {\n      newDate.setMonth(newDate.getMonth() - 1);\n    } else {\n      // Subtract 7 days for week navigation\n      newDate.setDate(newDate.getDate() - 7);\n    }\n    setCurrentDate(newDate);\n  };\n\n  // Go to next week or month\n  const goToNext = () => {\n    const newDate = new Date(currentDate);\n    if (navigationType === 'month') {\n      newDate.setMonth(newDate.getMonth() + 1);\n    } else {\n      // Add 7 days for week navigation\n      newDate.setDate(newDate.getDate() + 7);\n    }\n    setCurrentDate(newDate);\n  };\n\n  // Get month date range (first day to last day of current month)\n  const getMonthDateRange = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const startOfMonth = new Date(year, month, 1);\n    const endOfMonth = new Date(year, month + 1, 0); // Last day of month (day 0 of next month)\n    return { start: startOfMonth, end: endOfMonth };\n  };\n\n  // Get week date range (Sunday to Saturday)\n  const getWeekDateRange = () => {\n    const startOfWeek = new Date(currentDate);\n    const currentDayOfWeek = startOfWeek.getDay(); // 0 = Sunday, 6 = Saturday\n    const daysToSubtract = currentDayOfWeek; // Go back to Sunday\n    \n    startOfWeek.setDate(startOfWeek.getDate() - daysToSubtract);\n    startOfWeek.setHours(0, 0, 0, 0); // Start of day\n    \n    const endOfWeek = new Date(startOfWeek);\n    const daysInWeek = 6; // Sunday to Saturday = 7 days, but we start on Sunday so add 6\n    endOfWeek.setDate(endOfWeek.getDate() + daysInWeek);\n    endOfWeek.setHours(23, 59, 59, 999); // End of day\n    \n    return { start: startOfWeek, end: endOfWeek };\n  };\n\n  // Get date range for current period (week or month)\n  const getDateRange = () => {\n    if (navigationType === 'month') {\n      return getMonthDateRange();\n    } else {\n      return getWeekDateRange();\n    }\n  };\n\n  // Get formatted date range with year (e.g., \"May 1 - 7, 2025\" for weeks or \"May 1 - 31, 2025\" for months)\n  const getFormattedDateRange = () => {\n    const range = getDateRange();\n    const startMonth = range.start.toLocaleDateString('en-US', { month: 'long' });\n    const startDay = range.start.getDate();\n    const endDay = range.end.getDate();\n    const year = range.start.getFullYear();\n    \n    // Check if start and end are in the same month\n    if (range.start.getMonth() === range.end.getMonth()) {\n      return `${startMonth} ${startDay} - ${endDay}, ${year}`;\n    } else {\n      // Different months (edge case for weeks spanning month boundaries)\n      const endMonth = range.end.toLocaleDateString('en-US', { month: 'long' });\n      return `${startMonth} ${startDay} - ${endMonth} ${endDay}, ${year}`;\n    }\n  };\n\n  // Get 3-month date range (3 months before current date)\n  const getThreeMonthRange = () => {\n    const endOfThreeMonths = new Date(currentDate);\n    const startOfThreeMonths = new Date(currentDate);\n    startOfThreeMonths.setMonth(startOfThreeMonths.getMonth() - 3);\n    \n    // Make sure we don't go before the earliest data date\n    const dataStartDate = new Date(2024, 6, 1);\n    if (startOfThreeMonths < dataStartDate) {\n      startOfThreeMonths.setTime(dataStartDate.getTime());\n    }\n    \n    // Make sure we don't go after the latest data date\n    const dataEndDate = new Date(2025, 6, 31);\n    if (endOfThreeMonths > dataEndDate) {\n      endOfThreeMonths.setTime(dataEndDate.getTime());\n    }\n    \n    return { start: startOfThreeMonths, end: endOfThreeMonths };\n  };\n\n  // Get 3-month display string\n  const getThreeMonthDisplay = () => {\n    const range = getThreeMonthRange();\n    const startStr = range.start.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    const endStr = range.end.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    return `${startStr} - ${endStr}`;\n  };\n\n  return {\n    currentDate,\n    navigationType,\n    navigationLabel,\n    goToPrevious,\n    goToNext,\n    getDateRange,\n    getThreeMonthRange,\n    getThreeMonthDisplay,\n    getFormattedDateRange\n  };\n};\n\nexport default useChartNavigation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}