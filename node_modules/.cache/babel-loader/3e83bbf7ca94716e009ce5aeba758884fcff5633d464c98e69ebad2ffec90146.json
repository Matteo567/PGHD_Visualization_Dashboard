{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\PhysicianDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PatientSelector from './PatientSelector';\nimport usePatientData from './hooks/usePatientData';\nimport GlucoseChart from './components/patient_charts/GlucoseChart';\nimport BloodPressureChart from './components/patient_charts/BloodPressureChart';\nimport ExerciseChart from './components/patient_charts/ExerciseChart';\nimport MoodCalendar from './components/patient_charts/MoodCalendar';\nimport PhysicianPainChart from './components/patient_charts/PhysicianPainChart';\nimport MealContentsChart from './components/patient_charts/MealContentsChart';\nimport SleepChart from './components/patient_charts/SleepChart';\nimport './PhysicianDashboard.css';\nimport { PATIENTS, VISUALIZATION_CONFIG } from './constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PhysicianDashboard = ({\n  patientId: initialPatientId\n}) => {\n  _s();\n  var _patientInfo$conditio, _patientInfo$detailed;\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\n  const {\n    data,\n    loading,\n    error\n  } = usePatientData(selectedPatientId);\n\n  // Update selected patient if prop changes\n  React.useEffect(() => {\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\n      setSelectedPatientId(initialPatientId);\n    }\n  }, [initialPatientId, selectedPatientId]);\n  const allVisualizations = {\n    glucose: {\n      ...VISUALIZATION_CONFIG.glucose,\n      component: GlucoseChart\n    },\n    bloodPressure: {\n      ...VISUALIZATION_CONFIG.bloodPressure,\n      component: BloodPressureChart\n    },\n    exercise: {\n      ...VISUALIZATION_CONFIG.exercise,\n      component: ExerciseChart\n    },\n    mood: {\n      ...VISUALIZATION_CONFIG.mood,\n      component: MoodCalendar\n    },\n    pain: {\n      name: 'Pain Report 2',\n      component: PhysicianPainChart,\n      color: VISUALIZATION_CONFIG.pain.color\n    },\n    mealContents: {\n      ...VISUALIZATION_CONFIG.mealContents,\n      component: MealContentsChart\n    },\n    sleep: {\n      ...VISUALIZATION_CONFIG.sleep,\n      component: SleepChart\n    }\n  };\n\n  // Check for available visualizations based on data\n  const availableVisualizations = React.useMemo(() => {\n    if (!data) return {};\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\n      const dataKey = `${key}Data`;\n      // Special case for meal contents\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\n        acc[key] = viz;\n      } else if (data[dataKey] && data[dataKey].length > 0) {\n        acc[key] = viz;\n      }\n      return acc;\n    }, {});\n  }, [data]);\n\n  // Default selections for 6 windows\n  const [selectedVisualizations, setSelectedVisualizations] = useState({\n    window1: 'glucose',\n    window2: 'bloodPressure',\n    window3: 'exercise',\n    window4: 'sleep',\n    window5: 'mood',\n    window6: 'pain'\n  });\n  const [expandedWindow, setExpandedWindow] = useState(null);\n\n  // Update selections when available visualizations change\n  React.useEffect(() => {\n    if (Object.keys(availableVisualizations).length > 0) {\n      const availableKeys = Object.keys(availableVisualizations);\n      const defaultOrder = ['glucose', 'bloodPressure', 'exercise', 'sleep', 'mood', 'pain', 'mealContents'];\n\n      // Filter default order to only include available visualizations\n      const orderedAvailable = defaultOrder.filter(key => availableKeys.includes(key));\n\n      // Fill in any remaining slots with available visualizations not in default order\n      const remaining = availableKeys.filter(key => !orderedAvailable.includes(key));\n      const finalOrder = [...orderedAvailable, ...remaining];\n      setSelectedVisualizations(prev => {\n        const updated = {\n          ...prev\n        };\n        const windowIds = ['window1', 'window2', 'window3', 'window4', 'window5', 'window6'];\n        windowIds.forEach((windowId, index) => {\n          if (finalOrder[index]) {\n            updated[windowId] = finalOrder[index];\n          } else if (!availableKeys.includes(updated[windowId])) {\n            // If current selection is not available, use the first available\n            updated[windowId] = finalOrder[0] || 'glucose';\n          }\n        });\n        return updated;\n      });\n    }\n  }, [availableVisualizations]);\n  const handleVisualizationChange = (windowId, visualizationType) => {\n    setSelectedVisualizations(prev => ({\n      ...prev,\n      [windowId]: visualizationType\n    }));\n  };\n  const handleExpand = windowId => {\n    setExpandedWindow(prev => prev === windowId ? null : windowId);\n  };\n  const renderVisualization = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-placeholder\",\n        children: \"Please select a patient to view data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 14\n      }, this);\n    }\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-placeholder\",\n      children: \"Invalid visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 22\n    }, this);\n    const Component = viz.component;\n    const isExpanded = expandedWindow === windowId;\n    return /*#__PURE__*/_jsxDEV(Component, {\n      patientId: selectedPatientId,\n      isPhysicianView: true,\n      isExpanded: isExpanded,\n      onExpand: () => handleExpand(windowId)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Component for individual visualization windows\n  const VisualizationWindow = ({\n    windowId,\n    className,\n    isExpanded = false\n  }) => {\n    const selectedViz = selectedVisualizations[windowId];\n    const viz = allVisualizations[selectedViz];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `physician-chart-container ${className}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedViz,\n          onChange: e => handleVisualizationChange(windowId, e.target.value),\n          style: {\n            color: (viz === null || viz === void 0 ? void 0 : viz.color) || '#2c3e50'\n          },\n          disabled: Object.keys(availableVisualizations).length === 0,\n          children: Object.entries(availableVisualizations).map(([key, viz]) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            children: viz.name\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleExpand(windowId),\n          className: \"expand-button\",\n          children: expandedWindow === windowId ? 'Collapse' : 'Expand'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization-content\",\n        children: Object.keys(availableVisualizations).length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-placeholder\",\n          children: \"No data available for this patient.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this) : renderVisualization(selectedViz, windowId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  };\n  const patientInfo = data === null || data === void 0 ? void 0 : data.patientInfo;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"physician-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"physician-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Physician Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PatientSelector, {\n        patients: PATIENTS,\n        value: selectedPatientId,\n        onChange: setSelectedPatientId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), selectedPatientId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"patient-info-card-physician\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Patient Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading patient info...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Error loading data.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 23\n        }, this), patientInfo && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Patient #:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 22\n            }, this), \" \", patientInfo.patientNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Age:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 22\n            }, this), \" \", patientInfo.age, \" years\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Gender:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 22\n            }, this), \" \", patientInfo.gender || 'Not specified']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conditions-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Conditions:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"conditions-list\",\n              children: (_patientInfo$conditio = patientInfo.conditions) === null || _patientInfo$conditio === void 0 ? void 0 : _patientInfo$conditio.map((condition, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"condition-item\",\n                children: condition\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"medications-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Medications:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"medications-list\",\n              children: (_patientInfo$detailed = patientInfo.detailedMedications) === null || _patientInfo$detailed === void 0 ? void 0 : _patientInfo$detailed.map((med, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"medication-item\",\n                children: med.name\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), expandedWindow ? /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n        windowId: expandedWindow,\n        className: \"expanded-view\",\n        isExpanded: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"physician-charts-grid\",\n        children: [/*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window1\",\n          className: \"window-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window2\",\n          className: \"window-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window3\",\n          className: \"window-3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window4\",\n          className: \"window-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window5\",\n          className: \"window-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(VisualizationWindow, {\n          windowId: \"window6\",\n          className: \"window-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(PhysicianDashboard, \"reK+HX6Q+96fEibZfVMZ3LxQcno=\", false, function () {\n  return [usePatientData];\n});\n_c = PhysicianDashboard;\nexport default PhysicianDashboard;\nvar _c;\n$RefreshReg$(_c, \"PhysicianDashboard\");","map":{"version":3,"names":["React","useState","PatientSelector","usePatientData","GlucoseChart","BloodPressureChart","ExerciseChart","MoodCalendar","PhysicianPainChart","MealContentsChart","SleepChart","PATIENTS","VISUALIZATION_CONFIG","jsxDEV","_jsxDEV","Fragment","_Fragment","PhysicianDashboard","patientId","initialPatientId","_s","_patientInfo$conditio","_patientInfo$detailed","selectedPatientId","setSelectedPatientId","data","loading","error","useEffect","allVisualizations","glucose","component","bloodPressure","exercise","mood","pain","name","color","mealContents","sleep","availableVisualizations","useMemo","Object","entries","reduce","acc","key","viz","dataKey","length","selectedVisualizations","setSelectedVisualizations","window1","window2","window3","window4","window5","window6","expandedWindow","setExpandedWindow","keys","availableKeys","defaultOrder","orderedAvailable","filter","includes","remaining","finalOrder","prev","updated","windowIds","forEach","windowId","index","handleVisualizationChange","visualizationType","handleExpand","renderVisualization","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Component","isExpanded","isPhysicianView","onExpand","VisualizationWindow","selectedViz","value","onChange","e","target","style","disabled","map","onClick","patientInfo","patients","patientNumber","age","gender","conditions","condition","i","detailedMedications","med","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PhysicianDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PatientSelector from './PatientSelector';\nimport usePatientData from './hooks/usePatientData';\n\nimport GlucoseChart from './components/patient_charts/GlucoseChart';\nimport BloodPressureChart from './components/patient_charts/BloodPressureChart';\nimport ExerciseChart from './components/patient_charts/ExerciseChart';\nimport MoodCalendar from './components/patient_charts/MoodCalendar';\nimport PhysicianPainChart from './components/patient_charts/PhysicianPainChart';\nimport MealContentsChart from './components/patient_charts/MealContentsChart';\nimport SleepChart from './components/patient_charts/SleepChart';\n\nimport './PhysicianDashboard.css';\nimport { PATIENTS, VISUALIZATION_CONFIG } from './constants';\n\nconst PhysicianDashboard = ({ patientId: initialPatientId }) => {\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\n  const { data, loading, error } = usePatientData(selectedPatientId);\n  \n  // Update selected patient if prop changes\n  React.useEffect(() => {\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\n      setSelectedPatientId(initialPatientId);\n    }\n  }, [initialPatientId, selectedPatientId]);\n\n  const allVisualizations = {\n    glucose: { ...VISUALIZATION_CONFIG.glucose, component: GlucoseChart },\n    bloodPressure: { ...VISUALIZATION_CONFIG.bloodPressure, component: BloodPressureChart },\n    exercise: { ...VISUALIZATION_CONFIG.exercise, component: ExerciseChart },\n    mood: { ...VISUALIZATION_CONFIG.mood, component: MoodCalendar },\n    pain: { name: 'Pain Report 2', component: PhysicianPainChart, color: VISUALIZATION_CONFIG.pain.color },\n    mealContents: { ...VISUALIZATION_CONFIG.mealContents, component: MealContentsChart },\n    sleep: { ...VISUALIZATION_CONFIG.sleep, component: SleepChart },\n  };\n\n  // Check for available visualizations based on data\n  const availableVisualizations = React.useMemo(() => {\n    if (!data) return {};\n    return Object.entries(allVisualizations).reduce((acc, [key, viz]) => {\n      const dataKey = `${key}Data`;\n      // Special case for meal contents\n      if (key === 'mealContents' && data['mealData'] && data['mealData'].length > 0) {\n        acc[key] = viz;\n      } else if (data[dataKey] && data[dataKey].length > 0) {\n        acc[key] = viz;\n      }\n      return acc;\n    }, {});\n  }, [data]);\n\n  // Default selections for 6 windows\n  const [selectedVisualizations, setSelectedVisualizations] = useState({\n    window1: 'glucose',\n    window2: 'bloodPressure',\n    window3: 'exercise',\n    window4: 'sleep',\n    window5: 'mood',\n    window6: 'pain'\n  });\n\n  const [expandedWindow, setExpandedWindow] = useState(null);\n\n  // Update selections when available visualizations change\n  React.useEffect(() => {\n    if (Object.keys(availableVisualizations).length > 0) {\n      const availableKeys = Object.keys(availableVisualizations);\n      const defaultOrder = ['glucose', 'bloodPressure', 'exercise', 'sleep', 'mood', 'pain', 'mealContents'];\n      \n      // Filter default order to only include available visualizations\n      const orderedAvailable = defaultOrder.filter(key => availableKeys.includes(key));\n      \n      // Fill in any remaining slots with available visualizations not in default order\n      const remaining = availableKeys.filter(key => !orderedAvailable.includes(key));\n      const finalOrder = [...orderedAvailable, ...remaining];\n      \n      setSelectedVisualizations(prev => {\n        const updated = { ...prev };\n        const windowIds = ['window1', 'window2', 'window3', 'window4', 'window5', 'window6'];\n        \n        windowIds.forEach((windowId, index) => {\n          if (finalOrder[index]) {\n            updated[windowId] = finalOrder[index];\n          } else if (!availableKeys.includes(updated[windowId])) {\n            // If current selection is not available, use the first available\n            updated[windowId] = finalOrder[0] || 'glucose';\n          }\n        });\n        \n        return updated;\n      });\n    }\n  }, [availableVisualizations]);\n\n  const handleVisualizationChange = (windowId, visualizationType) => {\n    setSelectedVisualizations(prev => ({ ...prev, [windowId]: visualizationType }));\n  };\n\n  const handleExpand = (windowId) => {\n    setExpandedWindow(prev => (prev === windowId ? null : windowId));\n  };\n\n  const renderVisualization = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return <div className=\"chart-placeholder\">Please select a patient to view data.</div>;\n    }\n    \n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <div className=\"chart-placeholder\">Invalid visualization</div>;\n\n    const Component = viz.component;\n    const isExpanded = expandedWindow === windowId;\n    return <Component \n      patientId={selectedPatientId} \n      isPhysicianView={true} \n      isExpanded={isExpanded}\n      onExpand={() => handleExpand(windowId)}\n    />;\n  };\n\n  // Component for individual visualization windows\n  const VisualizationWindow = ({ windowId, className, isExpanded = false }) => {\n    const selectedViz = selectedVisualizations[windowId];\n    const viz = allVisualizations[selectedViz];\n    \n    return (\n      <div className={`physician-chart-container ${className}`}>\n        <div className=\"visualization-header\">\n          <select \n            value={selectedViz}\n            onChange={(e) => handleVisualizationChange(windowId, e.target.value)}\n            style={{ color: viz?.color || '#2c3e50' }}\n            disabled={Object.keys(availableVisualizations).length === 0}\n          >\n            {Object.entries(availableVisualizations).map(([key, viz]) => (\n              <option key={key} value={key}>{viz.name}</option>\n            ))}\n          </select>\n          <button onClick={() => handleExpand(windowId)} className=\"expand-button\">\n            {expandedWindow === windowId ? 'Collapse' : 'Expand'}\n          </button>\n        </div>\n        <div className=\"visualization-content\">\n          {Object.keys(availableVisualizations).length === 0 ? (\n            <div className=\"chart-placeholder\">No data available for this patient.</div>\n          ) : (\n            renderVisualization(selectedViz, windowId)\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  return (\n    <div className=\"physician-dashboard\">\n      <div className=\"physician-header\">\n        <h1>Physician Dashboard</h1>\n        <PatientSelector\n          patients={PATIENTS}\n          value={selectedPatientId}\n          onChange={setSelectedPatientId}\n        />\n      </div>\n\n      {selectedPatientId && (\n        <div className=\"dashboard-content\">\n          <div className=\"patient-info-card-physician\">\n            <h3>Patient Information</h3>\n            {loading && <p>Loading patient info...</p>}\n            {error && <p>Error loading data.</p>}\n            {patientInfo && (\n              <>\n                <div><span>Patient #:</span> {patientInfo.patientNumber}</div>\n                <div><span>Age:</span> {patientInfo.age} years</div>\n                <div><span>Gender:</span> {patientInfo.gender || 'Not specified'}</div>\n                <div className=\"conditions-section\">\n                  <span>Conditions:</span>\n                  <div className=\"conditions-list\">\n                    {patientInfo.conditions?.map((condition, i) => (\n                      <div key={i} className=\"condition-item\">{condition}</div>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"medications-section\">\n                  <span>Medications:</span>\n                  <div className=\"medications-list\">\n                    {patientInfo.detailedMedications?.map((med, i) => (\n                      <div key={i} className=\"medication-item\">{med.name}</div>\n                    ))}\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n\n          {expandedWindow ? (\n            <VisualizationWindow \n              windowId={expandedWindow}\n              className=\"expanded-view\"\n              isExpanded={true}\n            />\n          ) : (\n            <div className=\"physician-charts-grid\">\n              <VisualizationWindow windowId=\"window1\" className=\"window-1\" />\n              <VisualizationWindow windowId=\"window2\" className=\"window-2\" />\n              <VisualizationWindow windowId=\"window3\" className=\"window-3\" />\n              <VisualizationWindow windowId=\"window4\" className=\"window-4\" />\n              <VisualizationWindow windowId=\"window5\" className=\"window-5\" />\n              <VisualizationWindow windowId=\"window6\" className=\"window-6\" />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PhysicianDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}