{"ast":null,"code":"/**\n PainChart.js - Pain Assessment and Visualization Component\n \n This component provides comprehensive pain monitoring:\n - Anatomical body mapping for pain location\n - Pain intensity scale (0-10) with color coding\n - Daily pain tracking and trend analysis\n - Interactive body diagram for pain location selection\n - Pain level input and editing capabilities\n - Navigation controls for time periods\n \n Critical for pain management and treatment monitoring.\n */import React,{useState,useRef}from'react';import usePatientData from'../../hooks/usePatientData';import useChartNavigation from'../../hooks/useChartNavigation';import Legend from'../Legend';import'./PainChart.css';import BodySVG from'./BodySvg';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const PainChart=_ref=>{let{patientId,isExpanded=false,onExpand,viewMode='patient',navigation,screenshotMode=false,showThreeMonthSummaries=false}=_ref;const{painData,isLoading:loading,error}=usePatientData(patientId,'pain');const[useLineChart,setUseLineChart]=useState(false);// Toggle state for chart view\n// Use navigation from parent or fallback to internal navigation\nconst useInternalNavigation=!navigation;const internalNavigation=useChartNavigation('pain');const nav=navigation||internalNavigation;const getPainColor=level=>{// 11-class color scheme from light to dark\nconst painColors=['#ffffe5',// 0 - No pain (lightest cream)\n'#fff7bc',// 1 - Very mild pain\n'#f7f7b3',// 2 - Mild pain\n'#fee391',// 3 - Mild-moderate pain\n'#fec44f',// 4 - Moderate pain\n'#fe9929',// 5 - Moderate-severe pain\n'#ec7014',// 6 - Severe pain\n'#cc4c02',// 7 - Very severe pain\n'#b34703',// 8 - Extremely severe pain\n'#993404',// 9 - Most severe pain\n'#662506'// 10 - Maximum pain (darkest brown)\n];return painColors[Math.min(level,10)];};const painLegendItems=Array.from({length:11},(_,i)=>i).map(level=>({color:getPainColor(level),label:\"\".concat(level)}));const{start:startOfWeek,end:endOfWeek}=nav.getDateRange();// Calculate previous and next week ranges\nconst prevWeekStart=new Date(startOfWeek);prevWeekStart.setDate(prevWeekStart.getDate()-7);const prevWeekEnd=new Date(prevWeekStart);prevWeekEnd.setDate(prevWeekEnd.getDate()+6);prevWeekEnd.setHours(23,59,59,999);const nextWeekStart=new Date(endOfWeek);nextWeekStart.setDate(nextWeekStart.getDate()+1);nextWeekStart.setHours(0,0,0,0);const nextWeekEnd=new Date(nextWeekStart);nextWeekEnd.setDate(nextWeekEnd.getDate()+6);nextWeekEnd.setHours(23,59,59,999);const weekPainData=painData.filter(d=>d.date>=startOfWeek&&d.date<=endOfWeek);const prevWeekPainData=painData.filter(d=>d.date>=prevWeekStart&&d.date<=prevWeekEnd);const nextWeekPainData=painData.filter(d=>d.date>=nextWeekStart&&d.date<=nextWeekEnd);// Get 3-month data\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const threeMonthPainData=painData.filter(d=>d.date>=startOfThreeMonths&&d.date<=endOfThreeMonths);// Helper functions for data processing\nconst processPainData=painData=>{const dateMap={};const locationCounts={};painData.forEach(item=>{const dateKey=item.date.toDateString();dateMap[dateKey]=item.level;const location=item.location.toLowerCase();locationCounts[location]=(locationCounts[location]||0)+1;});return{dateMap,locationCounts};};const findMostCommonLocation=locationCounts=>{let mostCommon=null;let maxCount=0;Object.entries(locationCounts).forEach(_ref2=>{let[location,count]=_ref2;if(count>maxCount){maxCount=count;mostCommon=location;}});return mostCommon;};const createWeekChartData=(dateMap,startOfWeek)=>{const data=[];const dayNames=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];for(let i=0;i<7;i++){const date=new Date(startOfWeek);date.setDate(date.getDate()+i);const dateKey=date.toDateString();const painLevel=dateMap[dateKey]||0;data.push({date,day:dayNames[date.getDay()],level:painLevel,color:getPainColor(painLevel)});}return data;};const calculateAveragePain=painData=>{if(painData.length===0)return 0;const totalPain=painData.reduce((sum,item)=>sum+item.level,0);return totalPain/painData.length;};// Process data for chart\nlet chartData=[];let mostCommonLocation=null;let averagePainLevel=0;if(weekPainData.length>0){const{dateMap,locationCounts}=processPainData(weekPainData);mostCommonLocation=findMostCommonLocation(locationCounts);chartData=createWeekChartData(dateMap,startOfWeek);averagePainLevel=calculateAveragePain(weekPainData);}const createExtendedChartData=()=>{const allWeeksData=[...prevWeekPainData,...weekPainData,...nextWeekPainData];const dateMap={};allWeeksData.forEach(item=>{const dateKey=item.date.toDateString();dateMap[dateKey]=item.level;});const data=[];const weekLabels=['Prev Week','Current Week','Next Week'];const weekStarts=[prevWeekStart,startOfWeek,nextWeekStart];const dayNames=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];for(let week=0;week<3;week++){const weekStart=weekStarts[week];for(let day=0;day<7;day++){const date=new Date(weekStart);date.setDate(date.getDate()+day);const dateKey=date.toDateString();const painLevel=dateMap[dateKey]||0;data.push({date,day:dayNames[date.getDay()],level:painLevel,color:getPainColor(painLevel),week:week,weekLabel:weekLabels[week]});}}return data;};// Process data for extended chart (3 weeks)\nconst extendedChartData=isExpanded?createExtendedChartData():[];// Calculate 3-month summary statistics for physician view\nlet threeMonthSummary=null;if(threeMonthPainData.length>0){// Create a map of dates to pain levels for 3-month period\nconst dateMap=new Map();const locationCounts=new Map();threeMonthPainData.forEach(item=>{const dateKey=item.date.toDateString();dateMap.set(dateKey,item.level);// Count locations\nconst location=item.location.toLowerCase();locationCounts.set(location,(locationCounts.get(location)||0)+1);});// Find most common location\nlet mostCommon=null;let maxCount=0;for(const[location,count]of locationCounts){if(count>maxCount){maxCount=count;mostCommon=location;}}const totalPain=threeMonthPainData.reduce((sum,item)=>sum+item.level,0);const avgPain=threeMonthPainData.length>0?totalPain/threeMonthPainData.length:0;// Calculate actual days in the 3-month period\nconst{start:startOfThreeMonths,end:endOfThreeMonths}=nav.getThreeMonthRange();const daysInThreeMonths=Math.ceil((endOfThreeMonths-startOfThreeMonths)/(1000*60*60*24))+1;const daysWithPain=new Set(threeMonthPainData.map(d=>d.date.toDateString())).size;// Calculate pain severity distribution\nconst painLevelCounts={};for(let i=0;i<=10;i++){painLevelCounts[i]=0;}threeMonthPainData.forEach(item=>{painLevelCounts[item.level]++;});// Find most common pain level\nconst mostCommonPainLevel=Object.entries(painLevelCounts).sort((_ref3,_ref4)=>{let[,a]=_ref3;let[,b]=_ref4;return b-a;})[0];threeMonthSummary={totalEntries:threeMonthPainData.length,daysWithPain,daysInThreeMonths,mostCommonLocation:mostCommon,mostCommonLocationCount:maxCount,averagePainLevel:avgPain,mostCommonPainLevel:parseInt(mostCommonPainLevel[0]),mostCommonPainLevelCount:mostCommonPainLevel[1]};}const formatDateRange=(start,end)=>{const startStr=start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" to \").concat(endStr);};// Line Chart Component for Pain Ratings\nconst PainLineChart=_ref5=>{let{data,isExpanded,extendedData}=_ref5;const isExtendedView=isExpanded&&extendedData&&extendedData.length>0;const chartData=isExtendedView?extendedData:data;const config={width:isExtendedView?900:isExpanded?600:400,// Wider for 3-week view\nheight:isExpanded?220:150,// Reduced height since we removed week labels\npadding:{top:20,right:30,bottom:50,left:50},// Reduced bottom padding\nyAxisRange:10,fontSize:{yAxis:isExpanded?10:8,xAxis:isExpanded?10:8}};const chartWidth=config.width-config.padding.left-config.padding.right;const chartHeight=config.height-config.padding.top-config.padding.bottom;const dayWidth=chartWidth/(chartData.length-1);// Dynamic based on data length\n// Create line path\nconst linePath=chartData.map((point,index)=>{const x=config.padding.left+index*dayWidth;const y=config.padding.top+chartHeight-point.level/config.yAxisRange*chartHeight;return\"\".concat(index===0?'M':'L',\" \").concat(x,\" \").concat(y);}).join(' ');return/*#__PURE__*/_jsx(\"div\",{className:\"pain-line-chart\",children:/*#__PURE__*/_jsxs(\"svg\",{width:\"100%\",height:\"100%\",viewBox:\"0 0 \".concat(config.width,\" \").concat(config.height),children:[[0,2,4,6,8,10].map(level=>{const y=config.padding.top+chartHeight-level/config.yAxisRange*chartHeight;return/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"line\",{x1:config.padding.left,y1:y,x2:config.width-config.padding.right,y2:y,stroke:\"#e0e0e0\",strokeWidth:\"1\",strokeDasharray:\"2,2\"}),/*#__PURE__*/_jsx(\"text\",{x:config.padding.left-10,y:y+3,fontSize:config.fontSize.yAxis,textAnchor:\"end\",fill:\"var(--chart-color-text-secondary)\",children:level})]},level);}),isExtendedView&&[7,14].map(weekIndex=>{const x=config.padding.left+weekIndex*dayWidth;return/*#__PURE__*/_jsx(\"line\",{x1:x,y1:config.padding.top,x2:x,y2:config.height-config.padding.bottom,stroke:\"#ccc\",strokeWidth:\"2\",strokeDasharray:\"5,5\"},weekIndex);}),chartData.map((point,index)=>{const x=config.padding.left+index*dayWidth;const showLabel=isExtendedView?index%7===0:true;// Show every 7th day for extended view\nconst dateStr=point.date.toLocaleDateString('en-US',{month:'short',day:'numeric'});return/*#__PURE__*/_jsx(\"g\",{children:showLabel&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+15,fontSize:config.fontSize.xAxis,textAnchor:\"middle\",className:\"x-axis-day-label\",children:point.day}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+30,fontSize:config.fontSize.xAxis-1,textAnchor:\"middle\",className:\"x-axis-date-label\",fill:\"var(--chart-color-text-secondary)\",children:dateStr})]})},index);}),/*#__PURE__*/_jsx(\"path\",{d:linePath,stroke:\"var(--chart-color-primary)\",strokeWidth:\"3\",fill:\"none\"}),chartData.map((point,index)=>{const x=config.padding.left+index*dayWidth;const y=config.padding.top+chartHeight-point.level/config.yAxisRange*chartHeight;return/*#__PURE__*/_jsx(\"circle\",{cx:x,cy:y,r:\"4\",fill:point.color,stroke:\"var(--chart-color-primary)\",strokeWidth:\"2\"},index);})]})});};const Body=_ref6=>{let{location,level}=_ref6;const color=getPainColor(level);const locationLower=location.toLowerCase();return/*#__PURE__*/_jsx(\"div\",{className:\"body-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"body-views\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"body-view\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"body-view-label\",children:\"Front\"}),/*#__PURE__*/_jsx(BodySVG,{className:\"body-svg\",painLocation:locationLower,painColor:color,view:\"front\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"body-view\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"body-view-label\",children:\"Back\"}),/*#__PURE__*/_jsx(BodySVG,{className:\"body-svg\",painLocation:locationLower,painColor:color,view:\"back\"})]})]})});};if(viewMode==='patient'){return/*#__PURE__*/_jsxs(\"div\",{className:\"pain-chart-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-chart-header\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Pain\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getFormattedDateRange()}),/*#__PURE__*/_jsxs(\"div\",{className:\"view-toggle\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(!useLineChart?'active':''),onClick:()=>setUseLineChart(false),children:\"List View\"}),/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(useLineChart?'active':''),onClick:()=>setUseLineChart(true),children:\"Line Chart\"})]})]}),useLineChart?/*#__PURE__*/_jsxs(\"div\",{className:\"pain-line-chart-container\",children:[/*#__PURE__*/_jsx(PainLineChart,{data:chartData,isExpanded:isExpanded,extendedData:extendedChartData}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Pain Intensity Scale (0-10)\",items:painLegendItems,hide:screenshotMode})})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"pain-content-wrapper\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pain-list\",children:weekPainData.length>0?weekPainData.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"pain-list-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-item-info\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pain-item-date\",children:new Date(item.date).toLocaleDateString('en-US',{weekday:'short',month:'short',day:'numeric'})}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-item-details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-level\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Pain Level:\"}),\" \",item.level,\"/10\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-location\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Location:\"}),\" \",item.location]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-item-body\",children:/*#__PURE__*/_jsx(Body,{location:item.location,level:item.level})})]},index)):/*#__PURE__*/_jsx(\"div\",{className:\"no-pain-data\",children:\"No pain data available for this week\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Pain Intensity Scale (0-10)\",items:painLegendItems,hide:screenshotMode})})]})]});}// Physician/Unified view\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"physician-pain-chart-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-chart-header\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Pain\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getFormattedDateRange()}),/*#__PURE__*/_jsxs(\"div\",{className:\"view-toggle\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(!useLineChart?'active':''),onClick:()=>setUseLineChart(false),children:\"List View\"}),/*#__PURE__*/_jsx(\"button\",{className:\"toggle-btn \".concat(useLineChart?'active':''),onClick:()=>setUseLineChart(true),children:\"Line Chart\"})]})]}),useLineChart?/*#__PURE__*/_jsxs(\"div\",{className:\"pain-line-chart-container\",children:[/*#__PURE__*/_jsx(PainLineChart,{data:chartData,isExpanded:isExpanded,extendedData:extendedChartData}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-location-info\",children:/*#__PURE__*/_jsxs(\"h4\",{children:[\"Pain Location: \",mostCommonLocation||'N/A']})}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Pain Intensity Scale (0-10)\",items:painLegendItems})})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"pain-content-wrapper\",children:[mostCommonLocation&&/*#__PURE__*/_jsxs(\"div\",{className:\"main-pain-visualization\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\"Most Common Pain Location: \",mostCommonLocation]}),/*#__PURE__*/_jsx(Body,{location:mostCommonLocation,level:Math.round(averagePainLevel)})]}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-list\",children:weekPainData.length>0?weekPainData.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"pain-list-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-item-info\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pain-item-date\",children:new Date(item.date).toLocaleDateString('en-US',{weekday:'short',month:'short',day:'numeric'})}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-item-details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pain-level\",children:[\"Pain Level: \",/*#__PURE__*/_jsxs(\"span\",{style:{color:getPainColor(item.level)},children:[item.level,\"/10\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pain-location\",children:[\"Location: \",item.location||'Not specified']})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-item-body\",children:/*#__PURE__*/_jsx(Body,{location:item.location,level:item.level})})]},index)):/*#__PURE__*/_jsx(\"div\",{className:\"no-pain-data\",children:\"No pain data available for this week\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"pain-legend-wrapper\",children:/*#__PURE__*/_jsx(Legend,{title:\"Pain Intensity Scale (0-10)\",items:painLegendItems,hide:screenshotMode})})]}),(viewMode==='physician'||viewMode==='unified')&&/*#__PURE__*/_jsxs(\"div\",{className:\"summary-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Week Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Average Pain Intensity:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[averagePainLevel.toFixed(1),\"/10\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common Location:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:mostCommonLocation||'N/A'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Days with Pain:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekPainData.length,\"/7\"]})]})]})]}),showThreeMonthSummaries&&threeMonthSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"3-Month Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Average Pain Intensity:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.averagePainLevel.toFixed(1),\"/10\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common Location:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.mostCommonLocation||'N/A',\" (\",threeMonthSummary.mostCommonLocationCount,\"x)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Days with Pain:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[threeMonthSummary.daysWithPain,\"/\",threeMonthSummary.daysInThreeMonths]})]})]})]})]})]});};export default PainChart;","map":{"version":3,"names":["React","useState","useRef","usePatientData","useChartNavigation","Legend","BodySVG","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PainChart","_ref","patientId","isExpanded","onExpand","viewMode","navigation","screenshotMode","showThreeMonthSummaries","painData","isLoading","loading","error","useLineChart","setUseLineChart","useInternalNavigation","internalNavigation","nav","getPainColor","level","painColors","Math","min","painLegendItems","Array","from","length","_","i","map","color","label","concat","start","startOfWeek","end","endOfWeek","getDateRange","prevWeekStart","Date","setDate","getDate","prevWeekEnd","setHours","nextWeekStart","nextWeekEnd","weekPainData","filter","d","date","prevWeekPainData","nextWeekPainData","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthPainData","processPainData","dateMap","locationCounts","forEach","item","dateKey","toDateString","location","toLowerCase","findMostCommonLocation","mostCommon","maxCount","Object","entries","_ref2","count","createWeekChartData","data","dayNames","painLevel","push","day","getDay","calculateAveragePain","totalPain","reduce","sum","chartData","mostCommonLocation","averagePainLevel","createExtendedChartData","allWeeksData","weekLabels","weekStarts","week","weekStart","weekLabel","extendedChartData","threeMonthSummary","Map","set","get","avgPain","daysInThreeMonths","ceil","daysWithPain","Set","size","painLevelCounts","mostCommonPainLevel","sort","_ref3","_ref4","a","b","totalEntries","mostCommonLocationCount","parseInt","mostCommonPainLevelCount","formatDateRange","startStr","toLocaleDateString","month","endStr","PainLineChart","_ref5","extendedData","isExtendedView","config","width","height","padding","top","right","bottom","left","yAxisRange","fontSize","yAxis","xAxis","chartWidth","chartHeight","dayWidth","linePath","point","index","x","y","join","className","children","viewBox","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","textAnchor","fill","weekIndex","showLabel","dateStr","cx","cy","r","Body","_ref6","locationLower","painLocation","painColor","view","getFormattedDateRange","onClick","title","items","hide","weekday","round","style","toFixed"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/components/patient_charts/PainChart.js"],"sourcesContent":["/**\n PainChart.js - Pain Assessment and Visualization Component\n \n This component provides comprehensive pain monitoring:\n - Anatomical body mapping for pain location\n - Pain intensity scale (0-10) with color coding\n - Daily pain tracking and trend analysis\n - Interactive body diagram for pain location selection\n - Pain level input and editing capabilities\n - Navigation controls for time periods\n \n Critical for pain management and treatment monitoring.\n */\n\nimport React, { useState, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\n\nimport Legend from '../Legend';\nimport './PainChart.css';\n\nimport BodySVG from './BodySvg';\n\nconst PainChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation, screenshotMode = false, showThreeMonthSummaries = false }) => {\n  const { painData, isLoading: loading, error } = usePatientData(patientId, 'pain');\n  const [useLineChart, setUseLineChart] = useState(false); // Toggle state for chart view\n  \n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('pain');\n  const nav = navigation || internalNavigation;\n\n  const getPainColor = (level) => {\n    // 11-class color scheme from light to dark\n    const painColors = [\n      '#ffffe5', // 0 - No pain (lightest cream)\n      '#fff7bc', // 1 - Very mild pain\n      '#f7f7b3', // 2 - Mild pain\n      '#fee391', // 3 - Mild-moderate pain\n      '#fec44f', // 4 - Moderate pain\n      '#fe9929', // 5 - Moderate-severe pain\n      '#ec7014', // 6 - Severe pain\n      '#cc4c02', // 7 - Very severe pain\n      '#b34703', // 8 - Extremely severe pain\n      '#993404', // 9 - Most severe pain\n      '#662506'  // 10 - Maximum pain (darkest brown)\n    ];\n    \n    return painColors[Math.min(level, 10)];\n  };\n\n  const painLegendItems = Array.from({ length: 11 }, (_, i) => i).map(level => ({\n    color: getPainColor(level),\n    label: `${level}`,\n  }));\n\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\n\n  // Calculate previous and next week ranges\n  const prevWeekStart = new Date(startOfWeek);\n  prevWeekStart.setDate(prevWeekStart.getDate() - 7);\n  const prevWeekEnd = new Date(prevWeekStart);\n  prevWeekEnd.setDate(prevWeekEnd.getDate() + 6);\n  prevWeekEnd.setHours(23, 59, 59, 999);\n\n  const nextWeekStart = new Date(endOfWeek);\n  nextWeekStart.setDate(nextWeekStart.getDate() + 1);\n  nextWeekStart.setHours(0, 0, 0, 0);\n  const nextWeekEnd = new Date(nextWeekStart);\n  nextWeekEnd.setDate(nextWeekEnd.getDate() + 6);\n  nextWeekEnd.setHours(23, 59, 59, 999);\n\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\n  const prevWeekPainData = painData.filter(d => d.date >= prevWeekStart && d.date <= prevWeekEnd);\n  const nextWeekPainData = painData.filter(d => d.date >= nextWeekStart && d.date <= nextWeekEnd);\n\n  // Get 3-month data\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n  const threeMonthPainData = painData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\n\n  // Helper functions for data processing\n  const processPainData = (painData) => {\n    const dateMap = {};\n    const locationCounts = {};\n\n    painData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap[dateKey] = item.level;\n      \n      const location = item.location.toLowerCase();\n      locationCounts[location] = (locationCounts[location] || 0) + 1;\n    });\n\n    return { dateMap, locationCounts };\n  };\n\n  const findMostCommonLocation = (locationCounts) => {\n    let mostCommon = null;\n    let maxCount = 0;\n    \n    Object.entries(locationCounts).forEach(([location, count]) => {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommon = location;\n      }\n    });\n    \n    return mostCommon;\n  };\n\n  const createWeekChartData = (dateMap, startOfWeek) => {\n    const data = [];\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    \n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(date.getDate() + i);\n      const dateKey = date.toDateString();\n      const painLevel = dateMap[dateKey] || 0;\n      \n      data.push({\n        date,\n        day: dayNames[date.getDay()],\n        level: painLevel,\n        color: getPainColor(painLevel)\n      });\n    }\n    \n    return data;\n  };\n\n  const calculateAveragePain = (painData) => {\n    if (painData.length === 0) return 0;\n    const totalPain = painData.reduce((sum, item) => sum + item.level, 0);\n    return totalPain / painData.length;\n  };\n\n  // Process data for chart\n  let chartData = [];\n  let mostCommonLocation = null;\n  let averagePainLevel = 0;\n  \n  if (weekPainData.length > 0) {\n    const { dateMap, locationCounts } = processPainData(weekPainData);\n    mostCommonLocation = findMostCommonLocation(locationCounts);\n    chartData = createWeekChartData(dateMap, startOfWeek);\n    averagePainLevel = calculateAveragePain(weekPainData);\n  }\n\n  const createExtendedChartData = () => {\n    const allWeeksData = [...prevWeekPainData, ...weekPainData, ...nextWeekPainData];\n    const dateMap = {};\n    \n    allWeeksData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap[dateKey] = item.level;\n    });\n\n    const data = [];\n    const weekLabels = ['Prev Week', 'Current Week', 'Next Week'];\n    const weekStarts = [prevWeekStart, startOfWeek, nextWeekStart];\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    \n    for (let week = 0; week < 3; week++) {\n      const weekStart = weekStarts[week];\n      \n      for (let day = 0; day < 7; day++) {\n        const date = new Date(weekStart);\n        date.setDate(date.getDate() + day);\n        const dateKey = date.toDateString();\n        const painLevel = dateMap[dateKey] || 0;\n        \n        data.push({\n          date,\n          day: dayNames[date.getDay()],\n          level: painLevel,\n          color: getPainColor(painLevel),\n          week: week,\n          weekLabel: weekLabels[week]\n        });\n      }\n    }\n\n    return data;\n  };\n\n  // Process data for extended chart (3 weeks)\n  const extendedChartData = isExpanded ? createExtendedChartData() : [];\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthPainData.length > 0) {\n\n    // Create a map of dates to pain levels for 3-month period\n    const dateMap = new Map();\n    const locationCounts = new Map();\n\n    threeMonthPainData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap.set(dateKey, item.level);\n      \n      // Count locations\n      const location = item.location.toLowerCase();\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\n    });\n\n    // Find most common location\n    let mostCommon = null;\n    let maxCount = 0;\n    for (const [location, count] of locationCounts) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommon = location;\n      }\n    }\n\n    const totalPain = threeMonthPainData.reduce((sum, item) => sum + item.level, 0);\n    const avgPain = threeMonthPainData.length > 0 ? (totalPain / threeMonthPainData.length) : 0;\n\n    // Calculate actual days in the 3-month period\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const daysWithPain = new Set(threeMonthPainData.map(d => d.date.toDateString())).size;\n\n    // Calculate pain severity distribution\n    const painLevelCounts = {};\n    for (let i = 0; i <= 10; i++) {\n      painLevelCounts[i] = 0;\n    }\n    threeMonthPainData.forEach(item => {\n      painLevelCounts[item.level]++;\n    });\n\n    // Find most common pain level\n    const mostCommonPainLevel = Object.entries(painLevelCounts)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    threeMonthSummary = {\n      totalEntries: threeMonthPainData.length,\n      daysWithPain,\n      daysInThreeMonths,\n      mostCommonLocation: mostCommon,\n      mostCommonLocationCount: maxCount,\n      averagePainLevel: avgPain,\n      mostCommonPainLevel: parseInt(mostCommonPainLevel[0]),\n      mostCommonPainLevelCount: mostCommonPainLevel[1]\n    };\n  }\n\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${startStr} to ${endStr}`;\n  };\n\n  // Line Chart Component for Pain Ratings\n  const PainLineChart = ({ data, isExpanded, extendedData }) => {\n    const isExtendedView = isExpanded && extendedData && extendedData.length > 0;\n    const chartData = isExtendedView ? extendedData : data;\n    \n    const config = {\n      width: isExtendedView ? 900 : (isExpanded ? 600 : 400), // Wider for 3-week view\n      height: isExpanded ? 220 : 150, // Reduced height since we removed week labels\n      padding: { top: 20, right: 30, bottom: 50, left: 50 }, // Reduced bottom padding\n      yAxisRange: 10,\n      fontSize: {\n        yAxis: isExpanded ? 10 : 8,\n        xAxis: isExpanded ? 10 : 8,\n      }\n    };\n\n    const chartWidth = config.width - config.padding.left - config.padding.right;\n    const chartHeight = config.height - config.padding.top - config.padding.bottom;\n    const dayWidth = chartWidth / (chartData.length - 1); // Dynamic based on data length\n\n    // Create line path\n    const linePath = chartData.map((point, index) => {\n      const x = config.padding.left + (index * dayWidth);\n      const y = config.padding.top + chartHeight - (point.level / config.yAxisRange) * chartHeight;\n      return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n    }).join(' ');\n\n    return (\n      <div className=\"pain-line-chart\">\n        <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${config.width} ${config.height}`}>\n          {/* Grid lines */}\n          {[0, 2, 4, 6, 8, 10].map(level => {\n            const y = config.padding.top + chartHeight - (level / config.yAxisRange) * chartHeight;\n            return (\n              <g key={level}>\n                <line \n                  x1={config.padding.left} \n                  y1={y} \n                  x2={config.width - config.padding.right} \n                  y2={y} \n                  stroke=\"#e0e0e0\" \n                  strokeWidth=\"1\" \n                  strokeDasharray=\"2,2\"\n                />\n                <text \n                  x={config.padding.left - 10} \n                  y={y + 3} \n                  fontSize={config.fontSize.yAxis} \n                  textAnchor=\"end\" \n                  fill=\"var(--chart-color-text-secondary)\"\n                >\n                  {level}\n                </text>\n              </g>\n            );\n          })}\n\n          {/* Week separators for extended view */}\n          {isExtendedView && [7, 14].map(weekIndex => {\n            const x = config.padding.left + (weekIndex * dayWidth);\n            return (\n              <line \n                key={weekIndex}\n                x1={x} \n                y1={config.padding.top} \n                x2={x} \n                y2={config.height - config.padding.bottom} \n                stroke=\"#ccc\" \n                strokeWidth=\"2\" \n                strokeDasharray=\"5,5\"\n              />\n            );\n          })}\n\n          {/* X-axis labels */}\n          {chartData.map((point, index) => {\n            const x = config.padding.left + (index * dayWidth);\n            const showLabel = isExtendedView ? index % 7 === 0 : true; // Show every 7th day for extended view\n            const dateStr = point.date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n            \n            return (\n              <g key={index}>\n                {showLabel && (\n                  <>\n                    <text \n                      x={x} \n                      y={config.height - config.padding.bottom + 15} \n                      fontSize={config.fontSize.xAxis} \n                      textAnchor=\"middle\" \n                      className=\"x-axis-day-label\"\n                    >\n                      {point.day}\n                    </text>\n                    <text \n                      x={x} \n                      y={config.height - config.padding.bottom + 30} \n                      fontSize={config.fontSize.xAxis - 1} \n                      textAnchor=\"middle\" \n                      className=\"x-axis-date-label\"\n                      fill=\"var(--chart-color-text-secondary)\"\n                    >\n                      {dateStr}\n                    </text>\n                  </>\n                )}\n              </g>\n            );\n          })}\n\n          {/* Line */}\n          <path \n            d={linePath} \n            stroke=\"var(--chart-color-primary)\" \n            strokeWidth=\"3\" \n            fill=\"none\"\n          />\n\n          {/* Data points */}\n          {chartData.map((point, index) => {\n            const x = config.padding.left + (index * dayWidth);\n            const y = config.padding.top + chartHeight - (point.level / config.yAxisRange) * chartHeight;\n            return (\n              <circle \n                key={index}\n                cx={x} \n                cy={y} \n                r=\"4\" \n                fill={point.color} \n                stroke=\"var(--chart-color-primary)\" \n                strokeWidth=\"2\"\n              />\n            );\n          })}\n        </svg>\n      </div>\n    );\n  };\n\n  const Body = ({ location, level }) => {\n    const color = getPainColor(level);\n    const locationLower = location.toLowerCase();\n\n    return (\n      <div className=\"body-container\">\n        <div className=\"body-views\">\n          <div className=\"body-view\">\n            <div className=\"body-view-label\">Front</div>\n            <BodySVG \n              className=\"body-svg\" \n              painLocation={locationLower} \n              painColor={color} \n              view=\"front\" \n            />\n          </div>\n          <div className=\"body-view\">\n            <div className=\"body-view-label\">Back</div>\n            <BodySVG \n              className=\"body-svg\" \n              painLocation={locationLower} \n              painColor={color} \n              view=\"back\" \n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  if (viewMode === 'patient') {\n    return (\n      <div className=\"pain-chart-container\">\n        <div className=\"pain-chart-header\">\n          <h3 className=\"chart-title\">Pain</h3>\n          <h4 className=\"chart-subtitle\">{nav.getFormattedDateRange()}</h4>\n          \n          {/* View Toggle */}\n          <div className=\"view-toggle\">\n            <button \n              className={`toggle-btn ${!useLineChart ? 'active' : ''}`}\n              onClick={() => setUseLineChart(false)}\n            >\n              List View\n            </button>\n            <button \n              className={`toggle-btn ${useLineChart ? 'active' : ''}`}\n              onClick={() => setUseLineChart(true)}\n            >\n              Line Chart\n            </button>\n          </div>\n        </div>\n        \n        {/* Conditional Chart Rendering */}\n        {useLineChart ? (\n          <div className=\"pain-line-chart-container\">\n            <PainLineChart \n              data={chartData} \n              isExpanded={isExpanded} \n              extendedData={extendedChartData}\n            />\n            <div className=\"pain-legend-wrapper\">\n              <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} hide={screenshotMode} />\n            </div>\n          </div>\n        ) : (\n          <div className=\"pain-content-wrapper\">\n            <div className=\"pain-list\">\n              {weekPainData.length > 0 ? (\n                weekPainData.map((item, index) => (\n                  <div key={index} className=\"pain-list-item\">\n                    <div className=\"pain-item-info\">\n                      <div className=\"pain-item-date\">\n                        {new Date(item.date).toLocaleDateString('en-US', { \n                          weekday: 'short', \n                          month: 'short', \n                          day: 'numeric' \n                        })}\n                      </div>\n                      <div className=\"pain-item-details\">\n                        <div className=\"pain-level\">\n                          <strong>Pain Level:</strong> {item.level}/10\n                        </div>\n                        <div className=\"pain-location\">\n                          <strong>Location:</strong> {item.location}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"pain-item-body\">\n                      <Body location={item.location} level={item.level} />\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"no-pain-data\">No pain data available for this week</div>\n              )}\n            </div>\n            \n            <div className=\"pain-legend-wrapper\">\n              <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} hide={screenshotMode} />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // Physician/Unified view\n  return (\n      <div className=\"physician-pain-chart-container\">\n        <div className=\"pain-chart-header\">\n          <h3 className=\"chart-title\">Pain</h3>\n          <h4 className=\"chart-subtitle\">{nav.getFormattedDateRange()}</h4>\n          \n          {/* View Toggle */}\n          <div className=\"view-toggle\">\n            <button \n              className={`toggle-btn ${!useLineChart ? 'active' : ''}`}\n              onClick={() => setUseLineChart(false)}\n            >\n              List View\n            </button>\n            <button \n              className={`toggle-btn ${useLineChart ? 'active' : ''}`}\n              onClick={() => setUseLineChart(true)}\n            >\n              Line Chart\n            </button>\n          </div>\n        </div>\n        \n        {/* Conditional Chart Rendering */}\n        {useLineChart ? (\n          <div className=\"pain-line-chart-container\">\n            <PainLineChart \n              data={chartData} \n              isExpanded={isExpanded} \n              extendedData={extendedChartData}\n            />\n            <div className=\"pain-location-info\">\n              <h4>Pain Location: {mostCommonLocation || 'N/A'}</h4>\n            </div>\n            <div className=\"pain-legend-wrapper\">\n              <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\n            </div>\n          </div>\n        ) : (\n          <div className=\"pain-content-wrapper\">\n            {/* Main Body SVG showing most common pain location and average level */}\n            {mostCommonLocation && (\n              <div className=\"main-pain-visualization\">\n                <h4>Most Common Pain Location: {mostCommonLocation}</h4>\n                <Body \n                  location={mostCommonLocation} \n                  level={Math.round(averagePainLevel)} \n                />\n              </div>\n            )}\n            <div className=\"pain-list\">\n              {weekPainData.length > 0 ? (\n                weekPainData.map((item, index) => (\n                  <div key={index} className=\"pain-list-item\">\n                    <div className=\"pain-item-info\">\n                      <div className=\"pain-item-date\">\n                        {new Date(item.date).toLocaleDateString('en-US', { \n                          weekday: 'short', \n                          month: 'short', \n                          day: 'numeric' \n                        })}\n                      </div>\n                      <div className=\"pain-item-details\">\n                        <div className=\"pain-level\">\n                          Pain Level: <span style={{ color: getPainColor(item.level) }}>\n                            {item.level}/10\n                          </span>\n                        </div>\n                        <div className=\"pain-location\">\n                          Location: {item.location || 'Not specified'}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"pain-item-body\">\n                      <Body \n                        location={item.location} \n                        level={item.level}\n                      />\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"no-pain-data\">No pain data available for this week</div>\n              )}\n            </div>\n            \n            <div className=\"pain-legend-wrapper\">\n              <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} hide={screenshotMode} />\n            </div>\n          </div>\n        )}\n\n        {/* Show summaries for physician/unified view */}\n        {(viewMode === 'physician' || viewMode === 'unified') && (\n          <div className=\"summary-container\">\n            <div className=\"chart-summary\">\n              <h4>Week Summary</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Average Pain Intensity:</span>\n                  <span className=\"stat-value\">{averagePainLevel.toFixed(1)}/10</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Most Common Location:</span>\n                  <span className=\"stat-value\">{mostCommonLocation || 'N/A'}</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Days with Pain:</span>\n                  <span className=\"stat-value\">{weekPainData.length}/7</span>\n                </div>\n              </div>\n            </div>\n            \n            {showThreeMonthSummaries && threeMonthSummary && (\n              <div className=\"chart-summary\">\n                <h4>3-Month Summary</h4>\n                <div className=\"summary-stats\">\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Average Pain Intensity:</span>\n                    <span className=\"stat-value\">{threeMonthSummary.averagePainLevel.toFixed(1)}/10</span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Most Common Location:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.mostCommonLocation || 'N/A'} ({threeMonthSummary.mostCommonLocationCount}x)\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Days with Pain:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.daysWithPain}/{threeMonthSummary.daysInThreeMonths}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n  );\n};\n\nexport default PainChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}