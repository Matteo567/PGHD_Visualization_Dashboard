{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local Experimental\\\\PGHD_Visualization_Dashboard\\\\src\\\\components\\\\patient_charts\\\\PainChart.js\",\n  _s = $RefreshSig$();\n/**\n PainChart.js - Pain Assessment and Visualization Component\n \n This component provides comprehensive pain monitoring:\n - Anatomical body mapping for pain location\n - Pain intensity scale (0-10) with color coding\n - Daily pain tracking and trend analysis\n - Interactive body diagram for pain location selection\n - Pain level input and editing capabilities\n - Navigation controls for time periods\n \n Critical for pain management and treatment monitoring.\n */\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport './PainChart.css';\nimport BodySVG from './BodySvg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PainChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  accessType = 'Admin',\n  navigation,\n  screenshotMode = false,\n  showThreeMonthSummaries = false\n}) => {\n  _s();\n  const {\n    painData,\n    loading,\n    error\n  } = usePatientData(patientId);\n  // For Patient access, force List View (remove Line Chart access).\n  // For Physician access, force Line Chart (remove List View access).\n  // Admin can toggle between both.\n  const shouldForceListView = accessType === 'Patient';\n  const shouldForceLineChart = accessType === 'Physician';\n\n  // Determine initial state based on accessType\n  let initialUseLineChart = false;\n  if (shouldForceListView) {\n    initialUseLineChart = false;\n  } else if (shouldForceLineChart) {\n    initialUseLineChart = true;\n  }\n  const [useLineChart, setUseLineChart] = useState(initialUseLineChart);\n\n  // Update state when accessType changes\n  useEffect(() => {\n    if (shouldForceListView) {\n      setUseLineChart(false);\n    } else if (shouldForceLineChart) {\n      setUseLineChart(true);\n    }\n  }, [accessType, shouldForceListView, shouldForceLineChart]);\n\n  // Use navigation from parent or fallback to internal navigation\n  const internalNavigation = useChartNavigation('pain');\n  const nav = navigation || internalNavigation;\n  const getPainColor = level => {\n    // 11-class color scheme from light to dark\n    const painColors = ['#ffffe5',\n    // 0 - No pain (lightest cream)\n    '#fff7bc',\n    // 1 - Very mild pain\n    '#f7f7b3',\n    // 2 - Mild pain\n    '#fee391',\n    // 3 - Mild-moderate pain\n    '#fec44f',\n    // 4 - Moderate pain\n    '#fe9929',\n    // 5 - Moderate-severe pain\n    '#ec7014',\n    // 6 - Severe pain\n    '#cc4c02',\n    // 7 - Very severe pain\n    '#b34703',\n    // 8 - Extremely severe pain\n    '#993404',\n    // 9 - Most severe pain\n    '#662506' // 10 - Maximum pain (darkest brown)\n    ];\n    return painColors[Math.min(level, 10)];\n  };\n  const painLegendItems = Array.from({\n    length: 11\n  }, (_, i) => i).map(level => ({\n    color: getPainColor(level),\n    label: `${level}`\n  }));\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n\n  // Calculate previous and next week ranges\n  const prevWeekStart = new Date(startOfWeek);\n  prevWeekStart.setDate(prevWeekStart.getDate() - 7);\n  const prevWeekEnd = new Date(prevWeekStart);\n  prevWeekEnd.setDate(prevWeekEnd.getDate() + 6);\n  prevWeekEnd.setHours(23, 59, 59, 999);\n  const nextWeekStart = new Date(endOfWeek);\n  nextWeekStart.setDate(nextWeekStart.getDate() + 1);\n  nextWeekStart.setHours(0, 0, 0, 0);\n  const nextWeekEnd = new Date(nextWeekStart);\n  nextWeekEnd.setDate(nextWeekEnd.getDate() + 6);\n  nextWeekEnd.setHours(23, 59, 59, 999);\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\n  const prevWeekPainData = painData.filter(d => d.date >= prevWeekStart && d.date <= prevWeekEnd);\n  const nextWeekPainData = painData.filter(d => d.date >= nextWeekStart && d.date <= nextWeekEnd);\n\n  // Get 3-month data\n  const {\n    start: startOfThreeMonths,\n    end: endOfThreeMonths\n  } = nav.getThreeMonthRange();\n  const threeMonthPainData = painData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\n\n  // Helper functions for data processing\n  const processPainData = painData => {\n    const dateMap = {};\n    const locationCounts = {};\n    painData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap[dateKey] = item.level;\n      const location = item.location.toLowerCase();\n      locationCounts[location] = (locationCounts[location] || 0) + 1;\n    });\n    return {\n      dateMap,\n      locationCounts\n    };\n  };\n  const findMostCommonLocation = locationCounts => {\n    let mostCommon = null;\n    let maxCount = 0;\n    Object.entries(locationCounts).forEach(([location, count]) => {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommon = location;\n      }\n    });\n    return mostCommon;\n  };\n  const createWeekChartData = (dateMap, startOfWeek) => {\n    const data = [];\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(date.getDate() + i);\n      const dateKey = date.toDateString();\n      const painLevel = dateMap[dateKey] || 0;\n      data.push({\n        date,\n        day: dayNames[date.getDay()],\n        level: painLevel,\n        color: getPainColor(painLevel)\n      });\n    }\n    return data;\n  };\n  const calculateAveragePain = painData => {\n    if (painData.length === 0) return 0;\n    const totalPain = painData.reduce((sum, item) => sum + item.level, 0);\n    return totalPain / painData.length;\n  };\n\n  // Process data for chart\n  let chartData = [];\n  let mostCommonLocation = null;\n  let averagePainLevel = 0;\n  if (weekPainData.length > 0) {\n    const {\n      dateMap,\n      locationCounts\n    } = processPainData(weekPainData);\n    mostCommonLocation = findMostCommonLocation(locationCounts);\n    chartData = createWeekChartData(dateMap, startOfWeek);\n    averagePainLevel = calculateAveragePain(weekPainData);\n  }\n  const createExtendedChartData = () => {\n    const allWeeksData = [...prevWeekPainData, ...weekPainData, ...nextWeekPainData];\n    const dateMap = {};\n    allWeeksData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap[dateKey] = item.level;\n    });\n    const data = [];\n    const weekLabels = ['Prev Week', 'Current Week', 'Next Week'];\n    const weekStarts = [prevWeekStart, startOfWeek, nextWeekStart];\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    for (let week = 0; week < 3; week++) {\n      const weekStart = weekStarts[week];\n      for (let day = 0; day < 7; day++) {\n        const date = new Date(weekStart);\n        date.setDate(date.getDate() + day);\n        const dateKey = date.toDateString();\n        const painLevel = dateMap[dateKey] || 0;\n        data.push({\n          date,\n          day: dayNames[date.getDay()],\n          level: painLevel,\n          color: getPainColor(painLevel),\n          week: week,\n          weekLabel: weekLabels[week]\n        });\n      }\n    }\n    return data;\n  };\n\n  // Process data for extended chart (3 weeks)\n  const extendedChartData = isExpanded ? createExtendedChartData() : [];\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthPainData.length > 0) {\n    // Create a map of dates to pain levels for 3-month period\n    const dateMap = new Map();\n    const locationCounts = new Map();\n    threeMonthPainData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap.set(dateKey, item.level);\n\n      // Count locations\n      const location = item.location.toLowerCase();\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\n    });\n\n    // Find most common location\n    let mostCommon = null;\n    let maxCount = 0;\n    for (const [location, count] of locationCounts) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommon = location;\n      }\n    }\n    const totalPain = threeMonthPainData.reduce((sum, item) => sum + item.level, 0);\n    const avgPain = threeMonthPainData.length > 0 ? totalPain / threeMonthPainData.length : 0;\n\n    // Calculate actual days in the 3-month period\n    const {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const daysWithPain = new Set(threeMonthPainData.map(d => d.date.toDateString())).size;\n\n    // Calculate pain severity distribution\n    const painLevelCounts = {};\n    for (let i = 0; i <= 10; i++) {\n      painLevelCounts[i] = 0;\n    }\n    threeMonthPainData.forEach(item => {\n      painLevelCounts[item.level]++;\n    });\n\n    // Find most common pain level\n    const mostCommonPainLevel = Object.entries(painLevelCounts).sort(([, a], [, b]) => b - a)[0];\n    threeMonthSummary = {\n      totalEntries: threeMonthPainData.length,\n      daysWithPain,\n      daysInThreeMonths,\n      mostCommonLocation: mostCommon,\n      mostCommonLocationCount: maxCount,\n      averagePainLevel: avgPain,\n      mostCommonPainLevel: parseInt(mostCommonPainLevel[0]),\n      mostCommonPainLevelCount: mostCommonPainLevel[1]\n    };\n  }\n\n  // Line Chart Component for Pain Ratings\n  const PainLineChart = ({\n    data,\n    isExpanded,\n    extendedData\n  }) => {\n    const isExtendedView = isExpanded && extendedData && extendedData.length > 0;\n    const chartData = isExtendedView ? extendedData : data;\n    const config = {\n      width: isExtendedView ? 900 : isExpanded ? 600 : 400,\n      // Wider for 3-week view\n      height: isExpanded ? 220 : 150,\n      // Reduced height since we removed week labels\n      padding: {\n        top: 20,\n        right: 30,\n        bottom: 50,\n        left: 50\n      },\n      // Reduced bottom padding\n      yAxisRange: 10,\n      fontSize: {\n        yAxis: isExpanded ? 10 : 8,\n        xAxis: isExpanded ? 10 : 8\n      }\n    };\n    const chartWidth = config.width - config.padding.left - config.padding.right;\n    const chartHeight = config.height - config.padding.top - config.padding.bottom;\n    const dayWidth = chartWidth / (chartData.length - 1); // Dynamic based on data length\n\n    // Create line path\n    const linePath = chartData.map((point, index) => {\n      const x = config.padding.left + index * dayWidth;\n      const y = config.padding.top + chartHeight - point.level / config.yAxisRange * chartHeight;\n      return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n    }).join(' ');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-line-chart\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"100%\",\n        height: \"100%\",\n        viewBox: `0 0 ${config.width} ${config.height}`,\n        children: [[0, 2, 4, 6, 8, 10].map(level => {\n          const y = config.padding.top + chartHeight - level / config.yAxisRange * chartHeight;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              x1: config.padding.left,\n              y1: y,\n              x2: config.width - config.padding.right,\n              y2: y,\n              stroke: \"#e0e0e0\",\n              strokeWidth: \"1\",\n              strokeDasharray: \"2,2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: config.padding.left - 10,\n              y: y + 3,\n              fontSize: config.fontSize.yAxis,\n              textAnchor: \"end\",\n              fill: \"var(--chart-color-text-secondary)\",\n              children: level\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 17\n            }, this)]\n          }, level, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this);\n        }), isExtendedView && [7, 14].map(weekIndex => {\n          const x = config.padding.left + weekIndex * dayWidth;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: x,\n            y1: config.padding.top,\n            x2: x,\n            y2: config.height - config.padding.bottom,\n            stroke: \"#ccc\",\n            strokeWidth: \"2\",\n            strokeDasharray: \"5,5\"\n          }, weekIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this);\n        }), chartData.map((point, index) => {\n          const x = config.padding.left + index * dayWidth;\n          const dateNum = point.date.getDate();\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 15,\n              fontSize: config.fontSize.xAxis,\n              textAnchor: \"middle\",\n              className: \"x-axis-day-label\",\n              children: point.day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 30,\n              fontSize: config.fontSize.xAxis - 1,\n              textAnchor: \"middle\",\n              className: \"x-axis-date-label\",\n              fill: \"var(--chart-color-text-secondary)\",\n              children: dateNum\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: linePath,\n          stroke: \"#cccccc\",\n          strokeWidth: \"3\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this), chartData.map((point, index) => {\n          const x = config.padding.left + index * dayWidth;\n          const y = config.padding.top + chartHeight - point.level / config.yAxisRange * chartHeight;\n          return /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: x,\n            cy: y,\n            r: \"4\",\n            fill: point.color,\n            stroke: \"#cccccc\",\n            strokeWidth: \"2\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this);\n  };\n  const Body = ({\n    location,\n    level\n  }) => {\n    const color = getPainColor(level);\n    const locationLower = location.toLowerCase();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body-views\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"body-view-label\",\n            children: \"Front\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BodySVG, {\n            className: \"body-svg\",\n            painLocation: locationLower,\n            painColor: color,\n            view: \"front\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"body-view-label\",\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BodySVG, {\n            className: \"body-svg\",\n            painLocation: locationLower,\n            painColor: color,\n            view: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Unified view\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"physician-pain-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-chart-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chart-title\",\n        children: \"Pain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"chart-subtitle\",\n        children: nav.getFormattedDateRange()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }, this), accessType === 'Admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"view-toggle\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `toggle-btn ${!useLineChart ? 'active' : ''}`,\n          onClick: () => setUseLineChart(false),\n          children: \"List View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `toggle-btn ${useLineChart ? 'active' : ''}`,\n          onClick: () => setUseLineChart(true),\n          children: \"Line Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 9\n    }, this), useLineChart ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-line-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(PainLineChart, {\n        data: chartData,\n        isExpanded: isExpanded,\n        extendedData: extendedChartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pain-location-info\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Pain Location: \", mostCommonLocation || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pain-legend-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Legend, {\n          title: \"Pain Intensity Scale (0-10)\",\n          items: painLegendItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pain-content-wrapper\",\n      children: [mostCommonLocation && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-pain-visualization\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Most Common Pain Location: \", mostCommonLocation]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Body, {\n          location: mostCommonLocation,\n          level: Math.round(averagePainLevel)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pain-list\",\n        children: weekPainData.length > 0 ? weekPainData.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pain-list-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pain-item-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pain-item-date\",\n              children: new Date(item.date).toLocaleDateString('en-US', {\n                weekday: 'short',\n                month: 'short',\n                day: 'numeric'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pain-item-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pain-level\",\n                children: [\"Pain Level: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: getPainColor(item.level)\n                  },\n                  children: [item.level, \"/10\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 503,\n                  columnNumber: 39\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pain-location\",\n                children: [\"Location: \", item.location || 'Not specified']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pain-item-body\",\n            children: /*#__PURE__*/_jsxDEV(Body, {\n              location: item.location,\n              level: item.level\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 19\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-pain-data\",\n          children: \"No pain data available for this week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pain-legend-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Legend, {\n          title: \"Pain Intensity Scale (0-10)\",\n          items: painLegendItems,\n          hide: screenshotMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Week Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Average Pain Intensity:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [averagePainLevel.toFixed(1), \"/10\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common Location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: mostCommonLocation || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Days with Pain:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekPainData.length, \"/7\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 13\n      }, this), showThreeMonthSummaries && threeMonthSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"3-Month Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Average Pain Intensity:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.averagePainLevel.toFixed(1), \"/10\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common Location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.mostCommonLocation || 'N/A', \" (\", threeMonthSummary.mostCommonLocationCount, \"x)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Days with Pain:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.daysWithPain, \"/\", threeMonthSummary.daysInThreeMonths]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 9\n    }, this), \")}\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 7\n  }, this);\n};\n_s(PainChart, \"qhoHQstaLzW11u0rjbRF1a4AwlE=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = PainChart;\nexport default PainChart;\nvar _c;\n$RefreshReg$(_c, \"PainChart\");","map":{"version":3,"names":["React","useState","useRef","useEffect","usePatientData","useChartNavigation","Legend","BodySVG","jsxDEV","_jsxDEV","PainChart","patientId","isExpanded","onExpand","accessType","navigation","screenshotMode","showThreeMonthSummaries","_s","painData","loading","error","shouldForceListView","shouldForceLineChart","initialUseLineChart","useLineChart","setUseLineChart","internalNavigation","nav","getPainColor","level","painColors","Math","min","painLegendItems","Array","from","length","_","i","map","color","label","start","startOfWeek","end","endOfWeek","getDateRange","prevWeekStart","Date","setDate","getDate","prevWeekEnd","setHours","nextWeekStart","nextWeekEnd","weekPainData","filter","d","date","prevWeekPainData","nextWeekPainData","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthPainData","processPainData","dateMap","locationCounts","forEach","item","dateKey","toDateString","location","toLowerCase","findMostCommonLocation","mostCommon","maxCount","Object","entries","count","createWeekChartData","data","dayNames","painLevel","push","day","getDay","calculateAveragePain","totalPain","reduce","sum","chartData","mostCommonLocation","averagePainLevel","createExtendedChartData","allWeeksData","weekLabels","weekStarts","week","weekStart","weekLabel","extendedChartData","threeMonthSummary","Map","set","get","avgPain","daysInThreeMonths","ceil","daysWithPain","Set","size","painLevelCounts","mostCommonPainLevel","sort","a","b","totalEntries","mostCommonLocationCount","parseInt","mostCommonPainLevelCount","PainLineChart","extendedData","isExtendedView","config","width","height","padding","top","right","bottom","left","yAxisRange","fontSize","yAxis","xAxis","chartWidth","chartHeight","dayWidth","linePath","point","index","x","y","join","className","children","viewBox","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","textAnchor","fill","weekIndex","dateNum","cx","cy","r","Body","locationLower","painLocation","painColor","view","getFormattedDateRange","onClick","title","items","round","toLocaleDateString","weekday","month","style","hide","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/components/patient_charts/PainChart.js"],"sourcesContent":["/**\n PainChart.js - Pain Assessment and Visualization Component\n \n This component provides comprehensive pain monitoring:\n - Anatomical body mapping for pain location\n - Pain intensity scale (0-10) with color coding\n - Daily pain tracking and trend analysis\n - Interactive body diagram for pain location selection\n - Pain level input and editing capabilities\n - Navigation controls for time periods\n \n Critical for pain management and treatment monitoring.\n */\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\n\nimport Legend from '../Legend';\nimport './PainChart.css';\n\nimport BodySVG from './BodySvg';\n\nconst PainChart = ({ patientId, isExpanded = false, onExpand, accessType = 'Admin', navigation, screenshotMode = false, showThreeMonthSummaries = false }) => {\n  const { painData, loading, error } = usePatientData(patientId);\n  // For Patient access, force List View (remove Line Chart access).\n  // For Physician access, force Line Chart (remove List View access).\n  // Admin can toggle between both.\n  const shouldForceListView = accessType === 'Patient';\n  const shouldForceLineChart = accessType === 'Physician';\n  \n  // Determine initial state based on accessType\n  let initialUseLineChart = false;\n  if (shouldForceListView) {\n    initialUseLineChart = false;\n  } else if (shouldForceLineChart) {\n    initialUseLineChart = true;\n  }\n  \n  const [useLineChart, setUseLineChart] = useState(initialUseLineChart);\n  \n  // Update state when accessType changes\n  useEffect(() => {\n    if (shouldForceListView) {\n      setUseLineChart(false);\n    } else if (shouldForceLineChart) {\n      setUseLineChart(true);\n    }\n  }, [accessType, shouldForceListView, shouldForceLineChart]);\n  \n  // Use navigation from parent or fallback to internal navigation\n  const internalNavigation = useChartNavigation('pain');\n  const nav = navigation || internalNavigation;\n\n  const getPainColor = (level) => {\n    // 11-class color scheme from light to dark\n    const painColors = [\n      '#ffffe5', // 0 - No pain (lightest cream)\n      '#fff7bc', // 1 - Very mild pain\n      '#f7f7b3', // 2 - Mild pain\n      '#fee391', // 3 - Mild-moderate pain\n      '#fec44f', // 4 - Moderate pain\n      '#fe9929', // 5 - Moderate-severe pain\n      '#ec7014', // 6 - Severe pain\n      '#cc4c02', // 7 - Very severe pain\n      '#b34703', // 8 - Extremely severe pain\n      '#993404', // 9 - Most severe pain\n      '#662506'  // 10 - Maximum pain (darkest brown)\n    ];\n    \n    return painColors[Math.min(level, 10)];\n  };\n\n  const painLegendItems = Array.from({ length: 11 }, (_, i) => i).map(level => ({\n    color: getPainColor(level),\n    label: `${level}`,\n  }));\n\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\n\n  // Calculate previous and next week ranges\n  const prevWeekStart = new Date(startOfWeek);\n  prevWeekStart.setDate(prevWeekStart.getDate() - 7);\n  const prevWeekEnd = new Date(prevWeekStart);\n  prevWeekEnd.setDate(prevWeekEnd.getDate() + 6);\n  prevWeekEnd.setHours(23, 59, 59, 999);\n\n  const nextWeekStart = new Date(endOfWeek);\n  nextWeekStart.setDate(nextWeekStart.getDate() + 1);\n  nextWeekStart.setHours(0, 0, 0, 0);\n  const nextWeekEnd = new Date(nextWeekStart);\n  nextWeekEnd.setDate(nextWeekEnd.getDate() + 6);\n  nextWeekEnd.setHours(23, 59, 59, 999);\n\n  const weekPainData = painData.filter(d => d.date >= startOfWeek && d.date <= endOfWeek);\n  const prevWeekPainData = painData.filter(d => d.date >= prevWeekStart && d.date <= prevWeekEnd);\n  const nextWeekPainData = painData.filter(d => d.date >= nextWeekStart && d.date <= nextWeekEnd);\n\n  // Get 3-month data\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n  const threeMonthPainData = painData.filter(d => d.date >= startOfThreeMonths && d.date <= endOfThreeMonths);\n\n  // Helper functions for data processing\n  const processPainData = (painData) => {\n    const dateMap = {};\n    const locationCounts = {};\n\n    painData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap[dateKey] = item.level;\n      \n      const location = item.location.toLowerCase();\n      locationCounts[location] = (locationCounts[location] || 0) + 1;\n    });\n\n    return { dateMap, locationCounts };\n  };\n\n  const findMostCommonLocation = (locationCounts) => {\n    let mostCommon = null;\n    let maxCount = 0;\n    \n    Object.entries(locationCounts).forEach(([location, count]) => {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommon = location;\n      }\n    });\n    \n    return mostCommon;\n  };\n\n  const createWeekChartData = (dateMap, startOfWeek) => {\n    const data = [];\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    \n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(date.getDate() + i);\n      const dateKey = date.toDateString();\n      const painLevel = dateMap[dateKey] || 0;\n      \n      data.push({\n        date,\n        day: dayNames[date.getDay()],\n        level: painLevel,\n        color: getPainColor(painLevel)\n      });\n    }\n    \n    return data;\n  };\n\n  const calculateAveragePain = (painData) => {\n    if (painData.length === 0) return 0;\n    const totalPain = painData.reduce((sum, item) => sum + item.level, 0);\n    return totalPain / painData.length;\n  };\n\n  // Process data for chart\n  let chartData = [];\n  let mostCommonLocation = null;\n  let averagePainLevel = 0;\n  \n  if (weekPainData.length > 0) {\n    const { dateMap, locationCounts } = processPainData(weekPainData);\n    mostCommonLocation = findMostCommonLocation(locationCounts);\n    chartData = createWeekChartData(dateMap, startOfWeek);\n    averagePainLevel = calculateAveragePain(weekPainData);\n  }\n\n  const createExtendedChartData = () => {\n    const allWeeksData = [...prevWeekPainData, ...weekPainData, ...nextWeekPainData];\n    const dateMap = {};\n    \n    allWeeksData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap[dateKey] = item.level;\n    });\n\n    const data = [];\n    const weekLabels = ['Prev Week', 'Current Week', 'Next Week'];\n    const weekStarts = [prevWeekStart, startOfWeek, nextWeekStart];\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    \n    for (let week = 0; week < 3; week++) {\n      const weekStart = weekStarts[week];\n      \n      for (let day = 0; day < 7; day++) {\n        const date = new Date(weekStart);\n        date.setDate(date.getDate() + day);\n        const dateKey = date.toDateString();\n        const painLevel = dateMap[dateKey] || 0;\n        \n        data.push({\n          date,\n          day: dayNames[date.getDay()],\n          level: painLevel,\n          color: getPainColor(painLevel),\n          week: week,\n          weekLabel: weekLabels[week]\n        });\n      }\n    }\n\n    return data;\n  };\n\n  // Process data for extended chart (3 weeks)\n  const extendedChartData = isExpanded ? createExtendedChartData() : [];\n\n  // Calculate 3-month summary statistics for physician view\n  let threeMonthSummary = null;\n  if (threeMonthPainData.length > 0) {\n\n    // Create a map of dates to pain levels for 3-month period\n    const dateMap = new Map();\n    const locationCounts = new Map();\n\n    threeMonthPainData.forEach(item => {\n      const dateKey = item.date.toDateString();\n      dateMap.set(dateKey, item.level);\n      \n      // Count locations\n      const location = item.location.toLowerCase();\n      locationCounts.set(location, (locationCounts.get(location) || 0) + 1);\n    });\n\n    // Find most common location\n    let mostCommon = null;\n    let maxCount = 0;\n    for (const [location, count] of locationCounts) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommon = location;\n      }\n    }\n\n    const totalPain = threeMonthPainData.reduce((sum, item) => sum + item.level, 0);\n    const avgPain = threeMonthPainData.length > 0 ? (totalPain / threeMonthPainData.length) : 0;\n\n    // Calculate actual days in the 3-month period\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const daysWithPain = new Set(threeMonthPainData.map(d => d.date.toDateString())).size;\n\n    // Calculate pain severity distribution\n    const painLevelCounts = {};\n    for (let i = 0; i <= 10; i++) {\n      painLevelCounts[i] = 0;\n    }\n    threeMonthPainData.forEach(item => {\n      painLevelCounts[item.level]++;\n    });\n\n    // Find most common pain level\n    const mostCommonPainLevel = Object.entries(painLevelCounts)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    threeMonthSummary = {\n      totalEntries: threeMonthPainData.length,\n      daysWithPain,\n      daysInThreeMonths,\n      mostCommonLocation: mostCommon,\n      mostCommonLocationCount: maxCount,\n      averagePainLevel: avgPain,\n      mostCommonPainLevel: parseInt(mostCommonPainLevel[0]),\n      mostCommonPainLevelCount: mostCommonPainLevel[1]\n    };\n  }\n\n\n  // Line Chart Component for Pain Ratings\n  const PainLineChart = ({ data, isExpanded, extendedData }) => {\n    const isExtendedView = isExpanded && extendedData && extendedData.length > 0;\n    const chartData = isExtendedView ? extendedData : data;\n    \n    const config = {\n      width: isExtendedView ? 900 : (isExpanded ? 600 : 400), // Wider for 3-week view\n      height: isExpanded ? 220 : 150, // Reduced height since we removed week labels\n      padding: { top: 20, right: 30, bottom: 50, left: 50 }, // Reduced bottom padding\n      yAxisRange: 10,\n      fontSize: {\n        yAxis: isExpanded ? 10 : 8,\n        xAxis: isExpanded ? 10 : 8,\n      }\n    };\n\n    const chartWidth = config.width - config.padding.left - config.padding.right;\n    const chartHeight = config.height - config.padding.top - config.padding.bottom;\n    const dayWidth = chartWidth / (chartData.length - 1); // Dynamic based on data length\n\n    // Create line path\n    const linePath = chartData.map((point, index) => {\n      const x = config.padding.left + (index * dayWidth);\n      const y = config.padding.top + chartHeight - (point.level / config.yAxisRange) * chartHeight;\n      return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n    }).join(' ');\n\n    return (\n      <div className=\"pain-line-chart\">\n        <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${config.width} ${config.height}`}>\n          {/* Grid lines */}\n          {[0, 2, 4, 6, 8, 10].map(level => {\n            const y = config.padding.top + chartHeight - (level / config.yAxisRange) * chartHeight;\n            return (\n              <g key={level}>\n                <line \n                  x1={config.padding.left} \n                  y1={y} \n                  x2={config.width - config.padding.right} \n                  y2={y} \n                  stroke=\"#e0e0e0\" \n                  strokeWidth=\"1\" \n                  strokeDasharray=\"2,2\"\n                />\n                <text \n                  x={config.padding.left - 10} \n                  y={y + 3} \n                  fontSize={config.fontSize.yAxis} \n                  textAnchor=\"end\" \n                  fill=\"var(--chart-color-text-secondary)\"\n                >\n                  {level}\n                </text>\n              </g>\n            );\n          })}\n\n          {/* Week separators for extended view */}\n          {isExtendedView && [7, 14].map(weekIndex => {\n            const x = config.padding.left + (weekIndex * dayWidth);\n            return (\n              <line \n                key={weekIndex}\n                x1={x} \n                y1={config.padding.top} \n                x2={x} \n                y2={config.height - config.padding.bottom} \n                stroke=\"#ccc\" \n                strokeWidth=\"2\" \n                strokeDasharray=\"5,5\"\n              />\n            );\n          })}\n\n          {/* X-axis labels */}\n          {chartData.map((point, index) => {\n            const x = config.padding.left + (index * dayWidth);\n            const dateNum = point.date.getDate();\n            \n            return (\n              <g key={index}>\n                <text \n                  x={x} \n                  y={config.height - config.padding.bottom + 15} \n                  fontSize={config.fontSize.xAxis} \n                  textAnchor=\"middle\" \n                  className=\"x-axis-day-label\"\n                >\n                  {point.day}\n                </text>\n                <text \n                  x={x} \n                  y={config.height - config.padding.bottom + 30} \n                  fontSize={config.fontSize.xAxis - 1} \n                  textAnchor=\"middle\" \n                  className=\"x-axis-date-label\"\n                  fill=\"var(--chart-color-text-secondary)\"\n                >\n                  {dateNum}\n                </text>\n              </g>\n            );\n          })}\n\n          {/* Line */}\n          <path \n            d={linePath} \n            stroke=\"#cccccc\" \n            strokeWidth=\"3\" \n            fill=\"none\"\n          />\n\n          {/* Data points */}\n          {chartData.map((point, index) => {\n            const x = config.padding.left + (index * dayWidth);\n            const y = config.padding.top + chartHeight - (point.level / config.yAxisRange) * chartHeight;\n            return (\n              <circle \n                key={index}\n                cx={x} \n                cy={y} \n                r=\"4\" \n                fill={point.color} \n                stroke=\"#cccccc\" \n                strokeWidth=\"2\"\n              />\n            );\n          })}\n        </svg>\n      </div>\n    );\n  };\n\n  const Body = ({ location, level }) => {\n    const color = getPainColor(level);\n    const locationLower = location.toLowerCase();\n\n    return (\n      <div className=\"body-container\">\n        <div className=\"body-views\">\n          <div className=\"body-view\">\n            <div className=\"body-view-label\">Front</div>\n            <BodySVG \n              className=\"body-svg\" \n              painLocation={locationLower} \n              painColor={color} \n              view=\"front\" \n            />\n          </div>\n          <div className=\"body-view\">\n            <div className=\"body-view-label\">Back</div>\n            <BodySVG \n              className=\"body-svg\" \n              painLocation={locationLower} \n              painColor={color} \n              view=\"back\" \n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Unified view\n  return (\n      <div className=\"physician-pain-chart-container\">\n        <div className=\"pain-chart-header\">\n          <h3 className=\"chart-title\">Pain</h3>\n          <h4 className=\"chart-subtitle\">{nav.getFormattedDateRange()}</h4>\n          \n          {/* View Toggle - Hide for Patient and Physician (single view only), show both for Admin */}\n          {accessType === 'Admin' && (\n            <div className=\"view-toggle\">\n              <button \n                className={`toggle-btn ${!useLineChart ? 'active' : ''}`}\n                onClick={() => setUseLineChart(false)}\n              >\n                List View\n              </button>\n              <button \n                className={`toggle-btn ${useLineChart ? 'active' : ''}`}\n                onClick={() => setUseLineChart(true)}\n              >\n                Line Chart\n              </button>\n            </div>\n          )}\n        </div>\n        \n        {/* Conditional Chart Rendering */}\n        {useLineChart ? (\n          <div className=\"pain-line-chart-container\">\n            <PainLineChart \n              data={chartData} \n              isExpanded={isExpanded} \n              extendedData={extendedChartData}\n            />\n            <div className=\"pain-location-info\">\n              <h4>Pain Location: {mostCommonLocation || 'N/A'}</h4>\n            </div>\n            <div className=\"pain-legend-wrapper\">\n              <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} />\n            </div>\n          </div>\n        ) : (\n          <div className=\"pain-content-wrapper\">\n            {/* Main Body SVG showing most common pain location and average level */}\n            {mostCommonLocation && (\n              <div className=\"main-pain-visualization\">\n                <h4>Most Common Pain Location: {mostCommonLocation}</h4>\n                <Body \n                  location={mostCommonLocation} \n                  level={Math.round(averagePainLevel)} \n                />\n              </div>\n            )}\n            <div className=\"pain-list\">\n              {weekPainData.length > 0 ? (\n                weekPainData.map((item, index) => (\n                  <div key={index} className=\"pain-list-item\">\n                    <div className=\"pain-item-info\">\n                      <div className=\"pain-item-date\">\n                        {new Date(item.date).toLocaleDateString('en-US', { \n                          weekday: 'short', \n                          month: 'short', \n                          day: 'numeric' \n                        })}\n                      </div>\n                      <div className=\"pain-item-details\">\n                        <div className=\"pain-level\">\n                          Pain Level: <span style={{ color: getPainColor(item.level) }}>\n                            {item.level}/10\n                          </span>\n                        </div>\n                        <div className=\"pain-location\">\n                          Location: {item.location || 'Not specified'}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"pain-item-body\">\n                      <Body \n                        location={item.location} \n                        level={item.level}\n                      />\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"no-pain-data\">No pain data available for this week</div>\n              )}\n            </div>\n            \n            <div className=\"pain-legend-wrapper\">\n              <Legend title=\"Pain Intensity Scale (0-10)\" items={painLegendItems} hide={screenshotMode} />\n            </div>\n          </div>\n        )}\n\n        {/* Show summaries for unified view */}\n        <div className=\"summary-container\">\n            <div className=\"chart-summary\">\n              <h4>Week Summary</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Average Pain Intensity:</span>\n                  <span className=\"stat-value\">{averagePainLevel.toFixed(1)}/10</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Most Common Location:</span>\n                  <span className=\"stat-value\">{mostCommonLocation || 'N/A'}</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Days with Pain:</span>\n                  <span className=\"stat-value\">{weekPainData.length}/7</span>\n                </div>\n              </div>\n            </div>\n            \n            {showThreeMonthSummaries && threeMonthSummary && (\n              <div className=\"chart-summary\">\n                <h4>3-Month Summary</h4>\n                <div className=\"summary-stats\">\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Average Pain Intensity:</span>\n                    <span className=\"stat-value\">{threeMonthSummary.averagePainLevel.toFixed(1)}/10</span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Most Common Location:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.mostCommonLocation || 'N/A'} ({threeMonthSummary.mostCommonLocationCount}x)\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Days with Pain:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.daysWithPain}/{threeMonthSummary.daysInThreeMonths}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n  );\n};\n\nexport default PainChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}