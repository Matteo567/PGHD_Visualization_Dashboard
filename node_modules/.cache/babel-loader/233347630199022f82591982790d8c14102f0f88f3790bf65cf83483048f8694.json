{"ast":null,"code":"import _objectSpread from\"C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n DashboardGrid.js - Chart Grid Layout Component\n \n This component provides a flexible grid layout system for organizing charts by rendering all \n available visualizations in a grid, handling expanded/collapsed chart states, integrating chart \n navigation controls, and providing placeholder states for empty data scenarios.\n \n Acts as the main container for organizing multiple health metric visualizations.\n */import React from'react';import VisualizationWrapper from'./VisualizationWrapper';import Placeholder from'./ui/Placeholder';import'./DashboardGrid.css';/*\n Shared component for rendering dashboard grids with visualization wrappers\n Shows all available visualizations instead of using dropdown selectors\n \n @param {Object} props - Component props\n @param {string} props.viewMode - 'patient' or 'physician'\n @param {Object} props.selectedVisualizations - Currently selected visualizations\n @param {Object} props.availableVisualizations - Available visualizations\n @param {Object} props.allVisualizations - All visualization configurations\n @param {Function} props.onVisualizationChange - Handler for visualization changes\n @param {Function} props.onExpand - Handler for expand/collapse\n @param {string|null} props.expandedItem - Currently expanded item ID\n @param {Function} props.renderVisualization - Function to render visualizations\n @param {boolean} props.disabled - Whether the grid is disabled\n @param {string} props.placeholderText - Text to show when no data is available\n @param {Object} props.chartNavigation - Navigation objects for each chart type\n @param {boolean} props.screenshotMode - Whether in screenshot mode\n @returns {JSX.Element} The dashboard grid component\n */import{jsx as _jsx}from\"react/jsx-runtime\";const DashboardGrid=_ref=>{let{viewMode,// 'patient' or 'physician'\nselectedVisualizations,availableVisualizations,allVisualizations,onVisualizationChange,onExpand,expandedItem,renderVisualization,disabled=false,placeholderText=\"No data available for this patient.\",// Navigation props\nchartNavigation={},// Screenshot mode\nscreenshotMode=false}=_ref;// Configuration for different view modes\nconst gridConfig={patient:{className:'dashboard-grid',chartClassNames:['visualization-box']},physician:{className:'physician-charts-grid',chartClassNames:['physician-chart-container']},unified:{className:'dashboard-grid',chartClassNames:['visualization-box']}};const config=gridConfig[viewMode];// Get all available visualization types\nconst availableVizTypes=Object.keys(availableVisualizations);// If there's an expanded item, show only that\nif(expandedItem){// Extract the visualization type from the chart ID\n// Chart IDs are formatted as \"${viewMode}-chart-${index}\"\nconst chartIdParts=expandedItem.split('-');const chartIndex=parseInt(chartIdParts[chartIdParts.length-1]);const availableVizTypes=Object.keys(availableVisualizations);const selectedViz=availableVizTypes[chartIndex];if(!selectedViz){return/*#__PURE__*/_jsx(\"div\",{className:config.className,children:/*#__PURE__*/_jsx(Placeholder,{message:\"Invalid expanded chart\",type:\"error\"})});}const navigation=chartNavigation[selectedViz];const wrapperProps={id:expandedItem,className:\"\".concat(config.chartClassNames[0],\" expanded-view\"),selectedViz:selectedViz,availableVisualizations:availableVisualizations,allVisualizations:allVisualizations,onVisualizationChange:onVisualizationChange,onExpand:onExpand,isExpanded:true,renderVisualization:renderVisualization,disabled:disabled,placeholderText:placeholderText,onPrev:navigation===null||navigation===void 0?void 0:navigation.goToPrevious,onNext:navigation===null||navigation===void 0?void 0:navigation.goToNext,navigationLabel:(navigation===null||navigation===void 0?void 0:navigation.navigationLabel)||'Week',screenshotMode:screenshotMode};return/*#__PURE__*/_jsx(VisualizationWrapper,_objectSpread({},wrapperProps));}// If no visualizations available, show placeholder\nif(availableVizTypes.length===0){return/*#__PURE__*/_jsx(\"div\",{className:config.className,children:/*#__PURE__*/_jsx(Placeholder,{message:placeholderText,type:\"no-data\"})});}// Render all available visualizations\nreturn/*#__PURE__*/_jsx(\"div\",{className:config.className,children:availableVizTypes.map((vizType,index)=>{const chartId=\"\".concat(viewMode,\"-chart-\").concat(index);const navigation=chartNavigation[vizType];const wrapperProps={key:chartId,id:chartId,className:\"\".concat(config.chartClassNames[0],\" \").concat(config.chartClassNames[0],\"-\").concat(index+1),selectedViz:vizType,availableVisualizations:availableVisualizations,allVisualizations:allVisualizations,onVisualizationChange:onVisualizationChange,onExpand:onExpand,isExpanded:expandedItem===chartId,renderVisualization:renderVisualization,disabled:disabled,placeholderText:placeholderText,onPrev:navigation===null||navigation===void 0?void 0:navigation.goToPrevious,onNext:navigation===null||navigation===void 0?void 0:navigation.goToNext,navigationLabel:(navigation===null||navigation===void 0?void 0:navigation.navigationLabel)||'Week',screenshotMode:screenshotMode};return/*#__PURE__*/_jsx(VisualizationWrapper,_objectSpread({},wrapperProps));})});};export default DashboardGrid;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}