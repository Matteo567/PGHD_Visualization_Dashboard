{"ast":null,"code":"var _s = $RefreshSig$();\n// Hook for loading patient data from CSV files\nimport React, { useState, useEffect } from 'react';\nimport { getPatientData } from '../services/dataService';\nconst usePatientData = patientId => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const loadData = async id => {\n    if (!id || typeof id !== 'string') {\n      setLoading(false);\n      setData(null);\n      setError(null);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const patientData = await getPatientData(id);\n      if (patientData && patientData.patientInfo) {\n        setData(patientData);\n      } else {\n        throw new Error('Invalid data structure received');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      setData(null);\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Error loading patient data:', err);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (patientId) {\n      loadData(patientId);\n    } else {\n      setData(null);\n      setError(null);\n      setLoading(false);\n    }\n  }, [patientId]);\n  return {\n    data,\n    loading,\n    error,\n    patientInfo: (data === null || data === void 0 ? void 0 : data.patientInfo) || null,\n    glucoseData: (data === null || data === void 0 ? void 0 : data.glucoseData) || [],\n    bloodPressureData: (data === null || data === void 0 ? void 0 : data.bloodPressureData) || [],\n    exerciseData: (data === null || data === void 0 ? void 0 : data.exerciseData) || [],\n    moodData: (data === null || data === void 0 ? void 0 : data.moodData) || [],\n    painData: (data === null || data === void 0 ? void 0 : data.painData) || [],\n    mealData: (data === null || data === void 0 ? void 0 : data.mealData) || [],\n    sleepData: (data === null || data === void 0 ? void 0 : data.sleepData) || []\n  };\n};\n_s(usePatientData, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\nexport default usePatientData;","map":{"version":3,"names":["React","useState","useEffect","getPatientData","usePatientData","patientId","_s","data","setData","loading","setLoading","error","setError","loadData","id","patientData","patientInfo","Error","err","errorMessage","message","process","env","NODE_ENV","console","glucoseData","bloodPressureData","exerciseData","moodData","painData","mealData","sleepData"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/hooks/usePatientData.js"],"sourcesContent":["// Hook for loading patient data from CSV files\nimport React, { useState, useEffect } from 'react';\nimport { getPatientData } from '../services/dataService';\nconst usePatientData = (patientId) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const loadData = async (id) => {\n    if (!id || typeof id !== 'string') {\n      setLoading(false);\n      setData(null);\n      setError(null);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const patientData = await getPatientData(id);\n      \n      if (patientData && patientData.patientInfo) {\n        setData(patientData);\n      } else {\n        throw new Error('Invalid data structure received');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      setData(null);\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Error loading patient data:', err);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (patientId) {\n      loadData(patientId);\n    } else {\n      setData(null);\n      setError(null);\n      setLoading(false);\n    }\n  }, [patientId]);\n\n  return {\n    data,\n    loading,\n    error,\n    patientInfo: data?.patientInfo || null,\n    glucoseData: data?.glucoseData || [],\n    bloodPressureData: data?.bloodPressureData || [],\n    exerciseData: data?.exerciseData || [],\n    moodData: data?.moodData || [],\n    painData: data?.painData || [],\n    mealData: data?.mealData || [],\n    sleepData: data?.sleepData || []\n  };\n};\n\nexport default usePatientData;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,MAAMC,cAAc,GAAIC,SAAS,IAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMY,QAAQ,GAAG,MAAOC,EAAE,IAAK;IAC7B,IAAI,CAACA,EAAE,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;MACjCJ,UAAU,CAAC,KAAK,CAAC;MACjBF,OAAO,CAAC,IAAI,CAAC;MACbI,QAAQ,CAAC,IAAI,CAAC;MACd;IACF;IAEA,IAAI;MACFF,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMG,WAAW,GAAG,MAAMZ,cAAc,CAACW,EAAE,CAAC;MAE5C,IAAIC,WAAW,IAAIA,WAAW,CAACC,WAAW,EAAE;QAC1CR,OAAO,CAACO,WAAW,CAAC;MACtB,CAAC,MAAM;QACL,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;MACpD;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,MAAMC,YAAY,GAAGD,GAAG,YAAYD,KAAK,GAAGC,GAAG,CAACE,OAAO,GAAG,wBAAwB;MAClFR,QAAQ,CAACO,YAAY,CAAC;MACtBX,OAAO,CAAC,IAAI,CAAC;MACb,IAAIa,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAC1CC,OAAO,CAACb,KAAK,CAAC,6BAA6B,EAAEO,GAAG,CAAC;MACnD;IACF,CAAC,SAAS;MACRR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDR,SAAS,CAAC,MAAM;IACd,IAAIG,SAAS,EAAE;MACbQ,QAAQ,CAACR,SAAS,CAAC;IACrB,CAAC,MAAM;MACLG,OAAO,CAAC,IAAI,CAAC;MACbI,QAAQ,CAAC,IAAI,CAAC;MACdF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;EAEf,OAAO;IACLE,IAAI;IACJE,OAAO;IACPE,KAAK;IACLK,WAAW,EAAE,CAAAT,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,WAAW,KAAI,IAAI;IACtCS,WAAW,EAAE,CAAAlB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkB,WAAW,KAAI,EAAE;IACpCC,iBAAiB,EAAE,CAAAnB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmB,iBAAiB,KAAI,EAAE;IAChDC,YAAY,EAAE,CAAApB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEoB,YAAY,KAAI,EAAE;IACtCC,QAAQ,EAAE,CAAArB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEqB,QAAQ,KAAI,EAAE;IAC9BC,QAAQ,EAAE,CAAAtB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsB,QAAQ,KAAI,EAAE;IAC9BC,QAAQ,EAAE,CAAAvB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEuB,QAAQ,KAAI,EAAE;IAC9BC,SAAS,EAAE,CAAAxB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwB,SAAS,KAAI;EAChC,CAAC;AACH,CAAC;AAACzB,EAAA,CA3DIF,cAAc;AA6DpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}