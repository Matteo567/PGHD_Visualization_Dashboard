{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\PhysicianDashboard.js\",\n  _s = $RefreshSig$();\n/*\n PhysicianDashboard.js - Physician View Dashboard Component\n \n This component renders the physician-focused dashboard view with clinical overview\n optimized for healthcare providers, patient information with medical context,\n chart expansion capabilities, and support for clinical notes and observations.\n \n Architecture:\n - Designed for physicians to monitor multiple health metrics simultaneously\n - Provides clinical summaries and statistical analysis\n - Implements professional medical interface design\n - Handles patient selection and data validation\n \n Custom Hooks Used:\n - usePatientData: Manages patient data fetching and caching\n - useVisualizations: Handles visualization configuration and availability\n - useVisualizationHelpers: Provides chart expansion and rendering utilities\n - useChartNavigation: Manages time-based navigation for each chart type\n \n Component Structure:\n - Physician header with clinical context\n - PatientInfoCard: Displays patient demographics and medical information\n - DashboardGrid: Renders the chart grid with clinical summaries\n - Individual chart components with physician-specific features\n \n State Management:\n - Manages selected patient state independently from parent\n - Uses custom hooks for centralized state management\n - Handles chart expansion state through useVisualizationHelpers\n - Manages navigation state for each chart type independently\n \n Clinical Features:\n - Summary statistics for each health metric\n - Trend analysis and pattern recognition\n - Professional medical interface design\n - Comprehensive data visualization for clinical decision making\n */\n\nimport React, { useState } from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport Placeholder from './components/ui/Placeholder';\nimport './PhysicianDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhysicianDashboard = ({\n  patientId\n}) => {\n  _s();\n  const {\n    data,\n    loading,\n    error\n  } = usePatientData(patientId);\n  const {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange\n  } = useVisualizations('physician', data);\n\n  // Simplified: Inline expanded state (no separate hook needed)\n  const [expandedChart, setExpandedChart] = useState(null);\n  const handleExpand = chartId => {\n    setExpandedChart(expandedChart === chartId ? null : chartId);\n  };\n\n  // Simplified: Single shared navigation for all charts\n  const sharedNavigation = useChartNavigation('glucose'); // Default to 'week' navigation\n\n  const chartNavigation = {\n    glucose: sharedNavigation,\n    bloodPressure: sharedNavigation,\n    exercise: sharedNavigation,\n    sleep: sharedNavigation,\n    pain: sharedNavigation,\n    mood: useChartNavigation('mood'),\n    // Mood uses month navigation, so keep separate\n    mealContents: sharedNavigation\n  };\n\n  // Simplified: Direct rendering - no render props needed\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\n    if (!patientId) {\n      return /*#__PURE__*/_jsxDEV(Placeholder, {\n        message: \"Please select a patient to view data.\",\n        type: \"select-patient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 14\n      }, this);\n    }\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return /*#__PURE__*/_jsxDEV(Placeholder, {\n      message: \"Invalid visualization\",\n      type: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 22\n    }, this);\n    const Component = viz.component;\n    const isExpanded = expandedChart === windowId;\n    const navigation = chartNavigation[visualizationType];\n    return /*#__PURE__*/_jsxDEV(Component, {\n      patientId: patientId,\n      viewMode: \"physician\",\n      isExpanded: isExpanded,\n      onExpand: () => handleExpand(windowId),\n      navigation: navigation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }, this);\n  };\n  const patientInfo = data === null || data === void 0 ? void 0 : data.patientInfo;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"physician-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"physician-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Physician Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), patientId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(PatientInfoCard, {\n        patientInfo: patientInfo,\n        loading: loading,\n        error: error,\n        variant: \"physician\",\n        className: \"patient-info-card-physician\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DashboardGrid, {\n        viewMode: \"physician\",\n        selectedVisualizations: selectedVisualizations,\n        availableVisualizations: availableVisualizations,\n        allVisualizations: allVisualizations,\n        onVisualizationChange: handleVisualizationChange,\n        onExpand: handleExpand,\n        expandedItem: expandedItem,\n        renderVisualization: renderVisualizationWithMode,\n        chartNavigation: chartNavigation,\n        disabled: Object.keys(availableVisualizations).length === 0,\n        placeholderText: \"No data available for this patient.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(PhysicianDashboard, \"QKIyjooPGjrOREmIzoE/TOcgzfU=\", false, function () {\n  return [usePatientData, useVisualizations, useChartNavigation, useChartNavigation];\n});\n_c = PhysicianDashboard;\nexport default PhysicianDashboard;\nvar _c;\n$RefreshReg$(_c, \"PhysicianDashboard\");","map":{"version":3,"names":["React","useState","usePatientData","useVisualizations","useChartNavigation","PatientInfoCard","DashboardGrid","Placeholder","jsxDEV","_jsxDEV","PhysicianDashboard","patientId","_s","data","loading","error","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedChart","setExpandedChart","handleExpand","chartId","sharedNavigation","chartNavigation","glucose","bloodPressure","exercise","sleep","pain","mood","mealContents","renderVisualizationWithMode","visualizationType","windowId","message","type","fileName","_jsxFileName","lineNumber","columnNumber","viz","Component","component","isExpanded","navigation","viewMode","onExpand","patientInfo","className","children","variant","onVisualizationChange","expandedItem","renderVisualization","disabled","Object","keys","length","placeholderText","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PhysicianDashboard.js"],"sourcesContent":["/*\n PhysicianDashboard.js - Physician View Dashboard Component\n \n This component renders the physician-focused dashboard view with clinical overview\n optimized for healthcare providers, patient information with medical context,\n chart expansion capabilities, and support for clinical notes and observations.\n \n Architecture:\n - Designed for physicians to monitor multiple health metrics simultaneously\n - Provides clinical summaries and statistical analysis\n - Implements professional medical interface design\n - Handles patient selection and data validation\n \n Custom Hooks Used:\n - usePatientData: Manages patient data fetching and caching\n - useVisualizations: Handles visualization configuration and availability\n - useVisualizationHelpers: Provides chart expansion and rendering utilities\n - useChartNavigation: Manages time-based navigation for each chart type\n \n Component Structure:\n - Physician header with clinical context\n - PatientInfoCard: Displays patient demographics and medical information\n - DashboardGrid: Renders the chart grid with clinical summaries\n - Individual chart components with physician-specific features\n \n State Management:\n - Manages selected patient state independently from parent\n - Uses custom hooks for centralized state management\n - Handles chart expansion state through useVisualizationHelpers\n - Manages navigation state for each chart type independently\n \n Clinical Features:\n - Summary statistics for each health metric\n - Trend analysis and pattern recognition\n - Professional medical interface design\n - Comprehensive data visualization for clinical decision making\n */\n\nimport React, { useState } from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport Placeholder from './components/ui/Placeholder';\nimport './PhysicianDashboard.css';\n\nconst PhysicianDashboard = ({ patientId }) => {\n  const { data, loading, error } = usePatientData(patientId);\n\n  const { \n    allVisualizations, \n    availableVisualizations, \n    selectedVisualizations, \n    handleVisualizationChange \n  } = useVisualizations('physician', data);\n\n  // Simplified: Inline expanded state (no separate hook needed)\n  const [expandedChart, setExpandedChart] = useState(null);\n\n  const handleExpand = (chartId) => {\n    setExpandedChart(expandedChart === chartId ? null : chartId);\n  };\n\n  // Simplified: Single shared navigation for all charts\n  const sharedNavigation = useChartNavigation('glucose'); // Default to 'week' navigation\n\n  const chartNavigation = {\n    glucose: sharedNavigation,\n    bloodPressure: sharedNavigation,\n    exercise: sharedNavigation,\n    sleep: sharedNavigation,\n    pain: sharedNavigation,\n    mood: useChartNavigation('mood'), // Mood uses month navigation, so keep separate\n    mealContents: sharedNavigation\n  };\n\n  // Simplified: Direct rendering - no render props needed\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\n    if (!patientId) {\n      return <Placeholder message=\"Please select a patient to view data.\" type=\"select-patient\" />;\n    }\n    \n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <Placeholder message=\"Invalid visualization\" type=\"error\" />;\n\n    const Component = viz.component;\n    const isExpanded = expandedChart === windowId;\n    const navigation = chartNavigation[visualizationType];\n    \n    return <Component \n      patientId={patientId} \n      viewMode=\"physician\"\n      isExpanded={isExpanded}\n      onExpand={() => handleExpand(windowId)}\n      navigation={navigation}\n    />;\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  return (\n    <div className=\"physician-dashboard\">\n      <div className=\"physician-header\">\n        <h1>Physician Dashboard</h1>\n      </div>\n\n      {patientId && (\n        <div className=\"dashboard-content\">\n          <PatientInfoCard \n            patientInfo={patientInfo}\n            loading={loading}\n            error={error}\n            variant=\"physician\"\n            className=\"patient-info-card-physician\"\n          />\n\n          <DashboardGrid\n            viewMode=\"physician\"\n            selectedVisualizations={selectedVisualizations}\n            availableVisualizations={availableVisualizations}\n            allVisualizations={allVisualizations}\n            onVisualizationChange={handleVisualizationChange}\n            onExpand={handleExpand}\n            expandedItem={expandedItem}\n            renderVisualization={renderVisualizationWithMode}\n            chartNavigation={chartNavigation}\n            disabled={Object.keys(availableVisualizations).length === 0}\n            placeholderText=\"No data available for this patient.\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PhysicianDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}