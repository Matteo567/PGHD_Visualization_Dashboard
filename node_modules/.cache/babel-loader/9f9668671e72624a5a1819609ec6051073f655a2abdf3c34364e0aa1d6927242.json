{"ast":null,"code":"/**\r\n * chartUtils.js - Shared utility functions for chart components\r\n * \r\n * This file contains reusable utility functions that are used across\r\n * multiple chart components to avoid code duplication.\r\n */\n\n/**\r\n * Calculates blood pressure summary statistics for a given data range\r\n * @param {Array} data - Array of blood pressure readings\r\n * @returns {Object|null} Summary statistics or null if no data\r\n */\nexport function calculateBloodPressureSummary(data) {\n  if (!data || data.length === 0) {\n    return null;\n  }\n  const systolicReadings = data.filter(d => d.systolic && d.systolic > 0).map(d => d.systolic);\n  const diastolicReadings = data.filter(d => d.diastolic && d.diastolic > 0).map(d => d.diastolic);\n  if (systolicReadings.length === 0 || diastolicReadings.length === 0) {\n    return null;\n  }\n  const avgSystolic = (systolicReadings.reduce((sum, val) => sum + val, 0) / systolicReadings.length).toFixed(0);\n  const avgDiastolic = (diastolicReadings.reduce((sum, val) => sum + val, 0) / diastolicReadings.length).toFixed(0);\n  const maxSystolic = Math.max(...systolicReadings);\n  const maxDiastolic = Math.max(...diastolicReadings);\n  const getRiskCategory = (systolic, diastolic) => {\n    if (systolic >= 135 || diastolic >= 85) return 'High Risk';\n    if (systolic >= 121 || diastolic >= 80) return 'Medium Risk';\n    return 'Low Risk';\n  };\n  const avgRisk = getRiskCategory(parseFloat(avgSystolic), parseFloat(avgDiastolic));\n  const daysWithReadings = new Set(data.map(d => d.date.toDateString())).size;\n  return {\n    avgSystolic,\n    avgDiastolic,\n    maxSystolic,\n    maxDiastolic,\n    avgRisk,\n    daysWithReadings,\n    totalReadings: data.length\n  };\n}\n\n/**\r\n * Calculates glucose summary statistics for a given data range\r\n * @param {Array} data - Array of glucose readings\r\n * @returns {Object|null} Summary statistics or null if no data\r\n */\nexport function calculateGlucoseSummary(data) {\n  if (!data || data.length === 0) {\n    return null;\n  }\n  const readings = data.filter(d => d.value && d.value > 0);\n  if (readings.length === 0) {\n    return null;\n  }\n  const preMealReadings = readings.filter(d => d.measurementType === 'Pre meal');\n  const postMealReadings = readings.filter(d => d.measurementType === 'Post meal');\n  const avgGlucose = (readings.reduce((sum, val) => sum + val.value, 0) / readings.length).toFixed(1);\n  const avgPreMeal = preMealReadings.length > 0 ? (preMealReadings.reduce((sum, val) => sum + val.value, 0) / preMealReadings.length).toFixed(1) : 0;\n  const avgPostMeal = postMealReadings.length > 0 ? (postMealReadings.reduce((sum, val) => sum + val.value, 0) / postMealReadings.length).toFixed(1) : 0;\n  const highReadings = readings.filter(d => d.range.toLowerCase() === 'above range').length;\n  const lowReadings = readings.filter(d => d.range.toLowerCase() === 'below range').length;\n  const inRangeReadings = readings.filter(d => d.range.toLowerCase() === 'in range').length;\n  const rangePercentage = (inRangeReadings / readings.length * 100).toFixed(0);\n  const daysWithReadings = new Set(data.map(d => d.date.toDateString())).size;\n  return {\n    avgGlucose,\n    avgPreMeal,\n    avgPostMeal,\n    highReadings,\n    lowReadings,\n    inRangeReadings,\n    rangePercentage,\n    daysWithReadings,\n    totalReadings: readings.length\n  };\n}","map":{"version":3,"names":["calculateBloodPressureSummary","data","length","systolicReadings","filter","d","systolic","map","diastolicReadings","diastolic","avgSystolic","reduce","sum","val","toFixed","avgDiastolic","maxSystolic","Math","max","maxDiastolic","getRiskCategory","avgRisk","parseFloat","daysWithReadings","Set","date","toDateString","size","totalReadings","calculateGlucoseSummary","readings","value","preMealReadings","measurementType","postMealReadings","avgGlucose","avgPreMeal","avgPostMeal","highReadings","range","toLowerCase","lowReadings","inRangeReadings","rangePercentage"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/utils/chartUtils.js"],"sourcesContent":["/**\r\n * chartUtils.js - Shared utility functions for chart components\r\n * \r\n * This file contains reusable utility functions that are used across\r\n * multiple chart components to avoid code duplication.\r\n */\r\n\r\n/**\r\n * Calculates blood pressure summary statistics for a given data range\r\n * @param {Array} data - Array of blood pressure readings\r\n * @returns {Object|null} Summary statistics or null if no data\r\n */\r\nexport function calculateBloodPressureSummary(data) {\r\n  if (!data || data.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const systolicReadings = data.filter(d => d.systolic && d.systolic > 0).map(d => d.systolic);\r\n  const diastolicReadings = data.filter(d => d.diastolic && d.diastolic > 0).map(d => d.diastolic);\r\n\r\n  if (systolicReadings.length === 0 || diastolicReadings.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const avgSystolic = (systolicReadings.reduce((sum, val) => sum + val, 0) / systolicReadings.length).toFixed(0);\r\n  const avgDiastolic = (diastolicReadings.reduce((sum, val) => sum + val, 0) / diastolicReadings.length).toFixed(0);\r\n\r\n  const maxSystolic = Math.max(...systolicReadings);\r\n  const maxDiastolic = Math.max(...diastolicReadings);\r\n\r\n  const getRiskCategory = (systolic, diastolic) => {\r\n    if (systolic >= 135 || diastolic >= 85) return 'High Risk';\r\n    if (systolic >= 121 || diastolic >= 80) return 'Medium Risk';\r\n    return 'Low Risk';\r\n  };\r\n\r\n  const avgRisk = getRiskCategory(parseFloat(avgSystolic), parseFloat(avgDiastolic));\r\n  const daysWithReadings = new Set(data.map(d => d.date.toDateString())).size;\r\n\r\n  return {\r\n    avgSystolic,\r\n    avgDiastolic,\r\n    maxSystolic,\r\n    maxDiastolic,\r\n    avgRisk,\r\n    daysWithReadings,\r\n    totalReadings: data.length\r\n  };\r\n}\r\n\r\n/**\r\n * Calculates glucose summary statistics for a given data range\r\n * @param {Array} data - Array of glucose readings\r\n * @returns {Object|null} Summary statistics or null if no data\r\n */\r\nexport function calculateGlucoseSummary(data) {\r\n  if (!data || data.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const readings = data.filter(d => d.value && d.value > 0);\r\n  \r\n  if (readings.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const preMealReadings = readings.filter(d => d.measurementType === 'Pre meal');\r\n  const postMealReadings = readings.filter(d => d.measurementType === 'Post meal');\r\n\r\n  const avgGlucose = (readings.reduce((sum, val) => sum + val.value, 0) / readings.length).toFixed(1);\r\n  const avgPreMeal = preMealReadings.length > 0 ? \r\n    (preMealReadings.reduce((sum, val) => sum + val.value, 0) / preMealReadings.length).toFixed(1) : 0;\r\n  const avgPostMeal = postMealReadings.length > 0 ? \r\n    (postMealReadings.reduce((sum, val) => sum + val.value, 0) / postMealReadings.length).toFixed(1) : 0;\r\n\r\n  const highReadings = readings.filter(d => d.range.toLowerCase() === 'above range').length;\r\n  const lowReadings = readings.filter(d => d.range.toLowerCase() === 'below range').length;\r\n  const inRangeReadings = readings.filter(d => d.range.toLowerCase() === 'in range').length;\r\n\r\n  const rangePercentage = ((inRangeReadings / readings.length) * 100).toFixed(0);\r\n  const daysWithReadings = new Set(data.map(d => d.date.toDateString())).size;\r\n\r\n  return {\r\n    avgGlucose,\r\n    avgPreMeal,\r\n    avgPostMeal,\r\n    highReadings,\r\n    lowReadings,\r\n    inRangeReadings,\r\n    rangePercentage,\r\n    daysWithReadings,\r\n    totalReadings: readings.length\r\n  };\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}