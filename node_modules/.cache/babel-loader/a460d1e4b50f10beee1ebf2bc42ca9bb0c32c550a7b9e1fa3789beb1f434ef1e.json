{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExerciseChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport ChartContainer from '../ChartContainer';\nimport Legend from '../Legend';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport '../ChartStyles.css';\nimport './ExerciseChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseTypes = [{\n  key: 'walking',\n  label: 'Walking',\n  color: 'var(--chart-color-walking)',\n  emoji: '🚶'\n}, {\n  key: 'swimming',\n  label: 'Swimming',\n  color: 'var(--chart-color-swimming)',\n  emoji: '🏊‍♀️'\n}, {\n  key: 'running',\n  label: 'Running',\n  color: 'var(--chart-color-running)',\n  emoji: '🏃‍♂️'\n}, {\n  key: 'resistance/weights',\n  label: 'Resistance/Weights',\n  color: 'var(--chart-color-resistance)',\n  emoji: '🏋️'\n}, {\n  key: 'biking',\n  label: 'Biking',\n  color: 'var(--chart-color-biking)',\n  emoji: '🚴'\n}, {\n  key: 'balance/stretching',\n  label: 'Balance/Stretching',\n  color: 'var(--chart-color-balance)',\n  emoji: '🧘'\n}, {\n  key: 'other',\n  label: 'Other',\n  color: 'var(--chart-color-other)',\n  emoji: '➕'\n}];\nconst exerciseLegendItems = exerciseTypes.map(({\n  label,\n  color,\n  emoji\n}) => ({\n  label: `${emoji} ${label}`,\n  color\n}));\nconst ExerciseChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient'\n}) => {\n  _s();\n  var _exerciseTypes$find;\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId, 'exercise');\n  const [currentWeek, setCurrentWeek] = useState(new Date(2025, 4, 1));\n  const handlePrevWeek = () => {\n    setCurrentWeek(prev => new Date(new Date(prev).setDate(prev.getDate() - 7)));\n  };\n  const handleNextWeek = () => {\n    setCurrentWeek(prev => new Date(new Date(prev).setDate(prev.getDate() + 7)));\n  };\n  const config = createChartConfig('exercise', isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n  const startOfWeek = new Date(currentWeek);\n  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n  startOfWeek.setHours(0, 0, 0, 0);\n  const endOfWeek = new Date(startOfWeek);\n  endOfWeek.setDate(endOfWeek.getDate() + 6);\n  endOfWeek.setHours(23, 59, 59, 999);\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = {\n      walking: 0,\n      swimming: 0,\n      running: 0,\n      'resistance/weights': 0,\n      biking: 0,\n      'balance/stretching': 0,\n      other: 0,\n      totalMinutes: 0\n    };\n    return acc;\n  }, {});\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\n      groupedData[dayName].running += Number(item.running) || 0;\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      groupedData[dayName].biking += Number(item.biking) || 0;\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\n    }\n  });\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n  const generateYAxisLabels = max => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate summary statistics for physician view\n  const weekSummary = useMemo(() => {\n    if (!weekData.length) return null;\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\n\n    // Count days with exercise\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\n\n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    const mostCommonExercise = Object.entries(exerciseTypeTotals).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate exercise consistency (days with 30+ minutes)\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\n\n    // Calculate average session length\n    const totalSessions = weekData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\n    }).length;\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n    return {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      daysWithAdequateExercise,\n      totalSessions,\n      avgSessionLength\n    };\n  }, [weekData, groupedData]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    title: \"Exercise\",\n    icon: \"\\uD83C\\uDFC3\",\n    isLoading: loading,\n    error: error,\n    noData: !loading && !error && (!exerciseData || exerciseData.length === 0),\n    isExpanded: isExpanded,\n    onExpand: onExpand,\n    onPrev: handlePrevWeek,\n    onNext: handleNextWeek,\n    navigationLabel: formatDateRange(startOfWeek, endOfWeek),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(Legend, {\n        title: \"Exercise Type\",\n        items: exerciseLegendItems,\n        orientation: \"horizontal\",\n        size: \"medium\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `exercise-chart-content ${isExpanded ? 'expanded' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          viewBox: `0 0 ${config.width} ${config.height}`,\n          className: \"exercise-svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"y-axis\",\n            children: [yAxisLabels.map(value => {\n              const y = config.padding.top + chartHeight - value / maxDuration * chartHeight;\n              return /*#__PURE__*/_jsxDEV(\"g\", {\n                className: \"y-axis-grid-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  className: \"chart-grid-line-horizontal\",\n                  x1: config.padding.left,\n                  y1: y,\n                  x2: config.width - config.padding.right,\n                  y2: y\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: config.padding.left - 15,\n                  y: y + 3,\n                  fontSize: config.fontSize.yAxis,\n                  textAnchor: \"end\",\n                  fill: \"var(--chart-color-text-secondary)\",\n                  className: \"chart-tick-label\",\n                  children: value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 21\n                }, this)]\n              }, value, true, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 19\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: -(config.padding.top + chartHeight / 2),\n              y: config.padding.left / 2 - 5,\n              fontSize: config.fontSize.yAxisTitle,\n              textAnchor: \"middle\",\n              fill: \"var(--chart-color-text-primary)\",\n              transform: \"rotate(-90)\",\n              className: \"y-axis-title\",\n              children: \"Minutes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"x-axis\",\n            children: daysOfWeek.map((day, dayIndex) => {\n              const date = new Date(startOfWeek);\n              date.setDate(date.getDate() + dayIndex);\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n              const dayData = groupedData[day];\n              const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n              const emojis = performedExercises.map(type => type.emoji).join(' ');\n              return /*#__PURE__*/_jsxDEV(\"g\", {\n                className: \"x-axis-label-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  className: \"chart-grid-line-vertical\",\n                  x1: config.padding.left + dayIndex * config.dayWidth,\n                  y1: config.padding.top,\n                  x2: config.padding.left + dayIndex * config.dayWidth,\n                  y2: config.height - config.padding.bottom\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: x,\n                  y: config.height - config.padding.bottom + 15,\n                  textAnchor: \"middle\",\n                  fontSize: config.fontSize.dayLabel,\n                  fill: \"var(--chart-color-text-primary)\",\n                  className: \"x-axis-day-label\",\n                  children: day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: x,\n                  y: config.height - config.padding.bottom + 30,\n                  textAnchor: \"middle\",\n                  fontSize: config.fontSize.dateLabel,\n                  fill: \"var(--chart-color-text-secondary)\",\n                  className: \"x-axis-date-label\",\n                  children: date.getDate()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: x,\n                  y: config.height - config.padding.bottom + 48,\n                  textAnchor: \"middle\",\n                  fontSize: config.fontSize.emoji,\n                  children: emojis\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 21\n                }, this)]\n              }, dayIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"data-bars\",\n            children: daysOfWeek.map((day, dayIndex) => {\n              const dayData = groupedData[day];\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n              let currentY = config.height - config.padding.bottom;\n              return /*#__PURE__*/_jsxDEV(\"g\", {\n                children: exerciseTypes.map(type => {\n                  const minutes = Number(dayData[type.key]) || 0;\n                  if (minutes <= 0) return null;\n                  const segmentHeight = minutes / maxDuration * chartHeight;\n                  const segmentY = currentY - segmentHeight;\n                  const segment = /*#__PURE__*/_jsxDEV(\"g\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                      x: x - config.barWidth / 2,\n                      y: segmentY,\n                      width: config.barWidth,\n                      height: segmentHeight,\n                      fill: type.color,\n                      className: \"data-bar\",\n                      children: /*#__PURE__*/_jsxDEV(\"title\", {\n                        children: `${type.label}: ${Math.round(minutes)} min`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 219,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 211,\n                      columnNumber: 27\n                    }, this), segmentHeight >= 12 && /*#__PURE__*/_jsxDEV(\"text\", {\n                      x: x,\n                      y: segmentY + segmentHeight / 2,\n                      textAnchor: \"middle\",\n                      fontSize: isExpanded ? 8 : 6,\n                      fill: \"white\",\n                      className: \"duration-label\",\n                      style: {\n                        textShadow: '0.5px 0.5px 1px rgba(0,0,0,0.5)',\n                        fontWeight: 'normal'\n                      },\n                      children: Math.round(minutes)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 223,\n                      columnNumber: 29\n                    }, this)]\n                  }, type.key, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 25\n                  }, this);\n                  currentY = segmentY;\n                  return segment;\n                })\n              }, day, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), viewMode === 'physician' && weekSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Week Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Total Exercise:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.totalMinutes, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Daily Average:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.avgMinutesPerDay, \" minutes/day\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Exercise Days:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.daysWithExercise, \"/7 days\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Adequate Exercise:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.daysWithAdequateExercise, \"/7 days (30+ min)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [(_exerciseTypes$find = exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)) === null || _exerciseTypes$find === void 0 ? void 0 : _exerciseTypes$find.emoji, \" \", weekSummary.mostCommonExercise, \" (\", weekSummary.mostCommonExerciseMinutes, \" min)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Avg Session:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.avgSessionLength, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(ExerciseChart, \"RtQHeb9Zlh/9LqIc3cyvOamcYJk=\", false, function () {\n  return [usePatientData];\n});\n_c = ExerciseChart;\nexport default ExerciseChart;\nvar _c;\n$RefreshReg$(_c, \"ExerciseChart\");","map":{"version":3,"names":["React","useState","useMemo","usePatientData","ChartContainer","Legend","createChartConfig","jsxDEV","_jsxDEV","exerciseTypes","key","label","color","emoji","exerciseLegendItems","map","ExerciseChart","patientId","isExpanded","onExpand","viewMode","_s","_exerciseTypes$find","exerciseData","loading","error","currentWeek","setCurrentWeek","Date","handlePrevWeek","prev","setDate","getDate","handleNextWeek","config","chartHeight","height","padding","top","bottom","startOfWeek","getDay","setHours","endOfWeek","weekData","filter","d","date","itemDate","daysOfWeek","groupedData","reduce","acc","day","walking","swimming","running","biking","other","totalMinutes","forEach","item","dayName","Number","maxVal","Math","max","Object","values","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","weekSummary","length","sum","avgMinutesPerDay","toFixed","daysWithExercise","exerciseTypeTotals","type","mostCommonExercise","entries","sort","a","b","daysWithAdequateExercise","totalSessions","avgSessionLength","mostCommonExerciseMinutes","formatDateRange","start","end","startStr","toLocaleDateString","month","endStr","title","icon","isLoading","noData","onPrev","onNext","navigationLabel","children","className","items","orientation","size","fileName","_jsxFileName","lineNumber","columnNumber","width","viewBox","value","y","x1","left","y1","x2","right","y2","x","fontSize","yAxis","textAnchor","fill","yAxisTitle","transform","dayIndex","dayWidth","dayData","performedExercises","emojis","join","dayLabel","dateLabel","currentY","minutes","segmentHeight","segmentY","segment","barWidth","round","style","textShadow","fontWeight","find","t","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport ChartContainer from '../ChartContainer';\r\nimport Legend from '../Legend';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport '../ChartStyles.css';\r\nimport './ExerciseChart.css';\r\n\r\nconst exerciseTypes = [\r\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\r\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\r\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\r\n  { key: 'resistance/weights', label: 'Resistance/Weights', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\r\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\r\n  { key: 'balance/stretching', label: 'Balance/Stretching', color: 'var(--chart-color-balance)', emoji: '🧘' },\r\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\r\n];\r\n\r\nconst exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\r\n  label: `${emoji} ${label}`,\r\n  color,\r\n}));\r\n\r\n\r\n\r\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient' }) => {\r\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\r\n  const [currentWeek, setCurrentWeek] = useState(new Date(2025, 4, 1));\r\n\r\n  const handlePrevWeek = () => {\r\n    setCurrentWeek(prev => new Date(new Date(prev).setDate(prev.getDate() - 7)));\r\n  };\r\n\r\n  const handleNextWeek = () => {\r\n    setCurrentWeek(prev => new Date(new Date(prev).setDate(prev.getDate() + 7)));\r\n  };\r\n\r\n  const config = createChartConfig('exercise', isExpanded);\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n\r\n  const startOfWeek = new Date(currentWeek);\r\n  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\r\n  startOfWeek.setHours(0, 0, 0, 0);\r\n\r\n  const endOfWeek = new Date(startOfWeek);\r\n  endOfWeek.setDate(endOfWeek.getDate() + 6);\r\n  endOfWeek.setHours(23, 59, 59, 999);\r\n\r\n  const weekData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\r\n  });\r\n\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const groupedData = daysOfWeek.reduce((acc, day) => {\r\n    acc[day] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  weekData.forEach(item => {\r\n    if (!item.date) return;\r\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n    if (groupedData[dayName]) {\r\n      groupedData[dayName].walking += Number(item.walking) || 0;\r\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      groupedData[dayName].running += Number(item.running) || 0;\r\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      groupedData[dayName].biking += Number(item.biking) || 0;\r\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      groupedData[dayName].other += Number(item.other) || 0;\r\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\r\n    }\r\n  });\r\n\r\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\r\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\r\n\r\n  const generateYAxisLabels = (max) => {\r\n    if (max === 0) return [0];\r\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\r\n    const labels = [];\r\n    for (let i = 0; i <= max; i += step) {\r\n      labels.push(i);\r\n    }\r\n    return labels;\r\n  };\r\n\r\n  const yAxisLabels = generateYAxisLabels(maxDuration);\r\n\r\n  // Calculate summary statistics for physician view\r\n  const weekSummary = useMemo(() => {\r\n    if (!weekData.length) return null;\r\n\r\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\r\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\r\n    \r\n    // Count days with exercise\r\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\r\n    \r\n    // Find most common exercise type\r\n    const exerciseTypeTotals = {};\r\n    exerciseTypes.forEach(type => {\r\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\r\n    });\r\n    \r\n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n    \r\n    // Calculate exercise consistency (days with 30+ minutes)\r\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\r\n    \r\n    // Calculate average session length\r\n    const totalSessions = weekData.filter(item => {\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\r\n    }).length;\r\n    \r\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\r\n\r\n    return {\r\n      totalMinutes,\r\n      avgMinutesPerDay,\r\n      daysWithExercise,\r\n      mostCommonExercise: mostCommonExercise[0],\r\n      mostCommonExerciseMinutes: mostCommonExercise[1],\r\n      daysWithAdequateExercise,\r\n      totalSessions,\r\n      avgSessionLength\r\n    };\r\n  }, [weekData, groupedData]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  return (\r\n    <ChartContainer\r\n      title=\"Exercise\"\r\n      icon=\"🏃\"\r\n      isLoading={loading}\r\n      error={error}\r\n      noData={!loading && !error && (!exerciseData || exerciseData.length === 0)}\r\n      isExpanded={isExpanded}\r\n      onExpand={onExpand}\r\n      onPrev={handlePrevWeek}\r\n      onNext={handleNextWeek}\r\n      navigationLabel={formatDateRange(startOfWeek, endOfWeek)}\r\n    >\r\n      <div className=\"exercise-chart-container\">\r\n        <Legend title=\"Exercise Type\" items={exerciseLegendItems} orientation=\"horizontal\" size=\"medium\" />\r\n        <div className={`exercise-chart-content ${isExpanded ? 'expanded' : ''}`}>\r\n          <svg \r\n            width=\"100%\" \r\n            viewBox={`0 0 ${config.width} ${config.height}`}\r\n            className=\"exercise-svg\"\r\n          >\r\n            <g className=\"y-axis\">\r\n              {yAxisLabels.map(value => {\r\n                const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\r\n                return (\r\n                  <g key={value} className=\"y-axis-grid-group\">\r\n                    <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\r\n                    <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\r\n                  </g>\r\n                );\r\n              })}\r\n              <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\r\n            </g>\r\n\r\n            <g className=\"x-axis\">\r\n              {daysOfWeek.map((day, dayIndex) => {\r\n                const date = new Date(startOfWeek);\r\n                date.setDate(date.getDate() + dayIndex);\r\n                const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n\r\n                const dayData = groupedData[day];\r\n                const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\r\n                const emojis = performedExercises.map(type => type.emoji).join(' ');\r\n\r\n                return (\r\n                  <g key={dayIndex} className=\"x-axis-label-group\">\r\n                    <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\r\n                    <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\r\n                    <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\r\n                    <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n\r\n            <g className=\"data-bars\">\r\n              {daysOfWeek.map((day, dayIndex) => {\r\n                const dayData = groupedData[day];\r\n                const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n                let currentY = config.height - config.padding.bottom;\r\n\r\n                return (\r\n                  <g key={day}>\r\n                    {exerciseTypes.map(type => {\r\n                      const minutes = Number(dayData[type.key]) || 0;\r\n                      if (minutes <= 0) return null;\r\n\r\n                      const segmentHeight = (minutes / maxDuration) * chartHeight;\r\n                      const segmentY = currentY - segmentHeight;\r\n\r\n                      const segment = (\r\n                        <g key={type.key}>\r\n                          <rect\r\n                            x={x - config.barWidth / 2}\r\n                            y={segmentY}\r\n                            width={config.barWidth}\r\n                            height={segmentHeight}\r\n                            fill={type.color}\r\n                            className=\"data-bar\"\r\n                          >\r\n                            <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\r\n                          </rect>\r\n                          {/* Duration label inside the segment */}\r\n                          {segmentHeight >= 12 && (\r\n                            <text\r\n                              x={x}\r\n                              y={segmentY + segmentHeight / 2}\r\n                              textAnchor=\"middle\"\r\n                              fontSize={isExpanded ? 8 : 6}\r\n                              fill=\"white\"\r\n                              className=\"duration-label\"\r\n                              style={{ \r\n                                textShadow: '0.5px 0.5px 1px rgba(0,0,0,0.5)',\r\n                                fontWeight: 'normal'\r\n                              }}\r\n                            >\r\n                              {Math.round(minutes)}\r\n                            </text>\r\n                          )}\r\n                        </g>\r\n                      );\r\n\r\n                      currentY = segmentY;\r\n                      return segment;\r\n                    })}\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n          </svg>\r\n        </div>\r\n\r\n        {/* Show summary for physician view only */}\r\n        {viewMode === 'physician' && weekSummary && (\r\n          <div className=\"chart-summary\">\r\n            <h4>Week Summary</h4>\r\n            <div className=\"summary-stats\">\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Total Exercise:</span>\r\n                <span className=\"stat-value\">\r\n                  {weekSummary.totalMinutes} minutes\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Daily Average:</span>\r\n                <span className=\"stat-value\">\r\n                  {weekSummary.avgMinutesPerDay} minutes/day\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Exercise Days:</span>\r\n                <span className=\"stat-value\">\r\n                  {weekSummary.daysWithExercise}/7 days\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Adequate Exercise:</span>\r\n                <span className=\"stat-value\">\r\n                  {weekSummary.daysWithAdequateExercise}/7 days (30+ min)\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Most Common:</span>\r\n                <span className=\"stat-value\">\r\n                  {exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)?.emoji} {weekSummary.mostCommonExercise} ({weekSummary.mostCommonExerciseMinutes} min)\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Avg Session:</span>\r\n                <span className=\"stat-value\">\r\n                  {weekSummary.avgSessionLength} minutes\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </ChartContainer>\r\n  );\r\n};\r\n\r\nexport default ExerciseChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}