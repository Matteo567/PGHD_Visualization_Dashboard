{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\n\n/**\r\n * Universal navigation hook for chart components\r\n * Provides navigation state and functions that can be used by any chart\r\n */\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  // Determine navigation type based on chart type\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\n\n  // Navigation functions\n  const goToPrevious = useCallback(() => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (navigationType === 'month') {\n        newDate.setMonth(newDate.getMonth() - 1);\n      } else {\n        newDate.setDate(newDate.getDate() - 7);\n      }\n      return newDate;\n    });\n  }, [navigationType]);\n  const goToNext = useCallback(() => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (navigationType === 'month') {\n        newDate.setMonth(newDate.getMonth() + 1);\n      } else {\n        newDate.setDate(newDate.getDate() + 7);\n      }\n      return newDate;\n    });\n  }, [navigationType]);\n\n  // Calculate date range based on navigation type\n  const getDateRange = useCallback(() => {\n    if (navigationType === 'month') {\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n      return {\n        start: startOfMonth,\n        end: endOfMonth\n      };\n    } else {\n      const startOfWeek = new Date(currentDate);\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      const endOfWeek = new Date(startOfWeek);\n      endOfWeek.setDate(endOfWeek.getDate() + 6);\n      endOfWeek.setHours(23, 59, 59, 999);\n      return {\n        start: startOfWeek,\n        end: endOfWeek\n      };\n    }\n  }, [currentDate, navigationType]);\n  return {\n    currentDate,\n    navigationType,\n    navigationLabel,\n    goToPrevious,\n    goToNext,\n    getDateRange\n  };\n};\n_s(useChartNavigation, \"ttAKsyyFDRotZqQXcUoPsNGG2YM=\");\nexport default useChartNavigation;","map":{"version":3,"names":["useState","useCallback","useChartNavigation","chartType","initialDate","Date","_s","currentDate","setCurrentDate","navigationType","navigationLabel","goToPrevious","prev","newDate","setMonth","getMonth","setDate","getDate","goToNext","getDateRange","startOfMonth","getFullYear","endOfMonth","start","end","startOfWeek","getDay","setHours","endOfWeek"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/useChartNavigation.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\n/**\r\n * Universal navigation hook for chart components\r\n * Provides navigation state and functions that can be used by any chart\r\n */\r\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\r\n  const [currentDate, setCurrentDate] = useState(initialDate);\r\n\r\n  // Determine navigation type based on chart type\r\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\r\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\r\n\r\n  // Navigation functions\r\n  const goToPrevious = useCallback(() => {\r\n    setCurrentDate(prev => {\r\n      const newDate = new Date(prev);\r\n      if (navigationType === 'month') {\r\n        newDate.setMonth(newDate.getMonth() - 1);\r\n      } else {\r\n        newDate.setDate(newDate.getDate() - 7);\r\n      }\r\n      return newDate;\r\n    });\r\n  }, [navigationType]);\r\n\r\n  const goToNext = useCallback(() => {\r\n    setCurrentDate(prev => {\r\n      const newDate = new Date(prev);\r\n      if (navigationType === 'month') {\r\n        newDate.setMonth(newDate.getMonth() + 1);\r\n      } else {\r\n        newDate.setDate(newDate.getDate() + 7);\r\n      }\r\n      return newDate;\r\n    });\r\n  }, [navigationType]);\r\n\r\n  // Calculate date range based on navigation type\r\n  const getDateRange = useCallback(() => {\r\n    if (navigationType === 'month') {\r\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n      return { start: startOfMonth, end: endOfMonth };\r\n    } else {\r\n      const startOfWeek = new Date(currentDate);\r\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\r\n      startOfWeek.setHours(0, 0, 0, 0);\r\n      \r\n      const endOfWeek = new Date(startOfWeek);\r\n      endOfWeek.setDate(endOfWeek.getDate() + 6);\r\n      endOfWeek.setHours(23, 59, 59, 999);\r\n      \r\n      return { start: startOfWeek, end: endOfWeek };\r\n    }\r\n  }, [currentDate, navigationType]);\r\n\r\n  return {\r\n    currentDate,\r\n    navigationType,\r\n    navigationLabel,\r\n    goToPrevious,\r\n    goToNext,\r\n    getDateRange\r\n  };\r\n};\r\n\r\nexport default useChartNavigation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}