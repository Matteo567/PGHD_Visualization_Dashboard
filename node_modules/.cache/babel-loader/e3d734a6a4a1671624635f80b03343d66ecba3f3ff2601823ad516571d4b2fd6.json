{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExerciseBarChart.js\",\n  _s = $RefreshSig$();\n/**\r\n * ExerciseBarChart.js - Exercise Goals Progress Visualization for Physician View\r\n * \r\n * This component provides a simple bar chart showing exercise goal completion:\r\n * - Three exercise categories: Aerobic, Strength, and Flexibility/Balance\r\n * - Percentage completion based on weekly goals\r\n * - Color-coded bars with shades representing progress\r\n * - Goals: 150 min aerobic/week, 2+ strength sessions/week, 1+ flexibility session/week\r\n * \r\n * Architecture:\r\n * - Uses custom SVG for bar chart visualization\r\n * - Implements goal-based percentage calculations\r\n * - Provides color-coded progress indicators\r\n * - Supports expandable views\r\n * - Implements time-based navigation and data filtering\r\n * \r\n * Visualization Features:\r\n * - Three horizontal bars showing category progress\r\n * - Color-coded completion percentages\r\n * - Goal targets and current progress display\r\n * - Design adapting to container size\r\n * - Dynamic scaling based on data range\r\n * \r\n * Exercise Categories:\r\n * - Aerobic: Walking, swimming, running, biking (150 min/week goal)\r\n * - Strength: Resistance/weights training (2+ sessions/week goal)\r\n * - Flexibility/Balance: Balance/stretching activities (1+ session/week goal)\r\n * \r\n * Component Structure:\r\n * - Chart Container: Main SVG container with sizing\r\n * - Category Bars: Horizontal progress bars with color coding\r\n * - Labels: Category names and percentage completion\r\n * - Goals: Target values and current progress display\r\n * \r\n * Essential for physician exercise monitoring and goal tracking.\r\n */\n\nimport React, { useState, useMemo, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport './ExerciseBarChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExerciseBarChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient',\n  navigation\n}) => {\n  _s();\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId, 'exercise');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n\n  // Simple configuration for bar chart\n  const chartConfig = {\n    width: isExpanded ? 700 : 450,\n    height: isExpanded ? 500 : 350,\n    padding: {\n      top: 60,\n      right: 40,\n      bottom: 80,\n      left: 60\n    }\n  };\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Calculate exercise progress for each category\n  const exerciseProgress = useMemo(() => {\n    if (!weekData.length) {\n      return {\n        aerobic: {\n          minutes: 0,\n          percentage: 0,\n          sessions: 0\n        },\n        strength: {\n          sessions: 0,\n          percentage: 0\n        },\n        flexibility: {\n          sessions: 0,\n          percentage: 0\n        }\n      };\n    }\n\n    // Calculate aerobic minutes (walking, swimming, running, biking)\n    const aerobicMinutes = weekData.reduce((total, day) => {\n      return total + (Number(day.walking) || 0) + (Number(day.swimming) || 0) + (Number(day.running) || 0) + (Number(day.biking) || 0);\n    }, 0);\n\n    // Calculate strength sessions (resistance/weights)\n    const strengthSessions = weekData.filter(day => (Number(day['resistance/weights']) || 0) > 0).length;\n\n    // Calculate flexibility sessions (balance/stretching)\n    const flexibilitySessions = weekData.filter(day => (Number(day['balance/stretching']) || 0) > 0).length;\n\n    // Calculate percentages\n    const aerobicPercentage = Math.min(100, aerobicMinutes / 150 * 100);\n    const strengthPercentage = Math.min(100, strengthSessions / 2 * 100);\n    const flexibilityPercentage = Math.min(100, flexibilitySessions / 1 * 100);\n    return {\n      aerobic: {\n        minutes: aerobicMinutes,\n        percentage: aerobicPercentage,\n        sessions: weekData.filter(day => (Number(day.walking) || 0) + (Number(day.swimming) || 0) + (Number(day.running) || 0) + (Number(day.biking) || 0) > 0).length\n      },\n      strength: {\n        sessions: strengthSessions,\n        percentage: strengthPercentage\n      },\n      flexibility: {\n        sessions: flexibilitySessions,\n        percentage: flexibilityPercentage\n      }\n    };\n  }, [weekData]);\n\n  // Define exercise categories with goals and colors\n  const exerciseCategories = [{\n    key: 'aerobic',\n    label: 'Aerobic Activity',\n    goal: '150 min/week',\n    current: `${Math.round(exerciseProgress.aerobic.minutes)} min`,\n    percentage: exerciseProgress.aerobic.percentage,\n    color: '#4CAF50',\n    // Green\n    lightColor: '#E8F5E8'\n  }, {\n    key: 'strength',\n    label: 'Strength Training',\n    goal: '2+ sessions/week',\n    current: `${exerciseProgress.strength.sessions} sessions`,\n    percentage: exerciseProgress.strength.percentage,\n    color: '#2196F3',\n    // Blue\n    lightColor: '#E3F2FD'\n  }, {\n    key: 'flexibility',\n    label: 'Flexibility/Balance',\n    goal: '1+ session/week',\n    current: `${exerciseProgress.flexibility.sessions} sessions`,\n    percentage: exerciseProgress.flexibility.percentage,\n    color: '#FF9800',\n    // Orange\n    lightColor: '#FFF3E0'\n  }];\n  const barWidth = chartConfig.width - chartConfig.padding.left - chartConfig.padding.right;\n  const barHeight = 35;\n  const barSpacing = 25;\n  const startY = chartConfig.padding.top + 60;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `exercise-bar-chart-container ${isExpanded ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Exercise Goals Progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"chart-subtitle\",\n      children: nav.getCurrentMonthYear()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      viewBox: `0 0 ${chartConfig.width} ${chartConfig.height}`,\n      className: \"exercise-bar-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"background-grid\",\n        children: [0, 25, 50, 75, 100].map(percentage => {\n          const x = chartConfig.padding.left + percentage / 100 * barWidth;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: x,\n            y1: chartConfig.padding.top,\n            x2: x,\n            y2: chartConfig.height - chartConfig.padding.bottom,\n            stroke: \"var(--chart-color-grid)\",\n            strokeWidth: \"1\",\n            strokeDasharray: \"2,2\",\n            opacity: \"0.3\"\n          }, percentage, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"percentage-labels\",\n        children: [0, 25, 50, 75, 100].map(percentage => {\n          const x = chartConfig.padding.left + percentage / 100 * barWidth;\n          return /*#__PURE__*/_jsxDEV(\"text\", {\n            x: x,\n            y: chartConfig.padding.top - 10,\n            textAnchor: \"middle\",\n            fontSize: \"10\",\n            fill: \"var(--chart-color-text-secondary)\",\n            className: \"percentage-label\",\n            children: [percentage, \"%\"]\n          }, percentage, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"exercise-bars\",\n        children: exerciseCategories.map((category, index) => {\n          const y = startY + index * (barHeight + barSpacing);\n          const barFillWidth = category.percentage / 100 * barWidth;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"category-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n              x: chartConfig.padding.left,\n              y: y,\n              width: barWidth,\n              height: barHeight,\n              fill: category.lightColor,\n              stroke: category.color,\n              strokeWidth: \"1\",\n              rx: \"4\",\n              ry: \"4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n              x: chartConfig.padding.left,\n              y: y,\n              width: barFillWidth,\n              height: barHeight,\n              fill: category.color,\n              opacity: 0.7,\n              rx: \"4\",\n              ry: \"4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: chartConfig.padding.left - 10,\n              y: y + barHeight / 2 + 4,\n              textAnchor: \"end\",\n              fontSize: \"12\",\n              fill: \"var(--chart-color-text-primary)\",\n              className: \"category-label\",\n              children: category.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: chartConfig.padding.left + barWidth + 15,\n              y: y + barHeight / 2 - 2,\n              textAnchor: \"start\",\n              fontSize: \"11\",\n              fill: \"var(--chart-color-text-primary)\",\n              className: \"progress-text\",\n              children: [category.current, \" (\", Math.round(category.percentage), \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: chartConfig.padding.left + barWidth + 15,\n              y: y + barHeight / 2 + 12,\n              textAnchor: \"start\",\n              fontSize: \"10\",\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"goal-text\",\n              children: [\"Goal: \", category.goal]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this)]\n          }, category.key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), viewMode === 'physician' && /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"summary-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"text\", {\n          x: chartConfig.padding.left,\n          y: startY + exerciseCategories.length * (barHeight + barSpacing) + 40,\n          fontSize: \"12\",\n          fill: \"var(--chart-color-text-primary)\",\n          className: \"summary-title\",\n          children: \"Weekly Summary:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: chartConfig.padding.left,\n          y: startY + exerciseCategories.length * (barHeight + barSpacing) + 60,\n          fontSize: \"11\",\n          fill: \"var(--chart-color-text-secondary)\",\n          className: \"summary-text\",\n          children: [\"\\u2022 Aerobic: \", Math.round(exerciseProgress.aerobic.minutes), \"/150 minutes (\", exerciseProgress.aerobic.sessions, \" days)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: chartConfig.padding.left,\n          y: startY + exerciseCategories.length * (barHeight + barSpacing) + 80,\n          fontSize: \"11\",\n          fill: \"var(--chart-color-text-secondary)\",\n          className: \"summary-text\",\n          children: [\"\\u2022 Strength: \", exerciseProgress.strength.sessions, \"/2+ sessions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: chartConfig.padding.left,\n          y: startY + exerciseCategories.length * (barHeight + barSpacing) + 100,\n          fontSize: \"11\",\n          fill: \"var(--chart-color-text-secondary)\",\n          className: \"summary-text\",\n          children: [\"\\u2022 Flexibility: \", exerciseProgress.flexibility.sessions, \"/1+ sessions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(ExerciseBarChart, \"4elc6i0wJ7yLGIiGiWyNgsJGvpw=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = ExerciseBarChart;\nexport default ExerciseBarChart;\nvar _c;\n$RefreshReg$(_c, \"ExerciseBarChart\");","map":{"version":3,"names":["React","useState","useMemo","useRef","usePatientData","useChartNavigation","createChartConfig","jsxDEV","_jsxDEV","ExerciseBarChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","chartConfig","width","height","padding","top","right","bottom","left","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","exerciseProgress","length","aerobic","minutes","percentage","sessions","strength","flexibility","aerobicMinutes","reduce","total","day","Number","walking","swimming","running","biking","strengthSessions","flexibilitySessions","aerobicPercentage","Math","min","strengthPercentage","flexibilityPercentage","exerciseCategories","key","label","goal","current","round","color","lightColor","barWidth","barHeight","barSpacing","startY","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getCurrentMonthYear","viewBox","map","x","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","opacity","y","textAnchor","fontSize","fill","category","index","barFillWidth","rx","ry","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExerciseBarChart.js"],"sourcesContent":["/**\r\n * ExerciseBarChart.js - Exercise Goals Progress Visualization for Physician View\r\n * \r\n * This component provides a simple bar chart showing exercise goal completion:\r\n * - Three exercise categories: Aerobic, Strength, and Flexibility/Balance\r\n * - Percentage completion based on weekly goals\r\n * - Color-coded bars with shades representing progress\r\n * - Goals: 150 min aerobic/week, 2+ strength sessions/week, 1+ flexibility session/week\r\n * \r\n * Architecture:\r\n * - Uses custom SVG for bar chart visualization\r\n * - Implements goal-based percentage calculations\r\n * - Provides color-coded progress indicators\r\n * - Supports expandable views\r\n * - Implements time-based navigation and data filtering\r\n * \r\n * Visualization Features:\r\n * - Three horizontal bars showing category progress\r\n * - Color-coded completion percentages\r\n * - Goal targets and current progress display\r\n * - Design adapting to container size\r\n * - Dynamic scaling based on data range\r\n * \r\n * Exercise Categories:\r\n * - Aerobic: Walking, swimming, running, biking (150 min/week goal)\r\n * - Strength: Resistance/weights training (2+ sessions/week goal)\r\n * - Flexibility/Balance: Balance/stretching activities (1+ session/week goal)\r\n * \r\n * Component Structure:\r\n * - Chart Container: Main SVG container with sizing\r\n * - Category Bars: Horizontal progress bars with color coding\r\n * - Labels: Category names and percentage completion\r\n * - Goals: Target values and current progress display\r\n * \r\n * Essential for physician exercise monitoring and goal tracking.\r\n */\r\n\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport './ExerciseBarChart.css';\r\n\r\nconst ExerciseBarChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('exercise');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  // Simple configuration for bar chart\r\n  const chartConfig = {\r\n    width: isExpanded ? 700 : 450,\r\n    height: isExpanded ? 500 : 350,\r\n    padding: { top: 60, right: 40, bottom: 80, left: 60 }\r\n  };\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\r\n  });\r\n\r\n  // Calculate exercise progress for each category\r\n  const exerciseProgress = useMemo(() => {\r\n    if (!weekData.length) {\r\n      return {\r\n        aerobic: { minutes: 0, percentage: 0, sessions: 0 },\r\n        strength: { sessions: 0, percentage: 0 },\r\n        flexibility: { sessions: 0, percentage: 0 }\r\n      };\r\n    }\r\n\r\n    // Calculate aerobic minutes (walking, swimming, running, biking)\r\n    const aerobicMinutes = weekData.reduce((total, day) => {\r\n      return total + (Number(day.walking) || 0) + (Number(day.swimming) || 0) + \r\n             (Number(day.running) || 0) + (Number(day.biking) || 0);\r\n    }, 0);\r\n\r\n    // Calculate strength sessions (resistance/weights)\r\n    const strengthSessions = weekData.filter(day => (Number(day['resistance/weights']) || 0) > 0).length;\r\n\r\n    // Calculate flexibility sessions (balance/stretching)\r\n    const flexibilitySessions = weekData.filter(day => (Number(day['balance/stretching']) || 0) > 0).length;\r\n\r\n    // Calculate percentages\r\n    const aerobicPercentage = Math.min(100, (aerobicMinutes / 150) * 100);\r\n    const strengthPercentage = Math.min(100, (strengthSessions / 2) * 100);\r\n    const flexibilityPercentage = Math.min(100, (flexibilitySessions / 1) * 100);\r\n\r\n    return {\r\n      aerobic: { \r\n        minutes: aerobicMinutes, \r\n        percentage: aerobicPercentage, \r\n        sessions: weekData.filter(day => \r\n          (Number(day.walking) || 0) + (Number(day.swimming) || 0) + \r\n          (Number(day.running) || 0) + (Number(day.biking) || 0) > 0\r\n        ).length\r\n      },\r\n      strength: { \r\n        sessions: strengthSessions, \r\n        percentage: strengthPercentage \r\n      },\r\n      flexibility: { \r\n        sessions: flexibilitySessions, \r\n        percentage: flexibilityPercentage \r\n      }\r\n    };\r\n  }, [weekData]);\r\n\r\n  // Define exercise categories with goals and colors\r\n  const exerciseCategories = [\r\n    {\r\n      key: 'aerobic',\r\n      label: 'Aerobic Activity',\r\n      goal: '150 min/week',\r\n      current: `${Math.round(exerciseProgress.aerobic.minutes)} min`,\r\n      percentage: exerciseProgress.aerobic.percentage,\r\n      color: '#4CAF50', // Green\r\n      lightColor: '#E8F5E8'\r\n    },\r\n    {\r\n      key: 'strength',\r\n      label: 'Strength Training',\r\n      goal: '2+ sessions/week',\r\n      current: `${exerciseProgress.strength.sessions} sessions`,\r\n      percentage: exerciseProgress.strength.percentage,\r\n      color: '#2196F3', // Blue\r\n      lightColor: '#E3F2FD'\r\n    },\r\n    {\r\n      key: 'flexibility',\r\n      label: 'Flexibility/Balance',\r\n      goal: '1+ session/week',\r\n      current: `${exerciseProgress.flexibility.sessions} sessions`,\r\n      percentage: exerciseProgress.flexibility.percentage,\r\n      color: '#FF9800', // Orange\r\n      lightColor: '#FFF3E0'\r\n    }\r\n  ];\r\n\r\n  const barWidth = chartConfig.width - chartConfig.padding.left - chartConfig.padding.right;\r\n  const barHeight = 35;\r\n  const barSpacing = 25;\r\n  const startY = chartConfig.padding.top + 60;\r\n\r\n  return (\r\n    <div className={`exercise-bar-chart-container ${isExpanded ? 'expanded' : ''}`}>\r\n      <h3 className=\"chart-title\">Exercise Goals Progress</h3>\r\n      <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n      \r\n      <svg \r\n        width=\"100%\" \r\n        viewBox={`0 0 ${chartConfig.width} ${chartConfig.height}`}\r\n        className=\"exercise-bar-svg\"\r\n      >\r\n        {/* Background grid */}\r\n        <g className=\"background-grid\">\r\n          {[0, 25, 50, 75, 100].map(percentage => {\r\n            const x = chartConfig.padding.left + (percentage / 100) * barWidth;\r\n            return (\r\n              <line\r\n                key={percentage}\r\n                x1={x}\r\n                y1={chartConfig.padding.top}\r\n                x2={x}\r\n                y2={chartConfig.height - chartConfig.padding.bottom}\r\n                stroke=\"var(--chart-color-grid)\"\r\n                strokeWidth=\"1\"\r\n                strokeDasharray=\"2,2\"\r\n                opacity=\"0.3\"\r\n              />\r\n            );\r\n          })}\r\n        </g>\r\n\r\n        {/* Percentage labels */}\r\n        <g className=\"percentage-labels\">\r\n          {[0, 25, 50, 75, 100].map(percentage => {\r\n            const x = chartConfig.padding.left + (percentage / 100) * barWidth;\r\n            return (\r\n              <text\r\n                key={percentage}\r\n                x={x}\r\n                y={chartConfig.padding.top - 10}\r\n                textAnchor=\"middle\"\r\n                fontSize=\"10\"\r\n                fill=\"var(--chart-color-text-secondary)\"\r\n                className=\"percentage-label\"\r\n              >\r\n                {percentage}%\r\n              </text>\r\n            );\r\n          })}\r\n        </g>\r\n\r\n        {/* Exercise category bars */}\r\n        <g className=\"exercise-bars\">\r\n          {exerciseCategories.map((category, index) => {\r\n            const y = startY + index * (barHeight + barSpacing);\r\n            const barFillWidth = (category.percentage / 100) * barWidth;\r\n            \r\n            return (\r\n              <g key={category.key} className=\"category-group\">\r\n                {/* Background bar */}\r\n                <rect\r\n                  x={chartConfig.padding.left}\r\n                  y={y}\r\n                  width={barWidth}\r\n                  height={barHeight}\r\n                  fill={category.lightColor}\r\n                  stroke={category.color}\r\n                  strokeWidth=\"1\"\r\n                  rx=\"4\"\r\n                  ry=\"4\"\r\n                />\r\n                \r\n                {/* Progress bar */}\r\n                <rect\r\n                  x={chartConfig.padding.left}\r\n                  y={y}\r\n                  width={barFillWidth}\r\n                  height={barHeight}\r\n                  fill={category.color}\r\n                  opacity={0.7}\r\n                  rx=\"4\"\r\n                  ry=\"4\"\r\n                />\r\n                \r\n                {/* Category label */}\r\n                <text\r\n                  x={chartConfig.padding.left - 10}\r\n                  y={y + barHeight / 2 + 4}\r\n                  textAnchor=\"end\"\r\n                  fontSize=\"12\"\r\n                  fill=\"var(--chart-color-text-primary)\"\r\n                  className=\"category-label\"\r\n                >\r\n                  {category.label}\r\n                </text>\r\n                \r\n                {/* Current progress */}\r\n                <text\r\n                  x={chartConfig.padding.left + barWidth + 15}\r\n                  y={y + barHeight / 2 - 2}\r\n                  textAnchor=\"start\"\r\n                  fontSize=\"11\"\r\n                  fill=\"var(--chart-color-text-primary)\"\r\n                  className=\"progress-text\"\r\n                >\r\n                  {category.current} ({Math.round(category.percentage)}%)\r\n                </text>\r\n                \r\n                {/* Goal target */}\r\n                <text\r\n                  x={chartConfig.padding.left + barWidth + 15}\r\n                  y={y + barHeight / 2 + 12}\r\n                  textAnchor=\"start\"\r\n                  fontSize=\"10\"\r\n                  fill=\"var(--chart-color-text-secondary)\"\r\n                  className=\"goal-text\"\r\n                >\r\n                  Goal: {category.goal}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n        </g>\r\n\r\n        {/* Summary statistics for physician view */}\r\n        {viewMode === 'physician' && (\r\n          <g className=\"summary-stats\">\r\n            <text\r\n              x={chartConfig.padding.left}\r\n              y={startY + exerciseCategories.length * (barHeight + barSpacing) + 40}\r\n              fontSize=\"12\"\r\n              fill=\"var(--chart-color-text-primary)\"\r\n              className=\"summary-title\"\r\n            >\r\n              Weekly Summary:\r\n            </text>\r\n            \r\n            <text\r\n              x={chartConfig.padding.left}\r\n              y={startY + exerciseCategories.length * (barHeight + barSpacing) + 60}\r\n              fontSize=\"11\"\r\n              fill=\"var(--chart-color-text-secondary)\"\r\n              className=\"summary-text\"\r\n            >\r\n              • Aerobic: {Math.round(exerciseProgress.aerobic.minutes)}/150 minutes ({exerciseProgress.aerobic.sessions} days)\r\n            </text>\r\n            \r\n            <text\r\n              x={chartConfig.padding.left}\r\n              y={startY + exerciseCategories.length * (barHeight + barSpacing) + 80}\r\n              fontSize=\"11\"\r\n              fill=\"var(--chart-color-text-secondary)\"\r\n              className=\"summary-text\"\r\n            >\r\n              • Strength: {exerciseProgress.strength.sessions}/2+ sessions\r\n            </text>\r\n            \r\n            <text\r\n              x={chartConfig.padding.left}\r\n              y={startY + exerciseCategories.length * (barHeight + barSpacing) + 100}\r\n              fontSize=\"11\"\r\n              fill=\"var(--chart-color-text-secondary)\"\r\n              className=\"summary-text\"\r\n            >\r\n              • Flexibility: {exerciseProgress.flexibility.sessions}/1+ sessions\r\n            </text>\r\n          </g>\r\n        )}\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExerciseBarChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}