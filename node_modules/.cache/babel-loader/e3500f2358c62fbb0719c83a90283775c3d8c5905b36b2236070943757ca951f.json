{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\PhysicianDashboard.js\",\n  _s = $RefreshSig$();\n/**\n * PhysicianDashboard.js - Physician View Dashboard Component\n * \n * This component renders the physician-focused dashboard view with:\n * - Clinical overview optimized for healthcare providers\n * - Patient information card with medical context\n * - Chart expansion capabilities for detailed review\n * - Support for clinical notes and observations\n * - Chart navigation controls for time period switching\n * \n * Designed for physicians to monitor multiple health metrics simultaneously.\n */\n\nimport React, { useState } from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PhysicianDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhysicianDashboard = ({\n  patientId: initialPatientId\n}) => {\n  _s();\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\n  const {\n    data,\n    loading,\n    error\n  } = usePatientData(selectedPatientId);\n\n  // Update selected patient if prop changes\n  React.useEffect(() => {\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\n      setSelectedPatientId(initialPatientId);\n    }\n  }, [initialPatientId, selectedPatientId]);\n  const {\n    allVisualizations,\n    availableVisualizations,\n    selectedVisualizations,\n    handleVisualizationChange\n  } = useVisualizations('physician', data);\n  const {\n    expandedItem,\n    handleExpand,\n    renderVisualization\n  } = useVisualizationHelpers(selectedPatientId, allVisualizations, selectedVisualizations);\n\n  // Create universal navigation for each chart type\n  const glucoseNavigation = useChartNavigation('glucose');\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\n  const exerciseNavigation = useChartNavigation('exercise');\n  const sleepNavigation = useChartNavigation('sleep');\n  const painNavigation = useChartNavigation('pain');\n  const moodNavigation = useChartNavigation('mood');\n  const mealContentsNavigation = useChartNavigation('mealContents');\n  const chartNavigation = {\n    glucose: glucoseNavigation,\n    bloodPressure: bloodPressureNavigation,\n    exercise: exerciseNavigation,\n    sleep: sleepNavigation,\n    pain: painNavigation,\n    mood: moodNavigation,\n    mealContents: mealContentsNavigation\n  };\n\n  // Override renderVisualization to set correct viewMode and handle no patient case\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-placeholder\",\n        children: \"Please select a patient to view data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 14\n      }, this);\n    }\n    const viz = allVisualizations[visualizationType];\n    if (!viz) return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-placeholder\",\n      children: \"Invalid visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 22\n    }, this);\n    const Component = viz.component;\n    const isExpanded = expandedItem === windowId;\n    const navigation = chartNavigation[visualizationType];\n    return /*#__PURE__*/_jsxDEV(Component, {\n      patientId: selectedPatientId,\n      viewMode: \"physician\",\n      isExpanded: isExpanded,\n      onExpand: () => handleExpand(windowId),\n      navigation: navigation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }, this);\n  };\n  const patientInfo = data === null || data === void 0 ? void 0 : data.patientInfo;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"physician-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"physician-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Physician Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), selectedPatientId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(PatientInfoCard, {\n        patientInfo: patientInfo,\n        loading: loading,\n        error: error,\n        variant: \"physician\",\n        className: \"patient-info-card-physician\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DashboardGrid, {\n        viewMode: \"physician\",\n        selectedVisualizations: selectedVisualizations,\n        availableVisualizations: availableVisualizations,\n        allVisualizations: allVisualizations,\n        onVisualizationChange: handleVisualizationChange,\n        onExpand: handleExpand,\n        expandedItem: expandedItem,\n        renderVisualization: renderVisualizationWithMode,\n        chartNavigation: chartNavigation,\n        disabled: Object.keys(availableVisualizations).length === 0,\n        placeholderText: \"No data available for this patient.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(PhysicianDashboard, \"PIwsw4pjSiexLQQiR1k2uPXLxas=\", false, function () {\n  return [usePatientData, useVisualizations, useVisualizationHelpers, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation, useChartNavigation];\n});\n_c = PhysicianDashboard;\nexport default PhysicianDashboard;\nvar _c;\n$RefreshReg$(_c, \"PhysicianDashboard\");","map":{"version":3,"names":["React","useState","usePatientData","useVisualizations","useVisualizationHelpers","useChartNavigation","PatientInfoCard","DashboardGrid","jsxDEV","_jsxDEV","PhysicianDashboard","patientId","initialPatientId","_s","selectedPatientId","setSelectedPatientId","data","loading","error","useEffect","allVisualizations","availableVisualizations","selectedVisualizations","handleVisualizationChange","expandedItem","handleExpand","renderVisualization","glucoseNavigation","bloodPressureNavigation","exerciseNavigation","sleepNavigation","painNavigation","moodNavigation","mealContentsNavigation","chartNavigation","glucose","bloodPressure","exercise","sleep","pain","mood","mealContents","renderVisualizationWithMode","visualizationType","windowId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viz","Component","component","isExpanded","navigation","viewMode","onExpand","patientInfo","variant","onVisualizationChange","disabled","Object","keys","length","placeholderText","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/PhysicianDashboard.js"],"sourcesContent":["/**\n * PhysicianDashboard.js - Physician View Dashboard Component\n * \n * This component renders the physician-focused dashboard view with:\n * - Clinical overview optimized for healthcare providers\n * - Patient information card with medical context\n * - Chart expansion capabilities for detailed review\n * - Support for clinical notes and observations\n * - Chart navigation controls for time period switching\n * \n * Designed for physicians to monitor multiple health metrics simultaneously.\n */\n\nimport React, { useState } from 'react';\nimport usePatientData from './hooks/usePatientData';\nimport useVisualizations from './hooks/useVisualizations';\nimport useVisualizationHelpers from './hooks/useVisualizationHelpers';\nimport useChartNavigation from './hooks/useChartNavigation';\nimport PatientInfoCard from './components/PatientInfoCard';\nimport DashboardGrid from './components/DashboardGrid';\nimport './PhysicianDashboard.css';\n\nconst PhysicianDashboard = ({ patientId: initialPatientId }) => {\n  const [selectedPatientId, setSelectedPatientId] = useState(initialPatientId || '');\n  const { data, loading, error } = usePatientData(selectedPatientId);\n  \n  // Update selected patient if prop changes\n  React.useEffect(() => {\n    if (initialPatientId && initialPatientId !== selectedPatientId) {\n      setSelectedPatientId(initialPatientId);\n    }\n  }, [initialPatientId, selectedPatientId]);\n\n  const { \n    allVisualizations, \n    availableVisualizations, \n    selectedVisualizations, \n    handleVisualizationChange \n  } = useVisualizations('physician', data);\n\n  const { expandedItem, handleExpand, renderVisualization } = useVisualizationHelpers(\n    selectedPatientId, \n    allVisualizations, \n    selectedVisualizations\n  );\n\n  // Create universal navigation for each chart type\n  const glucoseNavigation = useChartNavigation('glucose');\n  const bloodPressureNavigation = useChartNavigation('bloodPressure');\n  const exerciseNavigation = useChartNavigation('exercise');\n  const sleepNavigation = useChartNavigation('sleep');\n  const painNavigation = useChartNavigation('pain');\n  const moodNavigation = useChartNavigation('mood');\n  const mealContentsNavigation = useChartNavigation('mealContents');\n\n  const chartNavigation = {\n    glucose: glucoseNavigation,\n    bloodPressure: bloodPressureNavigation,\n    exercise: exerciseNavigation,\n    sleep: sleepNavigation,\n    pain: painNavigation,\n    mood: moodNavigation,\n    mealContents: mealContentsNavigation\n  };\n\n  // Override renderVisualization to set correct viewMode and handle no patient case\n  const renderVisualizationWithMode = (visualizationType, windowId) => {\n    if (!selectedPatientId) {\n      return <div className=\"chart-placeholder\">Please select a patient to view data.</div>;\n    }\n    \n    const viz = allVisualizations[visualizationType];\n    if (!viz) return <div className=\"chart-placeholder\">Invalid visualization</div>;\n\n    const Component = viz.component;\n    const isExpanded = expandedItem === windowId;\n    const navigation = chartNavigation[visualizationType];\n    \n    return <Component \n      patientId={selectedPatientId} \n      viewMode=\"physician\"\n      isExpanded={isExpanded}\n      onExpand={() => handleExpand(windowId)}\n      navigation={navigation}\n    />;\n  };\n\n  const patientInfo = data?.patientInfo;\n\n  return (\n    <div className=\"physician-dashboard\">\n      <div className=\"physician-header\">\n        <h1>Physician Dashboard</h1>\n      </div>\n\n      {selectedPatientId && (\n        <div className=\"dashboard-content\">\n          <PatientInfoCard \n            patientInfo={patientInfo}\n            loading={loading}\n            error={error}\n            variant=\"physician\"\n            className=\"patient-info-card-physician\"\n          />\n\n          <DashboardGrid\n            viewMode=\"physician\"\n            selectedVisualizations={selectedVisualizations}\n            availableVisualizations={availableVisualizations}\n            allVisualizations={allVisualizations}\n            onVisualizationChange={handleVisualizationChange}\n            onExpand={handleExpand}\n            expandedItem={expandedItem}\n            renderVisualization={renderVisualizationWithMode}\n            chartNavigation={chartNavigation}\n            disabled={Object.keys(availableVisualizations).length === 0}\n            placeholderText=\"No data available for this patient.\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PhysicianDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}