{"ast":null,"code":"import _objectSpread from\"C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n DashboardGrid.js - Chart Grid Layout Component\n \n This component provides a flexible grid layout system for organizing charts by rendering all \n available visualizations in a grid, handling expanded/collapsed chart states, integrating chart \n navigation controls, and providing placeholder states for empty data scenarios.\n \n Acts as the main container for organizing multiple health metric visualizations.\n */import React from'react';import VisualizationWrapper from'./VisualizationWrapper';import Placeholder from'./ui/Placeholder';import'./DashboardGrid.css';/*\n Shared component for rendering dashboard grids with visualization wrappers\n Shows all available visualizations instead of using dropdown selectors\n \n @param {Object} props - Component props\n @param {string} props.viewMode - 'patient' or 'physician'\n @param {Object} props.selectedVisualizations - Currently selected visualizations\n @param {Object} props.availableVisualizations - Available visualizations\n @param {Object} props.allVisualizations - All visualization configurations\n @param {Function} props.onVisualizationChange - Handler for visualization changes\n @param {Function} props.onExpand - Handler for expand/collapse\n @param {string|null} props.expandedItem - Currently expanded item ID\n @param {Function} props.renderVisualization - Function to render visualizations\n @param {boolean} props.disabled - Whether the grid is disabled\n @param {string} props.placeholderText - Text to show when no data is available\n @param {Object} props.chartNavigation - Navigation objects for each chart type\n @param {boolean} props.screenshotMode - Whether in screenshot mode\n @returns {JSX.Element} The dashboard grid component\n */import{jsx as _jsx}from\"react/jsx-runtime\";const DashboardGrid=_ref=>{let{viewMode,// 'patient' or 'physician'\nselectedVisualizations,availableVisualizations,allVisualizations,onVisualizationChange,onExpand,expandedItem,renderVisualization,disabled=false,placeholderText=\"No data available for this patient.\",// Navigation props\nchartNavigation={},// Screenshot mode\nscreenshotMode=false}=_ref;// Configuration for different view modes\nconst gridConfig={patient:{className:'dashboard-grid',chartClassNames:['visualization-box']},physician:{className:'physician-charts-grid',chartClassNames:['physician-chart-container']},unified:{className:'dashboard-grid',chartClassNames:['visualization-box']}};const config=gridConfig[viewMode];// Get all available visualization types\nconst availableVizTypes=Object.keys(availableVisualizations);// If there's an expanded item, show only that\nif(expandedItem){// Extract the visualization type from the chart ID\n// Chart IDs are formatted as \"${viewMode}-chart-${index}\"\nconst chartIdParts=expandedItem.split('-');const chartIndex=parseInt(chartIdParts[chartIdParts.length-1]);const availableVizTypes=Object.keys(availableVisualizations);const selectedViz=availableVizTypes[chartIndex];if(!selectedViz){return/*#__PURE__*/_jsx(\"div\",{className:config.className,children:/*#__PURE__*/_jsx(Placeholder,{message:\"Invalid expanded chart\",type:\"error\"})});}const navigation=chartNavigation[selectedViz];const wrapperProps={id:expandedItem,className:\"\".concat(config.chartClassNames[0],\" expanded-view\"),selectedViz:selectedViz,availableVisualizations:availableVisualizations,allVisualizations:allVisualizations,onVisualizationChange:onVisualizationChange,onExpand:onExpand,isExpanded:true,renderVisualization:renderVisualization,disabled:disabled,placeholderText:placeholderText,onPrev:navigation===null||navigation===void 0?void 0:navigation.goToPrevious,onNext:navigation===null||navigation===void 0?void 0:navigation.goToNext,navigationLabel:(navigation===null||navigation===void 0?void 0:navigation.navigationLabel)||'Week',screenshotMode:screenshotMode};return/*#__PURE__*/_jsx(VisualizationWrapper,_objectSpread({},wrapperProps));}// If no visualizations available, show placeholder\nif(availableVizTypes.length===0){return/*#__PURE__*/_jsx(\"div\",{className:config.className,children:/*#__PURE__*/_jsx(Placeholder,{message:placeholderText,type:\"no-data\"})});}// Render all available visualizations\nreturn/*#__PURE__*/_jsx(\"div\",{className:config.className,children:availableVizTypes.map((vizType,index)=>{const chartId=\"\".concat(viewMode,\"-chart-\").concat(index);const navigation=chartNavigation[vizType];const wrapperProps={key:chartId,id:chartId,className:\"\".concat(config.chartClassNames[0],\" \").concat(config.chartClassNames[0],\"-\").concat(index+1),selectedViz:vizType,availableVisualizations:availableVisualizations,allVisualizations:allVisualizations,onVisualizationChange:onVisualizationChange,onExpand:onExpand,isExpanded:expandedItem===chartId,renderVisualization:renderVisualization,disabled:disabled,placeholderText:placeholderText,onPrev:navigation===null||navigation===void 0?void 0:navigation.goToPrevious,onNext:navigation===null||navigation===void 0?void 0:navigation.goToNext,navigationLabel:(navigation===null||navigation===void 0?void 0:navigation.navigationLabel)||'Week',screenshotMode:screenshotMode};return/*#__PURE__*/_jsx(VisualizationWrapper,_objectSpread({},wrapperProps));})});};export default DashboardGrid;","map":{"version":3,"names":["React","VisualizationWrapper","Placeholder","jsx","_jsx","DashboardGrid","_ref","viewMode","selectedVisualizations","availableVisualizations","allVisualizations","onVisualizationChange","onExpand","expandedItem","renderVisualization","disabled","placeholderText","chartNavigation","screenshotMode","gridConfig","patient","className","chartClassNames","physician","unified","config","availableVizTypes","Object","keys","chartIdParts","split","chartIndex","parseInt","length","selectedViz","children","message","type","navigation","wrapperProps","id","concat","isExpanded","onPrev","goToPrevious","onNext","goToNext","navigationLabel","_objectSpread","map","vizType","index","chartId","key"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/components/DashboardGrid.js"],"sourcesContent":["/**\n DashboardGrid.js - Chart Grid Layout Component\n \n This component provides a flexible grid layout system for organizing charts by rendering all \n available visualizations in a grid, handling expanded/collapsed chart states, integrating chart \n navigation controls, and providing placeholder states for empty data scenarios.\n \n Acts as the main container for organizing multiple health metric visualizations.\n */\n\nimport React from 'react';\nimport VisualizationWrapper from './VisualizationWrapper';\nimport Placeholder from './ui/Placeholder';\nimport './DashboardGrid.css';\n\n/*\n Shared component for rendering dashboard grids with visualization wrappers\n Shows all available visualizations instead of using dropdown selectors\n \n @param {Object} props - Component props\n @param {string} props.viewMode - 'patient' or 'physician'\n @param {Object} props.selectedVisualizations - Currently selected visualizations\n @param {Object} props.availableVisualizations - Available visualizations\n @param {Object} props.allVisualizations - All visualization configurations\n @param {Function} props.onVisualizationChange - Handler for visualization changes\n @param {Function} props.onExpand - Handler for expand/collapse\n @param {string|null} props.expandedItem - Currently expanded item ID\n @param {Function} props.renderVisualization - Function to render visualizations\n @param {boolean} props.disabled - Whether the grid is disabled\n @param {string} props.placeholderText - Text to show when no data is available\n @param {Object} props.chartNavigation - Navigation objects for each chart type\n @param {boolean} props.screenshotMode - Whether in screenshot mode\n @returns {JSX.Element} The dashboard grid component\n */\nconst DashboardGrid = ({\n  viewMode, // 'patient' or 'physician'\n  selectedVisualizations,\n  availableVisualizations,\n  allVisualizations,\n  onVisualizationChange,\n  onExpand,\n  expandedItem,\n  renderVisualization,\n  disabled = false,\n  placeholderText = \"No data available for this patient.\",\n  // Navigation props\n  chartNavigation = {},\n  // Screenshot mode\n  screenshotMode = false\n}) => {\n  // Configuration for different view modes\n  const gridConfig = {\n    patient: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    },\n    physician: {\n      className: 'physician-charts-grid',\n      chartClassNames: ['physician-chart-container']\n    },\n    unified: {\n      className: 'dashboard-grid',\n      chartClassNames: ['visualization-box']\n    }\n  };\n\n  const config = gridConfig[viewMode];\n\n  // Get all available visualization types\n  const availableVizTypes = Object.keys(availableVisualizations);\n\n  // If there's an expanded item, show only that\n  if (expandedItem) {\n    // Extract the visualization type from the chart ID\n    // Chart IDs are formatted as \"${viewMode}-chart-${index}\"\n    const chartIdParts = expandedItem.split('-');\n    const chartIndex = parseInt(chartIdParts[chartIdParts.length - 1]);\n    const availableVizTypes = Object.keys(availableVisualizations);\n    const selectedViz = availableVizTypes[chartIndex];\n    \n    if (!selectedViz) {\n      return (\n        <div className={config.className}>\n          <Placeholder message=\"Invalid expanded chart\" type=\"error\" />\n        </div>\n      );\n    }\n    \n    const navigation = chartNavigation[selectedViz];\n    \n    const wrapperProps = {\n      id: expandedItem,\n      className: `${config.chartClassNames[0]} expanded-view`,\n      selectedViz: selectedViz,\n      availableVisualizations: availableVisualizations,\n      allVisualizations: allVisualizations,\n      onVisualizationChange: onVisualizationChange,\n      onExpand: onExpand,\n      isExpanded: true,\n      renderVisualization: renderVisualization,\n      disabled: disabled,\n      placeholderText: placeholderText,\n      onPrev: navigation?.goToPrevious,\n      onNext: navigation?.goToNext,\n      navigationLabel: navigation?.navigationLabel || 'Week',\n      screenshotMode: screenshotMode\n    };\n\n    return <VisualizationWrapper {...wrapperProps} />;\n  }\n\n  // If no visualizations available, show placeholder\n  if (availableVizTypes.length === 0) {\n    return (\n      <div className={config.className}>\n        <Placeholder message={placeholderText} type=\"no-data\" />\n      </div>\n    );\n  }\n\n  // Render all available visualizations\n  return (\n    <div className={config.className}>\n      {availableVizTypes.map((vizType, index) => {\n        const chartId = `${viewMode}-chart-${index}`;\n        \n        const navigation = chartNavigation[vizType];\n        const wrapperProps = {\n          key: chartId,\n          id: chartId,\n          className: `${config.chartClassNames[0]} ${config.chartClassNames[0]}-${index + 1}`,\n          selectedViz: vizType,\n          availableVisualizations: availableVisualizations,\n          allVisualizations: allVisualizations,\n          onVisualizationChange: onVisualizationChange,\n          onExpand: onExpand,\n          isExpanded: expandedItem === chartId,\n          renderVisualization: renderVisualization,\n          disabled: disabled,\n          placeholderText: placeholderText,\n          onPrev: navigation?.goToPrevious,\n          onNext: navigation?.goToNext,\n          navigationLabel: navigation?.navigationLabel || 'Week',\n          screenshotMode: screenshotMode\n        };\n\n        return <VisualizationWrapper {...wrapperProps} />;\n      })}\n    </div>\n  );\n};\n\nexport default DashboardGrid;\n"],"mappings":"iLAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,oBAAoB,KAAM,wBAAwB,CACzD,MAAO,CAAAC,WAAW,KAAM,kBAAkB,CAC1C,MAAO,qBAAqB,CAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAlBA,OAAAC,GAAA,IAAAC,IAAA,yBAmBA,KAAM,CAAAC,aAAa,CAAGC,IAAA,EAehB,IAfiB,CACrBC,QAAQ,CAAE;AACVC,sBAAsB,CACtBC,uBAAuB,CACvBC,iBAAiB,CACjBC,qBAAqB,CACrBC,QAAQ,CACRC,YAAY,CACZC,mBAAmB,CACnBC,QAAQ,CAAG,KAAK,CAChBC,eAAe,CAAG,qCAAqC,CACvD;AACAC,eAAe,CAAG,CAAC,CAAC,CACpB;AACAC,cAAc,CAAG,KACnB,CAAC,CAAAZ,IAAA,CACC;AACA,KAAM,CAAAa,UAAU,CAAG,CACjBC,OAAO,CAAE,CACPC,SAAS,CAAE,gBAAgB,CAC3BC,eAAe,CAAE,CAAC,mBAAmB,CACvC,CAAC,CACDC,SAAS,CAAE,CACTF,SAAS,CAAE,uBAAuB,CAClCC,eAAe,CAAE,CAAC,2BAA2B,CAC/C,CAAC,CACDE,OAAO,CAAE,CACPH,SAAS,CAAE,gBAAgB,CAC3BC,eAAe,CAAE,CAAC,mBAAmB,CACvC,CACF,CAAC,CAED,KAAM,CAAAG,MAAM,CAAGN,UAAU,CAACZ,QAAQ,CAAC,CAEnC;AACA,KAAM,CAAAmB,iBAAiB,CAAGC,MAAM,CAACC,IAAI,CAACnB,uBAAuB,CAAC,CAE9D;AACA,GAAII,YAAY,CAAE,CAChB;AACA;AACA,KAAM,CAAAgB,YAAY,CAAGhB,YAAY,CAACiB,KAAK,CAAC,GAAG,CAAC,CAC5C,KAAM,CAAAC,UAAU,CAAGC,QAAQ,CAACH,YAAY,CAACA,YAAY,CAACI,MAAM,CAAG,CAAC,CAAC,CAAC,CAClE,KAAM,CAAAP,iBAAiB,CAAGC,MAAM,CAACC,IAAI,CAACnB,uBAAuB,CAAC,CAC9D,KAAM,CAAAyB,WAAW,CAAGR,iBAAiB,CAACK,UAAU,CAAC,CAEjD,GAAI,CAACG,WAAW,CAAE,CAChB,mBACE9B,IAAA,QAAKiB,SAAS,CAAEI,MAAM,CAACJ,SAAU,CAAAc,QAAA,cAC/B/B,IAAA,CAACF,WAAW,EAACkC,OAAO,CAAC,wBAAwB,CAACC,IAAI,CAAC,OAAO,CAAE,CAAC,CAC1D,CAAC,CAEV,CAEA,KAAM,CAAAC,UAAU,CAAGrB,eAAe,CAACiB,WAAW,CAAC,CAE/C,KAAM,CAAAK,YAAY,CAAG,CACnBC,EAAE,CAAE3B,YAAY,CAChBQ,SAAS,IAAAoB,MAAA,CAAKhB,MAAM,CAACH,eAAe,CAAC,CAAC,CAAC,kBAAgB,CACvDY,WAAW,CAAEA,WAAW,CACxBzB,uBAAuB,CAAEA,uBAAuB,CAChDC,iBAAiB,CAAEA,iBAAiB,CACpCC,qBAAqB,CAAEA,qBAAqB,CAC5CC,QAAQ,CAAEA,QAAQ,CAClB8B,UAAU,CAAE,IAAI,CAChB5B,mBAAmB,CAAEA,mBAAmB,CACxCC,QAAQ,CAAEA,QAAQ,CAClBC,eAAe,CAAEA,eAAe,CAChC2B,MAAM,CAAEL,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEM,YAAY,CAChCC,MAAM,CAAEP,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEQ,QAAQ,CAC5BC,eAAe,CAAE,CAAAT,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAES,eAAe,GAAI,MAAM,CACtD7B,cAAc,CAAEA,cAClB,CAAC,CAED,mBAAOd,IAAA,CAACH,oBAAoB,CAAA+C,aAAA,IAAKT,YAAY,CAAG,CAAC,CACnD,CAEA;AACA,GAAIb,iBAAiB,CAACO,MAAM,GAAK,CAAC,CAAE,CAClC,mBACE7B,IAAA,QAAKiB,SAAS,CAAEI,MAAM,CAACJ,SAAU,CAAAc,QAAA,cAC/B/B,IAAA,CAACF,WAAW,EAACkC,OAAO,CAAEpB,eAAgB,CAACqB,IAAI,CAAC,SAAS,CAAE,CAAC,CACrD,CAAC,CAEV,CAEA;AACA,mBACEjC,IAAA,QAAKiB,SAAS,CAAEI,MAAM,CAACJ,SAAU,CAAAc,QAAA,CAC9BT,iBAAiB,CAACuB,GAAG,CAAC,CAACC,OAAO,CAAEC,KAAK,GAAK,CACzC,KAAM,CAAAC,OAAO,IAAAX,MAAA,CAAMlC,QAAQ,YAAAkC,MAAA,CAAUU,KAAK,CAAE,CAE5C,KAAM,CAAAb,UAAU,CAAGrB,eAAe,CAACiC,OAAO,CAAC,CAC3C,KAAM,CAAAX,YAAY,CAAG,CACnBc,GAAG,CAAED,OAAO,CACZZ,EAAE,CAAEY,OAAO,CACX/B,SAAS,IAAAoB,MAAA,CAAKhB,MAAM,CAACH,eAAe,CAAC,CAAC,CAAC,MAAAmB,MAAA,CAAIhB,MAAM,CAACH,eAAe,CAAC,CAAC,CAAC,MAAAmB,MAAA,CAAIU,KAAK,CAAG,CAAC,CAAE,CACnFjB,WAAW,CAAEgB,OAAO,CACpBzC,uBAAuB,CAAEA,uBAAuB,CAChDC,iBAAiB,CAAEA,iBAAiB,CACpCC,qBAAqB,CAAEA,qBAAqB,CAC5CC,QAAQ,CAAEA,QAAQ,CAClB8B,UAAU,CAAE7B,YAAY,GAAKuC,OAAO,CACpCtC,mBAAmB,CAAEA,mBAAmB,CACxCC,QAAQ,CAAEA,QAAQ,CAClBC,eAAe,CAAEA,eAAe,CAChC2B,MAAM,CAAEL,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEM,YAAY,CAChCC,MAAM,CAAEP,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEQ,QAAQ,CAC5BC,eAAe,CAAE,CAAAT,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAES,eAAe,GAAI,MAAM,CACtD7B,cAAc,CAAEA,cAClB,CAAC,CAED,mBAAOd,IAAA,CAACH,oBAAoB,CAAA+C,aAAA,IAAKT,YAAY,CAAG,CAAC,CACnD,CAAC,CAAC,CACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAlC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}