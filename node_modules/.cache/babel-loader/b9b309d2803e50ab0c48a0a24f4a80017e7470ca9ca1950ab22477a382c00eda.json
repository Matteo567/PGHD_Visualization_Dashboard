{"ast":null,"code":"var _s = $RefreshSig$();\n// Hook for managing chart navigation (week/month navigation)\nimport { useState } from 'react';\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  // Determine navigation type based on chart type\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\n\n  // Go to previous week or month\n  const goToPrevious = () => {\n    const newDate = new Date(currentDate);\n    if (navigationType === 'month') {\n      newDate.setMonth(newDate.getMonth() - 1);\n    } else {\n      // Subtract 7 days for week navigation\n      newDate.setDate(newDate.getDate() - 7);\n    }\n    setCurrentDate(newDate);\n  };\n\n  // Go to next week or month\n  const goToNext = () => {\n    const newDate = new Date(currentDate);\n    if (navigationType === 'month') {\n      newDate.setMonth(newDate.getMonth() + 1);\n    } else {\n      // Add 7 days for week navigation\n      newDate.setDate(newDate.getDate() + 7);\n    }\n    setCurrentDate(newDate);\n  };\n\n  // Get date range for current period\n  const getDateRange = () => {\n    if (navigationType === 'month') {\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n      return {\n        start: startOfMonth,\n        end: endOfMonth\n      };\n    } else {\n      const startOfWeek = new Date(currentDate);\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      const endOfWeek = new Date(startOfWeek);\n      endOfWeek.setDate(endOfWeek.getDate() + 6);\n      endOfWeek.setHours(23, 59, 59, 999);\n      return {\n        start: startOfWeek,\n        end: endOfWeek\n      };\n    }\n  };\n\n  // Get formatted date range with year (e.g., \"May 1 - 7, 2025\" for weeks or \"May 1 - 31, 2025\" for months)\n  const getFormattedDateRange = () => {\n    const range = getDateRange();\n    const startMonth = range.start.toLocaleDateString('en-US', {\n      month: 'long'\n    });\n    const startDay = range.start.getDate();\n    const endDay = range.end.getDate();\n    const year = range.start.getFullYear();\n\n    // Check if start and end are in the same month\n    if (range.start.getMonth() === range.end.getMonth()) {\n      return `${startMonth} ${startDay} - ${endDay}, ${year}`;\n    } else {\n      // Different months (edge case for weeks spanning month boundaries)\n      const endMonth = range.end.toLocaleDateString('en-US', {\n        month: 'long'\n      });\n      return `${startMonth} ${startDay} - ${endMonth} ${endDay}, ${year}`;\n    }\n  };\n\n  // Get 3-month date range (3 months before current date)\n  const getThreeMonthRange = () => {\n    const endOfThreeMonths = new Date(currentDate);\n    const startOfThreeMonths = new Date(currentDate);\n    startOfThreeMonths.setMonth(startOfThreeMonths.getMonth() - 3);\n\n    // Make sure we don't go before the earliest data date\n    const dataStartDate = new Date(2024, 6, 1);\n    if (startOfThreeMonths < dataStartDate) {\n      startOfThreeMonths.setTime(dataStartDate.getTime());\n    }\n\n    // Make sure we don't go after the latest data date\n    const dataEndDate = new Date(2025, 6, 31);\n    if (endOfThreeMonths > dataEndDate) {\n      endOfThreeMonths.setTime(dataEndDate.getTime());\n    }\n    return {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    };\n  };\n\n  // Get 3-month display string\n  const getThreeMonthDisplay = () => {\n    const range = getThreeMonthRange();\n    const startStr = range.start.toLocaleDateString('en-US', {\n      month: 'short',\n      year: 'numeric'\n    });\n    const endStr = range.end.toLocaleDateString('en-US', {\n      month: 'short',\n      year: 'numeric'\n    });\n    return `${startStr} - ${endStr}`;\n  };\n  return {\n    currentDate,\n    navigationType,\n    navigationLabel,\n    goToPrevious,\n    goToNext,\n    getDateRange,\n    getThreeMonthRange,\n    getThreeMonthDisplay,\n    getFormattedDateRange\n  };\n};\n_s(useChartNavigation, \"7ABt9H5MmU1h6X0+FO8sd1XbO3g=\");\nexport default useChartNavigation;","map":{"version":3,"names":["useState","useChartNavigation","chartType","initialDate","Date","_s","currentDate","setCurrentDate","navigationType","navigationLabel","goToPrevious","newDate","setMonth","getMonth","setDate","getDate","goToNext","getDateRange","startOfMonth","getFullYear","endOfMonth","start","end","startOfWeek","getDay","setHours","endOfWeek","getFormattedDateRange","range","startMonth","toLocaleDateString","month","startDay","endDay","year","endMonth","getThreeMonthRange","endOfThreeMonths","startOfThreeMonths","dataStartDate","setTime","getTime","dataEndDate","getThreeMonthDisplay","startStr","endStr"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local Experimental/PGHD_Visualization_Dashboard/src/hooks/useChartNavigation.js"],"sourcesContent":["// Hook for managing chart navigation (week/month navigation)\nimport { useState } from 'react';\n\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  // Determine navigation type based on chart type\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\n\n  // Go to previous week or month\n  const goToPrevious = () => {\n    const newDate = new Date(currentDate);\n    if (navigationType === 'month') {\n      newDate.setMonth(newDate.getMonth() - 1);\n    } else {\n      // Subtract 7 days for week navigation\n      newDate.setDate(newDate.getDate() - 7);\n    }\n    setCurrentDate(newDate);\n  };\n\n  // Go to next week or month\n  const goToNext = () => {\n    const newDate = new Date(currentDate);\n    if (navigationType === 'month') {\n      newDate.setMonth(newDate.getMonth() + 1);\n    } else {\n      // Add 7 days for week navigation\n      newDate.setDate(newDate.getDate() + 7);\n    }\n    setCurrentDate(newDate);\n  };\n\n  // Get date range for current period\n  const getDateRange = () => {\n    if (navigationType === 'month') {\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n      return { start: startOfMonth, end: endOfMonth };\n    } else {\n      const startOfWeek = new Date(currentDate);\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      \n      const endOfWeek = new Date(startOfWeek);\n      endOfWeek.setDate(endOfWeek.getDate() + 6);\n      endOfWeek.setHours(23, 59, 59, 999);\n      \n      return { start: startOfWeek, end: endOfWeek };\n    }\n  };\n\n  // Get formatted date range with year (e.g., \"May 1 - 7, 2025\" for weeks or \"May 1 - 31, 2025\" for months)\n  const getFormattedDateRange = () => {\n    const range = getDateRange();\n    const startMonth = range.start.toLocaleDateString('en-US', { month: 'long' });\n    const startDay = range.start.getDate();\n    const endDay = range.end.getDate();\n    const year = range.start.getFullYear();\n    \n    // Check if start and end are in the same month\n    if (range.start.getMonth() === range.end.getMonth()) {\n      return `${startMonth} ${startDay} - ${endDay}, ${year}`;\n    } else {\n      // Different months (edge case for weeks spanning month boundaries)\n      const endMonth = range.end.toLocaleDateString('en-US', { month: 'long' });\n      return `${startMonth} ${startDay} - ${endMonth} ${endDay}, ${year}`;\n    }\n  };\n\n  // Get 3-month date range (3 months before current date)\n  const getThreeMonthRange = () => {\n    const endOfThreeMonths = new Date(currentDate);\n    const startOfThreeMonths = new Date(currentDate);\n    startOfThreeMonths.setMonth(startOfThreeMonths.getMonth() - 3);\n    \n    // Make sure we don't go before the earliest data date\n    const dataStartDate = new Date(2024, 6, 1);\n    if (startOfThreeMonths < dataStartDate) {\n      startOfThreeMonths.setTime(dataStartDate.getTime());\n    }\n    \n    // Make sure we don't go after the latest data date\n    const dataEndDate = new Date(2025, 6, 31);\n    if (endOfThreeMonths > dataEndDate) {\n      endOfThreeMonths.setTime(dataEndDate.getTime());\n    }\n    \n    return { start: startOfThreeMonths, end: endOfThreeMonths };\n  };\n\n  // Get 3-month display string\n  const getThreeMonthDisplay = () => {\n    const range = getThreeMonthRange();\n    const startStr = range.start.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    const endStr = range.end.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    return `${startStr} - ${endStr}`;\n  };\n\n  return {\n    currentDate,\n    navigationType,\n    navigationLabel,\n    goToPrevious,\n    goToNext,\n    getDateRange,\n    getThreeMonthRange,\n    getThreeMonthDisplay,\n    getFormattedDateRange\n  };\n};\n\nexport default useChartNavigation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}