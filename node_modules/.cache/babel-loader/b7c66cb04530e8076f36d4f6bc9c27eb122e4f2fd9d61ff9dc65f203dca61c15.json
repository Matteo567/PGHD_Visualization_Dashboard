{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport SimpleDataService from '../services/dataService';\n\n/**\r\n * Custom hook for loading and managing patient health data\r\n * \r\n * This hook handles:\r\n * - Loading patient data from CSV files\r\n * - Error handling with retry functionality\r\n * - Loading states\r\n * - Data caching to avoid unnecessary re-fetches\r\n * \r\n * @param {string} patientId - Patient identifier (e.g., \"Patient_001\")\r\n * @returns {Object} Hook state and functions\r\n */\nfunction usePatientData(patientId) {\n  _s();\n  // State management\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetchedId, setLastFetchedId] = useState(null);\n\n  /**\r\n   * Load data for a specific patient\r\n   * Uses useCallback to prevent unnecessary re-renders\r\n   */\n  const loadPatientData = useCallback(async id => {\n    // Don't reload if we already have data for this patient\n    if (id === lastFetchedId && data && !error) {\n      return;\n    }\n\n    // Validate patient ID\n    if (!id || typeof id !== 'string') {\n      setError('Invalid patient ID provided');\n      setLoading(false);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      console.log(`Loading data for ${id}...`);\n      const patientData = await SimpleDataService.loadPatientData(id);\n\n      // Validate that we got valid data\n      if (!patientData || !patientData.patientInfo) {\n        throw new Error('Invalid data structure received');\n      }\n      setData(patientData);\n      setLastFetchedId(id);\n      console.log(`Successfully loaded data for ${id}`);\n    } catch (err) {\n      console.error(`Failed to load data for ${id}:`, err);\n      setError(err.message || 'Failed to load patient data');\n      setData(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [lastFetchedId, data, error]);\n\n  /**\r\n   * Retry loading data (useful for error recovery)\r\n   */\n  const retry = useCallback(() => {\n    if (patientId) {\n      // Reset the lastFetchedId to force a reload\n      setLastFetchedId(null);\n      loadPatientData(patientId);\n    }\n  }, [patientId, loadPatientData]);\n\n  /**\r\n   * Clear data (useful when switching patients)\r\n   */\n  const clearData = useCallback(() => {\n    setData(null);\n    setError(null);\n    setLastFetchedId(null);\n    setLoading(false);\n  }, []);\n\n  // Load data when patientId changes\n  useEffect(() => {\n    if (patientId) {\n      loadPatientData(patientId);\n    } else {\n      // Clear data if no patient ID provided\n      clearData();\n    }\n  }, [patientId, loadPatientData, clearData]);\n\n  // Return hook state and functions\n  return {\n    // Data\n    data,\n    patientInfo: (data === null || data === void 0 ? void 0 : data.patientInfo) || null,\n    // Individual data types for convenience\n    glucoseData: (data === null || data === void 0 ? void 0 : data.glucoseData) || [],\n    bloodPressureData: (data === null || data === void 0 ? void 0 : data.bloodPressureData) || [],\n    exerciseData: (data === null || data === void 0 ? void 0 : data.exerciseData) || [],\n    moodData: (data === null || data === void 0 ? void 0 : data.moodData) || [],\n    painData: (data === null || data === void 0 ? void 0 : data.painData) || [],\n    sleepData: (data === null || data === void 0 ? void 0 : data.sleepData) || [],\n    mealData: (data === null || data === void 0 ? void 0 : data.mealData) || [],\n    // State\n    loading,\n    error,\n    // Actions\n    retry,\n    clearData,\n    // Helper flags\n    hasData: !!data,\n    isEmpty: !loading && !error && !data,\n    isError: !!error,\n    // Data availability flags\n    hasGlucoseData: ((data === null || data === void 0 ? void 0 : data.glucoseData) || []).length > 0,\n    hasBloodPressureData: ((data === null || data === void 0 ? void 0 : data.bloodPressureData) || []).length > 0,\n    hasExerciseData: ((data === null || data === void 0 ? void 0 : data.exerciseData) || []).length > 0,\n    hasMoodData: ((data === null || data === void 0 ? void 0 : data.moodData) || []).length > 0,\n    hasPainData: ((data === null || data === void 0 ? void 0 : data.painData) || []).length > 0,\n    hasSleepData: ((data === null || data === void 0 ? void 0 : data.sleepData) || []).length > 0,\n    hasMealData: ((data === null || data === void 0 ? void 0 : data.mealData) || []).length > 0\n  };\n}\n\n// PropTypes for better documentation (though hooks don't technically use PropTypes)\n_s(usePatientData, \"JVfM3R0e7uTSzuDjbRcFu4BxRK4=\");\nusePatientData.propTypes = {\n  patientId: PropTypes.string\n};\nexport default usePatientData;","map":{"version":3,"names":["useState","useEffect","useCallback","PropTypes","SimpleDataService","usePatientData","patientId","_s","data","setData","loading","setLoading","error","setError","lastFetchedId","setLastFetchedId","loadPatientData","id","console","log","patientData","patientInfo","Error","err","message","retry","clearData","glucoseData","bloodPressureData","exerciseData","moodData","painData","sleepData","mealData","hasData","isEmpty","isError","hasGlucoseData","length","hasBloodPressureData","hasExerciseData","hasMoodData","hasPainData","hasSleepData","hasMealData","propTypes","string"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/usePatientDataImproved.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SimpleDataService from '../services/dataService';\r\n\r\n/**\r\n * Custom hook for loading and managing patient health data\r\n * \r\n * This hook handles:\r\n * - Loading patient data from CSV files\r\n * - Error handling with retry functionality\r\n * - Loading states\r\n * - Data caching to avoid unnecessary re-fetches\r\n * \r\n * @param {string} patientId - Patient identifier (e.g., \"Patient_001\")\r\n * @returns {Object} Hook state and functions\r\n */\r\nfunction usePatientData(patientId) {\r\n  // State management\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [lastFetchedId, setLastFetchedId] = useState(null);\r\n\r\n  /**\r\n   * Load data for a specific patient\r\n   * Uses useCallback to prevent unnecessary re-renders\r\n   */\r\n  const loadPatientData = useCallback(async (id) => {\r\n    // Don't reload if we already have data for this patient\r\n    if (id === lastFetchedId && data && !error) {\r\n      return;\r\n    }\r\n\r\n    // Validate patient ID\r\n    if (!id || typeof id !== 'string') {\r\n      setError('Invalid patient ID provided');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      console.log(`Loading data for ${id}...`);\r\n      const patientData = await SimpleDataService.loadPatientData(id);\r\n      \r\n      // Validate that we got valid data\r\n      if (!patientData || !patientData.patientInfo) {\r\n        throw new Error('Invalid data structure received');\r\n      }\r\n\r\n      setData(patientData);\r\n      setLastFetchedId(id);\r\n      console.log(`Successfully loaded data for ${id}`);\r\n      \r\n    } catch (err) {\r\n      console.error(`Failed to load data for ${id}:`, err);\r\n      setError(err.message || 'Failed to load patient data');\r\n      setData(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [lastFetchedId, data, error]);\r\n\r\n  /**\r\n   * Retry loading data (useful for error recovery)\r\n   */\r\n  const retry = useCallback(() => {\r\n    if (patientId) {\r\n      // Reset the lastFetchedId to force a reload\r\n      setLastFetchedId(null);\r\n      loadPatientData(patientId);\r\n    }\r\n  }, [patientId, loadPatientData]);\r\n\r\n  /**\r\n   * Clear data (useful when switching patients)\r\n   */\r\n  const clearData = useCallback(() => {\r\n    setData(null);\r\n    setError(null);\r\n    setLastFetchedId(null);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Load data when patientId changes\r\n  useEffect(() => {\r\n    if (patientId) {\r\n      loadPatientData(patientId);\r\n    } else {\r\n      // Clear data if no patient ID provided\r\n      clearData();\r\n    }\r\n  }, [patientId, loadPatientData, clearData]);\r\n\r\n  // Return hook state and functions\r\n  return {\r\n    // Data\r\n    data,\r\n    patientInfo: data?.patientInfo || null,\r\n    \r\n    // Individual data types for convenience\r\n    glucoseData: data?.glucoseData || [],\r\n    bloodPressureData: data?.bloodPressureData || [],\r\n    exerciseData: data?.exerciseData || [],\r\n    moodData: data?.moodData || [],\r\n    painData: data?.painData || [],\r\n    sleepData: data?.sleepData || [],\r\n    mealData: data?.mealData || [],\r\n    \r\n    // State\r\n    loading,\r\n    error,\r\n    \r\n    // Actions\r\n    retry,\r\n    clearData,\r\n    \r\n    // Helper flags\r\n    hasData: !!data,\r\n    isEmpty: !loading && !error && !data,\r\n    isError: !!error,\r\n    \r\n    // Data availability flags\r\n    hasGlucoseData: (data?.glucoseData || []).length > 0,\r\n    hasBloodPressureData: (data?.bloodPressureData || []).length > 0,\r\n    hasExerciseData: (data?.exerciseData || []).length > 0,\r\n    hasMoodData: (data?.moodData || []).length > 0,\r\n    hasPainData: (data?.painData || []).length > 0,\r\n    hasSleepData: (data?.sleepData || []).length > 0,\r\n    hasMealData: (data?.mealData || []).length > 0\r\n  };\r\n}\r\n\r\n// PropTypes for better documentation (though hooks don't technically use PropTypes)\r\nusePatientData.propTypes = {\r\n  patientId: PropTypes.string\r\n};\r\n\r\nexport default usePatientData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}