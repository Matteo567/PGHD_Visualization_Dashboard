{"ast":null,"code":"/**\n * useChartNavigation.js - Universal Chart Navigation Hook\n * \n * This hook provides consistent navigation functionality for all charts:\n * - Week/month navigation based on chart type\n * - Date range calculations and formatting\n * - Navigation state management\n * - Previous/next navigation functions\n * - Display formatting for current time periods\n * \n * Ensures consistent navigation behavior across all health metric visualizations.\n */import{useState,useCallback}from'react';/**\n * Universal navigation hook for chart components\n * Provides navigation state and functions that can be used by any chart\n */const useChartNavigation=function(chartType){let initialDate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Date(2025,4,1);const[currentDate,setCurrentDate]=useState(initialDate);// Determine navigation type based on chart type\nconst navigationType=chartType==='mood'?'month':'week';const navigationLabel=chartType==='mood'?'Month':'Week';// Navigation functions\nconst goToPrevious=useCallback(()=>{setCurrentDate(prev=>{const newDate=new Date(prev);if(navigationType==='month'){newDate.setMonth(newDate.getMonth()-1);}else{newDate.setDate(newDate.getDate()-7);}return newDate;});},[navigationType]);const goToNext=useCallback(()=>{setCurrentDate(prev=>{const newDate=new Date(prev);if(navigationType==='month'){newDate.setMonth(newDate.getMonth()+1);}else{newDate.setDate(newDate.getDate()+7);}return newDate;});},[navigationType]);// Calculate date range based on navigation type\nconst getDateRange=useCallback(()=>{if(navigationType==='month'){const startOfMonth=new Date(currentDate.getFullYear(),currentDate.getMonth(),1);const endOfMonth=new Date(currentDate.getFullYear(),currentDate.getMonth()+1,0);return{start:startOfMonth,end:endOfMonth};}else{const startOfWeek=new Date(currentDate);startOfWeek.setDate(startOfWeek.getDate()-startOfWeek.getDay());startOfWeek.setHours(0,0,0,0);const endOfWeek=new Date(startOfWeek);endOfWeek.setDate(endOfWeek.getDate()+6);endOfWeek.setHours(23,59,59,999);return{start:startOfWeek,end:endOfWeek};}},[currentDate,navigationType]);// Get current month/year display\nconst getCurrentMonthYear=useCallback(()=>{return currentDate.toLocaleDateString('en-US',{month:'long',year:'numeric'});},[currentDate]);// Get current week display\nconst getCurrentWeekDisplay=useCallback(()=>{const{start,end}=getDateRange();const startStr=start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" - \").concat(endStr);},[getDateRange]);// Calculate 3-month date range (May, June, July 2025)\nconst getThreeMonthRange=useCallback(()=>{const startOfThreeMonths=new Date(2025,4,1);// May 1, 2025\nconst endOfThreeMonths=new Date(2025,6,31);// July 31, 2025\nreturn{start:startOfThreeMonths,end:endOfThreeMonths};},[]);// Get 3-month display string\nconst getThreeMonthDisplay=useCallback(()=>{return'May - July 2025';},[]);return{currentDate,navigationType,navigationLabel,goToPrevious,goToNext,getDateRange,getThreeMonthRange,getCurrentMonthYear,getCurrentWeekDisplay,getThreeMonthDisplay};};export default useChartNavigation;","map":{"version":3,"names":["useState","useCallback","useChartNavigation","chartType","initialDate","arguments","length","undefined","Date","currentDate","setCurrentDate","navigationType","navigationLabel","goToPrevious","prev","newDate","setMonth","getMonth","setDate","getDate","goToNext","getDateRange","startOfMonth","getFullYear","endOfMonth","start","end","startOfWeek","getDay","setHours","endOfWeek","getCurrentMonthYear","toLocaleDateString","month","year","getCurrentWeekDisplay","startStr","day","endStr","concat","getThreeMonthRange","startOfThreeMonths","endOfThreeMonths","getThreeMonthDisplay"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/hooks/useChartNavigation.js"],"sourcesContent":["/**\n * useChartNavigation.js - Universal Chart Navigation Hook\n * \n * This hook provides consistent navigation functionality for all charts:\n * - Week/month navigation based on chart type\n * - Date range calculations and formatting\n * - Navigation state management\n * - Previous/next navigation functions\n * - Display formatting for current time periods\n * \n * Ensures consistent navigation behavior across all health metric visualizations.\n */\n\nimport { useState, useCallback } from 'react';\n\n/**\n * Universal navigation hook for chart components\n * Provides navigation state and functions that can be used by any chart\n */\nconst useChartNavigation = (chartType, initialDate = new Date(2025, 4, 1)) => {\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  // Determine navigation type based on chart type\n  const navigationType = chartType === 'mood' ? 'month' : 'week';\n  const navigationLabel = chartType === 'mood' ? 'Month' : 'Week';\n\n  // Navigation functions\n  const goToPrevious = useCallback(() => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (navigationType === 'month') {\n        newDate.setMonth(newDate.getMonth() - 1);\n      } else {\n        newDate.setDate(newDate.getDate() - 7);\n      }\n      return newDate;\n    });\n  }, [navigationType]);\n\n  const goToNext = useCallback(() => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (navigationType === 'month') {\n        newDate.setMonth(newDate.getMonth() + 1);\n      } else {\n        newDate.setDate(newDate.getDate() + 7);\n      }\n      return newDate;\n    });\n  }, [navigationType]);\n\n  // Calculate date range based on navigation type\n  const getDateRange = useCallback(() => {\n    if (navigationType === 'month') {\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n      return { start: startOfMonth, end: endOfMonth };\n    } else {\n      const startOfWeek = new Date(currentDate);\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      \n      const endOfWeek = new Date(startOfWeek);\n      endOfWeek.setDate(endOfWeek.getDate() + 6);\n      endOfWeek.setHours(23, 59, 59, 999);\n      \n      return { start: startOfWeek, end: endOfWeek };\n    }\n  }, [currentDate, navigationType]);\n\n  // Get current month/year display\n  const getCurrentMonthYear = useCallback(() => {\n    return currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n  }, [currentDate]);\n\n  // Get current week display\n  const getCurrentWeekDisplay = useCallback(() => {\n    const { start, end } = getDateRange();\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${startStr} - ${endStr}`;\n  }, [getDateRange]);\n\n  // Calculate 3-month date range (May, June, July 2025)\n  const getThreeMonthRange = useCallback(() => {\n    const startOfThreeMonths = new Date(2025, 4, 1); // May 1, 2025\n    const endOfThreeMonths = new Date(2025, 6, 31); // July 31, 2025\n    return { start: startOfThreeMonths, end: endOfThreeMonths };\n  }, []);\n\n  // Get 3-month display string\n  const getThreeMonthDisplay = useCallback(() => {\n    return 'May - July 2025';\n  }, []);\n\n  return {\n    currentDate,\n    navigationType,\n    navigationLabel,\n    goToPrevious,\n    goToNext,\n    getDateRange,\n    getThreeMonthRange,\n    getCurrentMonthYear,\n    getCurrentWeekDisplay,\n    getThreeMonthDisplay\n  };\n};\n\nexport default useChartNavigation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}