{"ast":null,"code":"import React,{useState,useMemo}from'react';import usePatientData from'../../hooks/usePatientData';import useChartNavigation from'../../hooks/useChartNavigation';import Legend from'../Legend';import{createChartConfig}from'../chart-utils/ChartConfigFactory';import'../ChartStyles.css';import'./ExerciseChart.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const exerciseTypes=[{key:'walking',label:'Walking',color:'var(--chart-color-walking)',emoji:'🚶'},{key:'swimming',label:'Swimming',color:'var(--chart-color-swimming)',emoji:'🏊‍♀️'},{key:'running',label:'Running',color:'var(--chart-color-running)',emoji:'🏃‍♂️'},{key:'resistance/weights',label:'Resistance/Weights',color:'var(--chart-color-resistance)',emoji:'🏋️'},{key:'biking',label:'Biking',color:'var(--chart-color-biking)',emoji:'🚴'},{key:'balance/stretching',label:'Balance/Stretching',color:'var(--chart-color-balance)',emoji:'🧘'},{key:'other',label:'Other',color:'var(--chart-color-other)',emoji:'➕'}];const exerciseLegendItems=exerciseTypes.map(_ref=>{let{label,color,emoji}=_ref;return{label:\"\".concat(emoji,\" \").concat(label),color};});const ExerciseChart=_ref2=>{var _exerciseTypes$find;let{patientId,isExpanded=false,onExpand,viewMode='patient',navigation}=_ref2;const{exerciseData,loading,error}=usePatientData(patientId,'exercise');// Use navigation from parent or fallback to internal navigation\nconst useInternalNavigation=!navigation;const internalNavigation=useChartNavigation('exercise');const nav=navigation||internalNavigation;const config=createChartConfig('exercise',isExpanded);const chartHeight=config.height-config.padding.top-config.padding.bottom;const{start:startOfWeek,end:endOfWeek}=nav.getDateRange();const weekData=exerciseData.filter(d=>{if(!d.date)return false;const itemDate=new Date(d.date);return itemDate>=startOfWeek&&itemDate<=endOfWeek;});const daysOfWeek=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];const groupedData=daysOfWeek.reduce((acc,day)=>{acc[day]={walking:0,swimming:0,running:0,'resistance/weights':0,biking:0,'balance/stretching':0,other:0,totalMinutes:0};return acc;},{});weekData.forEach(item=>{if(!item.date)return;const dayName=daysOfWeek[new Date(item.date).getDay()];if(groupedData[dayName]){groupedData[dayName].walking+=Number(item.walking)||0;groupedData[dayName].swimming+=Number(item.swimming)||0;groupedData[dayName].running+=Number(item.running)||0;groupedData[dayName]['resistance/weights']+=Number(item['resistance/weights'])||0;groupedData[dayName].biking+=Number(item.biking)||0;groupedData[dayName]['balance/stretching']+=Number(item['balance/stretching'])||0;groupedData[dayName].other+=Number(item.other)||0;groupedData[dayName].totalMinutes=groupedData[dayName].walking+groupedData[dayName].swimming+groupedData[dayName].running+groupedData[dayName]['resistance/weights']+groupedData[dayName].biking+groupedData[dayName]['balance/stretching']+groupedData[dayName].other;}});const maxVal=Math.max(...Object.values(groupedData).map(day=>day.totalMinutes),0);const maxDuration=Math.max(60,Math.ceil(maxVal/30)*30);const generateYAxisLabels=max=>{if(max===0)return[0];const step=Math.max(15,Math.ceil(max/6/15)*15);const labels=[];for(let i=0;i<=max;i+=step){labels.push(i);}return labels;};const yAxisLabels=generateYAxisLabels(maxDuration);// Calculate summary statistics for physician view\nconst weekSummary=useMemo(()=>{if(!weekData.length)return null;const totalMinutes=Object.values(groupedData).reduce((sum,day)=>sum+day.totalMinutes,0);const avgMinutesPerDay=(totalMinutes/7).toFixed(0);// Count days with exercise\nconst daysWithExercise=Object.values(groupedData).filter(day=>day.totalMinutes>0).length;// Find most common exercise type\nconst exerciseTypeTotals={};exerciseTypes.forEach(type=>{exerciseTypeTotals[type.key]=Object.values(groupedData).reduce((sum,day)=>sum+day[type.key],0);});const mostCommonExercise=Object.entries(exerciseTypeTotals).sort((_ref3,_ref4)=>{let[,a]=_ref3;let[,b]=_ref4;return b-a;})[0];// Calculate exercise consistency (days with 30+ minutes)\nconst daysWithAdequateExercise=Object.values(groupedData).filter(day=>day.totalMinutes>=30).length;// Calculate average session length\nconst totalSessions=weekData.filter(item=>{const dayName=daysOfWeek[new Date(item.date).getDay()];return groupedData[dayName]&&groupedData[dayName].totalMinutes>0;}).length;const avgSessionLength=totalSessions>0?(totalMinutes/totalSessions).toFixed(0):0;return{totalMinutes,avgMinutesPerDay,daysWithExercise,mostCommonExercise:mostCommonExercise[0],mostCommonExerciseMinutes:mostCommonExercise[1],daysWithAdequateExercise,totalSessions,avgSessionLength};},[weekData,groupedData]);const formatDateRange=(start,end)=>{const startStr=start.toLocaleDateString('en-US',{month:'short',day:'numeric'});const endStr=end.toLocaleDateString('en-US',{month:'short',day:'numeric'});return\"\".concat(startStr,\" to \").concat(endStr);};return/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-chart-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-chart-content \".concat(isExpanded?'expanded':''),children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"Activity Breakdown by Type\"}),/*#__PURE__*/_jsx(\"h4\",{className:\"chart-subtitle\",children:nav.getCurrentMonthYear()}),/*#__PURE__*/_jsxs(\"svg\",{width:\"100%\",viewBox:\"0 0 \".concat(config.width,\" \").concat(config.height),className:\"exercise-svg\",children:[/*#__PURE__*/_jsxs(\"g\",{className:\"y-axis\",children:[yAxisLabels.map(value=>{const y=config.padding.top+chartHeight-value/maxDuration*chartHeight;return/*#__PURE__*/_jsxs(\"g\",{className:\"y-axis-grid-group\",children:[/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-horizontal\",x1:config.padding.left,y1:y,x2:config.width-config.padding.right,y2:y}),/*#__PURE__*/_jsx(\"text\",{x:config.padding.left-15,y:y+3,fontSize:config.fontSize.yAxis,textAnchor:\"end\",fill:\"var(--chart-color-text-secondary)\",className:\"chart-tick-label\",children:value})]},value);}),/*#__PURE__*/_jsx(\"text\",{x:-(config.padding.top+chartHeight/2),y:config.padding.left/2-5,fontSize:config.fontSize.yAxisTitle,textAnchor:\"middle\",fill:\"var(--chart-color-text-primary)\",transform:\"rotate(-90)\",className:\"y-axis-title\",children:\"Minutes\"})]}),/*#__PURE__*/_jsx(\"g\",{className:\"x-axis\",children:daysOfWeek.map((day,dayIndex)=>{const date=new Date(startOfWeek);date.setDate(date.getDate()+dayIndex);const x=config.padding.left+dayIndex*config.dayWidth+config.dayWidth/2;const dayData=groupedData[day];const performedExercises=exerciseTypes.filter(type=>(dayData[type.key]||0)>0);const emojis=performedExercises.map(type=>type.emoji).join(' ');return/*#__PURE__*/_jsxs(\"g\",{className:\"x-axis-label-group\",children:[/*#__PURE__*/_jsx(\"line\",{className:\"chart-grid-line-vertical\",x1:config.padding.left+dayIndex*config.dayWidth,y1:config.padding.top,x2:config.padding.left+dayIndex*config.dayWidth,y2:config.height-config.padding.bottom}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+15,textAnchor:\"middle\",fontSize:config.fontSize.dayLabel,fill:\"var(--chart-color-text-primary)\",className:\"x-axis-day-label\",children:day}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+30,textAnchor:\"middle\",fontSize:config.fontSize.dateLabel,fill:\"var(--chart-color-text-secondary)\",className:\"x-axis-date-label\",children:date.getDate()}),/*#__PURE__*/_jsx(\"text\",{x:x,y:config.height-config.padding.bottom+48,textAnchor:\"middle\",fontSize:config.fontSize.emoji,children:emojis})]},dayIndex);})}),/*#__PURE__*/_jsx(\"g\",{className:\"data-bars\",children:daysOfWeek.map((day,dayIndex)=>{const dayData=groupedData[day];const x=config.padding.left+dayIndex*config.dayWidth+config.dayWidth/2;let currentY=config.height-config.padding.bottom;return/*#__PURE__*/_jsx(\"g\",{children:exerciseTypes.map(type=>{const minutes=Number(dayData[type.key])||0;if(minutes<=0)return null;const segmentHeight=minutes/maxDuration*chartHeight;const segmentY=currentY-segmentHeight;const segment=/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"rect\",{x:x-config.barWidth/2,y:segmentY,width:config.barWidth,height:segmentHeight,fill:type.color,className:\"data-bar\",children:/*#__PURE__*/_jsx(\"title\",{children:\"\".concat(type.label,\": \").concat(Math.round(minutes),\" min\")})}),segmentHeight>=12&&/*#__PURE__*/_jsx(\"text\",{x:x,y:segmentY+segmentHeight/2,textAnchor:\"middle\",fontSize:isExpanded?8:6,fill:\"white\",className:\"duration-label\",style:{textShadow:'0.5px 0.5px 1px rgba(0,0,0,0.5)',fontWeight:'normal'},children:Math.round(minutes)})]},type.key);currentY=segmentY;return segment;})},day);})})]})]}),/*#__PURE__*/_jsx(Legend,{title:\"Exercise Type\",items:exerciseLegendItems,orientation:\"horizontal\",size:\"medium\"}),viewMode==='physician'&&weekSummary&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Week Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Exercise:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.totalMinutes,\" minutes\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Daily Average:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.avgMinutesPerDay,\" minutes/day\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Exercise Days:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.daysWithExercise,\"/7 days\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Adequate Exercise:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.daysWithAdequateExercise,\"/7 days (30+ min)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Most Common:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[(_exerciseTypes$find=exerciseTypes.find(t=>t.key===weekSummary.mostCommonExercise))===null||_exerciseTypes$find===void 0?void 0:_exerciseTypes$find.emoji,\" \",weekSummary.mostCommonExercise,\" (\",weekSummary.mostCommonExerciseMinutes,\" min)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Avg Session:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[weekSummary.avgSessionLength,\" minutes\"]})]})]})]})]});};export default ExerciseChart;","map":{"version":3,"names":["React","useState","useMemo","usePatientData","useChartNavigation","Legend","createChartConfig","jsx","_jsx","jsxs","_jsxs","exerciseTypes","key","label","color","emoji","exerciseLegendItems","map","_ref","concat","ExerciseChart","_ref2","_exerciseTypes$find","patientId","isExpanded","onExpand","viewMode","navigation","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","config","chartHeight","height","padding","top","bottom","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","daysOfWeek","groupedData","reduce","acc","day","walking","swimming","running","biking","other","totalMinutes","forEach","item","dayName","getDay","Number","maxVal","Math","max","Object","values","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","weekSummary","length","sum","avgMinutesPerDay","toFixed","daysWithExercise","exerciseTypeTotals","type","mostCommonExercise","entries","sort","_ref3","_ref4","a","b","daysWithAdequateExercise","totalSessions","avgSessionLength","mostCommonExerciseMinutes","formatDateRange","startStr","toLocaleDateString","month","endStr","className","children","getCurrentMonthYear","width","viewBox","value","y","x1","left","y1","x2","right","y2","x","fontSize","yAxis","textAnchor","fill","yAxisTitle","transform","dayIndex","setDate","getDate","dayWidth","dayData","performedExercises","emojis","join","dayLabel","dateLabel","currentY","minutes","segmentHeight","segmentY","segment","barWidth","round","style","textShadow","fontWeight","title","items","orientation","size","find","t"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport usePatientData from '../../hooks/usePatientData';\r\nimport useChartNavigation from '../../hooks/useChartNavigation';\r\nimport Legend from '../Legend';\r\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\r\nimport '../ChartStyles.css';\r\nimport './ExerciseChart.css';\r\n\r\nconst exerciseTypes = [\r\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\r\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\r\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\r\n  { key: 'resistance/weights', label: 'Resistance/Weights', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\r\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\r\n  { key: 'balance/stretching', label: 'Balance/Stretching', color: 'var(--chart-color-balance)', emoji: '🧘' },\r\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\r\n];\r\n\r\nconst exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\r\n  label: `${emoji} ${label}`,\r\n  color,\r\n}));\r\n\r\n\r\n\r\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\r\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\r\n  \r\n  // Use navigation from parent or fallback to internal navigation\r\n  const useInternalNavigation = !navigation;\r\n  const internalNavigation = useChartNavigation('exercise');\r\n  const nav = navigation || internalNavigation;\r\n\r\n  const config = createChartConfig('exercise', isExpanded);\r\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\r\n\r\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\r\n\r\n  const weekData = exerciseData.filter(d => {\r\n    if (!d.date) return false;\r\n    const itemDate = new Date(d.date);\r\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\r\n  });\r\n\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const groupedData = daysOfWeek.reduce((acc, day) => {\r\n    acc[day] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  weekData.forEach(item => {\r\n    if (!item.date) return;\r\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n    if (groupedData[dayName]) {\r\n      groupedData[dayName].walking += Number(item.walking) || 0;\r\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\r\n      groupedData[dayName].running += Number(item.running) || 0;\r\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\r\n      groupedData[dayName].biking += Number(item.biking) || 0;\r\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\r\n      groupedData[dayName].other += Number(item.other) || 0;\r\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\r\n    }\r\n  });\r\n\r\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\r\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\r\n\r\n  const generateYAxisLabels = (max) => {\r\n    if (max === 0) return [0];\r\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\r\n    const labels = [];\r\n    for (let i = 0; i <= max; i += step) {\r\n      labels.push(i);\r\n    }\r\n    return labels;\r\n  };\r\n\r\n  const yAxisLabels = generateYAxisLabels(maxDuration);\r\n\r\n  // Calculate summary statistics for physician view\r\n  const weekSummary = useMemo(() => {\r\n    if (!weekData.length) return null;\r\n\r\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\r\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\r\n    \r\n    // Count days with exercise\r\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\r\n    \r\n    // Find most common exercise type\r\n    const exerciseTypeTotals = {};\r\n    exerciseTypes.forEach(type => {\r\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\r\n    });\r\n    \r\n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n    \r\n    // Calculate exercise consistency (days with 30+ minutes)\r\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\r\n    \r\n    // Calculate average session length\r\n    const totalSessions = weekData.filter(item => {\r\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\r\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\r\n    }).length;\r\n    \r\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\r\n\r\n    return {\r\n      totalMinutes,\r\n      avgMinutesPerDay,\r\n      daysWithExercise,\r\n      mostCommonExercise: mostCommonExercise[0],\r\n      mostCommonExerciseMinutes: mostCommonExercise[1],\r\n      daysWithAdequateExercise,\r\n      totalSessions,\r\n      avgSessionLength\r\n    };\r\n  }, [weekData, groupedData]);\r\n\r\n  const formatDateRange = (start, end) => {\r\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n    return `${startStr} to ${endStr}`;\r\n  };\r\n\r\n  return (\r\n      <div className=\"exercise-chart-container\">\r\n        <div className={`exercise-chart-content ${isExpanded ? 'expanded' : ''}`}>\r\n          <h3 className=\"chart-title\">Activity Breakdown by Type</h3>\r\n          <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\r\n          <svg \r\n            width=\"100%\" \r\n            viewBox={`0 0 ${config.width} ${config.height}`}\r\n            className=\"exercise-svg\"\r\n          >\r\n            <g className=\"y-axis\">\r\n              {yAxisLabels.map(value => {\r\n                const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\r\n                return (\r\n                  <g key={value} className=\"y-axis-grid-group\">\r\n                    <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\r\n                    <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\r\n                  </g>\r\n                );\r\n              })}\r\n              <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\r\n            </g>\r\n\r\n            <g className=\"x-axis\">\r\n              {daysOfWeek.map((day, dayIndex) => {\r\n                const date = new Date(startOfWeek);\r\n                date.setDate(date.getDate() + dayIndex);\r\n                const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n\r\n                const dayData = groupedData[day];\r\n                const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\r\n                const emojis = performedExercises.map(type => type.emoji).join(' ');\r\n\r\n                return (\r\n                  <g key={dayIndex} className=\"x-axis-label-group\">\r\n                    <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\r\n                    <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\r\n                    <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\r\n                    <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n\r\n            <g className=\"data-bars\">\r\n              {daysOfWeek.map((day, dayIndex) => {\r\n                const dayData = groupedData[day];\r\n                const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\r\n                let currentY = config.height - config.padding.bottom;\r\n\r\n                return (\r\n                  <g key={day}>\r\n                    {exerciseTypes.map(type => {\r\n                      const minutes = Number(dayData[type.key]) || 0;\r\n                      if (minutes <= 0) return null;\r\n\r\n                      const segmentHeight = (minutes / maxDuration) * chartHeight;\r\n                      const segmentY = currentY - segmentHeight;\r\n\r\n                      const segment = (\r\n                        <g key={type.key}>\r\n                          <rect\r\n                            x={x - config.barWidth / 2}\r\n                            y={segmentY}\r\n                            width={config.barWidth}\r\n                            height={segmentHeight}\r\n                            fill={type.color}\r\n                            className=\"data-bar\"\r\n                          >\r\n                            <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\r\n                          </rect>\r\n                          {/* Duration label inside the segment */}\r\n                          {segmentHeight >= 12 && (\r\n                            <text\r\n                              x={x}\r\n                              y={segmentY + segmentHeight / 2}\r\n                              textAnchor=\"middle\"\r\n                              fontSize={isExpanded ? 8 : 6}\r\n                              fill=\"white\"\r\n                              className=\"duration-label\"\r\n                              style={{ \r\n                                textShadow: '0.5px 0.5px 1px rgba(0,0,0,0.5)',\r\n                                fontWeight: 'normal'\r\n                              }}\r\n                            >\r\n                              {Math.round(minutes)}\r\n                            </text>\r\n                          )}\r\n                        </g>\r\n                      );\r\n\r\n                      currentY = segmentY;\r\n                      return segment;\r\n                    })}\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n          </svg>\r\n        </div>\r\n        \r\n        <Legend \r\n          title=\"Exercise Type\" \r\n          items={exerciseLegendItems} \r\n          orientation=\"horizontal\" \r\n          size=\"medium\" \r\n        />\r\n\r\n        {/* Show summary for physician view only */}\r\n        {viewMode === 'physician' && weekSummary && (\r\n          <div className=\"chart-summary\">\r\n            <h4>Week Summary</h4>\r\n            <div className=\"summary-stats\">\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Total Exercise:</span>\r\n                <span className=\"stat-value\">\r\n                  {weekSummary.totalMinutes} minutes\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Daily Average:</span>\r\n                <span className=\"stat-value\">\r\n                  {weekSummary.avgMinutesPerDay} minutes/day\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Exercise Days:</span>\r\n                <span className=\"stat-value\">\r\n                  {weekSummary.daysWithExercise}/7 days\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Adequate Exercise:</span>\r\n                <span className=\"stat-value\">\r\n                  {weekSummary.daysWithAdequateExercise}/7 days (30+ min)\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Most Common:</span>\r\n                <span className=\"stat-value\">\r\n                  {exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)?.emoji} {weekSummary.mostCommonExercise} ({weekSummary.mostCommonExerciseMinutes} min)\r\n                </span>\r\n              </div>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-label\">Avg Session:</span>\r\n                <span className=\"stat-value\">\r\n                  {weekSummary.avgSessionLength} minutes\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ExerciseChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}