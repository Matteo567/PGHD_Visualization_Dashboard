{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matteo\\\\Working_Folder\\\\a. MCC Thesis Local\\\\MCC_digital_health_data_visualizations\\\\src\\\\components\\\\patient_charts\\\\ExerciseChart.js\",\n  _s = $RefreshSig$();\n/**\n ExerciseChart.js - Exercise Activity Tracking Visualization\n \n This component provides comprehensive exercise monitoring:\n - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\n - Duration tracking and weekly summaries\n - Color-coded activity categorization\n - Interactive tooltips with exercise details\n - Navigation controls for time periods\n - Integration with patient data and chart navigation\n \n Architecture:\n - Uses custom SVG for stacked bar chart visualization\n - Implements activity categorization system with emoji indicators\n - Provides color-coded activity types for easy identification\n - Supports expandable views\n - Implements time-based navigation and data filtering\n \n Visualization Features:\n - Stacked bar chart showing daily activity breakdown\n - Color-coded activity types with emoji indicators\n - Interactive tooltips with detailed exercise information\n - Design adapting to container size\n - Dynamic Y-axis scaling based on data range\n \n Activity Categories:\n - Walking: Low-impact cardiovascular exercise\n - Swimming: Full-body cardiovascular workout\n - Running: High-impact cardiovascular exercise\n - Resistance/Weights: Strength training activities\n - Biking: Low-impact cardiovascular exercise\n - Balance/Stretching: Flexibility and balance training\n - Other: Miscellaneous physical activities\n \n Component Structure:\n - Chart Container: Main SVG container with sizing\n - Y-Axis: Duration scale with dynamic labeling\n - X-Axis: Day-of-week labels with date information\n - Data Bars: Stacked activity bars with color coding\n - Legend: Activity type explanations with emojis\n - Tooltip: Detailed exercise information on hover\n \n Essential for physical activity monitoring and fitness tracking.\n */\n\nimport React, { useState, useMemo, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport './ExerciseChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exerciseTypes = [{\n  key: 'walking',\n  label: 'Walking',\n  color: 'var(--chart-color-walking)',\n  emoji: '🚶'\n}, {\n  key: 'swimming',\n  label: 'Swimming',\n  color: 'var(--chart-color-swimming)',\n  emoji: '🏊‍♀️'\n}, {\n  key: 'running',\n  label: 'Running',\n  color: 'var(--chart-color-running)',\n  emoji: '🏃‍♂️'\n}, {\n  key: 'resistance/weights',\n  label: 'Resistance/Weights',\n  color: 'var(--chart-color-resistance)',\n  emoji: '🏋️'\n}, {\n  key: 'biking',\n  label: 'Biking',\n  color: 'var(--chart-color-biking)',\n  emoji: '🚴'\n}, {\n  key: 'balance/stretching',\n  label: 'Balance/Stretching',\n  color: 'var(--chart-color-balance)',\n  emoji: '🧘'\n}, {\n  key: 'other',\n  label: 'Other',\n  color: 'var(--chart-color-other)',\n  emoji: '➕'\n}];\nconst exerciseLegendItems = exerciseTypes.map(({\n  label,\n  color,\n  emoji\n}) => ({\n  label: `${emoji} ${label}`,\n  color\n}));\nconst ExerciseChart = ({\n  patientId,\n  isExpanded = false,\n  onExpand,\n  viewMode = 'patient',\n  navigation\n}) => {\n  _s();\n  var _exerciseTypes$find, _exerciseTypes$find2;\n  const {\n    exerciseData,\n    loading,\n    error\n  } = usePatientData(patientId, 'exercise');\n\n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n  const config = createChartConfig('exercise', isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n  const {\n    start: startOfWeek,\n    end: endOfWeek\n  } = nav.getDateRange();\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Get 3-month data\n  const {\n    start: startOfThreeMonths,\n    end: endOfThreeMonths\n  } = nav.getThreeMonthRange();\n  const threeMonthData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\n  });\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = {\n      walking: 0,\n      swimming: 0,\n      running: 0,\n      'resistance/weights': 0,\n      biking: 0,\n      'balance/stretching': 0,\n      other: 0,\n      totalMinutes: 0\n    };\n    return acc;\n  }, {});\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\n      groupedData[dayName].running += Number(item.running) || 0;\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      groupedData[dayName].biking += Number(item.biking) || 0;\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\n    }\n  });\n\n  // Calculate weekly exercise categories for physician view\n  const weeklyCategories = useMemo(() => {\n    const aerobic = Object.values(groupedData).reduce((sum, day) => sum + day.walking + day.swimming + day.running + day.biking, 0);\n    const strength = Object.values(groupedData).reduce((sum, day) => sum + day['resistance/weights'], 0);\n    const flexibility = Object.values(groupedData).reduce((sum, day) => sum + day['balance/stretching'], 0);\n\n    // Count strength sessions (10+ minutes)\n    const strengthSessions = Object.values(groupedData).filter(day => day['resistance/weights'] >= 10).length;\n\n    // Count flexibility sessions (any duration)\n    const flexibilitySessions = Object.values(groupedData).filter(day => day['balance/stretching'] > 0).length;\n    return {\n      aerobic,\n      strength,\n      flexibility,\n      strengthSessions,\n      flexibilitySessions\n    };\n  }, [groupedData]);\n\n  // Calculate percentages for physician view\n  const categoryPercentages = useMemo(() => {\n    const aerobicGoal = 150; // minutes per week\n    const strengthGoal = 2; // sessions per week\n    const flexibilityGoal = 1; // session per week\n\n    return {\n      aerobic: Math.min(100, Math.round(weeklyCategories.aerobic / aerobicGoal * 100)),\n      strength: Math.min(100, Math.round(weeklyCategories.strengthSessions / strengthGoal * 100)),\n      flexibility: Math.min(100, Math.round(weeklyCategories.flexibilitySessions / flexibilityGoal * 100))\n    };\n  }, [weeklyCategories]);\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n  const generateYAxisLabels = max => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate summary statistics for physician view\n  const weekSummary = useMemo(() => {\n    if (!weekData.length) return null;\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\n\n    // Count days with exercise\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\n\n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    const mostCommonExercise = Object.entries(exerciseTypeTotals).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate exercise consistency (days with 30+ minutes)\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\n\n    // Calculate average session length\n    const totalSessions = weekData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\n    }).length;\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n    return {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      daysWithAdequateExercise,\n      totalSessions,\n      avgSessionLength\n    };\n  }, [weekData, groupedData]);\n\n  // Calculate 3-month summary statistics for physician view\n  const threeMonthSummary = useMemo(() => {\n    if (!threeMonthData.length) return null;\n\n    // Group 3-month data by day\n    const threeMonthGroupedData = {};\n    threeMonthData.forEach(item => {\n      if (!item.date) return;\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      if (!threeMonthGroupedData[dayName]) {\n        threeMonthGroupedData[dayName] = {\n          walking: 0,\n          swimming: 0,\n          running: 0,\n          'resistance/weights': 0,\n          biking: 0,\n          'balance/stretching': 0,\n          other: 0,\n          totalMinutes: 0\n        };\n      }\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\n      threeMonthGroupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\n      threeMonthGroupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName]['resistance/weights'] + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['balance/stretching'] + threeMonthGroupedData[dayName].other;\n    });\n    const totalMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n\n    // Calculate actual days in the 3-month period\n    const {\n      start: startOfThreeMonths,\n      end: endOfThreeMonths\n    } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const avgMinutesPerDay = (totalMinutes / daysInThreeMonths).toFixed(0);\n\n    // Count days with exercise\n    const daysWithExercise = Object.values(threeMonthGroupedData).filter(day => day.totalMinutes > 0).length;\n\n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    const mostCommonExercise = Object.entries(exerciseTypeTotals).sort(([, a], [, b]) => b - a)[0];\n\n    // Calculate average session length\n    const totalSessions = threeMonthData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return threeMonthGroupedData[dayName] && threeMonthGroupedData[dayName].totalMinutes > 0;\n    }).length;\n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n    return {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      totalSessions,\n      avgSessionLength\n    };\n  }, [threeMonthData]);\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    const endStr = end.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    return `${startStr} to ${endStr}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `exercise-chart-container ${isExpanded ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Activity Breakdown by Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"chart-subtitle\",\n      children: nav.getCurrentMonthYear()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      viewBox: `0 0 ${config.width} ${config.height}`,\n      className: \"exercise-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"y-axis\",\n        children: [yAxisLabels.map(value => {\n          const y = config.padding.top + chartHeight - value / maxDuration * chartHeight;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"y-axis-grid-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              className: \"chart-grid-line-horizontal\",\n              x1: config.padding.left,\n              y1: y,\n              x2: config.width - config.padding.right,\n              y2: y\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: config.padding.left - 15,\n              y: y + 3,\n              fontSize: config.fontSize.yAxis,\n              textAnchor: \"end\",\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"chart-tick-label\",\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 19\n            }, this)]\n          }, value, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: -(config.padding.top + chartHeight / 2),\n          y: config.padding.left / 2 - 5,\n          fontSize: config.fontSize.yAxisTitle,\n          textAnchor: \"middle\",\n          fill: \"var(--chart-color-text-primary)\",\n          transform: \"rotate(-90)\",\n          className: \"y-axis-title\",\n          children: \"Minutes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\",\n        children: daysOfWeek.map((day, dayIndex) => {\n          const date = new Date(startOfWeek);\n          date.setDate(date.getDate() + dayIndex);\n          const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n          const dayData = groupedData[day];\n          const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n          const emojis = performedExercises.map(type => type.emoji).join(' ');\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"x-axis-label-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              className: \"chart-grid-line-vertical\",\n              x1: config.padding.left + dayIndex * config.dayWidth,\n              y1: config.padding.top,\n              x2: config.padding.left + dayIndex * config.dayWidth,\n              y2: config.height - config.padding.bottom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 15,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.dayLabel,\n              fill: \"var(--chart-color-text-primary)\",\n              className: \"x-axis-day-label\",\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 30,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.dateLabel,\n              fill: \"var(--chart-color-text-secondary)\",\n              className: \"x-axis-date-label\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: config.height - config.padding.bottom + 48,\n              textAnchor: \"middle\",\n              fontSize: config.fontSize.emoji,\n              children: emojis\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 19\n            }, this)]\n          }, dayIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"data-bars\",\n        children: daysOfWeek.map((day, dayIndex) => {\n          const dayData = groupedData[day];\n          const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n          let currentY = config.height - config.padding.bottom;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: exerciseTypes.map(type => {\n              const minutes = Number(dayData[type.key]) || 0;\n              if (minutes <= 0) return null;\n              const segmentHeight = minutes / maxDuration * chartHeight;\n              const segmentY = currentY - segmentHeight;\n              const segment = /*#__PURE__*/_jsxDEV(\"g\", {\n                children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                  x: x - config.barWidth / 2,\n                  y: segmentY,\n                  width: config.barWidth,\n                  height: segmentHeight,\n                  fill: type.color,\n                  className: \"data-bar\",\n                  children: /*#__PURE__*/_jsxDEV(\"title\", {\n                    children: `${type.label}: ${Math.round(minutes)} min`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 25\n                }, this), segmentHeight >= 12 && /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: x,\n                  y: segmentY + segmentHeight / 2,\n                  textAnchor: \"middle\",\n                  fontSize: isExpanded ? 8 : 6,\n                  fill: \"black\",\n                  className: \"duration-label\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: Math.round(minutes)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 27\n                }, this)]\n              }, type.key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 23\n              }, this);\n              currentY = segmentY;\n              return segment;\n            })\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {\n      title: \"Exercise Type\",\n      items: exerciseLegendItems,\n      orientation: \"horizontal\",\n      size: \"medium\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }, this), viewMode === 'physician' && weekSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Week Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Total Exercise:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.totalMinutes, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Daily Average:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.avgMinutesPerDay, \" minutes/day\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Exercise Days:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.daysWithExercise, \"/7 days\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [(_exerciseTypes$find = exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)) === null || _exerciseTypes$find === void 0 ? void 0 : _exerciseTypes$find.emoji, \" \", weekSummary.mostCommonExercise, \" (\", weekSummary.mostCommonExerciseMinutes, \" min)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Avg Session:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [weekSummary.avgSessionLength, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 13\n      }, this), threeMonthSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"3-Month Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Total Exercise:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.totalMinutes, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Daily Average:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.avgMinutesPerDay, \" minutes/day\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Exercise Days:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.daysWithExercise, \" days\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Most Common:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [(_exerciseTypes$find2 = exerciseTypes.find(t => t.key === threeMonthSummary.mostCommonExercise)) === null || _exerciseTypes$find2 === void 0 ? void 0 : _exerciseTypes$find2.emoji, \" \", threeMonthSummary.mostCommonExercise, \" (\", threeMonthSummary.mostCommonExerciseMinutes, \" min)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Avg Session:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [threeMonthSummary.avgSessionLength, \" minutes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 7\n  }, this);\n};\n_s(ExerciseChart, \"ULZ6OISLQ0Mh4UDW+HtIHcUd1HY=\", false, function () {\n  return [usePatientData, useChartNavigation];\n});\n_c = ExerciseChart;\nexport default ExerciseChart;\nvar _c;\n$RefreshReg$(_c, \"ExerciseChart\");","map":{"version":3,"names":["React","useState","useMemo","useRef","usePatientData","useChartNavigation","Legend","createChartConfig","jsxDEV","_jsxDEV","exerciseTypes","key","label","color","emoji","exerciseLegendItems","map","ExerciseChart","patientId","isExpanded","onExpand","viewMode","navigation","_s","_exerciseTypes$find","_exerciseTypes$find2","exerciseData","loading","error","useInternalNavigation","internalNavigation","nav","config","chartHeight","height","padding","top","bottom","start","startOfWeek","end","endOfWeek","getDateRange","weekData","filter","d","date","itemDate","Date","startOfThreeMonths","endOfThreeMonths","getThreeMonthRange","threeMonthData","daysOfWeek","groupedData","reduce","acc","day","walking","swimming","running","biking","other","totalMinutes","forEach","item","dayName","getDay","Number","weeklyCategories","aerobic","Object","values","sum","strength","flexibility","strengthSessions","length","flexibilitySessions","categoryPercentages","aerobicGoal","strengthGoal","flexibilityGoal","Math","min","round","maxVal","max","maxDuration","ceil","generateYAxisLabels","step","labels","i","push","yAxisLabels","weekSummary","avgMinutesPerDay","toFixed","daysWithExercise","exerciseTypeTotals","type","mostCommonExercise","entries","sort","a","b","daysWithAdequateExercise","totalSessions","avgSessionLength","mostCommonExerciseMinutes","threeMonthSummary","threeMonthGroupedData","daysInThreeMonths","formatDateRange","startStr","toLocaleDateString","month","endStr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getCurrentMonthYear","width","viewBox","value","y","x1","left","y1","x2","right","y2","x","fontSize","yAxis","textAnchor","fill","yAxisTitle","transform","dayIndex","setDate","getDate","dayWidth","dayData","performedExercises","emojis","join","dayLabel","dateLabel","currentY","minutes","segmentHeight","segmentY","segment","barWidth","style","fontWeight","title","items","orientation","size","find","t","_c","$RefreshReg$"],"sources":["C:/Users/Matteo/Working_Folder/a. MCC Thesis Local/MCC_digital_health_data_visualizations/src/components/patient_charts/ExerciseChart.js"],"sourcesContent":["/**\n ExerciseChart.js - Exercise Activity Tracking Visualization\n \n This component provides comprehensive exercise monitoring:\n - Activity type breakdown (walking, swimming, running, resistance, biking, balance)\n - Duration tracking and weekly summaries\n - Color-coded activity categorization\n - Interactive tooltips with exercise details\n - Navigation controls for time periods\n - Integration with patient data and chart navigation\n \n Architecture:\n - Uses custom SVG for stacked bar chart visualization\n - Implements activity categorization system with emoji indicators\n - Provides color-coded activity types for easy identification\n - Supports expandable views\n - Implements time-based navigation and data filtering\n \n Visualization Features:\n - Stacked bar chart showing daily activity breakdown\n - Color-coded activity types with emoji indicators\n - Interactive tooltips with detailed exercise information\n - Design adapting to container size\n - Dynamic Y-axis scaling based on data range\n \n Activity Categories:\n - Walking: Low-impact cardiovascular exercise\n - Swimming: Full-body cardiovascular workout\n - Running: High-impact cardiovascular exercise\n - Resistance/Weights: Strength training activities\n - Biking: Low-impact cardiovascular exercise\n - Balance/Stretching: Flexibility and balance training\n - Other: Miscellaneous physical activities\n \n Component Structure:\n - Chart Container: Main SVG container with sizing\n - Y-Axis: Duration scale with dynamic labeling\n - X-Axis: Day-of-week labels with date information\n - Data Bars: Stacked activity bars with color coding\n - Legend: Activity type explanations with emojis\n - Tooltip: Detailed exercise information on hover\n \n Essential for physical activity monitoring and fitness tracking.\n */\n\nimport React, { useState, useMemo, useRef } from 'react';\nimport usePatientData from '../../hooks/usePatientData';\nimport useChartNavigation from '../../hooks/useChartNavigation';\nimport Legend from '../Legend';\nimport { createChartConfig } from '../chart-utils/ChartConfigFactory';\nimport './ExerciseChart.css';\n\nconst exerciseTypes = [\n  { key: 'walking', label: 'Walking', color: 'var(--chart-color-walking)', emoji: '🚶' },\n  { key: 'swimming', label: 'Swimming', color: 'var(--chart-color-swimming)', emoji: '🏊‍♀️' },\n  { key: 'running', label: 'Running', color: 'var(--chart-color-running)', emoji: '🏃‍♂️' },\n  { key: 'resistance/weights', label: 'Resistance/Weights', color: 'var(--chart-color-resistance)', emoji: '🏋️' },\n  { key: 'biking', label: 'Biking', color: 'var(--chart-color-biking)', emoji: '🚴' },\n  { key: 'balance/stretching', label: 'Balance/Stretching', color: 'var(--chart-color-balance)', emoji: '🧘' },\n  { key: 'other', label: 'Other', color: 'var(--chart-color-other)', emoji: '➕' },\n];\n\nconst exerciseLegendItems = exerciseTypes.map(({ label, color, emoji }) => ({\n  label: `${emoji} ${label}`,\n  color,\n}));\n\nconst ExerciseChart = ({ patientId, isExpanded = false, onExpand, viewMode = 'patient', navigation }) => {\n  const { exerciseData, loading, error } = usePatientData(patientId, 'exercise');\n  \n  // Use navigation from parent or fallback to internal navigation\n  const useInternalNavigation = !navigation;\n  const internalNavigation = useChartNavigation('exercise');\n  const nav = navigation || internalNavigation;\n\n  const config = createChartConfig('exercise', isExpanded);\n  const chartHeight = config.height - config.padding.top - config.padding.bottom;\n\n  const { start: startOfWeek, end: endOfWeek } = nav.getDateRange();\n\n  const weekData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfWeek && itemDate <= endOfWeek;\n  });\n\n  // Get 3-month data\n  const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n  const threeMonthData = exerciseData.filter(d => {\n    if (!d.date) return false;\n    const itemDate = new Date(d.date);\n    return itemDate >= startOfThreeMonths && itemDate <= endOfThreeMonths;\n  });\n\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const groupedData = daysOfWeek.reduce((acc, day) => {\n    acc[day] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\n    return acc;\n  }, {});\n\n  weekData.forEach(item => {\n    if (!item.date) return;\n    const dayName = daysOfWeek[new Date(item.date).getDay()];\n    if (groupedData[dayName]) {\n      groupedData[dayName].walking += Number(item.walking) || 0;\n      groupedData[dayName].swimming += Number(item.swimming) || 0;\n      groupedData[dayName].running += Number(item.running) || 0;\n      groupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      groupedData[dayName].biking += Number(item.biking) || 0;\n      groupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      groupedData[dayName].other += Number(item.other) || 0;\n      groupedData[dayName].totalMinutes = groupedData[dayName].walking + groupedData[dayName].swimming + groupedData[dayName].running + groupedData[dayName]['resistance/weights'] + groupedData[dayName].biking + groupedData[dayName]['balance/stretching'] + groupedData[dayName].other;\n    }\n  });\n\n  // Calculate weekly exercise categories for physician view\n  const weeklyCategories = useMemo(() => {\n    const aerobic = Object.values(groupedData).reduce((sum, day) => \n      sum + day.walking + day.swimming + day.running + day.biking, 0);\n    const strength = Object.values(groupedData).reduce((sum, day) => \n      sum + day['resistance/weights'], 0);\n    const flexibility = Object.values(groupedData).reduce((sum, day) => \n      sum + day['balance/stretching'], 0);\n    \n    // Count strength sessions (10+ minutes)\n    const strengthSessions = Object.values(groupedData).filter(day => day['resistance/weights'] >= 10).length;\n    \n    // Count flexibility sessions (any duration)\n    const flexibilitySessions = Object.values(groupedData).filter(day => day['balance/stretching'] > 0).length;\n    \n    return {\n      aerobic,\n      strength,\n      flexibility,\n      strengthSessions,\n      flexibilitySessions\n    };\n  }, [groupedData]);\n\n  // Calculate percentages for physician view\n  const categoryPercentages = useMemo(() => {\n    const aerobicGoal = 150; // minutes per week\n    const strengthGoal = 2; // sessions per week\n    const flexibilityGoal = 1; // session per week\n    \n    return {\n      aerobic: Math.min(100, Math.round((weeklyCategories.aerobic / aerobicGoal) * 100)),\n      strength: Math.min(100, Math.round((weeklyCategories.strengthSessions / strengthGoal) * 100)),\n      flexibility: Math.min(100, Math.round((weeklyCategories.flexibilitySessions / flexibilityGoal) * 100))\n    };\n  }, [weeklyCategories]);\n\n  const maxVal = Math.max(...Object.values(groupedData).map(day => day.totalMinutes), 0);\n  const maxDuration = Math.max(60, Math.ceil(maxVal / 30) * 30);\n\n  const generateYAxisLabels = (max) => {\n    if (max === 0) return [0];\n    const step = Math.max(15, Math.ceil(max / 6 / 15) * 15);\n    const labels = [];\n    for (let i = 0; i <= max; i += step) {\n      labels.push(i);\n    }\n    return labels;\n  };\n\n  const yAxisLabels = generateYAxisLabels(maxDuration);\n\n  // Calculate summary statistics for physician view\n  const weekSummary = useMemo(() => {\n    if (!weekData.length) return null;\n\n    const totalMinutes = Object.values(groupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    const avgMinutesPerDay = (totalMinutes / 7).toFixed(0);\n    \n    // Count days with exercise\n    const daysWithExercise = Object.values(groupedData).filter(day => day.totalMinutes > 0).length;\n    \n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(groupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    \n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\n      .sort(([,a], [,b]) => b - a)[0];\n    \n    // Calculate exercise consistency (days with 30+ minutes)\n    const daysWithAdequateExercise = Object.values(groupedData).filter(day => day.totalMinutes >= 30).length;\n    \n    // Calculate average session length\n    const totalSessions = weekData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return groupedData[dayName] && groupedData[dayName].totalMinutes > 0;\n    }).length;\n    \n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n\n    return {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      daysWithAdequateExercise,\n      totalSessions,\n      avgSessionLength\n    };\n  }, [weekData, groupedData]);\n\n  // Calculate 3-month summary statistics for physician view\n  const threeMonthSummary = useMemo(() => {\n    if (!threeMonthData.length) return null;\n\n    // Group 3-month data by day\n    const threeMonthGroupedData = {};\n    threeMonthData.forEach(item => {\n      if (!item.date) return;\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      if (!threeMonthGroupedData[dayName]) {\n        threeMonthGroupedData[dayName] = { walking: 0, swimming: 0, running: 0, 'resistance/weights': 0, biking: 0, 'balance/stretching': 0, other: 0, totalMinutes: 0 };\n      }\n      threeMonthGroupedData[dayName].walking += Number(item.walking) || 0;\n      threeMonthGroupedData[dayName].swimming += Number(item.swimming) || 0;\n      threeMonthGroupedData[dayName].running += Number(item.running) || 0;\n      threeMonthGroupedData[dayName]['resistance/weights'] += Number(item['resistance/weights']) || 0;\n      threeMonthGroupedData[dayName].biking += Number(item.biking) || 0;\n      threeMonthGroupedData[dayName]['balance/stretching'] += Number(item['balance/stretching']) || 0;\n      threeMonthGroupedData[dayName].other += Number(item.other) || 0;\n      threeMonthGroupedData[dayName].totalMinutes = threeMonthGroupedData[dayName].walking + threeMonthGroupedData[dayName].swimming + threeMonthGroupedData[dayName].running + threeMonthGroupedData[dayName]['resistance/weights'] + threeMonthGroupedData[dayName].biking + threeMonthGroupedData[dayName]['balance/stretching'] + threeMonthGroupedData[dayName].other;\n    });\n\n    const totalMinutes = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day.totalMinutes, 0);\n    \n    // Calculate actual days in the 3-month period\n    const { start: startOfThreeMonths, end: endOfThreeMonths } = nav.getThreeMonthRange();\n    const daysInThreeMonths = Math.ceil((endOfThreeMonths - startOfThreeMonths) / (1000 * 60 * 60 * 24)) + 1;\n    const avgMinutesPerDay = (totalMinutes / daysInThreeMonths).toFixed(0);\n    \n    // Count days with exercise\n    const daysWithExercise = Object.values(threeMonthGroupedData).filter(day => day.totalMinutes > 0).length;\n    \n    // Find most common exercise type\n    const exerciseTypeTotals = {};\n    exerciseTypes.forEach(type => {\n      exerciseTypeTotals[type.key] = Object.values(threeMonthGroupedData).reduce((sum, day) => sum + day[type.key], 0);\n    });\n    \n    const mostCommonExercise = Object.entries(exerciseTypeTotals)\n      .sort(([,a], [,b]) => b - a)[0];\n    \n    // Calculate average session length\n    const totalSessions = threeMonthData.filter(item => {\n      const dayName = daysOfWeek[new Date(item.date).getDay()];\n      return threeMonthGroupedData[dayName] && threeMonthGroupedData[dayName].totalMinutes > 0;\n    }).length;\n    \n    const avgSessionLength = totalSessions > 0 ? (totalMinutes / totalSessions).toFixed(0) : 0;\n\n    return {\n      totalMinutes,\n      avgMinutesPerDay,\n      daysWithExercise,\n      mostCommonExercise: mostCommonExercise[0],\n      mostCommonExerciseMinutes: mostCommonExercise[1],\n      totalSessions,\n      avgSessionLength\n    };\n  }, [threeMonthData]);\n\n  const formatDateRange = (start, end) => {\n    const startStr = start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const endStr = end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${startStr} to ${endStr}`;\n  };\n\n  return (\n      <div className={`exercise-chart-container ${isExpanded ? 'expanded' : ''}`}>\n        <h3 className=\"chart-title\">Activity Breakdown by Type</h3>\n        <h4 className=\"chart-subtitle\">{nav.getCurrentMonthYear()}</h4>\n        \n        <svg \n          width=\"100%\" \n          viewBox={`0 0 ${config.width} ${config.height}`}\n          className=\"exercise-svg\"\n        >\n          <g className=\"y-axis\">\n            {yAxisLabels.map(value => {\n              const y = config.padding.top + chartHeight - (value / maxDuration) * chartHeight;\n              return (\n                <g key={value} className=\"y-axis-grid-group\">\n                  <line className=\"chart-grid-line-horizontal\" x1={config.padding.left} y1={y} x2={config.width - config.padding.right} y2={y} />\n                  <text x={config.padding.left - 15} y={y + 3} fontSize={config.fontSize.yAxis} textAnchor=\"end\" fill=\"var(--chart-color-text-secondary)\" className=\"chart-tick-label\">{value}</text>\n                </g>\n              );\n            })}\n            <text x={-(config.padding.top + chartHeight / 2)} y={config.padding.left / 2 - 5} fontSize={config.fontSize.yAxisTitle} textAnchor=\"middle\" fill=\"var(--chart-color-text-primary)\" transform=\"rotate(-90)\" className=\"y-axis-title\">Minutes</text>\n          </g>\n\n          <g className=\"x-axis\">\n            {daysOfWeek.map((day, dayIndex) => {\n              const date = new Date(startOfWeek);\n              date.setDate(date.getDate() + dayIndex);\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n\n              const dayData = groupedData[day];\n              const performedExercises = exerciseTypes.filter(type => (dayData[type.key] || 0) > 0);\n              const emojis = performedExercises.map(type => type.emoji).join(' ');\n\n              return (\n                <g key={dayIndex} className=\"x-axis-label-group\">\n                  <line className=\"chart-grid-line-vertical\" x1={config.padding.left + dayIndex * config.dayWidth} y1={config.padding.top} x2={config.padding.left + dayIndex * config.dayWidth} y2={config.height - config.padding.bottom} />\n                  <text x={x} y={config.height - config.padding.bottom + 15} textAnchor=\"middle\" fontSize={config.fontSize.dayLabel} fill=\"var(--chart-color-text-primary)\" className=\"x-axis-day-label\">{day}</text>\n                  <text x={x} y={config.height - config.padding.bottom + 30} textAnchor=\"middle\" fontSize={config.fontSize.dateLabel} fill=\"var(--chart-color-text-secondary)\" className=\"x-axis-date-label\">{date.getDate()}</text>\n                  <text x={x} y={config.height - config.padding.bottom + 48} textAnchor=\"middle\" fontSize={config.fontSize.emoji}>{emojis}</text>\n                </g>\n              );\n            })}\n          </g>\n\n          <g className=\"data-bars\">\n            {daysOfWeek.map((day, dayIndex) => {\n              const dayData = groupedData[day];\n              const x = config.padding.left + dayIndex * config.dayWidth + config.dayWidth / 2;\n              let currentY = config.height - config.padding.bottom;\n\n              return (\n                <g key={day}>\n                  {exerciseTypes.map(type => {\n                    const minutes = Number(dayData[type.key]) || 0;\n                    if (minutes <= 0) return null;\n\n                    const segmentHeight = (minutes / maxDuration) * chartHeight;\n                    const segmentY = currentY - segmentHeight;\n\n                    const segment = (\n                      <g key={type.key}>\n                        <rect\n                          x={x - config.barWidth / 2}\n                          y={segmentY}\n                          width={config.barWidth}\n                          height={segmentHeight}\n                          fill={type.color}\n                          className=\"data-bar\"\n                        >\n                          <title>{`${type.label}: ${Math.round(minutes)} min`}</title>\n                        </rect>\n                        {/* Duration label inside the segment */}\n                        {segmentHeight >= 12 && (\n                          <text\n                            x={x}\n                            y={segmentY + segmentHeight / 2}\n                            textAnchor=\"middle\"\n                            fontSize={isExpanded ? 8 : 6}\n                            fill=\"black\"\n                            className=\"duration-label\"\n                            style={{ \n                              fontWeight: 'bold'\n                            }}\n                          >\n                            {Math.round(minutes)}\n                          </text>\n                        )}\n                      </g>\n                    );\n\n                    currentY = segmentY;\n                    return segment;\n                  })}\n                </g>\n              );\n            })}\n          </g>\n        </svg>\n        \n        <Legend \n          title=\"Exercise Type\" \n          items={exerciseLegendItems} \n          orientation=\"horizontal\" \n          size=\"medium\" \n        />\n\n        {/* Show summary for physician view only */}\n        {viewMode === 'physician' && weekSummary && (\n          <div className=\"summary-container\">\n            <div className=\"chart-summary\">\n              <h4>Week Summary</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Total Exercise:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.totalMinutes} minutes\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Daily Average:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.avgMinutesPerDay} minutes/day\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Exercise Days:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.daysWithExercise}/7 days\n                  </span>\n                </div>\n\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Most Common:</span>\n                  <span className=\"stat-value\">\n                    {exerciseTypes.find(t => t.key === weekSummary.mostCommonExercise)?.emoji} {weekSummary.mostCommonExercise} ({weekSummary.mostCommonExerciseMinutes} min)\n                  </span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Avg Session:</span>\n                  <span className=\"stat-value\">\n                    {weekSummary.avgSessionLength} minutes\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            {threeMonthSummary && (\n              <div className=\"chart-summary\">\n                <h4>3-Month Summary</h4>\n                <div className=\"summary-stats\">\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Total Exercise:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.totalMinutes} minutes\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Daily Average:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.avgMinutesPerDay} minutes/day\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Exercise Days:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.daysWithExercise} days\n                    </span>\n                  </div>\n\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Most Common:</span>\n                    <span className=\"stat-value\">\n                      {exerciseTypes.find(t => t.key === threeMonthSummary.mostCommonExercise)?.emoji} {threeMonthSummary.mostCommonExercise} ({threeMonthSummary.mostCommonExerciseMinutes} min)\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Avg Session:</span>\n                    <span className=\"stat-value\">\n                      {threeMonthSummary.avgSessionLength} minutes\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n  );\n};\n\nexport default ExerciseChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}